// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_peer2peer_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CP2P_TextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CP2P_TextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSteam_Voice_Encoding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSteam_Voice_Encoding_reflection_ = NULL;
const ::google::protobuf::Descriptor* CP2P_Voice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CP2P_Voice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CP2P_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CP2P_Ping_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* P2P_Messages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto() {
  protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "c_peer2peer_netmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CP2P_TextMessage_descriptor_ = file->message_type(0);
  static const int CP2P_TextMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_TextMessage, text_),
  };
  CP2P_TextMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CP2P_TextMessage_descriptor_,
      CP2P_TextMessage::default_instance_,
      CP2P_TextMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_TextMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CP2P_TextMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_TextMessage, _internal_metadata_),
      -1);
  CSteam_Voice_Encoding_descriptor_ = file->message_type(1);
  static const int CSteam_Voice_Encoding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSteam_Voice_Encoding, voice_data_),
  };
  CSteam_Voice_Encoding_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSteam_Voice_Encoding_descriptor_,
      CSteam_Voice_Encoding::default_instance_,
      CSteam_Voice_Encoding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSteam_Voice_Encoding, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSteam_Voice_Encoding),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSteam_Voice_Encoding, _internal_metadata_),
      -1);
  CP2P_Voice_descriptor_ = file->message_type(2);
  static const int CP2P_Voice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, broadcast_group_),
  };
  CP2P_Voice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CP2P_Voice_descriptor_,
      CP2P_Voice::default_instance_,
      CP2P_Voice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, _has_bits_[0]),
      -1,
      -1,
      sizeof(CP2P_Voice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, _internal_metadata_),
      -1);
  CP2P_Voice_Handler_Flags_descriptor_ = CP2P_Voice_descriptor_->enum_type(0);
  CP2P_Ping_descriptor_ = file->message_type(3);
  static const int CP2P_Ping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, is_reply_),
  };
  CP2P_Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CP2P_Ping_descriptor_,
      CP2P_Ping::default_instance_,
      CP2P_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, _has_bits_[0]),
      -1,
      -1,
      sizeof(CP2P_Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, _internal_metadata_),
      -1);
  P2P_Messages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CP2P_TextMessage_descriptor_, &CP2P_TextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSteam_Voice_Encoding_descriptor_, &CSteam_Voice_Encoding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CP2P_Voice_descriptor_, &CP2P_Voice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CP2P_Ping_descriptor_, &CP2P_Ping::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto() {
  delete CP2P_TextMessage::default_instance_;
  delete CP2P_TextMessage_reflection_;
  delete CSteam_Voice_Encoding::default_instance_;
  delete CSteam_Voice_Encoding_reflection_;
  delete CP2P_Voice::default_instance_;
  delete CP2P_Voice_reflection_;
  delete CP2P_Ping::default_instance_;
  delete CP2P_Ping_reflection_;
}

void protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_netmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035c_peer2peer_netmessages.proto\032\021netmess"
    "ages.proto\" \n\020CP2P_TextMessage\022\014\n\004text\030\001"
    " \001(\014\"+\n\025CSteam_Voice_Encoding\022\022\n\nvoice_d"
    "ata\030\001 \001(\014\"h\n\nCP2P_Voice\022\036\n\005audio\030\001 \001(\0132\017"
    ".CMsgVoiceAudio\022\027\n\017broadcast_group\030\002 \001(\r"
    "\"!\n\rHandler_Flags\022\020\n\014Played_Audio\020\001\"0\n\tC"
    "P2P_Ping\022\021\n\tsend_time\030\001 \002(\004\022\020\n\010is_reply\030"
    "\002 \002(\010*C\n\014P2P_Messages\022\024\n\017p2p_TextMessage"
    "\020\200\002\022\016\n\tp2p_Voice\020\201\002\022\r\n\010p2p_Ping\020\202\002B\003\200\001\000", 359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "c_peer2peer_netmessages.proto", &protobuf_RegisterTypes);
  CP2P_TextMessage::default_instance_ = new CP2P_TextMessage();
  CSteam_Voice_Encoding::default_instance_ = new CSteam_Voice_Encoding();
  CP2P_Voice::default_instance_ = new CP2P_Voice();
  CP2P_Ping::default_instance_ = new CP2P_Ping();
  CP2P_TextMessage::default_instance_->InitAsDefaultInstance();
  CSteam_Voice_Encoding::default_instance_->InitAsDefaultInstance();
  CP2P_Voice::default_instance_->InitAsDefaultInstance();
  CP2P_Ping::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_c_5fpeer2peer_5fnetmessages_2eproto {
  StaticDescriptorInitializer_c_5fpeer2peer_5fnetmessages_2eproto() {
    protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  }
} static_descriptor_initializer_c_5fpeer2peer_5fnetmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* P2P_Messages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2P_Messages_descriptor_;
}
bool P2P_Messages_IsValid(int value) {
  switch(value) {
    case 256:
    case 257:
    case 258:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CP2P_TextMessage::kTextFieldNumber;
#endif  // !_MSC_VER

CP2P_TextMessage::CP2P_TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CP2P_TextMessage)
}

void CP2P_TextMessage::InitAsDefaultInstance() {
}

CP2P_TextMessage::CP2P_TextMessage(const CP2P_TextMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CP2P_TextMessage)
}

void CP2P_TextMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CP2P_TextMessage::~CP2P_TextMessage() {
  // @@protoc_insertion_point(destructor:CP2P_TextMessage)
  SharedDtor();
}

void CP2P_TextMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CP2P_TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_TextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CP2P_TextMessage_descriptor_;
}

const CP2P_TextMessage& CP2P_TextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  return *default_instance_;
}

CP2P_TextMessage* CP2P_TextMessage::default_instance_ = NULL;

CP2P_TextMessage* CP2P_TextMessage::New(::google::protobuf::Arena* arena) const {
  CP2P_TextMessage* n = new CP2P_TextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_TextMessage::Clear() {
  if (has_text()) {
    text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CP2P_TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CP2P_TextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CP2P_TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CP2P_TextMessage)
  return false;
#undef DO_
}

void CP2P_TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CP2P_TextMessage)
  // optional bytes text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CP2P_TextMessage)
}

::google::protobuf::uint8* CP2P_TextMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_TextMessage)
  // optional bytes text = 1;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_TextMessage)
  return target;
}

int CP2P_TextMessage::ByteSize() const {
  int total_size = 0;

  // optional bytes text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->text());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CP2P_TextMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_TextMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CP2P_TextMessage::MergeFrom(const CP2P_TextMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CP2P_TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_TextMessage::CopyFrom(const CP2P_TextMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_TextMessage::IsInitialized() const {

  return true;
}

void CP2P_TextMessage::Swap(CP2P_TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_TextMessage::InternalSwap(CP2P_TextMessage* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_TextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CP2P_TextMessage_descriptor_;
  metadata.reflection = CP2P_TextMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_TextMessage

// optional bytes text = 1;
bool CP2P_TextMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_TextMessage::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_TextMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_TextMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& CP2P_TextMessage::text() const {
  // @@protoc_insertion_point(field_get:CP2P_TextMessage.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CP2P_TextMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CP2P_TextMessage.text)
}
 void CP2P_TextMessage::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CP2P_TextMessage.text)
}
 void CP2P_TextMessage::set_text(const void* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CP2P_TextMessage.text)
}
 ::std::string* CP2P_TextMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:CP2P_TextMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CP2P_TextMessage::release_text() {
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CP2P_TextMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CP2P_TextMessage.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSteam_Voice_Encoding::kVoiceDataFieldNumber;
#endif  // !_MSC_VER

CSteam_Voice_Encoding::CSteam_Voice_Encoding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSteam_Voice_Encoding)
}

void CSteam_Voice_Encoding::InitAsDefaultInstance() {
}

CSteam_Voice_Encoding::CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSteam_Voice_Encoding)
}

void CSteam_Voice_Encoding::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSteam_Voice_Encoding::~CSteam_Voice_Encoding() {
  // @@protoc_insertion_point(destructor:CSteam_Voice_Encoding)
  SharedDtor();
}

void CSteam_Voice_Encoding::SharedDtor() {
  voice_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSteam_Voice_Encoding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSteam_Voice_Encoding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSteam_Voice_Encoding_descriptor_;
}

const CSteam_Voice_Encoding& CSteam_Voice_Encoding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  return *default_instance_;
}

CSteam_Voice_Encoding* CSteam_Voice_Encoding::default_instance_ = NULL;

CSteam_Voice_Encoding* CSteam_Voice_Encoding::New(::google::protobuf::Arena* arena) const {
  CSteam_Voice_Encoding* n = new CSteam_Voice_Encoding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSteam_Voice_Encoding::Clear() {
  if (has_voice_data()) {
    voice_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSteam_Voice_Encoding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSteam_Voice_Encoding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes voice_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSteam_Voice_Encoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSteam_Voice_Encoding)
  return false;
#undef DO_
}

void CSteam_Voice_Encoding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSteam_Voice_Encoding)
  // optional bytes voice_data = 1;
  if (has_voice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->voice_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSteam_Voice_Encoding)
}

::google::protobuf::uint8* CSteam_Voice_Encoding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteam_Voice_Encoding)
  // optional bytes voice_data = 1;
  if (has_voice_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->voice_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteam_Voice_Encoding)
  return target;
}

int CSteam_Voice_Encoding::ByteSize() const {
  int total_size = 0;

  // optional bytes voice_data = 1;
  if (has_voice_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->voice_data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSteam_Voice_Encoding::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSteam_Voice_Encoding* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSteam_Voice_Encoding>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSteam_Voice_Encoding::MergeFrom(const CSteam_Voice_Encoding& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voice_data()) {
      set_has_voice_data();
      voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSteam_Voice_Encoding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteam_Voice_Encoding::CopyFrom(const CSteam_Voice_Encoding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteam_Voice_Encoding::IsInitialized() const {

  return true;
}

void CSteam_Voice_Encoding::Swap(CSteam_Voice_Encoding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSteam_Voice_Encoding::InternalSwap(CSteam_Voice_Encoding* other) {
  voice_data_.Swap(&other->voice_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSteam_Voice_Encoding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSteam_Voice_Encoding_descriptor_;
  metadata.reflection = CSteam_Voice_Encoding_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSteam_Voice_Encoding

// optional bytes voice_data = 1;
bool CSteam_Voice_Encoding::has_voice_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSteam_Voice_Encoding::set_has_voice_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSteam_Voice_Encoding::clear_has_voice_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSteam_Voice_Encoding::clear_voice_data() {
  voice_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voice_data();
}
 const ::std::string& CSteam_Voice_Encoding::voice_data() const {
  // @@protoc_insertion_point(field_get:CSteam_Voice_Encoding.voice_data)
  return voice_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSteam_Voice_Encoding::set_voice_data(const ::std::string& value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSteam_Voice_Encoding.voice_data)
}
 void CSteam_Voice_Encoding::set_voice_data(const char* value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSteam_Voice_Encoding.voice_data)
}
 void CSteam_Voice_Encoding::set_voice_data(const void* value, size_t size) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSteam_Voice_Encoding.voice_data)
}
 ::std::string* CSteam_Voice_Encoding::mutable_voice_data() {
  set_has_voice_data();
  // @@protoc_insertion_point(field_mutable:CSteam_Voice_Encoding.voice_data)
  return voice_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSteam_Voice_Encoding::release_voice_data() {
  clear_has_voice_data();
  return voice_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSteam_Voice_Encoding::set_allocated_voice_data(::std::string* voice_data) {
  if (voice_data != NULL) {
    set_has_voice_data();
  } else {
    clear_has_voice_data();
  }
  voice_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_data);
  // @@protoc_insertion_point(field_set_allocated:CSteam_Voice_Encoding.voice_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CP2P_Voice_Handler_Flags_descriptor_;
}
bool CP2P_Voice_Handler_Flags_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CP2P_Voice_Handler_Flags CP2P_Voice::Played_Audio;
const CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MIN;
const CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MAX;
const int CP2P_Voice::Handler_Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CP2P_Voice::kAudioFieldNumber;
const int CP2P_Voice::kBroadcastGroupFieldNumber;
#endif  // !_MSC_VER

CP2P_Voice::CP2P_Voice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CP2P_Voice)
}

void CP2P_Voice::InitAsDefaultInstance() {
  audio_ = const_cast< ::CMsgVoiceAudio*>(&::CMsgVoiceAudio::default_instance());
}

CP2P_Voice::CP2P_Voice(const CP2P_Voice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CP2P_Voice)
}

void CP2P_Voice::SharedCtor() {
  _cached_size_ = 0;
  audio_ = NULL;
  broadcast_group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CP2P_Voice::~CP2P_Voice() {
  // @@protoc_insertion_point(destructor:CP2P_Voice)
  SharedDtor();
}

void CP2P_Voice::SharedDtor() {
  if (this != default_instance_) {
    delete audio_;
  }
}

void CP2P_Voice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_Voice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CP2P_Voice_descriptor_;
}

const CP2P_Voice& CP2P_Voice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  return *default_instance_;
}

CP2P_Voice* CP2P_Voice::default_instance_ = NULL;

CP2P_Voice* CP2P_Voice::New(::google::protobuf::Arena* arena) const {
  CP2P_Voice* n = new CP2P_Voice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_Voice::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_audio()) {
      if (audio_ != NULL) audio_->::CMsgVoiceAudio::Clear();
    }
    broadcast_group_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CP2P_Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CP2P_Voice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVoiceAudio audio = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_broadcast_group;
        break;
      }

      // optional uint32 broadcast_group = 2;
      case 2: {
        if (tag == 16) {
         parse_broadcast_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcast_group_)));
          set_has_broadcast_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CP2P_Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CP2P_Voice)
  return false;
#undef DO_
}

void CP2P_Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CP2P_Voice)
  // optional .CMsgVoiceAudio audio = 1;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->audio_, output);
  }

  // optional uint32 broadcast_group = 2;
  if (has_broadcast_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->broadcast_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CP2P_Voice)
}

::google::protobuf::uint8* CP2P_Voice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_Voice)
  // optional .CMsgVoiceAudio audio = 1;
  if (has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->audio_, target);
  }

  // optional uint32 broadcast_group = 2;
  if (has_broadcast_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->broadcast_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_Voice)
  return target;
}

int CP2P_Voice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgVoiceAudio audio = 1;
    if (has_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->audio_);
    }

    // optional uint32 broadcast_group = 2;
    if (has_broadcast_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broadcast_group());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_Voice::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CP2P_Voice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_Voice>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CP2P_Voice::MergeFrom(const CP2P_Voice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audio()) {
      mutable_audio()->::CMsgVoiceAudio::MergeFrom(from.audio());
    }
    if (from.has_broadcast_group()) {
      set_broadcast_group(from.broadcast_group());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CP2P_Voice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Voice::CopyFrom(const CP2P_Voice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Voice::IsInitialized() const {

  return true;
}

void CP2P_Voice::Swap(CP2P_Voice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_Voice::InternalSwap(CP2P_Voice* other) {
  std::swap(audio_, other->audio_);
  std::swap(broadcast_group_, other->broadcast_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_Voice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CP2P_Voice_descriptor_;
  metadata.reflection = CP2P_Voice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_Voice

// optional .CMsgVoiceAudio audio = 1;
bool CP2P_Voice::has_audio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_Voice::set_has_audio() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_Voice::clear_has_audio() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_Voice::clear_audio() {
  if (audio_ != NULL) audio_->::CMsgVoiceAudio::Clear();
  clear_has_audio();
}
const ::CMsgVoiceAudio& CP2P_Voice::audio() const {
  // @@protoc_insertion_point(field_get:CP2P_Voice.audio)
  return audio_ != NULL ? *audio_ : *default_instance_->audio_;
}
::CMsgVoiceAudio* CP2P_Voice::mutable_audio() {
  set_has_audio();
  if (audio_ == NULL) {
    audio_ = new ::CMsgVoiceAudio;
  }
  // @@protoc_insertion_point(field_mutable:CP2P_Voice.audio)
  return audio_;
}
::CMsgVoiceAudio* CP2P_Voice::release_audio() {
  clear_has_audio();
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = NULL;
  return temp;
}
void CP2P_Voice::set_allocated_audio(::CMsgVoiceAudio* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    set_has_audio();
  } else {
    clear_has_audio();
  }
  // @@protoc_insertion_point(field_set_allocated:CP2P_Voice.audio)
}

// optional uint32 broadcast_group = 2;
bool CP2P_Voice::has_broadcast_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_Voice::set_has_broadcast_group() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_Voice::clear_has_broadcast_group() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_Voice::clear_broadcast_group() {
  broadcast_group_ = 0u;
  clear_has_broadcast_group();
}
 ::google::protobuf::uint32 CP2P_Voice::broadcast_group() const {
  // @@protoc_insertion_point(field_get:CP2P_Voice.broadcast_group)
  return broadcast_group_;
}
 void CP2P_Voice::set_broadcast_group(::google::protobuf::uint32 value) {
  set_has_broadcast_group();
  broadcast_group_ = value;
  // @@protoc_insertion_point(field_set:CP2P_Voice.broadcast_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CP2P_Ping::kSendTimeFieldNumber;
const int CP2P_Ping::kIsReplyFieldNumber;
#endif  // !_MSC_VER

CP2P_Ping::CP2P_Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CP2P_Ping)
}

void CP2P_Ping::InitAsDefaultInstance() {
}

CP2P_Ping::CP2P_Ping(const CP2P_Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CP2P_Ping)
}

void CP2P_Ping::SharedCtor() {
  _cached_size_ = 0;
  send_time_ = GOOGLE_ULONGLONG(0);
  is_reply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CP2P_Ping::~CP2P_Ping() {
  // @@protoc_insertion_point(destructor:CP2P_Ping)
  SharedDtor();
}

void CP2P_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CP2P_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CP2P_Ping_descriptor_;
}

const CP2P_Ping& CP2P_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  return *default_instance_;
}

CP2P_Ping* CP2P_Ping::default_instance_ = NULL;

CP2P_Ping* CP2P_Ping::New(::google::protobuf::Arena* arena) const {
  CP2P_Ping* n = new CP2P_Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_Ping::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CP2P_Ping*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(send_time_, is_reply_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CP2P_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CP2P_Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 send_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_reply;
        break;
      }

      // required bool is_reply = 2;
      case 2: {
        if (tag == 16) {
         parse_is_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reply_)));
          set_has_is_reply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CP2P_Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CP2P_Ping)
  return false;
#undef DO_
}

void CP2P_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CP2P_Ping)
  // required uint64 send_time = 1;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->send_time(), output);
  }

  // required bool is_reply = 2;
  if (has_is_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CP2P_Ping)
}

::google::protobuf::uint8* CP2P_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_Ping)
  // required uint64 send_time = 1;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->send_time(), target);
  }

  // required bool is_reply = 2;
  if (has_is_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_Ping)
  return target;
}

int CP2P_Ping::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_send_time()) {
    // required uint64 send_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());
  }

  if (has_is_reply()) {
    // required bool is_reply = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int CP2P_Ping::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 send_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());

    // required bool is_reply = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CP2P_Ping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_Ping>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CP2P_Ping::MergeFrom(const CP2P_Ping& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_is_reply()) {
      set_is_reply(from.is_reply());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CP2P_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Ping::CopyFrom(const CP2P_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CP2P_Ping::Swap(CP2P_Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_Ping::InternalSwap(CP2P_Ping* other) {
  std::swap(send_time_, other->send_time_);
  std::swap(is_reply_, other->is_reply_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CP2P_Ping_descriptor_;
  metadata.reflection = CP2P_Ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_Ping

// required uint64 send_time = 1;
bool CP2P_Ping::has_send_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_Ping::set_has_send_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_Ping::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_Ping::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
 ::google::protobuf::uint64 CP2P_Ping::send_time() const {
  // @@protoc_insertion_point(field_get:CP2P_Ping.send_time)
  return send_time_;
}
 void CP2P_Ping::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:CP2P_Ping.send_time)
}

// required bool is_reply = 2;
bool CP2P_Ping::has_is_reply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_Ping::set_has_is_reply() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_Ping::clear_has_is_reply() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_Ping::clear_is_reply() {
  is_reply_ = false;
  clear_has_is_reply();
}
 bool CP2P_Ping::is_reply() const {
  // @@protoc_insertion_point(field_get:CP2P_Ping.is_reply)
  return is_reply_;
}
 void CP2P_Ping::set_is_reply(bool value) {
  set_has_is_reply();
  is_reply_ = value;
  // @@protoc_insertion_point(field_set:CP2P_Ping.is_reply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
