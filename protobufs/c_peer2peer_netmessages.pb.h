// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#ifndef PROTOBUF_c_5fpeer2peer_5fnetmessages_2eproto__INCLUDED
#define PROTOBUF_c_5fpeer2peer_5fnetmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "netmessages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
void protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto();
void protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto();

class CP2P_Ping;
class CP2P_TextMessage;
class CP2P_Voice;
class CSteam_Voice_Encoding;

enum CP2P_Voice_Handler_Flags {
  CP2P_Voice_Handler_Flags_Played_Audio = 1
};
bool CP2P_Voice_Handler_Flags_IsValid(int value);
const CP2P_Voice_Handler_Flags CP2P_Voice_Handler_Flags_Handler_Flags_MIN = CP2P_Voice_Handler_Flags_Played_Audio;
const CP2P_Voice_Handler_Flags CP2P_Voice_Handler_Flags_Handler_Flags_MAX = CP2P_Voice_Handler_Flags_Played_Audio;
const int CP2P_Voice_Handler_Flags_Handler_Flags_ARRAYSIZE = CP2P_Voice_Handler_Flags_Handler_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor();
inline const ::std::string& CP2P_Voice_Handler_Flags_Name(CP2P_Voice_Handler_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CP2P_Voice_Handler_Flags_descriptor(), value);
}
inline bool CP2P_Voice_Handler_Flags_Parse(
    const ::std::string& name, CP2P_Voice_Handler_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CP2P_Voice_Handler_Flags>(
    CP2P_Voice_Handler_Flags_descriptor(), name, value);
}
enum P2P_Messages {
  p2p_TextMessage = 256,
  p2p_Voice = 257,
  p2p_Ping = 258
};
bool P2P_Messages_IsValid(int value);
const P2P_Messages P2P_Messages_MIN = p2p_TextMessage;
const P2P_Messages P2P_Messages_MAX = p2p_Ping;
const int P2P_Messages_ARRAYSIZE = P2P_Messages_MAX + 1;

const ::google::protobuf::EnumDescriptor* P2P_Messages_descriptor();
inline const ::std::string& P2P_Messages_Name(P2P_Messages value) {
  return ::google::protobuf::internal::NameOfEnum(
    P2P_Messages_descriptor(), value);
}
inline bool P2P_Messages_Parse(
    const ::std::string& name, P2P_Messages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<P2P_Messages>(
    P2P_Messages_descriptor(), name, value);
}
// ===================================================================

class CP2P_TextMessage : public ::google::protobuf::Message {
 public:
  CP2P_TextMessage();
  virtual ~CP2P_TextMessage();

  CP2P_TextMessage(const CP2P_TextMessage& from);

  inline CP2P_TextMessage& operator=(const CP2P_TextMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CP2P_TextMessage& default_instance();

  void Swap(CP2P_TextMessage* other);

  // implements Message ----------------------------------------------

  inline CP2P_TextMessage* New() const { return New(NULL); }

  CP2P_TextMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CP2P_TextMessage& from);
  void MergeFrom(const CP2P_TextMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CP2P_TextMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CP2P_TextMessage)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend void  protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto();

  void InitAsDefaultInstance();
  static CP2P_TextMessage* default_instance_;
};
// -------------------------------------------------------------------

class CSteam_Voice_Encoding : public ::google::protobuf::Message {
 public:
  CSteam_Voice_Encoding();
  virtual ~CSteam_Voice_Encoding();

  CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from);

  inline CSteam_Voice_Encoding& operator=(const CSteam_Voice_Encoding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSteam_Voice_Encoding& default_instance();

  void Swap(CSteam_Voice_Encoding* other);

  // implements Message ----------------------------------------------

  inline CSteam_Voice_Encoding* New() const { return New(NULL); }

  CSteam_Voice_Encoding* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSteam_Voice_Encoding& from);
  void MergeFrom(const CSteam_Voice_Encoding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSteam_Voice_Encoding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes voice_data = 1;
  bool has_voice_data() const;
  void clear_voice_data();
  static const int kVoiceDataFieldNumber = 1;
  const ::std::string& voice_data() const;
  void set_voice_data(const ::std::string& value);
  void set_voice_data(const char* value);
  void set_voice_data(const void* value, size_t size);
  ::std::string* mutable_voice_data();
  ::std::string* release_voice_data();
  void set_allocated_voice_data(::std::string* voice_data);

  // @@protoc_insertion_point(class_scope:CSteam_Voice_Encoding)
 private:
  inline void set_has_voice_data();
  inline void clear_has_voice_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr voice_data_;
  friend void  protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto();

  void InitAsDefaultInstance();
  static CSteam_Voice_Encoding* default_instance_;
};
// -------------------------------------------------------------------

class CP2P_Voice : public ::google::protobuf::Message {
 public:
  CP2P_Voice();
  virtual ~CP2P_Voice();

  CP2P_Voice(const CP2P_Voice& from);

  inline CP2P_Voice& operator=(const CP2P_Voice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CP2P_Voice& default_instance();

  void Swap(CP2P_Voice* other);

  // implements Message ----------------------------------------------

  inline CP2P_Voice* New() const { return New(NULL); }

  CP2P_Voice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CP2P_Voice& from);
  void MergeFrom(const CP2P_Voice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CP2P_Voice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CP2P_Voice_Handler_Flags Handler_Flags;
  static const Handler_Flags Played_Audio = CP2P_Voice_Handler_Flags_Played_Audio;
  static inline bool Handler_Flags_IsValid(int value) {
    return CP2P_Voice_Handler_Flags_IsValid(value);
  }
  static const Handler_Flags Handler_Flags_MIN =
    CP2P_Voice_Handler_Flags_Handler_Flags_MIN;
  static const Handler_Flags Handler_Flags_MAX =
    CP2P_Voice_Handler_Flags_Handler_Flags_MAX;
  static const int Handler_Flags_ARRAYSIZE =
    CP2P_Voice_Handler_Flags_Handler_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Handler_Flags_descriptor() {
    return CP2P_Voice_Handler_Flags_descriptor();
  }
  static inline const ::std::string& Handler_Flags_Name(Handler_Flags value) {
    return CP2P_Voice_Handler_Flags_Name(value);
  }
  static inline bool Handler_Flags_Parse(const ::std::string& name,
      Handler_Flags* value) {
    return CP2P_Voice_Handler_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgVoiceAudio audio = 1;
  bool has_audio() const;
  void clear_audio();
  static const int kAudioFieldNumber = 1;
  const ::CMsgVoiceAudio& audio() const;
  ::CMsgVoiceAudio* mutable_audio();
  ::CMsgVoiceAudio* release_audio();
  void set_allocated_audio(::CMsgVoiceAudio* audio);

  // optional uint32 broadcast_group = 2;
  bool has_broadcast_group() const;
  void clear_broadcast_group();
  static const int kBroadcastGroupFieldNumber = 2;
  ::google::protobuf::uint32 broadcast_group() const;
  void set_broadcast_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CP2P_Voice)
 private:
  inline void set_has_audio();
  inline void clear_has_audio();
  inline void set_has_broadcast_group();
  inline void clear_has_broadcast_group();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVoiceAudio* audio_;
  ::google::protobuf::uint32 broadcast_group_;
  friend void  protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto();

  void InitAsDefaultInstance();
  static CP2P_Voice* default_instance_;
};
// -------------------------------------------------------------------

class CP2P_Ping : public ::google::protobuf::Message {
 public:
  CP2P_Ping();
  virtual ~CP2P_Ping();

  CP2P_Ping(const CP2P_Ping& from);

  inline CP2P_Ping& operator=(const CP2P_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CP2P_Ping& default_instance();

  void Swap(CP2P_Ping* other);

  // implements Message ----------------------------------------------

  inline CP2P_Ping* New() const { return New(NULL); }

  CP2P_Ping* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CP2P_Ping& from);
  void MergeFrom(const CP2P_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CP2P_Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 send_time = 1;
  bool has_send_time() const;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 1;
  ::google::protobuf::uint64 send_time() const;
  void set_send_time(::google::protobuf::uint64 value);

  // required bool is_reply = 2;
  bool has_is_reply() const;
  void clear_is_reply();
  static const int kIsReplyFieldNumber = 2;
  bool is_reply() const;
  void set_is_reply(bool value);

  // @@protoc_insertion_point(class_scope:CP2P_Ping)
 private:
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_is_reply();
  inline void clear_has_is_reply();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 send_time_;
  bool is_reply_;
  friend void  protobuf_AddDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_AssignDesc_c_5fpeer2peer_5fnetmessages_2eproto();
  friend void protobuf_ShutdownFile_c_5fpeer2peer_5fnetmessages_2eproto();

  void InitAsDefaultInstance();
  static CP2P_Ping* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_TextMessage

// optional bytes text = 1;
inline bool CP2P_TextMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CP2P_TextMessage::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CP2P_TextMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CP2P_TextMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& CP2P_TextMessage::text() const {
  // @@protoc_insertion_point(field_get:CP2P_TextMessage.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CP2P_TextMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CP2P_TextMessage.text)
}
inline void CP2P_TextMessage::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CP2P_TextMessage.text)
}
inline void CP2P_TextMessage::set_text(const void* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CP2P_TextMessage.text)
}
inline ::std::string* CP2P_TextMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:CP2P_TextMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CP2P_TextMessage::release_text() {
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CP2P_TextMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CP2P_TextMessage.text)
}

// -------------------------------------------------------------------

// CSteam_Voice_Encoding

// optional bytes voice_data = 1;
inline bool CSteam_Voice_Encoding::has_voice_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSteam_Voice_Encoding::set_has_voice_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSteam_Voice_Encoding::clear_has_voice_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSteam_Voice_Encoding::clear_voice_data() {
  voice_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voice_data();
}
inline const ::std::string& CSteam_Voice_Encoding::voice_data() const {
  // @@protoc_insertion_point(field_get:CSteam_Voice_Encoding.voice_data)
  return voice_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSteam_Voice_Encoding::set_voice_data(const ::std::string& value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSteam_Voice_Encoding.voice_data)
}
inline void CSteam_Voice_Encoding::set_voice_data(const char* value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSteam_Voice_Encoding.voice_data)
}
inline void CSteam_Voice_Encoding::set_voice_data(const void* value, size_t size) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSteam_Voice_Encoding.voice_data)
}
inline ::std::string* CSteam_Voice_Encoding::mutable_voice_data() {
  set_has_voice_data();
  // @@protoc_insertion_point(field_mutable:CSteam_Voice_Encoding.voice_data)
  return voice_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSteam_Voice_Encoding::release_voice_data() {
  clear_has_voice_data();
  return voice_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSteam_Voice_Encoding::set_allocated_voice_data(::std::string* voice_data) {
  if (voice_data != NULL) {
    set_has_voice_data();
  } else {
    clear_has_voice_data();
  }
  voice_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_data);
  // @@protoc_insertion_point(field_set_allocated:CSteam_Voice_Encoding.voice_data)
}

// -------------------------------------------------------------------

// CP2P_Voice

// optional .CMsgVoiceAudio audio = 1;
inline bool CP2P_Voice::has_audio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CP2P_Voice::set_has_audio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CP2P_Voice::clear_has_audio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CP2P_Voice::clear_audio() {
  if (audio_ != NULL) audio_->::CMsgVoiceAudio::Clear();
  clear_has_audio();
}
inline const ::CMsgVoiceAudio& CP2P_Voice::audio() const {
  // @@protoc_insertion_point(field_get:CP2P_Voice.audio)
  return audio_ != NULL ? *audio_ : *default_instance_->audio_;
}
inline ::CMsgVoiceAudio* CP2P_Voice::mutable_audio() {
  set_has_audio();
  if (audio_ == NULL) {
    audio_ = new ::CMsgVoiceAudio;
  }
  // @@protoc_insertion_point(field_mutable:CP2P_Voice.audio)
  return audio_;
}
inline ::CMsgVoiceAudio* CP2P_Voice::release_audio() {
  clear_has_audio();
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = NULL;
  return temp;
}
inline void CP2P_Voice::set_allocated_audio(::CMsgVoiceAudio* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    set_has_audio();
  } else {
    clear_has_audio();
  }
  // @@protoc_insertion_point(field_set_allocated:CP2P_Voice.audio)
}

// optional uint32 broadcast_group = 2;
inline bool CP2P_Voice::has_broadcast_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CP2P_Voice::set_has_broadcast_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CP2P_Voice::clear_has_broadcast_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CP2P_Voice::clear_broadcast_group() {
  broadcast_group_ = 0u;
  clear_has_broadcast_group();
}
inline ::google::protobuf::uint32 CP2P_Voice::broadcast_group() const {
  // @@protoc_insertion_point(field_get:CP2P_Voice.broadcast_group)
  return broadcast_group_;
}
inline void CP2P_Voice::set_broadcast_group(::google::protobuf::uint32 value) {
  set_has_broadcast_group();
  broadcast_group_ = value;
  // @@protoc_insertion_point(field_set:CP2P_Voice.broadcast_group)
}

// -------------------------------------------------------------------

// CP2P_Ping

// required uint64 send_time = 1;
inline bool CP2P_Ping::has_send_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CP2P_Ping::set_has_send_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CP2P_Ping::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CP2P_Ping::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 CP2P_Ping::send_time() const {
  // @@protoc_insertion_point(field_get:CP2P_Ping.send_time)
  return send_time_;
}
inline void CP2P_Ping::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:CP2P_Ping.send_time)
}

// required bool is_reply = 2;
inline bool CP2P_Ping::has_is_reply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CP2P_Ping::set_has_is_reply() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CP2P_Ping::clear_has_is_reply() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CP2P_Ping::clear_is_reply() {
  is_reply_ = false;
  clear_has_is_reply();
}
inline bool CP2P_Ping::is_reply() const {
  // @@protoc_insertion_point(field_get:CP2P_Ping.is_reply)
  return is_reply_;
}
inline void CP2P_Ping::set_is_reply(bool value) {
  set_has_is_reply();
  is_reply_ = value;
  // @@protoc_insertion_point(field_set:CP2P_Ping.is_reply)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CP2P_Voice_Handler_Flags> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CP2P_Voice_Handler_Flags>() {
  return ::CP2P_Voice_Handler_Flags_descriptor();
}
template <> struct is_proto_enum< ::P2P_Messages> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::P2P_Messages>() {
  return ::P2P_Messages_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fpeer2peer_5fnetmessages_2eproto__INCLUDED
