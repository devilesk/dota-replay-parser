// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CClientMsg_CustomGameEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClientMsg_CustomGameEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CClientMsg_TrackedControllerInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClientMsg_TrackedControllerInput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBaseClientMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_clientmessages_2eproto() {
  protobuf_AddDesc_clientmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "clientmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CClientMsg_CustomGameEvent_descriptor_ = file->message_type(0);
  static const int CClientMsg_CustomGameEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, data_),
  };
  CClientMsg_CustomGameEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CClientMsg_CustomGameEvent_descriptor_,
      CClientMsg_CustomGameEvent::default_instance_,
      CClientMsg_CustomGameEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(CClientMsg_CustomGameEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, _internal_metadata_),
      -1);
  CClientMsg_TrackedControllerInput_descriptor_ = file->message_type(1);
  static const int CClientMsg_TrackedControllerInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_TrackedControllerInput, data_),
  };
  CClientMsg_TrackedControllerInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CClientMsg_TrackedControllerInput_descriptor_,
      CClientMsg_TrackedControllerInput::default_instance_,
      CClientMsg_TrackedControllerInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_TrackedControllerInput, _has_bits_[0]),
      -1,
      -1,
      sizeof(CClientMsg_TrackedControllerInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_TrackedControllerInput, _internal_metadata_),
      -1);
  EBaseClientMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_clientmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CClientMsg_CustomGameEvent_descriptor_, &CClientMsg_CustomGameEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CClientMsg_TrackedControllerInput_descriptor_, &CClientMsg_TrackedControllerInput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_clientmessages_2eproto() {
  delete CClientMsg_CustomGameEvent::default_instance_;
  delete CClientMsg_CustomGameEvent_reflection_;
  delete CClientMsg_TrackedControllerInput::default_instance_;
  delete CClientMsg_TrackedControllerInput_reflection_;
}

void protobuf_AddDesc_clientmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024clientmessages.proto\">\n\032CClientMsg_Cus"
    "tomGameEvent\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004data"
    "\030\002 \001(\014\"1\n!CClientMsg_TrackedControllerIn"
    "put\022\014\n\004data\030\001 \001(\014*`\n\023EBaseClientMessages"
    "\022\027\n\022CM_CustomGameEvent\020\230\002\022\036\n\031CM_TrackedC"
    "ontrollerInput\020\231\002\022\020\n\013CM_MAX_BASE\020\254\002B\005H\001\200"
    "\001\000", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clientmessages.proto", &protobuf_RegisterTypes);
  CClientMsg_CustomGameEvent::default_instance_ = new CClientMsg_CustomGameEvent();
  CClientMsg_TrackedControllerInput::default_instance_ = new CClientMsg_TrackedControllerInput();
  CClientMsg_CustomGameEvent::default_instance_->InitAsDefaultInstance();
  CClientMsg_TrackedControllerInput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_clientmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_clientmessages_2eproto {
  StaticDescriptorInitializer_clientmessages_2eproto() {
    protobuf_AddDesc_clientmessages_2eproto();
  }
} static_descriptor_initializer_clientmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EBaseClientMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBaseClientMessages_descriptor_;
}
bool EBaseClientMessages_IsValid(int value) {
  switch(value) {
    case 280:
    case 281:
    case 300:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CClientMsg_CustomGameEvent::kEventNameFieldNumber;
const int CClientMsg_CustomGameEvent::kDataFieldNumber;
#endif  // !_MSC_VER

CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClientMsg_CustomGameEvent)
}

void CClientMsg_CustomGameEvent::InitAsDefaultInstance() {
}

CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent(const CClientMsg_CustomGameEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CClientMsg_CustomGameEvent)
}

void CClientMsg_CustomGameEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClientMsg_CustomGameEvent::~CClientMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:CClientMsg_CustomGameEvent)
  SharedDtor();
}

void CClientMsg_CustomGameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CClientMsg_CustomGameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_CustomGameEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClientMsg_CustomGameEvent_descriptor_;
}

const CClientMsg_CustomGameEvent& CClientMsg_CustomGameEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clientmessages_2eproto();
  return *default_instance_;
}

CClientMsg_CustomGameEvent* CClientMsg_CustomGameEvent::default_instance_ = NULL;

CClientMsg_CustomGameEvent* CClientMsg_CustomGameEvent::New(::google::protobuf::Arena* arena) const {
  CClientMsg_CustomGameEvent* n = new CClientMsg_CustomGameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_CustomGameEvent::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_event_name()) {
      event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CClientMsg_CustomGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClientMsg_CustomGameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CClientMsg_CustomGameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClientMsg_CustomGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClientMsg_CustomGameEvent)
  return false;
#undef DO_
}

void CClientMsg_CustomGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClientMsg_CustomGameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CClientMsg_CustomGameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClientMsg_CustomGameEvent)
}

::google::protobuf::uint8* CClientMsg_CustomGameEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_CustomGameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CClientMsg_CustomGameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_CustomGameEvent)
  return target;
}

int CClientMsg_CustomGameEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_CustomGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CClientMsg_CustomGameEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_CustomGameEvent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEvent::MergeFrom(const CClientMsg_CustomGameEvent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_name()) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CClientMsg_CustomGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEvent::CopyFrom(const CClientMsg_CustomGameEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEvent::IsInitialized() const {

  return true;
}

void CClientMsg_CustomGameEvent::Swap(CClientMsg_CustomGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_CustomGameEvent::InternalSwap(CClientMsg_CustomGameEvent* other) {
  event_name_.Swap(&other->event_name_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_CustomGameEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClientMsg_CustomGameEvent_descriptor_;
  metadata.reflection = CClientMsg_CustomGameEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_CustomGameEvent

// optional string event_name = 1;
bool CClientMsg_CustomGameEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_CustomGameEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_CustomGameEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_CustomGameEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
 const ::std::string& CClientMsg_CustomGameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEvent.event_name)
  return event_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CClientMsg_CustomGameEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEvent.event_name)
}
 void CClientMsg_CustomGameEvent::set_event_name(const char* value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEvent.event_name)
}
 void CClientMsg_CustomGameEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEvent.event_name)
}
 ::std::string* CClientMsg_CustomGameEvent::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CClientMsg_CustomGameEvent::release_event_name() {
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CClientMsg_CustomGameEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEvent.event_name)
}

// optional bytes data = 2;
bool CClientMsg_CustomGameEvent::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CClientMsg_CustomGameEvent::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CClientMsg_CustomGameEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CClientMsg_CustomGameEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CClientMsg_CustomGameEvent::data() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEvent.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CClientMsg_CustomGameEvent::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEvent.data)
}
 void CClientMsg_CustomGameEvent::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEvent.data)
}
 void CClientMsg_CustomGameEvent::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEvent.data)
}
 ::std::string* CClientMsg_CustomGameEvent::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CClientMsg_CustomGameEvent::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CClientMsg_CustomGameEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CClientMsg_TrackedControllerInput::kDataFieldNumber;
#endif  // !_MSC_VER

CClientMsg_TrackedControllerInput::CClientMsg_TrackedControllerInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CClientMsg_TrackedControllerInput)
}

void CClientMsg_TrackedControllerInput::InitAsDefaultInstance() {
}

CClientMsg_TrackedControllerInput::CClientMsg_TrackedControllerInput(const CClientMsg_TrackedControllerInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CClientMsg_TrackedControllerInput)
}

void CClientMsg_TrackedControllerInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClientMsg_TrackedControllerInput::~CClientMsg_TrackedControllerInput() {
  // @@protoc_insertion_point(destructor:CClientMsg_TrackedControllerInput)
  SharedDtor();
}

void CClientMsg_TrackedControllerInput::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CClientMsg_TrackedControllerInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_TrackedControllerInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClientMsg_TrackedControllerInput_descriptor_;
}

const CClientMsg_TrackedControllerInput& CClientMsg_TrackedControllerInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clientmessages_2eproto();
  return *default_instance_;
}

CClientMsg_TrackedControllerInput* CClientMsg_TrackedControllerInput::default_instance_ = NULL;

CClientMsg_TrackedControllerInput* CClientMsg_TrackedControllerInput::New(::google::protobuf::Arena* arena) const {
  CClientMsg_TrackedControllerInput* n = new CClientMsg_TrackedControllerInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_TrackedControllerInput::Clear() {
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CClientMsg_TrackedControllerInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CClientMsg_TrackedControllerInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CClientMsg_TrackedControllerInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CClientMsg_TrackedControllerInput)
  return false;
#undef DO_
}

void CClientMsg_TrackedControllerInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CClientMsg_TrackedControllerInput)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CClientMsg_TrackedControllerInput)
}

::google::protobuf::uint8* CClientMsg_TrackedControllerInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_TrackedControllerInput)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_TrackedControllerInput)
  return target;
}

int CClientMsg_TrackedControllerInput::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_TrackedControllerInput::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CClientMsg_TrackedControllerInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_TrackedControllerInput>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClientMsg_TrackedControllerInput::MergeFrom(const CClientMsg_TrackedControllerInput& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CClientMsg_TrackedControllerInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_TrackedControllerInput::CopyFrom(const CClientMsg_TrackedControllerInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_TrackedControllerInput::IsInitialized() const {

  return true;
}

void CClientMsg_TrackedControllerInput::Swap(CClientMsg_TrackedControllerInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_TrackedControllerInput::InternalSwap(CClientMsg_TrackedControllerInput* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_TrackedControllerInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClientMsg_TrackedControllerInput_descriptor_;
  metadata.reflection = CClientMsg_TrackedControllerInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_TrackedControllerInput

// optional bytes data = 1;
bool CClientMsg_TrackedControllerInput::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_TrackedControllerInput::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_TrackedControllerInput::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_TrackedControllerInput::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CClientMsg_TrackedControllerInput::data() const {
  // @@protoc_insertion_point(field_get:CClientMsg_TrackedControllerInput.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CClientMsg_TrackedControllerInput::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CClientMsg_TrackedControllerInput.data)
}
 void CClientMsg_TrackedControllerInput::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CClientMsg_TrackedControllerInput.data)
}
 void CClientMsg_TrackedControllerInput::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_TrackedControllerInput.data)
}
 ::std::string* CClientMsg_TrackedControllerInput::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CClientMsg_TrackedControllerInput.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CClientMsg_TrackedControllerInput::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CClientMsg_TrackedControllerInput::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_TrackedControllerInput.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
