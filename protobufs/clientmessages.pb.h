// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmessages.proto

#ifndef PROTOBUF_clientmessages_2eproto__INCLUDED
#define PROTOBUF_clientmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_clientmessages_2eproto();
void protobuf_AssignDesc_clientmessages_2eproto();
void protobuf_ShutdownFile_clientmessages_2eproto();

class CClientMsg_CustomGameEvent;
class CClientMsg_TrackedControllerInput;

enum EBaseClientMessages {
  CM_CustomGameEvent = 280,
  CM_TrackedControllerInput = 281,
  CM_MAX_BASE = 300
};
bool EBaseClientMessages_IsValid(int value);
const EBaseClientMessages EBaseClientMessages_MIN = CM_CustomGameEvent;
const EBaseClientMessages EBaseClientMessages_MAX = CM_MAX_BASE;
const int EBaseClientMessages_ARRAYSIZE = EBaseClientMessages_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBaseClientMessages_descriptor();
inline const ::std::string& EBaseClientMessages_Name(EBaseClientMessages value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBaseClientMessages_descriptor(), value);
}
inline bool EBaseClientMessages_Parse(
    const ::std::string& name, EBaseClientMessages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBaseClientMessages>(
    EBaseClientMessages_descriptor(), name, value);
}
// ===================================================================

class CClientMsg_CustomGameEvent : public ::google::protobuf::Message {
 public:
  CClientMsg_CustomGameEvent();
  virtual ~CClientMsg_CustomGameEvent();

  CClientMsg_CustomGameEvent(const CClientMsg_CustomGameEvent& from);

  inline CClientMsg_CustomGameEvent& operator=(const CClientMsg_CustomGameEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CClientMsg_CustomGameEvent& default_instance();

  void Swap(CClientMsg_CustomGameEvent* other);

  // implements Message ----------------------------------------------

  inline CClientMsg_CustomGameEvent* New() const { return New(NULL); }

  CClientMsg_CustomGameEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CClientMsg_CustomGameEvent& from);
  void MergeFrom(const CClientMsg_CustomGameEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CClientMsg_CustomGameEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string event_name = 1;
  bool has_event_name() const;
  void clear_event_name();
  static const int kEventNameFieldNumber = 1;
  const ::std::string& event_name() const;
  void set_event_name(const ::std::string& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  ::std::string* mutable_event_name();
  ::std::string* release_event_name();
  void set_allocated_event_name(::std::string* event_name);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CClientMsg_CustomGameEvent)
 private:
  inline void set_has_event_name();
  inline void clear_has_event_name();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr event_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_AddDesc_clientmessages_2eproto();
  friend void protobuf_AssignDesc_clientmessages_2eproto();
  friend void protobuf_ShutdownFile_clientmessages_2eproto();

  void InitAsDefaultInstance();
  static CClientMsg_CustomGameEvent* default_instance_;
};
// -------------------------------------------------------------------

class CClientMsg_TrackedControllerInput : public ::google::protobuf::Message {
 public:
  CClientMsg_TrackedControllerInput();
  virtual ~CClientMsg_TrackedControllerInput();

  CClientMsg_TrackedControllerInput(const CClientMsg_TrackedControllerInput& from);

  inline CClientMsg_TrackedControllerInput& operator=(const CClientMsg_TrackedControllerInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CClientMsg_TrackedControllerInput& default_instance();

  void Swap(CClientMsg_TrackedControllerInput* other);

  // implements Message ----------------------------------------------

  inline CClientMsg_TrackedControllerInput* New() const { return New(NULL); }

  CClientMsg_TrackedControllerInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CClientMsg_TrackedControllerInput& from);
  void MergeFrom(const CClientMsg_TrackedControllerInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CClientMsg_TrackedControllerInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CClientMsg_TrackedControllerInput)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_AddDesc_clientmessages_2eproto();
  friend void protobuf_AssignDesc_clientmessages_2eproto();
  friend void protobuf_ShutdownFile_clientmessages_2eproto();

  void InitAsDefaultInstance();
  static CClientMsg_TrackedControllerInput* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_CustomGameEvent

// optional string event_name = 1;
inline bool CClientMsg_CustomGameEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CClientMsg_CustomGameEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CClientMsg_CustomGameEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CClientMsg_CustomGameEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
inline const ::std::string& CClientMsg_CustomGameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEvent.event_name)
  return event_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CClientMsg_CustomGameEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEvent.event_name)
}
inline void CClientMsg_CustomGameEvent::set_event_name(const char* value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEvent.event_name)
}
inline void CClientMsg_CustomGameEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEvent.event_name)
}
inline ::std::string* CClientMsg_CustomGameEvent::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CClientMsg_CustomGameEvent::release_event_name() {
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CClientMsg_CustomGameEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEvent.event_name)
}

// optional bytes data = 2;
inline bool CClientMsg_CustomGameEvent::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CClientMsg_CustomGameEvent::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CClientMsg_CustomGameEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CClientMsg_CustomGameEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& CClientMsg_CustomGameEvent::data() const {
  // @@protoc_insertion_point(field_get:CClientMsg_CustomGameEvent.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CClientMsg_CustomGameEvent::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CClientMsg_CustomGameEvent.data)
}
inline void CClientMsg_CustomGameEvent::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CClientMsg_CustomGameEvent.data)
}
inline void CClientMsg_CustomGameEvent::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_CustomGameEvent.data)
}
inline ::std::string* CClientMsg_CustomGameEvent::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CClientMsg_CustomGameEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CClientMsg_CustomGameEvent::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CClientMsg_CustomGameEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_CustomGameEvent.data)
}

// -------------------------------------------------------------------

// CClientMsg_TrackedControllerInput

// optional bytes data = 1;
inline bool CClientMsg_TrackedControllerInput::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CClientMsg_TrackedControllerInput::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CClientMsg_TrackedControllerInput::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CClientMsg_TrackedControllerInput::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& CClientMsg_TrackedControllerInput::data() const {
  // @@protoc_insertion_point(field_get:CClientMsg_TrackedControllerInput.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CClientMsg_TrackedControllerInput::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CClientMsg_TrackedControllerInput.data)
}
inline void CClientMsg_TrackedControllerInput::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CClientMsg_TrackedControllerInput.data)
}
inline void CClientMsg_TrackedControllerInput::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CClientMsg_TrackedControllerInput.data)
}
inline ::std::string* CClientMsg_TrackedControllerInput::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CClientMsg_TrackedControllerInput.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CClientMsg_TrackedControllerInput::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CClientMsg_TrackedControllerInput::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CClientMsg_TrackedControllerInput.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EBaseClientMessages> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBaseClientMessages>() {
  return ::EBaseClientMessages_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clientmessages_2eproto__INCLUDED
