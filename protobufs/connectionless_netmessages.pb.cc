// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectionless_netmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "connectionless_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* C2S_CONNECT_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_CONNECT_Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_CONNECTION_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_CONNECTION_Message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_connectionless_5fnetmessages_2eproto() {
  protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "connectionless_netmessages.proto");
  GOOGLE_CHECK(file != NULL);
  C2S_CONNECT_Message_descriptor_ = file->message_type(0);
  static const int C2S_CONNECT_Message_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, host_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, auth_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, challenge_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, reservation_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, low_violence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, encrypted_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, splitplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, auth_steam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, challenge_context_),
  };
  C2S_CONNECT_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_CONNECT_Message_descriptor_,
      C2S_CONNECT_Message::default_instance_,
      C2S_CONNECT_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECT_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_CONNECT_Message));
  C2S_CONNECTION_Message_descriptor_ = file->message_type(1);
  static const int C2S_CONNECTION_Message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECTION_Message, addon_name_),
  };
  C2S_CONNECTION_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_CONNECTION_Message_descriptor_,
      C2S_CONNECTION_Message::default_instance_,
      C2S_CONNECTION_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECTION_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CONNECTION_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_CONNECTION_Message));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_connectionless_5fnetmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_CONNECT_Message_descriptor_, &C2S_CONNECT_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_CONNECTION_Message_descriptor_, &C2S_CONNECTION_Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_connectionless_5fnetmessages_2eproto() {
  delete C2S_CONNECT_Message::default_instance_;
  delete C2S_CONNECT_Message_reflection_;
  delete C2S_CONNECTION_Message::default_instance_;
  delete C2S_CONNECTION_Message_reflection_;
}

void protobuf_AddDesc_connectionless_5fnetmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_netmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n connectionless_netmessages.proto\032\021netm"
    "essages.proto\"\214\002\n\023C2S_CONNECT_Message\022\024\n"
    "\014host_version\030\001 \001(\r\022\025\n\rauth_protocol\030\002 \001"
    "(\r\022\030\n\020challenge_number\030\003 \001(\r\022\032\n\022reservat"
    "ion_cookie\030\004 \001(\006\022\024\n\014low_violence\030\005 \001(\010\022\032"
    "\n\022encrypted_password\030\006 \001(\014\0221\n\014splitplaye"
    "rs\030\007 \003(\0132\033.CCLCMsg_SplitPlayerConnect\022\022\n"
    "\nauth_steam\030\010 \001(\014\022\031\n\021challenge_context\030\t"
    " \001(\t\",\n\026C2S_CONNECTION_Message\022\022\n\naddon_"
    "name\030\001 \001(\tB\003\200\001\000", 375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "connectionless_netmessages.proto", &protobuf_RegisterTypes);
  C2S_CONNECT_Message::default_instance_ = new C2S_CONNECT_Message();
  C2S_CONNECTION_Message::default_instance_ = new C2S_CONNECTION_Message();
  C2S_CONNECT_Message::default_instance_->InitAsDefaultInstance();
  C2S_CONNECTION_Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_connectionless_5fnetmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_connectionless_5fnetmessages_2eproto {
  StaticDescriptorInitializer_connectionless_5fnetmessages_2eproto() {
    protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
  }
} static_descriptor_initializer_connectionless_5fnetmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2S_CONNECT_Message::kHostVersionFieldNumber;
const int C2S_CONNECT_Message::kAuthProtocolFieldNumber;
const int C2S_CONNECT_Message::kChallengeNumberFieldNumber;
const int C2S_CONNECT_Message::kReservationCookieFieldNumber;
const int C2S_CONNECT_Message::kLowViolenceFieldNumber;
const int C2S_CONNECT_Message::kEncryptedPasswordFieldNumber;
const int C2S_CONNECT_Message::kSplitplayersFieldNumber;
const int C2S_CONNECT_Message::kAuthSteamFieldNumber;
const int C2S_CONNECT_Message::kChallengeContextFieldNumber;
#endif  // !_MSC_VER

C2S_CONNECT_Message::C2S_CONNECT_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2S_CONNECT_Message)
}

void C2S_CONNECT_Message::InitAsDefaultInstance() {
}

C2S_CONNECT_Message::C2S_CONNECT_Message(const C2S_CONNECT_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:C2S_CONNECT_Message)
}

void C2S_CONNECT_Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_version_ = 0u;
  auth_protocol_ = 0u;
  challenge_number_ = 0u;
  reservation_cookie_ = GOOGLE_ULONGLONG(0);
  low_violence_ = false;
  encrypted_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_steam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_CONNECT_Message::~C2S_CONNECT_Message() {
  // @@protoc_insertion_point(destructor:C2S_CONNECT_Message)
  SharedDtor();
}

void C2S_CONNECT_Message::SharedDtor() {
  if (encrypted_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_password_;
  }
  if (auth_steam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_steam_;
  }
  if (challenge_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenge_context_;
  }
  if (this != default_instance_) {
  }
}

void C2S_CONNECT_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_CONNECT_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_CONNECT_Message_descriptor_;
}

const C2S_CONNECT_Message& C2S_CONNECT_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
  return *default_instance_;
}

C2S_CONNECT_Message* C2S_CONNECT_Message::default_instance_ = NULL;

C2S_CONNECT_Message* C2S_CONNECT_Message::New() const {
  return new C2S_CONNECT_Message;
}

void C2S_CONNECT_Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<C2S_CONNECT_Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(host_version_, low_violence_);
    if (has_encrypted_password()) {
      if (encrypted_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypted_password_->clear();
      }
    }
    if (has_auth_steam()) {
      if (auth_steam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_steam_->clear();
      }
    }
  }
  if (has_challenge_context()) {
    if (challenge_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      challenge_context_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  splitplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_CONNECT_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:C2S_CONNECT_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 host_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_version_)));
          set_has_host_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_auth_protocol;
        break;
      }

      // optional uint32 auth_protocol = 2;
      case 2: {
        if (tag == 16) {
         parse_auth_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_protocol_)));
          set_has_auth_protocol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_challenge_number;
        break;
      }

      // optional uint32 challenge_number = 3;
      case 3: {
        if (tag == 24) {
         parse_challenge_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_number_)));
          set_has_challenge_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_reservation_cookie;
        break;
      }

      // optional fixed64 reservation_cookie = 4;
      case 4: {
        if (tag == 33) {
         parse_reservation_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &reservation_cookie_)));
          set_has_reservation_cookie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_low_violence;
        break;
      }

      // optional bool low_violence = 5;
      case 5: {
        if (tag == 40) {
         parse_low_violence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_violence_)));
          set_has_low_violence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_encrypted_password;
        break;
      }

      // optional bytes encrypted_password = 6;
      case 6: {
        if (tag == 50) {
         parse_encrypted_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_splitplayers;
        break;
      }

      // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
      case 7: {
        if (tag == 58) {
         parse_splitplayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_splitplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_splitplayers;
        if (input->ExpectTag(66)) goto parse_auth_steam;
        break;
      }

      // optional bytes auth_steam = 8;
      case 8: {
        if (tag == 66) {
         parse_auth_steam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_steam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_challenge_context;
        break;
      }

      // optional string challenge_context = 9;
      case 9: {
        if (tag == 74) {
         parse_challenge_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->challenge_context().data(), this->challenge_context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "challenge_context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:C2S_CONNECT_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:C2S_CONNECT_Message)
  return false;
#undef DO_
}

void C2S_CONNECT_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:C2S_CONNECT_Message)
  // optional uint32 host_version = 1;
  if (has_host_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_version(), output);
  }

  // optional uint32 auth_protocol = 2;
  if (has_auth_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auth_protocol(), output);
  }

  // optional uint32 challenge_number = 3;
  if (has_challenge_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challenge_number(), output);
  }

  // optional fixed64 reservation_cookie = 4;
  if (has_reservation_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->reservation_cookie(), output);
  }

  // optional bool low_violence = 5;
  if (has_low_violence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->low_violence(), output);
  }

  // optional bytes encrypted_password = 6;
  if (has_encrypted_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->encrypted_password(), output);
  }

  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  for (int i = 0; i < this->splitplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->splitplayers(i), output);
  }

  // optional bytes auth_steam = 8;
  if (has_auth_steam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->auth_steam(), output);
  }

  // optional string challenge_context = 9;
  if (has_challenge_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenge_context().data(), this->challenge_context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "challenge_context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->challenge_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:C2S_CONNECT_Message)
}

::google::protobuf::uint8* C2S_CONNECT_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S_CONNECT_Message)
  // optional uint32 host_version = 1;
  if (has_host_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_version(), target);
  }

  // optional uint32 auth_protocol = 2;
  if (has_auth_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auth_protocol(), target);
  }

  // optional uint32 challenge_number = 3;
  if (has_challenge_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challenge_number(), target);
  }

  // optional fixed64 reservation_cookie = 4;
  if (has_reservation_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->reservation_cookie(), target);
  }

  // optional bool low_violence = 5;
  if (has_low_violence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->low_violence(), target);
  }

  // optional bytes encrypted_password = 6;
  if (has_encrypted_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->encrypted_password(), target);
  }

  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  for (int i = 0; i < this->splitplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->splitplayers(i), target);
  }

  // optional bytes auth_steam = 8;
  if (has_auth_steam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->auth_steam(), target);
  }

  // optional string challenge_context = 9;
  if (has_challenge_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenge_context().data(), this->challenge_context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "challenge_context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->challenge_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S_CONNECT_Message)
  return target;
}

int C2S_CONNECT_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 host_version = 1;
    if (has_host_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_version());
    }

    // optional uint32 auth_protocol = 2;
    if (has_auth_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_protocol());
    }

    // optional uint32 challenge_number = 3;
    if (has_challenge_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_number());
    }

    // optional fixed64 reservation_cookie = 4;
    if (has_reservation_cookie()) {
      total_size += 1 + 8;
    }

    // optional bool low_violence = 5;
    if (has_low_violence()) {
      total_size += 1 + 1;
    }

    // optional bytes encrypted_password = 6;
    if (has_encrypted_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_password());
    }

    // optional bytes auth_steam = 8;
    if (has_auth_steam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth_steam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string challenge_context = 9;
    if (has_challenge_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenge_context());
    }

  }
  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  total_size += 1 * this->splitplayers_size();
  for (int i = 0; i < this->splitplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->splitplayers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_CONNECT_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_CONNECT_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_CONNECT_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_CONNECT_Message::MergeFrom(const C2S_CONNECT_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  splitplayers_.MergeFrom(from.splitplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_version()) {
      set_host_version(from.host_version());
    }
    if (from.has_auth_protocol()) {
      set_auth_protocol(from.auth_protocol());
    }
    if (from.has_challenge_number()) {
      set_challenge_number(from.challenge_number());
    }
    if (from.has_reservation_cookie()) {
      set_reservation_cookie(from.reservation_cookie());
    }
    if (from.has_low_violence()) {
      set_low_violence(from.low_violence());
    }
    if (from.has_encrypted_password()) {
      set_encrypted_password(from.encrypted_password());
    }
    if (from.has_auth_steam()) {
      set_auth_steam(from.auth_steam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_challenge_context()) {
      set_challenge_context(from.challenge_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_CONNECT_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CONNECT_Message::CopyFrom(const C2S_CONNECT_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CONNECT_Message::IsInitialized() const {

  return true;
}

void C2S_CONNECT_Message::Swap(C2S_CONNECT_Message* other) {
  if (other != this) {
    std::swap(host_version_, other->host_version_);
    std::swap(auth_protocol_, other->auth_protocol_);
    std::swap(challenge_number_, other->challenge_number_);
    std::swap(reservation_cookie_, other->reservation_cookie_);
    std::swap(low_violence_, other->low_violence_);
    std::swap(encrypted_password_, other->encrypted_password_);
    splitplayers_.Swap(&other->splitplayers_);
    std::swap(auth_steam_, other->auth_steam_);
    std::swap(challenge_context_, other->challenge_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_CONNECT_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_CONNECT_Message_descriptor_;
  metadata.reflection = C2S_CONNECT_Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_CONNECTION_Message::kAddonNameFieldNumber;
#endif  // !_MSC_VER

C2S_CONNECTION_Message::C2S_CONNECTION_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:C2S_CONNECTION_Message)
}

void C2S_CONNECTION_Message::InitAsDefaultInstance() {
}

C2S_CONNECTION_Message::C2S_CONNECTION_Message(const C2S_CONNECTION_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:C2S_CONNECTION_Message)
}

void C2S_CONNECTION_Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addon_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_CONNECTION_Message::~C2S_CONNECTION_Message() {
  // @@protoc_insertion_point(destructor:C2S_CONNECTION_Message)
  SharedDtor();
}

void C2S_CONNECTION_Message::SharedDtor() {
  if (addon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addon_name_;
  }
  if (this != default_instance_) {
  }
}

void C2S_CONNECTION_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_CONNECTION_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_CONNECTION_Message_descriptor_;
}

const C2S_CONNECTION_Message& C2S_CONNECTION_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
  return *default_instance_;
}

C2S_CONNECTION_Message* C2S_CONNECTION_Message::default_instance_ = NULL;

C2S_CONNECTION_Message* C2S_CONNECTION_Message::New() const {
  return new C2S_CONNECTION_Message;
}

void C2S_CONNECTION_Message::Clear() {
  if (has_addon_name()) {
    if (addon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      addon_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_CONNECTION_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:C2S_CONNECTION_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addon_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addon_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addon_name().data(), this->addon_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addon_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:C2S_CONNECTION_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:C2S_CONNECTION_Message)
  return false;
#undef DO_
}

void C2S_CONNECTION_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:C2S_CONNECTION_Message)
  // optional string addon_name = 1;
  if (has_addon_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addon_name().data(), this->addon_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addon_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addon_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:C2S_CONNECTION_Message)
}

::google::protobuf::uint8* C2S_CONNECTION_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S_CONNECTION_Message)
  // optional string addon_name = 1;
  if (has_addon_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addon_name().data(), this->addon_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addon_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addon_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S_CONNECTION_Message)
  return target;
}

int C2S_CONNECTION_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string addon_name = 1;
    if (has_addon_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addon_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_CONNECTION_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_CONNECTION_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_CONNECTION_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_CONNECTION_Message::MergeFrom(const C2S_CONNECTION_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addon_name()) {
      set_addon_name(from.addon_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_CONNECTION_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CONNECTION_Message::CopyFrom(const C2S_CONNECTION_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CONNECTION_Message::IsInitialized() const {

  return true;
}

void C2S_CONNECTION_Message::Swap(C2S_CONNECTION_Message* other) {
  if (other != this) {
    std::swap(addon_name_, other->addon_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_CONNECTION_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_CONNECTION_Message_descriptor_;
  metadata.reflection = C2S_CONNECTION_Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
