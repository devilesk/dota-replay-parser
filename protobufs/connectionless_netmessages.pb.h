// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectionless_netmessages.proto

#ifndef PROTOBUF_connectionless_5fnetmessages_2eproto__INCLUDED
#define PROTOBUF_connectionless_5fnetmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "netmessages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
void protobuf_AssignDesc_connectionless_5fnetmessages_2eproto();
void protobuf_ShutdownFile_connectionless_5fnetmessages_2eproto();

class C2S_CONNECT_Message;
class C2S_CONNECTION_Message;

// ===================================================================

class C2S_CONNECT_Message : public ::google::protobuf::Message {
 public:
  C2S_CONNECT_Message();
  virtual ~C2S_CONNECT_Message();

  C2S_CONNECT_Message(const C2S_CONNECT_Message& from);

  inline C2S_CONNECT_Message& operator=(const C2S_CONNECT_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_CONNECT_Message& default_instance();

  void Swap(C2S_CONNECT_Message* other);

  // implements Message ----------------------------------------------

  C2S_CONNECT_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_CONNECT_Message& from);
  void MergeFrom(const C2S_CONNECT_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 host_version = 1;
  inline bool has_host_version() const;
  inline void clear_host_version();
  static const int kHostVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 host_version() const;
  inline void set_host_version(::google::protobuf::uint32 value);

  // optional uint32 auth_protocol = 2;
  inline bool has_auth_protocol() const;
  inline void clear_auth_protocol();
  static const int kAuthProtocolFieldNumber = 2;
  inline ::google::protobuf::uint32 auth_protocol() const;
  inline void set_auth_protocol(::google::protobuf::uint32 value);

  // optional uint32 challenge_number = 3;
  inline bool has_challenge_number() const;
  inline void clear_challenge_number();
  static const int kChallengeNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 challenge_number() const;
  inline void set_challenge_number(::google::protobuf::uint32 value);

  // optional fixed64 reservation_cookie = 4;
  inline bool has_reservation_cookie() const;
  inline void clear_reservation_cookie();
  static const int kReservationCookieFieldNumber = 4;
  inline ::google::protobuf::uint64 reservation_cookie() const;
  inline void set_reservation_cookie(::google::protobuf::uint64 value);

  // optional bool low_violence = 5;
  inline bool has_low_violence() const;
  inline void clear_low_violence();
  static const int kLowViolenceFieldNumber = 5;
  inline bool low_violence() const;
  inline void set_low_violence(bool value);

  // optional bytes encrypted_password = 6;
  inline bool has_encrypted_password() const;
  inline void clear_encrypted_password();
  static const int kEncryptedPasswordFieldNumber = 6;
  inline const ::std::string& encrypted_password() const;
  inline void set_encrypted_password(const ::std::string& value);
  inline void set_encrypted_password(const char* value);
  inline void set_encrypted_password(const void* value, size_t size);
  inline ::std::string* mutable_encrypted_password();
  inline ::std::string* release_encrypted_password();
  inline void set_allocated_encrypted_password(::std::string* encrypted_password);

  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  inline int splitplayers_size() const;
  inline void clear_splitplayers();
  static const int kSplitplayersFieldNumber = 7;
  inline const ::CCLCMsg_SplitPlayerConnect& splitplayers(int index) const;
  inline ::CCLCMsg_SplitPlayerConnect* mutable_splitplayers(int index);
  inline ::CCLCMsg_SplitPlayerConnect* add_splitplayers();
  inline const ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >&
      splitplayers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >*
      mutable_splitplayers();

  // optional bytes auth_steam = 8;
  inline bool has_auth_steam() const;
  inline void clear_auth_steam();
  static const int kAuthSteamFieldNumber = 8;
  inline const ::std::string& auth_steam() const;
  inline void set_auth_steam(const ::std::string& value);
  inline void set_auth_steam(const char* value);
  inline void set_auth_steam(const void* value, size_t size);
  inline ::std::string* mutable_auth_steam();
  inline ::std::string* release_auth_steam();
  inline void set_allocated_auth_steam(::std::string* auth_steam);

  // optional string challenge_context = 9;
  inline bool has_challenge_context() const;
  inline void clear_challenge_context();
  static const int kChallengeContextFieldNumber = 9;
  inline const ::std::string& challenge_context() const;
  inline void set_challenge_context(const ::std::string& value);
  inline void set_challenge_context(const char* value);
  inline void set_challenge_context(const char* value, size_t size);
  inline ::std::string* mutable_challenge_context();
  inline ::std::string* release_challenge_context();
  inline void set_allocated_challenge_context(::std::string* challenge_context);

  // @@protoc_insertion_point(class_scope:C2S_CONNECT_Message)
 private:
  inline void set_has_host_version();
  inline void clear_has_host_version();
  inline void set_has_auth_protocol();
  inline void clear_has_auth_protocol();
  inline void set_has_challenge_number();
  inline void clear_has_challenge_number();
  inline void set_has_reservation_cookie();
  inline void clear_has_reservation_cookie();
  inline void set_has_low_violence();
  inline void clear_has_low_violence();
  inline void set_has_encrypted_password();
  inline void clear_has_encrypted_password();
  inline void set_has_auth_steam();
  inline void clear_has_auth_steam();
  inline void set_has_challenge_context();
  inline void clear_has_challenge_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 host_version_;
  ::google::protobuf::uint32 auth_protocol_;
  ::google::protobuf::uint64 reservation_cookie_;
  ::google::protobuf::uint32 challenge_number_;
  bool low_violence_;
  ::std::string* encrypted_password_;
  ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect > splitplayers_;
  ::std::string* auth_steam_;
  ::std::string* challenge_context_;
  friend void  protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
  friend void protobuf_AssignDesc_connectionless_5fnetmessages_2eproto();
  friend void protobuf_ShutdownFile_connectionless_5fnetmessages_2eproto();

  void InitAsDefaultInstance();
  static C2S_CONNECT_Message* default_instance_;
};
// -------------------------------------------------------------------

class C2S_CONNECTION_Message : public ::google::protobuf::Message {
 public:
  C2S_CONNECTION_Message();
  virtual ~C2S_CONNECTION_Message();

  C2S_CONNECTION_Message(const C2S_CONNECTION_Message& from);

  inline C2S_CONNECTION_Message& operator=(const C2S_CONNECTION_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_CONNECTION_Message& default_instance();

  void Swap(C2S_CONNECTION_Message* other);

  // implements Message ----------------------------------------------

  C2S_CONNECTION_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_CONNECTION_Message& from);
  void MergeFrom(const C2S_CONNECTION_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string addon_name = 1;
  inline bool has_addon_name() const;
  inline void clear_addon_name();
  static const int kAddonNameFieldNumber = 1;
  inline const ::std::string& addon_name() const;
  inline void set_addon_name(const ::std::string& value);
  inline void set_addon_name(const char* value);
  inline void set_addon_name(const char* value, size_t size);
  inline ::std::string* mutable_addon_name();
  inline ::std::string* release_addon_name();
  inline void set_allocated_addon_name(::std::string* addon_name);

  // @@protoc_insertion_point(class_scope:C2S_CONNECTION_Message)
 private:
  inline void set_has_addon_name();
  inline void clear_has_addon_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* addon_name_;
  friend void  protobuf_AddDesc_connectionless_5fnetmessages_2eproto();
  friend void protobuf_AssignDesc_connectionless_5fnetmessages_2eproto();
  friend void protobuf_ShutdownFile_connectionless_5fnetmessages_2eproto();

  void InitAsDefaultInstance();
  static C2S_CONNECTION_Message* default_instance_;
};
// ===================================================================


// ===================================================================

// C2S_CONNECT_Message

// optional uint32 host_version = 1;
inline bool C2S_CONNECT_Message::has_host_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_CONNECT_Message::set_has_host_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_CONNECT_Message::clear_has_host_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_CONNECT_Message::clear_host_version() {
  host_version_ = 0u;
  clear_has_host_version();
}
inline ::google::protobuf::uint32 C2S_CONNECT_Message::host_version() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.host_version)
  return host_version_;
}
inline void C2S_CONNECT_Message::set_host_version(::google::protobuf::uint32 value) {
  set_has_host_version();
  host_version_ = value;
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.host_version)
}

// optional uint32 auth_protocol = 2;
inline bool C2S_CONNECT_Message::has_auth_protocol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_CONNECT_Message::set_has_auth_protocol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_CONNECT_Message::clear_has_auth_protocol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_CONNECT_Message::clear_auth_protocol() {
  auth_protocol_ = 0u;
  clear_has_auth_protocol();
}
inline ::google::protobuf::uint32 C2S_CONNECT_Message::auth_protocol() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.auth_protocol)
  return auth_protocol_;
}
inline void C2S_CONNECT_Message::set_auth_protocol(::google::protobuf::uint32 value) {
  set_has_auth_protocol();
  auth_protocol_ = value;
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.auth_protocol)
}

// optional uint32 challenge_number = 3;
inline bool C2S_CONNECT_Message::has_challenge_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S_CONNECT_Message::set_has_challenge_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S_CONNECT_Message::clear_has_challenge_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2S_CONNECT_Message::clear_challenge_number() {
  challenge_number_ = 0u;
  clear_has_challenge_number();
}
inline ::google::protobuf::uint32 C2S_CONNECT_Message::challenge_number() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.challenge_number)
  return challenge_number_;
}
inline void C2S_CONNECT_Message::set_challenge_number(::google::protobuf::uint32 value) {
  set_has_challenge_number();
  challenge_number_ = value;
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.challenge_number)
}

// optional fixed64 reservation_cookie = 4;
inline bool C2S_CONNECT_Message::has_reservation_cookie() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2S_CONNECT_Message::set_has_reservation_cookie() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2S_CONNECT_Message::clear_has_reservation_cookie() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2S_CONNECT_Message::clear_reservation_cookie() {
  reservation_cookie_ = GOOGLE_ULONGLONG(0);
  clear_has_reservation_cookie();
}
inline ::google::protobuf::uint64 C2S_CONNECT_Message::reservation_cookie() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.reservation_cookie)
  return reservation_cookie_;
}
inline void C2S_CONNECT_Message::set_reservation_cookie(::google::protobuf::uint64 value) {
  set_has_reservation_cookie();
  reservation_cookie_ = value;
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.reservation_cookie)
}

// optional bool low_violence = 5;
inline bool C2S_CONNECT_Message::has_low_violence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void C2S_CONNECT_Message::set_has_low_violence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void C2S_CONNECT_Message::clear_has_low_violence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void C2S_CONNECT_Message::clear_low_violence() {
  low_violence_ = false;
  clear_has_low_violence();
}
inline bool C2S_CONNECT_Message::low_violence() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.low_violence)
  return low_violence_;
}
inline void C2S_CONNECT_Message::set_low_violence(bool value) {
  set_has_low_violence();
  low_violence_ = value;
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.low_violence)
}

// optional bytes encrypted_password = 6;
inline bool C2S_CONNECT_Message::has_encrypted_password() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void C2S_CONNECT_Message::set_has_encrypted_password() {
  _has_bits_[0] |= 0x00000020u;
}
inline void C2S_CONNECT_Message::clear_has_encrypted_password() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void C2S_CONNECT_Message::clear_encrypted_password() {
  if (encrypted_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_password_->clear();
  }
  clear_has_encrypted_password();
}
inline const ::std::string& C2S_CONNECT_Message::encrypted_password() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.encrypted_password)
  return *encrypted_password_;
}
inline void C2S_CONNECT_Message::set_encrypted_password(const ::std::string& value) {
  set_has_encrypted_password();
  if (encrypted_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_password_ = new ::std::string;
  }
  encrypted_password_->assign(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.encrypted_password)
}
inline void C2S_CONNECT_Message::set_encrypted_password(const char* value) {
  set_has_encrypted_password();
  if (encrypted_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_password_ = new ::std::string;
  }
  encrypted_password_->assign(value);
  // @@protoc_insertion_point(field_set_char:C2S_CONNECT_Message.encrypted_password)
}
inline void C2S_CONNECT_Message::set_encrypted_password(const void* value, size_t size) {
  set_has_encrypted_password();
  if (encrypted_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_password_ = new ::std::string;
  }
  encrypted_password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECT_Message.encrypted_password)
}
inline ::std::string* C2S_CONNECT_Message::mutable_encrypted_password() {
  set_has_encrypted_password();
  if (encrypted_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypted_password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.encrypted_password)
  return encrypted_password_;
}
inline ::std::string* C2S_CONNECT_Message::release_encrypted_password() {
  clear_has_encrypted_password();
  if (encrypted_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_password_;
    encrypted_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_CONNECT_Message::set_allocated_encrypted_password(::std::string* encrypted_password) {
  if (encrypted_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypted_password_;
  }
  if (encrypted_password) {
    set_has_encrypted_password();
    encrypted_password_ = encrypted_password;
  } else {
    clear_has_encrypted_password();
    encrypted_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.encrypted_password)
}

// repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
inline int C2S_CONNECT_Message::splitplayers_size() const {
  return splitplayers_.size();
}
inline void C2S_CONNECT_Message::clear_splitplayers() {
  splitplayers_.Clear();
}
inline const ::CCLCMsg_SplitPlayerConnect& C2S_CONNECT_Message::splitplayers(int index) const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.splitplayers)
  return splitplayers_.Get(index);
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::mutable_splitplayers(int index) {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.splitplayers)
  return splitplayers_.Mutable(index);
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::add_splitplayers() {
  // @@protoc_insertion_point(field_add:C2S_CONNECT_Message.splitplayers)
  return splitplayers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >&
C2S_CONNECT_Message::splitplayers() const {
  // @@protoc_insertion_point(field_list:C2S_CONNECT_Message.splitplayers)
  return splitplayers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >*
C2S_CONNECT_Message::mutable_splitplayers() {
  // @@protoc_insertion_point(field_mutable_list:C2S_CONNECT_Message.splitplayers)
  return &splitplayers_;
}

// optional bytes auth_steam = 8;
inline bool C2S_CONNECT_Message::has_auth_steam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void C2S_CONNECT_Message::set_has_auth_steam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void C2S_CONNECT_Message::clear_has_auth_steam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void C2S_CONNECT_Message::clear_auth_steam() {
  if (auth_steam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_steam_->clear();
  }
  clear_has_auth_steam();
}
inline const ::std::string& C2S_CONNECT_Message::auth_steam() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.auth_steam)
  return *auth_steam_;
}
inline void C2S_CONNECT_Message::set_auth_steam(const ::std::string& value) {
  set_has_auth_steam();
  if (auth_steam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_steam_ = new ::std::string;
  }
  auth_steam_->assign(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.auth_steam)
}
inline void C2S_CONNECT_Message::set_auth_steam(const char* value) {
  set_has_auth_steam();
  if (auth_steam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_steam_ = new ::std::string;
  }
  auth_steam_->assign(value);
  // @@protoc_insertion_point(field_set_char:C2S_CONNECT_Message.auth_steam)
}
inline void C2S_CONNECT_Message::set_auth_steam(const void* value, size_t size) {
  set_has_auth_steam();
  if (auth_steam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_steam_ = new ::std::string;
  }
  auth_steam_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECT_Message.auth_steam)
}
inline ::std::string* C2S_CONNECT_Message::mutable_auth_steam() {
  set_has_auth_steam();
  if (auth_steam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    auth_steam_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.auth_steam)
  return auth_steam_;
}
inline ::std::string* C2S_CONNECT_Message::release_auth_steam() {
  clear_has_auth_steam();
  if (auth_steam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = auth_steam_;
    auth_steam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_CONNECT_Message::set_allocated_auth_steam(::std::string* auth_steam) {
  if (auth_steam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_steam_;
  }
  if (auth_steam) {
    set_has_auth_steam();
    auth_steam_ = auth_steam;
  } else {
    clear_has_auth_steam();
    auth_steam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.auth_steam)
}

// optional string challenge_context = 9;
inline bool C2S_CONNECT_Message::has_challenge_context() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void C2S_CONNECT_Message::set_has_challenge_context() {
  _has_bits_[0] |= 0x00000100u;
}
inline void C2S_CONNECT_Message::clear_has_challenge_context() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void C2S_CONNECT_Message::clear_challenge_context() {
  if (challenge_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenge_context_->clear();
  }
  clear_has_challenge_context();
}
inline const ::std::string& C2S_CONNECT_Message::challenge_context() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.challenge_context)
  return *challenge_context_;
}
inline void C2S_CONNECT_Message::set_challenge_context(const ::std::string& value) {
  set_has_challenge_context();
  if (challenge_context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenge_context_ = new ::std::string;
  }
  challenge_context_->assign(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.challenge_context)
}
inline void C2S_CONNECT_Message::set_challenge_context(const char* value) {
  set_has_challenge_context();
  if (challenge_context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenge_context_ = new ::std::string;
  }
  challenge_context_->assign(value);
  // @@protoc_insertion_point(field_set_char:C2S_CONNECT_Message.challenge_context)
}
inline void C2S_CONNECT_Message::set_challenge_context(const char* value, size_t size) {
  set_has_challenge_context();
  if (challenge_context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenge_context_ = new ::std::string;
  }
  challenge_context_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECT_Message.challenge_context)
}
inline ::std::string* C2S_CONNECT_Message::mutable_challenge_context() {
  set_has_challenge_context();
  if (challenge_context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenge_context_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.challenge_context)
  return challenge_context_;
}
inline ::std::string* C2S_CONNECT_Message::release_challenge_context() {
  clear_has_challenge_context();
  if (challenge_context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = challenge_context_;
    challenge_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_CONNECT_Message::set_allocated_challenge_context(::std::string* challenge_context) {
  if (challenge_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenge_context_;
  }
  if (challenge_context) {
    set_has_challenge_context();
    challenge_context_ = challenge_context;
  } else {
    clear_has_challenge_context();
    challenge_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.challenge_context)
}

// -------------------------------------------------------------------

// C2S_CONNECTION_Message

// optional string addon_name = 1;
inline bool C2S_CONNECTION_Message::has_addon_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_CONNECTION_Message::set_has_addon_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_CONNECTION_Message::clear_has_addon_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_CONNECTION_Message::clear_addon_name() {
  if (addon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addon_name_->clear();
  }
  clear_has_addon_name();
}
inline const ::std::string& C2S_CONNECTION_Message::addon_name() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECTION_Message.addon_name)
  return *addon_name_;
}
inline void C2S_CONNECTION_Message::set_addon_name(const ::std::string& value) {
  set_has_addon_name();
  if (addon_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addon_name_ = new ::std::string;
  }
  addon_name_->assign(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECTION_Message.addon_name)
}
inline void C2S_CONNECTION_Message::set_addon_name(const char* value) {
  set_has_addon_name();
  if (addon_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addon_name_ = new ::std::string;
  }
  addon_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:C2S_CONNECTION_Message.addon_name)
}
inline void C2S_CONNECTION_Message::set_addon_name(const char* value, size_t size) {
  set_has_addon_name();
  if (addon_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addon_name_ = new ::std::string;
  }
  addon_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECTION_Message.addon_name)
}
inline ::std::string* C2S_CONNECTION_Message::mutable_addon_name() {
  set_has_addon_name();
  if (addon_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addon_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:C2S_CONNECTION_Message.addon_name)
  return addon_name_;
}
inline ::std::string* C2S_CONNECTION_Message::release_addon_name() {
  clear_has_addon_name();
  if (addon_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addon_name_;
    addon_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_CONNECTION_Message::set_allocated_addon_name(::std::string* addon_name) {
  if (addon_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addon_name_;
  }
  if (addon_name) {
    set_has_addon_name();
    addon_name_ = addon_name;
  } else {
    clear_has_addon_name();
    addon_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECTION_Message.addon_name)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_connectionless_5fnetmessages_2eproto__INCLUDED
