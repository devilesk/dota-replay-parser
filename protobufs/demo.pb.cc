// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDemoFileHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoFileHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_CDotaGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CHeroSelectEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_CDotaGameInfo_CHeroSelectEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoFullPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoFullPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoSaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoSaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoSyncTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoSyncTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoConsoleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoConsoleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoSendTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoSendTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoClassInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoClassInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoClassInfo_class_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoClassInfo_class_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoCustomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoCustomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoCustomDataCallbacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoCustomDataCallbacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStringTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStringTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStringTables_items_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStringTables_items_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStringTables_table_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStringTables_table_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoSpawnGroups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoSpawnGroups_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_demo_2eproto() {
  protobuf_AddDesc_demo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "demo.proto");
  GOOGLE_CHECK(file != NULL);
  CDemoFileHeader_descriptor_ = file->message_type(0);
  static const int CDemoFileHeader_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, demo_file_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, network_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, game_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, fullpackets_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, allow_clientside_entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, allow_clientside_particles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, addons_),
  };
  CDemoFileHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoFileHeader_descriptor_,
      CDemoFileHeader::default_instance_,
      CDemoFileHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoFileHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, _internal_metadata_),
      -1);
  CGameInfo_descriptor_ = file->message_type(1);
  static const int CGameInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, dota_),
  };
  CGameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGameInfo_descriptor_,
      CGameInfo::default_instance_,
      CGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, _internal_metadata_),
      -1);
  CGameInfo_CDotaGameInfo_descriptor_ = CGameInfo_descriptor_->nested_type(0);
  static const int CGameInfo_CDotaGameInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, game_winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, picks_bans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, radiant_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, dire_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, radiant_team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, dire_team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, end_time_),
  };
  CGameInfo_CDotaGameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGameInfo_CDotaGameInfo_descriptor_,
      CGameInfo_CDotaGameInfo::default_instance_,
      CGameInfo_CDotaGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGameInfo_CDotaGameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, _internal_metadata_),
      -1);
  CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_ = CGameInfo_CDotaGameInfo_descriptor_->nested_type(0);
  static const int CGameInfo_CDotaGameInfo_CPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, is_fake_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, game_team_),
  };
  CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_,
      CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_,
      CGameInfo_CDotaGameInfo_CPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGameInfo_CDotaGameInfo_CPlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, _internal_metadata_),
      -1);
  CGameInfo_CDotaGameInfo_CHeroSelectEvent_descriptor_ = CGameInfo_CDotaGameInfo_descriptor_->nested_type(1);
  static const int CGameInfo_CDotaGameInfo_CHeroSelectEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, is_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, hero_id_),
  };
  CGameInfo_CDotaGameInfo_CHeroSelectEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGameInfo_CDotaGameInfo_CHeroSelectEvent_descriptor_,
      CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance_,
      CGameInfo_CDotaGameInfo_CHeroSelectEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGameInfo_CDotaGameInfo_CHeroSelectEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CHeroSelectEvent, _internal_metadata_),
      -1);
  CDemoFileInfo_descriptor_ = file->message_type(2);
  static const int CDemoFileInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, game_info_),
  };
  CDemoFileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoFileInfo_descriptor_,
      CDemoFileInfo::default_instance_,
      CDemoFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoFileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, _internal_metadata_),
      -1);
  CDemoPacket_descriptor_ = file->message_type(3);
  static const int CDemoPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, sequence_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, sequence_out_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, data_),
  };
  CDemoPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoPacket_descriptor_,
      CDemoPacket::default_instance_,
      CDemoPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, _internal_metadata_),
      -1);
  CDemoFullPacket_descriptor_ = file->message_type(4);
  static const int CDemoFullPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, string_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, packet_),
  };
  CDemoFullPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoFullPacket_descriptor_,
      CDemoFullPacket::default_instance_,
      CDemoFullPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoFullPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, _internal_metadata_),
      -1);
  CDemoSaveGame_descriptor_ = file->message_type(5);
  static const int CDemoSaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, version_),
  };
  CDemoSaveGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoSaveGame_descriptor_,
      CDemoSaveGame::default_instance_,
      CDemoSaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoSaveGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSaveGame, _internal_metadata_),
      -1);
  CDemoSyncTick_descriptor_ = file->message_type(6);
  static const int CDemoSyncTick_offsets_[1] = {
  };
  CDemoSyncTick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoSyncTick_descriptor_,
      CDemoSyncTick::default_instance_,
      CDemoSyncTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSyncTick, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoSyncTick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSyncTick, _internal_metadata_),
      -1);
  CDemoConsoleCmd_descriptor_ = file->message_type(7);
  static const int CDemoConsoleCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, cmdstring_),
  };
  CDemoConsoleCmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoConsoleCmd_descriptor_,
      CDemoConsoleCmd::default_instance_,
      CDemoConsoleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoConsoleCmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, _internal_metadata_),
      -1);
  CDemoSendTables_descriptor_ = file->message_type(8);
  static const int CDemoSendTables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, data_),
  };
  CDemoSendTables_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoSendTables_descriptor_,
      CDemoSendTables::default_instance_,
      CDemoSendTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoSendTables),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, _internal_metadata_),
      -1);
  CDemoClassInfo_descriptor_ = file->message_type(9);
  static const int CDemoClassInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, classes_),
  };
  CDemoClassInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoClassInfo_descriptor_,
      CDemoClassInfo::default_instance_,
      CDemoClassInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoClassInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, _internal_metadata_),
      -1);
  CDemoClassInfo_class_t_descriptor_ = CDemoClassInfo_descriptor_->nested_type(0);
  static const int CDemoClassInfo_class_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, network_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, table_name_),
  };
  CDemoClassInfo_class_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoClassInfo_class_t_descriptor_,
      CDemoClassInfo_class_t::default_instance_,
      CDemoClassInfo_class_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoClassInfo_class_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, _internal_metadata_),
      -1);
  CDemoCustomData_descriptor_ = file->message_type(10);
  static const int CDemoCustomData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, callback_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, data_),
  };
  CDemoCustomData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoCustomData_descriptor_,
      CDemoCustomData::default_instance_,
      CDemoCustomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoCustomData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, _internal_metadata_),
      -1);
  CDemoCustomDataCallbacks_descriptor_ = file->message_type(11);
  static const int CDemoCustomDataCallbacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, save_id_),
  };
  CDemoCustomDataCallbacks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoCustomDataCallbacks_descriptor_,
      CDemoCustomDataCallbacks::default_instance_,
      CDemoCustomDataCallbacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoCustomDataCallbacks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, _internal_metadata_),
      -1);
  CDemoStringTables_descriptor_ = file->message_type(12);
  static const int CDemoStringTables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, tables_),
  };
  CDemoStringTables_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoStringTables_descriptor_,
      CDemoStringTables::default_instance_,
      CDemoStringTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoStringTables),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, _internal_metadata_),
      -1);
  CDemoStringTables_items_t_descriptor_ = CDemoStringTables_descriptor_->nested_type(0);
  static const int CDemoStringTables_items_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, data_),
  };
  CDemoStringTables_items_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoStringTables_items_t_descriptor_,
      CDemoStringTables_items_t::default_instance_,
      CDemoStringTables_items_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoStringTables_items_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, _internal_metadata_),
      -1);
  CDemoStringTables_table_t_descriptor_ = CDemoStringTables_descriptor_->nested_type(1);
  static const int CDemoStringTables_table_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, items_clientside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, table_flags_),
  };
  CDemoStringTables_table_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoStringTables_table_t_descriptor_,
      CDemoStringTables_table_t::default_instance_,
      CDemoStringTables_table_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoStringTables_table_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, _internal_metadata_),
      -1);
  CDemoStop_descriptor_ = file->message_type(13);
  static const int CDemoStop_offsets_[1] = {
  };
  CDemoStop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoStop_descriptor_,
      CDemoStop::default_instance_,
      CDemoStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStop, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoStop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStop, _internal_metadata_),
      -1);
  CDemoUserCmd_descriptor_ = file->message_type(14);
  static const int CDemoUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, cmd_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, data_),
  };
  CDemoUserCmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoUserCmd_descriptor_,
      CDemoUserCmd::default_instance_,
      CDemoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoUserCmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, _internal_metadata_),
      -1);
  CDemoSpawnGroups_descriptor_ = file->message_type(15);
  static const int CDemoSpawnGroups_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSpawnGroups, msgs_),
  };
  CDemoSpawnGroups_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDemoSpawnGroups_descriptor_,
      CDemoSpawnGroups::default_instance_,
      CDemoSpawnGroups_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSpawnGroups, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDemoSpawnGroups),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSpawnGroups, _internal_metadata_),
      -1);
  EDemoCommands_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_demo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoFileHeader_descriptor_, &CDemoFileHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGameInfo_descriptor_, &CGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGameInfo_CDotaGameInfo_descriptor_, &CGameInfo_CDotaGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_, &CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGameInfo_CDotaGameInfo_CHeroSelectEvent_descriptor_, &CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoFileInfo_descriptor_, &CDemoFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoPacket_descriptor_, &CDemoPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoFullPacket_descriptor_, &CDemoFullPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoSaveGame_descriptor_, &CDemoSaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoSyncTick_descriptor_, &CDemoSyncTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoConsoleCmd_descriptor_, &CDemoConsoleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoSendTables_descriptor_, &CDemoSendTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoClassInfo_descriptor_, &CDemoClassInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoClassInfo_class_t_descriptor_, &CDemoClassInfo_class_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoCustomData_descriptor_, &CDemoCustomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoCustomDataCallbacks_descriptor_, &CDemoCustomDataCallbacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoStringTables_descriptor_, &CDemoStringTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoStringTables_items_t_descriptor_, &CDemoStringTables_items_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoStringTables_table_t_descriptor_, &CDemoStringTables_table_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoStop_descriptor_, &CDemoStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoUserCmd_descriptor_, &CDemoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDemoSpawnGroups_descriptor_, &CDemoSpawnGroups::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_demo_2eproto() {
  delete CDemoFileHeader::default_instance_;
  delete CDemoFileHeader_reflection_;
  delete CGameInfo::default_instance_;
  delete CGameInfo_reflection_;
  delete CGameInfo_CDotaGameInfo::default_instance_;
  delete CGameInfo_CDotaGameInfo_reflection_;
  delete CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_;
  delete CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_;
  delete CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance_;
  delete CGameInfo_CDotaGameInfo_CHeroSelectEvent_reflection_;
  delete CDemoFileInfo::default_instance_;
  delete CDemoFileInfo_reflection_;
  delete CDemoPacket::default_instance_;
  delete CDemoPacket_reflection_;
  delete CDemoFullPacket::default_instance_;
  delete CDemoFullPacket_reflection_;
  delete CDemoSaveGame::default_instance_;
  delete CDemoSaveGame_reflection_;
  delete CDemoSyncTick::default_instance_;
  delete CDemoSyncTick_reflection_;
  delete CDemoConsoleCmd::default_instance_;
  delete CDemoConsoleCmd_reflection_;
  delete CDemoSendTables::default_instance_;
  delete CDemoSendTables_reflection_;
  delete CDemoClassInfo::default_instance_;
  delete CDemoClassInfo_reflection_;
  delete CDemoClassInfo_class_t::default_instance_;
  delete CDemoClassInfo_class_t_reflection_;
  delete CDemoCustomData::default_instance_;
  delete CDemoCustomData_reflection_;
  delete CDemoCustomDataCallbacks::default_instance_;
  delete CDemoCustomDataCallbacks_reflection_;
  delete CDemoStringTables::default_instance_;
  delete CDemoStringTables_reflection_;
  delete CDemoStringTables_items_t::default_instance_;
  delete CDemoStringTables_items_t_reflection_;
  delete CDemoStringTables_table_t::default_instance_;
  delete CDemoStringTables_table_t_reflection_;
  delete CDemoStop::default_instance_;
  delete CDemoStop_reflection_;
  delete CDemoUserCmd::default_instance_;
  delete CDemoUserCmd_reflection_;
  delete CDemoSpawnGroups::default_instance_;
  delete CDemoSpawnGroups_reflection_;
}

void protobuf_AddDesc_demo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndemo.proto\"\214\002\n\017CDemoFileHeader\022\027\n\017demo"
    "_file_stamp\030\001 \002(\t\022\030\n\020network_protocol\030\002 "
    "\001(\005\022\023\n\013server_name\030\003 \001(\t\022\023\n\013client_name\030"
    "\004 \001(\t\022\020\n\010map_name\030\005 \001(\t\022\026\n\016game_director"
    "y\030\006 \001(\t\022\033\n\023fullpackets_version\030\007 \001(\005\022!\n\031"
    "allow_clientside_entities\030\010 \001(\010\022\"\n\032allow"
    "_clientside_particles\030\t \001(\010\022\016\n\006addons\030\n "
    "\001(\t\"\264\004\n\tCGameInfo\022&\n\004dota\030\004 \001(\0132\030.CGameI"
    "nfo.CDotaGameInfo\032\376\003\n\rCDotaGameInfo\022\020\n\010m"
    "atch_id\030\001 \001(\r\022\021\n\tgame_mode\030\002 \001(\005\022\023\n\013game"
    "_winner\030\003 \001(\005\0229\n\013player_info\030\004 \003(\0132$.CGa"
    "meInfo.CDotaGameInfo.CPlayerInfo\022\020\n\010leag"
    "ueid\030\005 \001(\r\022=\n\npicks_bans\030\006 \003(\0132).CGameIn"
    "fo.CDotaGameInfo.CHeroSelectEvent\022\027\n\017rad"
    "iant_team_id\030\007 \001(\r\022\024\n\014dire_team_id\030\010 \001(\r"
    "\022\030\n\020radiant_team_tag\030\t \001(\t\022\025\n\rdire_team_"
    "tag\030\n \001(\t\022\020\n\010end_time\030\013 \001(\r\032q\n\013CPlayerIn"
    "fo\022\021\n\thero_name\030\001 \001(\t\022\023\n\013player_name\030\002 \001"
    "(\t\022\026\n\016is_fake_client\030\003 \001(\010\022\017\n\007steamid\030\004 "
    "\001(\004\022\021\n\tgame_team\030\005 \001(\005\032B\n\020CHeroSelectEve"
    "nt\022\017\n\007is_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017\n\007her"
    "o_id\030\003 \001(\r\"v\n\rCDemoFileInfo\022\025\n\rplayback_"
    "time\030\001 \001(\002\022\026\n\016playback_ticks\030\002 \001(\005\022\027\n\017pl"
    "ayback_frames\030\003 \001(\005\022\035\n\tgame_info\030\004 \001(\0132\n"
    ".CGameInfo\"J\n\013CDemoPacket\022\023\n\013sequence_in"
    "\030\001 \001(\005\022\030\n\020sequence_out_ack\030\002 \001(\005\022\014\n\004data"
    "\030\003 \001(\014\"Y\n\017CDemoFullPacket\022(\n\014string_tabl"
    "e\030\001 \001(\0132\022.CDemoStringTables\022\034\n\006packet\030\002 "
    "\001(\0132\014.CDemoPacket\"S\n\rCDemoSaveGame\022\014\n\004da"
    "ta\030\001 \001(\014\022\020\n\010steam_id\030\002 \001(\006\022\021\n\tsignature\030"
    "\003 \001(\006\022\017\n\007version\030\004 \001(\005\"\017\n\rCDemoSyncTick\""
    "$\n\017CDemoConsoleCmd\022\021\n\tcmdstring\030\001 \001(\t\"\037\n"
    "\017CDemoSendTables\022\014\n\004data\030\001 \001(\014\"\201\001\n\016CDemo"
    "ClassInfo\022(\n\007classes\030\001 \003(\0132\027.CDemoClassI"
    "nfo.class_t\032E\n\007class_t\022\020\n\010class_id\030\001 \001(\005"
    "\022\024\n\014network_name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001"
    "(\t\"7\n\017CDemoCustomData\022\026\n\016callback_index\030"
    "\001 \001(\005\022\014\n\004data\030\002 \001(\014\"+\n\030CDemoCustomDataCa"
    "llbacks\022\017\n\007save_id\030\001 \003(\t\"\373\001\n\021CDemoString"
    "Tables\022*\n\006tables\030\001 \003(\0132\032.CDemoStringTabl"
    "es.table_t\032$\n\007items_t\022\013\n\003str\030\001 \001(\t\022\014\n\004da"
    "ta\030\002 \001(\014\032\223\001\n\007table_t\022\022\n\ntable_name\030\001 \001(\t"
    "\022)\n\005items\030\002 \003(\0132\032.CDemoStringTables.item"
    "s_t\0224\n\020items_clientside\030\003 \003(\0132\032.CDemoStr"
    "ingTables.items_t\022\023\n\013table_flags\030\004 \001(\005\"\013"
    "\n\tCDemoStop\"0\n\014CDemoUserCmd\022\022\n\ncmd_numbe"
    "r\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\" \n\020CDemoSpawnGroup"
    "s\022\014\n\004msgs\030\003 \003(\014*\204\003\n\rEDemoCommands\022\026\n\tDEM"
    "_Error\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010DEM_Stop\020\000\022\022\n\016DEM_F"
    "ileHeader\020\001\022\020\n\014DEM_FileInfo\020\002\022\020\n\014DEM_Syn"
    "cTick\020\003\022\022\n\016DEM_SendTables\020\004\022\021\n\rDEM_Class"
    "Info\020\005\022\024\n\020DEM_StringTables\020\006\022\016\n\nDEM_Pack"
    "et\020\007\022\024\n\020DEM_SignonPacket\020\010\022\022\n\016DEM_Consol"
    "eCmd\020\t\022\022\n\016DEM_CustomData\020\n\022\033\n\027DEM_Custom"
    "DataCallbacks\020\013\022\017\n\013DEM_UserCmd\020\014\022\022\n\016DEM_"
    "FullPacket\020\r\022\020\n\014DEM_SaveGame\020\016\022\023\n\017DEM_Sp"
    "awnGroups\020\017\022\013\n\007DEM_Max\020\020\022\024\n\020DEM_IsCompre"
    "ssed\020@B\003\200\001\000", 2291);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
  CDemoFileHeader::default_instance_ = new CDemoFileHeader();
  CGameInfo::default_instance_ = new CGameInfo();
  CGameInfo_CDotaGameInfo::default_instance_ = new CGameInfo_CDotaGameInfo();
  CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_ = new CGameInfo_CDotaGameInfo_CPlayerInfo();
  CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance_ = new CGameInfo_CDotaGameInfo_CHeroSelectEvent();
  CDemoFileInfo::default_instance_ = new CDemoFileInfo();
  CDemoPacket::default_instance_ = new CDemoPacket();
  CDemoFullPacket::default_instance_ = new CDemoFullPacket();
  CDemoSaveGame::default_instance_ = new CDemoSaveGame();
  CDemoSyncTick::default_instance_ = new CDemoSyncTick();
  CDemoConsoleCmd::default_instance_ = new CDemoConsoleCmd();
  CDemoSendTables::default_instance_ = new CDemoSendTables();
  CDemoClassInfo::default_instance_ = new CDemoClassInfo();
  CDemoClassInfo_class_t::default_instance_ = new CDemoClassInfo_class_t();
  CDemoCustomData::default_instance_ = new CDemoCustomData();
  CDemoCustomDataCallbacks::default_instance_ = new CDemoCustomDataCallbacks();
  CDemoStringTables::default_instance_ = new CDemoStringTables();
  CDemoStringTables_items_t::default_instance_ = new CDemoStringTables_items_t();
  CDemoStringTables_table_t::default_instance_ = new CDemoStringTables_table_t();
  CDemoStop::default_instance_ = new CDemoStop();
  CDemoUserCmd::default_instance_ = new CDemoUserCmd();
  CDemoSpawnGroups::default_instance_ = new CDemoSpawnGroups();
  CDemoFileHeader::default_instance_->InitAsDefaultInstance();
  CGameInfo::default_instance_->InitAsDefaultInstance();
  CGameInfo_CDotaGameInfo::default_instance_->InitAsDefaultInstance();
  CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_->InitAsDefaultInstance();
  CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance_->InitAsDefaultInstance();
  CDemoFileInfo::default_instance_->InitAsDefaultInstance();
  CDemoPacket::default_instance_->InitAsDefaultInstance();
  CDemoFullPacket::default_instance_->InitAsDefaultInstance();
  CDemoSaveGame::default_instance_->InitAsDefaultInstance();
  CDemoSyncTick::default_instance_->InitAsDefaultInstance();
  CDemoConsoleCmd::default_instance_->InitAsDefaultInstance();
  CDemoSendTables::default_instance_->InitAsDefaultInstance();
  CDemoClassInfo::default_instance_->InitAsDefaultInstance();
  CDemoClassInfo_class_t::default_instance_->InitAsDefaultInstance();
  CDemoCustomData::default_instance_->InitAsDefaultInstance();
  CDemoCustomDataCallbacks::default_instance_->InitAsDefaultInstance();
  CDemoStringTables::default_instance_->InitAsDefaultInstance();
  CDemoStringTables_items_t::default_instance_->InitAsDefaultInstance();
  CDemoStringTables_table_t::default_instance_->InitAsDefaultInstance();
  CDemoStop::default_instance_->InitAsDefaultInstance();
  CDemoUserCmd::default_instance_->InitAsDefaultInstance();
  CDemoSpawnGroups::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_demo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_demo_2eproto {
  StaticDescriptorInitializer_demo_2eproto() {
    protobuf_AddDesc_demo_2eproto();
  }
} static_descriptor_initializer_demo_2eproto_;
const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDemoCommands_descriptor_;
}
bool EDemoCommands_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 64:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CDemoFileHeader::kDemoFileStampFieldNumber;
const int CDemoFileHeader::kNetworkProtocolFieldNumber;
const int CDemoFileHeader::kServerNameFieldNumber;
const int CDemoFileHeader::kClientNameFieldNumber;
const int CDemoFileHeader::kMapNameFieldNumber;
const int CDemoFileHeader::kGameDirectoryFieldNumber;
const int CDemoFileHeader::kFullpacketsVersionFieldNumber;
const int CDemoFileHeader::kAllowClientsideEntitiesFieldNumber;
const int CDemoFileHeader::kAllowClientsideParticlesFieldNumber;
const int CDemoFileHeader::kAddonsFieldNumber;
#endif  // !_MSC_VER

CDemoFileHeader::CDemoFileHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoFileHeader)
}

void CDemoFileHeader::InitAsDefaultInstance() {
}

CDemoFileHeader::CDemoFileHeader(const CDemoFileHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoFileHeader)
}

void CDemoFileHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  demo_file_stamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_protocol_ = 0;
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullpackets_version_ = 0;
  allow_clientside_entities_ = false;
  allow_clientside_particles_ = false;
  addons_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoFileHeader::~CDemoFileHeader() {
  // @@protoc_insertion_point(destructor:CDemoFileHeader)
  SharedDtor();
}

void CDemoFileHeader::SharedDtor() {
  demo_file_stamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addons_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoFileHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFileHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoFileHeader_descriptor_;
}

const CDemoFileHeader& CDemoFileHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoFileHeader* CDemoFileHeader::default_instance_ = NULL;

CDemoFileHeader* CDemoFileHeader::New(::google::protobuf::Arena* arena) const {
  CDemoFileHeader* n = new CDemoFileHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoFileHeader::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDemoFileHeader*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(network_protocol_, fullpackets_version_);
    if (has_demo_file_stamp()) {
      demo_file_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_server_name()) {
      server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_client_name()) {
      client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_map_name()) {
      map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_game_directory()) {
      game_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    allow_clientside_entities_ = false;
  }
  if (_has_bits_[8 / 32] & 768u) {
    allow_clientside_particles_ = false;
    if (has_addons()) {
      addons_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoFileHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string demo_file_stamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_demo_file_stamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->demo_file_stamp().data(), this->demo_file_stamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoFileHeader.demo_file_stamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_network_protocol;
        break;
      }

      // optional int32 network_protocol = 2;
      case 2: {
        if (tag == 16) {
         parse_network_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_protocol_)));
          set_has_network_protocol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_name;
        break;
      }

      // optional string server_name = 3;
      case 3: {
        if (tag == 26) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoFileHeader.server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_name;
        break;
      }

      // optional string client_name = 4;
      case 4: {
        if (tag == 34) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoFileHeader.client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map_name;
        break;
      }

      // optional string map_name = 5;
      case 5: {
        if (tag == 42) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoFileHeader.map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_game_directory;
        break;
      }

      // optional string game_directory = 6;
      case 6: {
        if (tag == 50) {
         parse_game_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_directory().data(), this->game_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoFileHeader.game_directory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fullpackets_version;
        break;
      }

      // optional int32 fullpackets_version = 7;
      case 7: {
        if (tag == 56) {
         parse_fullpackets_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullpackets_version_)));
          set_has_fullpackets_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_allow_clientside_entities;
        break;
      }

      // optional bool allow_clientside_entities = 8;
      case 8: {
        if (tag == 64) {
         parse_allow_clientside_entities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_entities_)));
          set_has_allow_clientside_entities();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_allow_clientside_particles;
        break;
      }

      // optional bool allow_clientside_particles = 9;
      case 9: {
        if (tag == 72) {
         parse_allow_clientside_particles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_particles_)));
          set_has_allow_clientside_particles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_addons;
        break;
      }

      // optional string addons = 10;
      case 10: {
        if (tag == 82) {
         parse_addons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addons().data(), this->addons().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoFileHeader.addons");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoFileHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoFileHeader)
  return false;
#undef DO_
}

void CDemoFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoFileHeader)
  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demo_file_stamp().data(), this->demo_file_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.demo_file_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->demo_file_stamp(), output);
  }

  // optional int32 network_protocol = 2;
  if (has_network_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->network_protocol(), output);
  }

  // optional string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_name(), output);
  }

  // optional string client_name = 4;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_name(), output);
  }

  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_name(), output);
  }

  // optional string game_directory = 6;
  if (has_game_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_directory().data(), this->game_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.game_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_directory(), output);
  }

  // optional int32 fullpackets_version = 7;
  if (has_fullpackets_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fullpackets_version(), output);
  }

  // optional bool allow_clientside_entities = 8;
  if (has_allow_clientside_entities()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_clientside_entities(), output);
  }

  // optional bool allow_clientside_particles = 9;
  if (has_allow_clientside_particles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->allow_clientside_particles(), output);
  }

  // optional string addons = 10;
  if (has_addons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addons().data(), this->addons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.addons");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->addons(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoFileHeader)
}

::google::protobuf::uint8* CDemoFileHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoFileHeader)
  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demo_file_stamp().data(), this->demo_file_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.demo_file_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->demo_file_stamp(), target);
  }

  // optional int32 network_protocol = 2;
  if (has_network_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->network_protocol(), target);
  }

  // optional string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  // optional string client_name = 4;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_name(), target);
  }

  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }

  // optional string game_directory = 6;
  if (has_game_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_directory().data(), this->game_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.game_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_directory(), target);
  }

  // optional int32 fullpackets_version = 7;
  if (has_fullpackets_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fullpackets_version(), target);
  }

  // optional bool allow_clientside_entities = 8;
  if (has_allow_clientside_entities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_clientside_entities(), target);
  }

  // optional bool allow_clientside_particles = 9;
  if (has_allow_clientside_particles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->allow_clientside_particles(), target);
  }

  // optional string addons = 10;
  if (has_addons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addons().data(), this->addons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoFileHeader.addons");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->addons(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoFileHeader)
  return target;
}

int CDemoFileHeader::ByteSize() const {
  int total_size = 0;

  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->demo_file_stamp());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 network_protocol = 2;
    if (has_network_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_protocol());
    }

    // optional string server_name = 3;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string client_name = 4;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional string map_name = 5;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string game_directory = 6;
    if (has_game_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_directory());
    }

    // optional int32 fullpackets_version = 7;
    if (has_fullpackets_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fullpackets_version());
    }

    // optional bool allow_clientside_entities = 8;
    if (has_allow_clientside_entities()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool allow_clientside_particles = 9;
    if (has_allow_clientside_particles()) {
      total_size += 1 + 1;
    }

    // optional string addons = 10;
    if (has_addons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addons());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFileHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoFileHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoFileHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoFileHeader::MergeFrom(const CDemoFileHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_demo_file_stamp()) {
      set_has_demo_file_stamp();
      demo_file_stamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.demo_file_stamp_);
    }
    if (from.has_network_protocol()) {
      set_network_protocol(from.network_protocol());
    }
    if (from.has_server_name()) {
      set_has_server_name();
      server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
    }
    if (from.has_client_name()) {
      set_has_client_name();
      client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
    }
    if (from.has_map_name()) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (from.has_game_directory()) {
      set_has_game_directory();
      game_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_directory_);
    }
    if (from.has_fullpackets_version()) {
      set_fullpackets_version(from.fullpackets_version());
    }
    if (from.has_allow_clientside_entities()) {
      set_allow_clientside_entities(from.allow_clientside_entities());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_allow_clientside_particles()) {
      set_allow_clientside_particles(from.allow_clientside_particles());
    }
    if (from.has_addons()) {
      set_has_addons();
      addons_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addons_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoFileHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileHeader::CopyFrom(const CDemoFileHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CDemoFileHeader::Swap(CDemoFileHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFileHeader::InternalSwap(CDemoFileHeader* other) {
  demo_file_stamp_.Swap(&other->demo_file_stamp_);
  std::swap(network_protocol_, other->network_protocol_);
  server_name_.Swap(&other->server_name_);
  client_name_.Swap(&other->client_name_);
  map_name_.Swap(&other->map_name_);
  game_directory_.Swap(&other->game_directory_);
  std::swap(fullpackets_version_, other->fullpackets_version_);
  std::swap(allow_clientside_entities_, other->allow_clientside_entities_);
  std::swap(allow_clientside_particles_, other->allow_clientside_particles_);
  addons_.Swap(&other->addons_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoFileHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoFileHeader_descriptor_;
  metadata.reflection = CDemoFileHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoFileHeader

// required string demo_file_stamp = 1;
bool CDemoFileHeader::has_demo_file_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoFileHeader::set_has_demo_file_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoFileHeader::clear_has_demo_file_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoFileHeader::clear_demo_file_stamp() {
  demo_file_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_demo_file_stamp();
}
 const ::std::string& CDemoFileHeader::demo_file_stamp() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.demo_file_stamp)
  return demo_file_stamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_demo_file_stamp(const ::std::string& value) {
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoFileHeader.demo_file_stamp)
}
 void CDemoFileHeader::set_demo_file_stamp(const char* value) {
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoFileHeader.demo_file_stamp)
}
 void CDemoFileHeader::set_demo_file_stamp(const char* value, size_t size) {
  set_has_demo_file_stamp();
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoFileHeader.demo_file_stamp)
}
 ::std::string* CDemoFileHeader::mutable_demo_file_stamp() {
  set_has_demo_file_stamp();
  // @@protoc_insertion_point(field_mutable:CDemoFileHeader.demo_file_stamp)
  return demo_file_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoFileHeader::release_demo_file_stamp() {
  clear_has_demo_file_stamp();
  return demo_file_stamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_allocated_demo_file_stamp(::std::string* demo_file_stamp) {
  if (demo_file_stamp != NULL) {
    set_has_demo_file_stamp();
  } else {
    clear_has_demo_file_stamp();
  }
  demo_file_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), demo_file_stamp);
  // @@protoc_insertion_point(field_set_allocated:CDemoFileHeader.demo_file_stamp)
}

// optional int32 network_protocol = 2;
bool CDemoFileHeader::has_network_protocol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoFileHeader::set_has_network_protocol() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoFileHeader::clear_has_network_protocol() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoFileHeader::clear_network_protocol() {
  network_protocol_ = 0;
  clear_has_network_protocol();
}
 ::google::protobuf::int32 CDemoFileHeader::network_protocol() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.network_protocol)
  return network_protocol_;
}
 void CDemoFileHeader::set_network_protocol(::google::protobuf::int32 value) {
  set_has_network_protocol();
  network_protocol_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileHeader.network_protocol)
}

// optional string server_name = 3;
bool CDemoFileHeader::has_server_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoFileHeader::set_has_server_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoFileHeader::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoFileHeader::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
 const ::std::string& CDemoFileHeader::server_name() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoFileHeader.server_name)
}
 void CDemoFileHeader::set_server_name(const char* value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoFileHeader.server_name)
}
 void CDemoFileHeader::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoFileHeader.server_name)
}
 ::std::string* CDemoFileHeader::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:CDemoFileHeader.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoFileHeader::release_server_name() {
  clear_has_server_name();
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:CDemoFileHeader.server_name)
}

// optional string client_name = 4;
bool CDemoFileHeader::has_client_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoFileHeader::set_has_client_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoFileHeader::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoFileHeader::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_name();
}
 const ::std::string& CDemoFileHeader::client_name() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.client_name)
  return client_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_client_name(const ::std::string& value) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoFileHeader.client_name)
}
 void CDemoFileHeader::set_client_name(const char* value) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoFileHeader.client_name)
}
 void CDemoFileHeader::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoFileHeader.client_name)
}
 ::std::string* CDemoFileHeader::mutable_client_name() {
  set_has_client_name();
  // @@protoc_insertion_point(field_mutable:CDemoFileHeader.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoFileHeader::release_client_name() {
  clear_has_client_name();
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    set_has_client_name();
  } else {
    clear_has_client_name();
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:CDemoFileHeader.client_name)
}

// optional string map_name = 5;
bool CDemoFileHeader::has_map_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDemoFileHeader::set_has_map_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CDemoFileHeader::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDemoFileHeader::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
 const ::std::string& CDemoFileHeader::map_name() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.map_name)
  return map_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoFileHeader.map_name)
}
 void CDemoFileHeader::set_map_name(const char* value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoFileHeader.map_name)
}
 void CDemoFileHeader::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoFileHeader.map_name)
}
 ::std::string* CDemoFileHeader::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:CDemoFileHeader.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoFileHeader::release_map_name() {
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:CDemoFileHeader.map_name)
}

// optional string game_directory = 6;
bool CDemoFileHeader::has_game_directory() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDemoFileHeader::set_has_game_directory() {
  _has_bits_[0] |= 0x00000020u;
}
void CDemoFileHeader::clear_has_game_directory() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDemoFileHeader::clear_game_directory() {
  game_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_directory();
}
 const ::std::string& CDemoFileHeader::game_directory() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.game_directory)
  return game_directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_game_directory(const ::std::string& value) {
  set_has_game_directory();
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoFileHeader.game_directory)
}
 void CDemoFileHeader::set_game_directory(const char* value) {
  set_has_game_directory();
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoFileHeader.game_directory)
}
 void CDemoFileHeader::set_game_directory(const char* value, size_t size) {
  set_has_game_directory();
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoFileHeader.game_directory)
}
 ::std::string* CDemoFileHeader::mutable_game_directory() {
  set_has_game_directory();
  // @@protoc_insertion_point(field_mutable:CDemoFileHeader.game_directory)
  return game_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoFileHeader::release_game_directory() {
  clear_has_game_directory();
  return game_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_allocated_game_directory(::std::string* game_directory) {
  if (game_directory != NULL) {
    set_has_game_directory();
  } else {
    clear_has_game_directory();
  }
  game_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_directory);
  // @@protoc_insertion_point(field_set_allocated:CDemoFileHeader.game_directory)
}

// optional int32 fullpackets_version = 7;
bool CDemoFileHeader::has_fullpackets_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDemoFileHeader::set_has_fullpackets_version() {
  _has_bits_[0] |= 0x00000040u;
}
void CDemoFileHeader::clear_has_fullpackets_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDemoFileHeader::clear_fullpackets_version() {
  fullpackets_version_ = 0;
  clear_has_fullpackets_version();
}
 ::google::protobuf::int32 CDemoFileHeader::fullpackets_version() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.fullpackets_version)
  return fullpackets_version_;
}
 void CDemoFileHeader::set_fullpackets_version(::google::protobuf::int32 value) {
  set_has_fullpackets_version();
  fullpackets_version_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileHeader.fullpackets_version)
}

// optional bool allow_clientside_entities = 8;
bool CDemoFileHeader::has_allow_clientside_entities() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDemoFileHeader::set_has_allow_clientside_entities() {
  _has_bits_[0] |= 0x00000080u;
}
void CDemoFileHeader::clear_has_allow_clientside_entities() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDemoFileHeader::clear_allow_clientside_entities() {
  allow_clientside_entities_ = false;
  clear_has_allow_clientside_entities();
}
 bool CDemoFileHeader::allow_clientside_entities() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.allow_clientside_entities)
  return allow_clientside_entities_;
}
 void CDemoFileHeader::set_allow_clientside_entities(bool value) {
  set_has_allow_clientside_entities();
  allow_clientside_entities_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileHeader.allow_clientside_entities)
}

// optional bool allow_clientside_particles = 9;
bool CDemoFileHeader::has_allow_clientside_particles() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDemoFileHeader::set_has_allow_clientside_particles() {
  _has_bits_[0] |= 0x00000100u;
}
void CDemoFileHeader::clear_has_allow_clientside_particles() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDemoFileHeader::clear_allow_clientside_particles() {
  allow_clientside_particles_ = false;
  clear_has_allow_clientside_particles();
}
 bool CDemoFileHeader::allow_clientside_particles() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.allow_clientside_particles)
  return allow_clientside_particles_;
}
 void CDemoFileHeader::set_allow_clientside_particles(bool value) {
  set_has_allow_clientside_particles();
  allow_clientside_particles_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileHeader.allow_clientside_particles)
}

// optional string addons = 10;
bool CDemoFileHeader::has_addons() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDemoFileHeader::set_has_addons() {
  _has_bits_[0] |= 0x00000200u;
}
void CDemoFileHeader::clear_has_addons() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDemoFileHeader::clear_addons() {
  addons_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addons();
}
 const ::std::string& CDemoFileHeader::addons() const {
  // @@protoc_insertion_point(field_get:CDemoFileHeader.addons)
  return addons_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_addons(const ::std::string& value) {
  set_has_addons();
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoFileHeader.addons)
}
 void CDemoFileHeader::set_addons(const char* value) {
  set_has_addons();
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoFileHeader.addons)
}
 void CDemoFileHeader::set_addons(const char* value, size_t size) {
  set_has_addons();
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoFileHeader.addons)
}
 ::std::string* CDemoFileHeader::mutable_addons() {
  set_has_addons();
  // @@protoc_insertion_point(field_mutable:CDemoFileHeader.addons)
  return addons_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoFileHeader::release_addons() {
  clear_has_addons();
  return addons_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoFileHeader::set_allocated_addons(::std::string* addons) {
  if (addons != NULL) {
    set_has_addons();
  } else {
    clear_has_addons();
  }
  addons_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addons);
  // @@protoc_insertion_point(field_set_allocated:CDemoFileHeader.addons)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kHeroNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kPlayerNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kIsFakeClientFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kSteamidFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kGameTeamFieldNumber;
#endif  // !_MSC_VER

CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameInfo.CDotaGameInfo.CPlayerInfo)
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::InitAsDefaultInstance() {
}

CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo(const CGameInfo_CDotaGameInfo_CPlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGameInfo.CDotaGameInfo.CPlayerInfo)
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_fake_client_ = false;
  steamid_ = GOOGLE_ULONGLONG(0);
  game_team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo_CDotaGameInfo_CPlayerInfo::~CGameInfo_CDotaGameInfo_CPlayerInfo() {
  // @@protoc_insertion_point(destructor:CGameInfo.CDotaGameInfo.CPlayerInfo)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_;
}

const CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_ = NULL;

CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo_CPlayerInfo::New(::google::protobuf::Arena* arena) const {
  CGameInfo_CDotaGameInfo_CPlayerInfo* n = new CGameInfo_CDotaGameInfo_CPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CGameInfo_CDotaGameInfo_CPlayerInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(steamid_, game_team_);
    if (has_hero_name()) {
      hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_player_name()) {
      player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameInfo.CDotaGameInfo.CPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hero_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_fake_client;
        break;
      }

      // optional bool is_fake_client = 3;
      case 3: {
        if (tag == 24) {
         parse_is_fake_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fake_client_)));
          set_has_is_fake_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_steamid;
        break;
      }

      // optional uint64 steamid = 4;
      case 4: {
        if (tag == 32) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_team;
        break;
      }

      // optional int32 game_team = 5;
      case 5: {
        if (tag == 40) {
         parse_game_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_team_)));
          set_has_game_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameInfo.CDotaGameInfo.CPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameInfo.CDotaGameInfo.CPlayerInfo)
  return false;
#undef DO_
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameInfo.CDotaGameInfo.CPlayerInfo)
  // optional string hero_name = 1;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hero_name(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional bool is_fake_client = 3;
  if (has_is_fake_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_fake_client(), output);
  }

  // optional uint64 steamid = 4;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->steamid(), output);
  }

  // optional int32 game_team = 5;
  if (has_game_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameInfo.CDotaGameInfo.CPlayerInfo)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameInfo.CDotaGameInfo.CPlayerInfo)
  // optional string hero_name = 1;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hero_name(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.CPlayerInfo.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_fake_client = 3;
  if (has_is_fake_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_fake_client(), target);
  }

  // optional uint64 steamid = 4;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->steamid(), target);
  }

  // optional int32 game_team = 5;
  if (has_game_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameInfo.CDotaGameInfo.CPlayerInfo)
  return target;
}

int CGameInfo_CDotaGameInfo_CPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string hero_name = 1;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bool is_fake_client = 3;
    if (has_is_fake_client()) {
      total_size += 1 + 1;
    }

    // optional uint64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional int32 game_team = 5;
    if (has_game_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_team());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGameInfo_CDotaGameInfo_CPlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo_CDotaGameInfo_CPlayerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_name()) {
      set_has_hero_name();
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (from.has_player_name()) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (from.has_is_fake_client()) {
      set_is_fake_client(from.is_fake_client());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_game_team()) {
      set_game_team(from.game_team());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::IsInitialized() const {

  return true;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Swap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::InternalSwap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  hero_name_.Swap(&other->hero_name_);
  player_name_.Swap(&other->player_name_);
  std::swap(is_fake_client_, other->is_fake_client_);
  std::swap(steamid_, other->steamid_);
  std::swap(game_team_, other->game_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_;
  metadata.reflection = CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kIsPickFieldNumber;
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kTeamFieldNumber;
const int CGameInfo_CDotaGameInfo_CHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !_MSC_VER

CGameInfo_CDotaGameInfo_CHeroSelectEvent::CGameInfo_CDotaGameInfo_CHeroSelectEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::InitAsDefaultInstance() {
}

CGameInfo_CDotaGameInfo_CHeroSelectEvent::CGameInfo_CDotaGameInfo_CHeroSelectEvent(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SharedCtor() {
  _cached_size_ = 0;
  is_pick_ = false;
  team_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo_CDotaGameInfo_CHeroSelectEvent::~CGameInfo_CDotaGameInfo_CHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CHeroSelectEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_CDotaGameInfo_CHeroSelectEvent_descriptor_;
}

const CGameInfo_CDotaGameInfo_CHeroSelectEvent& CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo_CHeroSelectEvent::default_instance_ = NULL;

CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo_CHeroSelectEvent::New(::google::protobuf::Arena* arena) const {
  CGameInfo_CDotaGameInfo_CHeroSelectEvent* n = new CGameInfo_CDotaGameInfo_CHeroSelectEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CGameInfo_CDotaGameInfo_CHeroSelectEvent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_pick_, hero_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
          set_has_is_pick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return false;
#undef DO_
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CHeroSelectEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  // optional bool is_pick = 1;
  if (has_is_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameInfo.CDotaGameInfo.CHeroSelectEvent)
  return target;
}

int CGameInfo_CDotaGameInfo_CHeroSelectEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool is_pick = 1;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGameInfo_CDotaGameInfo_CHeroSelectEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo_CDotaGameInfo_CHeroSelectEvent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::MergeFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_pick()) {
      set_is_pick(from.is_pick());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::CopyFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::IsInitialized() const {

  return true;
}

void CGameInfo_CDotaGameInfo_CHeroSelectEvent::Swap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::InternalSwap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other) {
  std::swap(is_pick_, other->is_pick_);
  std::swap(team_, other->team_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CHeroSelectEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_CDotaGameInfo_CHeroSelectEvent_descriptor_;
  metadata.reflection = CGameInfo_CDotaGameInfo_CHeroSelectEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGameInfo_CDotaGameInfo::kMatchIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameModeFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameWinnerFieldNumber;
const int CGameInfo_CDotaGameInfo::kPlayerInfoFieldNumber;
const int CGameInfo_CDotaGameInfo::kLeagueidFieldNumber;
const int CGameInfo_CDotaGameInfo::kPicksBansFieldNumber;
const int CGameInfo_CDotaGameInfo::kRadiantTeamIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kDireTeamIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kRadiantTeamTagFieldNumber;
const int CGameInfo_CDotaGameInfo::kDireTeamTagFieldNumber;
const int CGameInfo_CDotaGameInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameInfo.CDotaGameInfo)
}

void CGameInfo_CDotaGameInfo::InitAsDefaultInstance() {
}

CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo(const CGameInfo_CDotaGameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGameInfo.CDotaGameInfo)
}

void CGameInfo_CDotaGameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_id_ = 0u;
  game_mode_ = 0;
  game_winner_ = 0;
  leagueid_ = 0u;
  radiant_team_id_ = 0u;
  dire_team_id_ = 0u;
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo_CDotaGameInfo::~CGameInfo_CDotaGameInfo() {
  // @@protoc_insertion_point(destructor:CGameInfo.CDotaGameInfo)
  SharedDtor();
}

void CGameInfo_CDotaGameInfo::SharedDtor() {
  radiant_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CGameInfo_CDotaGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_CDotaGameInfo_descriptor_;
}

const CGameInfo_CDotaGameInfo& CGameInfo_CDotaGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CGameInfo_CDotaGameInfo* CGameInfo_CDotaGameInfo::default_instance_ = NULL;

CGameInfo_CDotaGameInfo* CGameInfo_CDotaGameInfo::New(::google::protobuf::Arena* arena) const {
  CGameInfo_CDotaGameInfo* n = new CGameInfo_CDotaGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo_CDotaGameInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CGameInfo_CDotaGameInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 215u) {
    ZR_(match_id_, game_mode_);
    ZR_(game_winner_, leagueid_);
    ZR_(radiant_team_id_, dire_team_id_);
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_radiant_team_tag()) {
      radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dire_team_tag()) {
      dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    end_time_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  player_info_.Clear();
  picks_bans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGameInfo_CDotaGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameInfo.CDotaGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_mode;
        break;
      }

      // optional int32 game_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_winner;
        break;
      }

      // optional int32 game_winner = 3;
      case 3: {
        if (tag == 24) {
         parse_game_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_winner_)));
          set_has_game_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_info;
        break;
      }

      // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
      case 4: {
        if (tag == 34) {
         parse_player_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_player_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_leagueid;
        break;
      }

      // optional uint32 leagueid = 5;
      case 5: {
        if (tag == 40) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_picks_bans;
        break;
      }

      // repeated .CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
      case 6: {
        if (tag == 50) {
         parse_picks_bans:
          DO_(input->IncrementRecursionDepth());
         parse_loop_picks_bans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_picks_bans;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_radiant_team_id;
        break;
      }

      // optional uint32 radiant_team_id = 7;
      case 7: {
        if (tag == 56) {
         parse_radiant_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
          set_has_radiant_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dire_team_id;
        break;
      }

      // optional uint32 dire_team_id = 8;
      case 8: {
        if (tag == 64) {
         parse_dire_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
          set_has_dire_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_radiant_team_tag;
        break;
      }

      // optional string radiant_team_tag = 9;
      case 9: {
        if (tag == 74) {
         parse_radiant_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_tag().data(), this->radiant_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameInfo.CDotaGameInfo.radiant_team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_dire_team_tag;
        break;
      }

      // optional string dire_team_tag = 10;
      case 10: {
        if (tag == 82) {
         parse_dire_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_tag().data(), this->dire_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGameInfo.CDotaGameInfo.dire_team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 11;
      case 11: {
        if (tag == 88) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameInfo.CDotaGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameInfo.CDotaGameInfo)
  return false;
#undef DO_
}

void CGameInfo_CDotaGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameInfo.CDotaGameInfo)
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }

  // optional int32 game_mode = 2;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_mode(), output);
  }

  // optional int32 game_winner = 3;
  if (has_game_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_winner(), output);
  }

  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_info(i), output);
  }

  // optional uint32 leagueid = 5;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leagueid(), output);
  }

  // repeated .CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->picks_bans(i), output);
  }

  // optional uint32 radiant_team_id = 7;
  if (has_radiant_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 8;
  if (has_dire_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dire_team_id(), output);
  }

  // optional string radiant_team_tag = 9;
  if (has_radiant_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.radiant_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->radiant_team_tag(), output);
  }

  // optional string dire_team_tag = 10;
  if (has_dire_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.dire_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dire_team_tag(), output);
  }

  // optional uint32 end_time = 11;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameInfo.CDotaGameInfo)
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameInfo.CDotaGameInfo)
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }

  // optional int32 game_mode = 2;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_mode(), target);
  }

  // optional int32 game_winner = 3;
  if (has_game_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_winner(), target);
  }

  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_info(i), target);
  }

  // optional uint32 leagueid = 5;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leagueid(), target);
  }

  // repeated .CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->picks_bans(i), target);
  }

  // optional uint32 radiant_team_id = 7;
  if (has_radiant_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 8;
  if (has_dire_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dire_team_id(), target);
  }

  // optional string radiant_team_tag = 9;
  if (has_radiant_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.radiant_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 10;
  if (has_dire_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGameInfo.CDotaGameInfo.dire_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dire_team_tag(), target);
  }

  // optional uint32 end_time = 11;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameInfo.CDotaGameInfo)
  return target;
}

int CGameInfo_CDotaGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 215u) {
    // optional uint32 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }

    // optional int32 game_mode = 2;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_mode());
    }

    // optional int32 game_winner = 3;
    if (has_game_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_winner());
    }

    // optional uint32 leagueid = 5;
    if (has_leagueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 radiant_team_id = 7;
    if (has_radiant_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional uint32 dire_team_id = 8;
    if (has_dire_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string radiant_team_tag = 9;
    if (has_radiant_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_tag());
    }

    // optional string dire_team_tag = 10;
    if (has_dire_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_tag());
    }

    // optional uint32 end_time = 11;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  // repeated .CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  total_size += 1 * this->picks_bans_size();
  for (int i = 0; i < this->picks_bans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picks_bans(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGameInfo_CDotaGameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo_CDotaGameInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo::MergeFrom(const CGameInfo_CDotaGameInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_info_.MergeFrom(from.player_info_);
  picks_bans_.MergeFrom(from.picks_bans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_game_winner()) {
      set_game_winner(from.game_winner());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
    if (from.has_radiant_team_id()) {
      set_radiant_team_id(from.radiant_team_id());
    }
    if (from.has_dire_team_id()) {
      set_dire_team_id(from.dire_team_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radiant_team_tag()) {
      set_has_radiant_team_tag();
      radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
    }
    if (from.has_dire_team_tag()) {
      set_has_dire_team_tag();
      dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGameInfo_CDotaGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo::CopyFrom(const CGameInfo_CDotaGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo::IsInitialized() const {

  return true;
}

void CGameInfo_CDotaGameInfo::Swap(CGameInfo_CDotaGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo_CDotaGameInfo::InternalSwap(CGameInfo_CDotaGameInfo* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(game_winner_, other->game_winner_);
  player_info_.UnsafeArenaSwap(&other->player_info_);
  std::swap(leagueid_, other->leagueid_);
  picks_bans_.UnsafeArenaSwap(&other->picks_bans_);
  std::swap(radiant_team_id_, other->radiant_team_id_);
  std::swap(dire_team_id_, other->dire_team_id_);
  radiant_team_tag_.Swap(&other->radiant_team_tag_);
  dire_team_tag_.Swap(&other->dire_team_tag_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_CDotaGameInfo_descriptor_;
  metadata.reflection = CGameInfo_CDotaGameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGameInfo::kDotaFieldNumber;
#endif  // !_MSC_VER

CGameInfo::CGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGameInfo)
}

void CGameInfo::InitAsDefaultInstance() {
  dota_ = const_cast< ::CGameInfo_CDotaGameInfo*>(&::CGameInfo_CDotaGameInfo::default_instance());
}

CGameInfo::CGameInfo(const CGameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGameInfo)
}

void CGameInfo::SharedCtor() {
  _cached_size_ = 0;
  dota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo::~CGameInfo() {
  // @@protoc_insertion_point(destructor:CGameInfo)
  SharedDtor();
}

void CGameInfo::SharedDtor() {
  if (this != default_instance_) {
    delete dota_;
  }
}

void CGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_descriptor_;
}

const CGameInfo& CGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CGameInfo* CGameInfo::default_instance_ = NULL;

CGameInfo* CGameInfo::New(::google::protobuf::Arena* arena) const {
  CGameInfo* n = new CGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameInfo::Clear() {
  if (has_dota()) {
    if (dota_ != NULL) dota_->::CGameInfo_CDotaGameInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CGameInfo.CDotaGameInfo dota = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dota()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGameInfo)
  return false;
#undef DO_
}

void CGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGameInfo)
  // optional .CGameInfo.CDotaGameInfo dota = 4;
  if (has_dota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dota_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGameInfo)
}

::google::protobuf::uint8* CGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameInfo)
  // optional .CGameInfo.CDotaGameInfo dota = 4;
  if (has_dota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->dota_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameInfo)
  return target;
}

int CGameInfo::ByteSize() const {
  int total_size = 0;

  // optional .CGameInfo.CDotaGameInfo dota = 4;
  if (has_dota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dota_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo::MergeFrom(const CGameInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dota()) {
      mutable_dota()->::CGameInfo_CDotaGameInfo::MergeFrom(from.dota());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo::CopyFrom(const CGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo::IsInitialized() const {

  return true;
}

void CGameInfo::Swap(CGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameInfo::InternalSwap(CGameInfo* other) {
  std::swap(dota_, other->dota_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_descriptor_;
  metadata.reflection = CGameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameInfo_CDotaGameInfo_CPlayerInfo

// optional string hero_name = 1;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_hero_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
 const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::hero_name() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  return hero_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
 ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_hero_name() {
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}

// optional string player_name = 2;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
 const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::player_name() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
 ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_player_name() {
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}

// optional bool is_fake_client = 3;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_is_fake_client() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_is_fake_client() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_is_fake_client() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_is_fake_client() {
  is_fake_client_ = false;
  clear_has_is_fake_client();
}
 bool CGameInfo_CDotaGameInfo_CPlayerInfo::is_fake_client() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CPlayerInfo.is_fake_client)
  return is_fake_client_;
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_is_fake_client(bool value) {
  set_has_is_fake_client();
  is_fake_client_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CPlayerInfo.is_fake_client)
}

// optional uint64 steamid = 4;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_steamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_steamid() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
 ::google::protobuf::uint64 CGameInfo_CDotaGameInfo_CPlayerInfo::steamid() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CPlayerInfo.steamid)
  return steamid_;
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CPlayerInfo.steamid)
}

// optional int32 game_team = 5;
bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_game_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_game_team() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_game_team() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_game_team() {
  game_team_ = 0;
  clear_has_game_team();
}
 ::google::protobuf::int32 CGameInfo_CDotaGameInfo_CPlayerInfo::game_team() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CPlayerInfo.game_team)
  return game_team_;
}
 void CGameInfo_CDotaGameInfo_CPlayerInfo::set_game_team(::google::protobuf::int32 value) {
  set_has_game_team();
  game_team_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CPlayerInfo.game_team)
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo_CHeroSelectEvent

// optional bool is_pick = 1;
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
 bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CHeroSelectEvent.is_pick)
  return is_pick_;
}
 void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo_CHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CHeroSelectEvent.team)
  return team_;
}
 void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo_CHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.CHeroSelectEvent.hero_id)
  return hero_id_;
}
 void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.CHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo

// optional uint32 match_id = 1;
bool CGameInfo_CDotaGameInfo::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo_CDotaGameInfo::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo_CDotaGameInfo::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::match_id() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.match_id)
  return match_id_;
}
 void CGameInfo_CDotaGameInfo::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.match_id)
}

// optional int32 game_mode = 2;
bool CGameInfo_CDotaGameInfo::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameInfo_CDotaGameInfo::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameInfo_CDotaGameInfo::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
 ::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.game_mode)
  return game_mode_;
}
 void CGameInfo_CDotaGameInfo::set_game_mode(::google::protobuf::int32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.game_mode)
}

// optional int32 game_winner = 3;
bool CGameInfo_CDotaGameInfo::has_game_winner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_game_winner() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameInfo_CDotaGameInfo::clear_has_game_winner() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameInfo_CDotaGameInfo::clear_game_winner() {
  game_winner_ = 0;
  clear_has_game_winner();
}
 ::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_winner() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.game_winner)
  return game_winner_;
}
 void CGameInfo_CDotaGameInfo::set_game_winner(::google::protobuf::int32 value) {
  set_has_game_winner();
  game_winner_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.game_winner)
}

// repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
int CGameInfo_CDotaGameInfo::player_info_size() const {
  return player_info_.size();
}
void CGameInfo_CDotaGameInfo::clear_player_info() {
  player_info_.Clear();
}
const ::CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo::player_info(int index) const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Get(index);
}
::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Mutable(index);
}
::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::add_player_info() {
  // @@protoc_insertion_point(field_add:CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo >*
CGameInfo_CDotaGameInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:CGameInfo.CDotaGameInfo.player_info)
  return &player_info_;
}
const ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo >&
CGameInfo_CDotaGameInfo::player_info() const {
  // @@protoc_insertion_point(field_list:CGameInfo.CDotaGameInfo.player_info)
  return player_info_;
}

// optional uint32 leagueid = 5;
bool CGameInfo_CDotaGameInfo::has_leagueid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_leagueid() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameInfo_CDotaGameInfo::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameInfo_CDotaGameInfo::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::leagueid() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.leagueid)
  return leagueid_;
}
 void CGameInfo_CDotaGameInfo::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.leagueid)
}

// repeated .CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
int CGameInfo_CDotaGameInfo::picks_bans_size() const {
  return picks_bans_.size();
}
void CGameInfo_CDotaGameInfo::clear_picks_bans() {
  picks_bans_.Clear();
}
const ::CGameInfo_CDotaGameInfo_CHeroSelectEvent& CGameInfo_CDotaGameInfo::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Get(index);
}
::CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Mutable(index);
}
::CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo::add_picks_bans() {
  // @@protoc_insertion_point(field_add:CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CHeroSelectEvent >*
CGameInfo_CDotaGameInfo::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CGameInfo.CDotaGameInfo.picks_bans)
  return &picks_bans_;
}
const ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CHeroSelectEvent >&
CGameInfo_CDotaGameInfo::picks_bans() const {
  // @@protoc_insertion_point(field_list:CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_;
}

// optional uint32 radiant_team_id = 7;
bool CGameInfo_CDotaGameInfo::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CGameInfo_CDotaGameInfo::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGameInfo_CDotaGameInfo::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.radiant_team_id)
  return radiant_team_id_;
}
 void CGameInfo_CDotaGameInfo::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.radiant_team_id)
}

// optional uint32 dire_team_id = 8;
bool CGameInfo_CDotaGameInfo::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CGameInfo_CDotaGameInfo::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGameInfo_CDotaGameInfo::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.dire_team_id)
  return dire_team_id_;
}
 void CGameInfo_CDotaGameInfo::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.dire_team_id)
}

// optional string radiant_team_tag = 9;
bool CGameInfo_CDotaGameInfo::has_radiant_team_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_radiant_team_tag() {
  _has_bits_[0] |= 0x00000100u;
}
void CGameInfo_CDotaGameInfo::clear_has_radiant_team_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGameInfo_CDotaGameInfo::clear_radiant_team_tag() {
  radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_tag();
}
 const ::std::string& CGameInfo_CDotaGameInfo::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.radiant_team_tag)
  return radiant_team_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const ::std::string& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.radiant_team_tag)
}
 void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const char* value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameInfo.CDotaGameInfo.radiant_team_tag)
}
 void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const char* value, size_t size) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameInfo.CDotaGameInfo.radiant_team_tag)
}
 ::std::string* CGameInfo_CDotaGameInfo::mutable_radiant_team_tag() {
  set_has_radiant_team_tag();
  // @@protoc_insertion_point(field_mutable:CGameInfo.CDotaGameInfo.radiant_team_tag)
  return radiant_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGameInfo_CDotaGameInfo::release_radiant_team_tag() {
  clear_has_radiant_team_tag();
  return radiant_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag != NULL) {
    set_has_radiant_team_tag();
  } else {
    clear_has_radiant_team_tag();
  }
  radiant_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_tag);
  // @@protoc_insertion_point(field_set_allocated:CGameInfo.CDotaGameInfo.radiant_team_tag)
}

// optional string dire_team_tag = 10;
bool CGameInfo_CDotaGameInfo::has_dire_team_tag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_dire_team_tag() {
  _has_bits_[0] |= 0x00000200u;
}
void CGameInfo_CDotaGameInfo::clear_has_dire_team_tag() {
  _has_bits_[0] &= ~0x00000200u;
}
void CGameInfo_CDotaGameInfo::clear_dire_team_tag() {
  dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_tag();
}
 const ::std::string& CGameInfo_CDotaGameInfo::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.dire_team_tag)
  return dire_team_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo::set_dire_team_tag(const ::std::string& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.dire_team_tag)
}
 void CGameInfo_CDotaGameInfo::set_dire_team_tag(const char* value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGameInfo.CDotaGameInfo.dire_team_tag)
}
 void CGameInfo_CDotaGameInfo::set_dire_team_tag(const char* value, size_t size) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGameInfo.CDotaGameInfo.dire_team_tag)
}
 ::std::string* CGameInfo_CDotaGameInfo::mutable_dire_team_tag() {
  set_has_dire_team_tag();
  // @@protoc_insertion_point(field_mutable:CGameInfo.CDotaGameInfo.dire_team_tag)
  return dire_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGameInfo_CDotaGameInfo::release_dire_team_tag() {
  clear_has_dire_team_tag();
  return dire_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGameInfo_CDotaGameInfo::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag != NULL) {
    set_has_dire_team_tag();
  } else {
    clear_has_dire_team_tag();
  }
  dire_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_tag);
  // @@protoc_insertion_point(field_set_allocated:CGameInfo.CDotaGameInfo.dire_team_tag)
}

// optional uint32 end_time = 11;
bool CGameInfo_CDotaGameInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CGameInfo_CDotaGameInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000400u;
}
void CGameInfo_CDotaGameInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void CGameInfo_CDotaGameInfo::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
 ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::end_time() const {
  // @@protoc_insertion_point(field_get:CGameInfo.CDotaGameInfo.end_time)
  return end_time_;
}
 void CGameInfo_CDotaGameInfo::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:CGameInfo.CDotaGameInfo.end_time)
}

// -------------------------------------------------------------------

// CGameInfo

// optional .CGameInfo.CDotaGameInfo dota = 4;
bool CGameInfo::has_dota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameInfo::set_has_dota() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameInfo::clear_has_dota() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameInfo::clear_dota() {
  if (dota_ != NULL) dota_->::CGameInfo_CDotaGameInfo::Clear();
  clear_has_dota();
}
const ::CGameInfo_CDotaGameInfo& CGameInfo::dota() const {
  // @@protoc_insertion_point(field_get:CGameInfo.dota)
  return dota_ != NULL ? *dota_ : *default_instance_->dota_;
}
::CGameInfo_CDotaGameInfo* CGameInfo::mutable_dota() {
  set_has_dota();
  if (dota_ == NULL) {
    dota_ = new ::CGameInfo_CDotaGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:CGameInfo.dota)
  return dota_;
}
::CGameInfo_CDotaGameInfo* CGameInfo::release_dota() {
  clear_has_dota();
  ::CGameInfo_CDotaGameInfo* temp = dota_;
  dota_ = NULL;
  return temp;
}
void CGameInfo::set_allocated_dota(::CGameInfo_CDotaGameInfo* dota) {
  delete dota_;
  dota_ = dota;
  if (dota) {
    set_has_dota();
  } else {
    clear_has_dota();
  }
  // @@protoc_insertion_point(field_set_allocated:CGameInfo.dota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoFileInfo::kPlaybackTimeFieldNumber;
const int CDemoFileInfo::kPlaybackTicksFieldNumber;
const int CDemoFileInfo::kPlaybackFramesFieldNumber;
const int CDemoFileInfo::kGameInfoFieldNumber;
#endif  // !_MSC_VER

CDemoFileInfo::CDemoFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoFileInfo)
}

void CDemoFileInfo::InitAsDefaultInstance() {
  game_info_ = const_cast< ::CGameInfo*>(&::CGameInfo::default_instance());
}

CDemoFileInfo::CDemoFileInfo(const CDemoFileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoFileInfo)
}

void CDemoFileInfo::SharedCtor() {
  _cached_size_ = 0;
  playback_time_ = 0;
  playback_ticks_ = 0;
  playback_frames_ = 0;
  game_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoFileInfo::~CDemoFileInfo() {
  // @@protoc_insertion_point(destructor:CDemoFileInfo)
  SharedDtor();
}

void CDemoFileInfo::SharedDtor() {
  if (this != default_instance_) {
    delete game_info_;
  }
}

void CDemoFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoFileInfo_descriptor_;
}

const CDemoFileInfo& CDemoFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoFileInfo* CDemoFileInfo::default_instance_ = NULL;

CDemoFileInfo* CDemoFileInfo::New(::google::protobuf::Arena* arena) const {
  CDemoFileInfo* n = new CDemoFileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoFileInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDemoFileInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(playback_time_, playback_ticks_);
    playback_frames_ = 0;
    if (has_game_info()) {
      if (game_info_ != NULL) game_info_->::CGameInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float playback_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playback_time_)));
          set_has_playback_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playback_ticks;
        break;
      }

      // optional int32 playback_ticks = 2;
      case 2: {
        if (tag == 16) {
         parse_playback_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_ticks_)));
          set_has_playback_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playback_frames;
        break;
      }

      // optional int32 playback_frames = 3;
      case 3: {
        if (tag == 24) {
         parse_playback_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_frames_)));
          set_has_playback_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_info;
        break;
      }

      // optional .CGameInfo game_info = 4;
      case 4: {
        if (tag == 34) {
         parse_game_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoFileInfo)
  return false;
#undef DO_
}

void CDemoFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoFileInfo)
  // optional float playback_time = 1;
  if (has_playback_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->playback_time(), output);
  }

  // optional int32 playback_ticks = 2;
  if (has_playback_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playback_ticks(), output);
  }

  // optional int32 playback_frames = 3;
  if (has_playback_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playback_frames(), output);
  }

  // optional .CGameInfo game_info = 4;
  if (has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->game_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoFileInfo)
}

::google::protobuf::uint8* CDemoFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoFileInfo)
  // optional float playback_time = 1;
  if (has_playback_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->playback_time(), target);
  }

  // optional int32 playback_ticks = 2;
  if (has_playback_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playback_ticks(), target);
  }

  // optional int32 playback_frames = 3;
  if (has_playback_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playback_frames(), target);
  }

  // optional .CGameInfo game_info = 4;
  if (has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->game_info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoFileInfo)
  return target;
}

int CDemoFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float playback_time = 1;
    if (has_playback_time()) {
      total_size += 1 + 4;
    }

    // optional int32 playback_ticks = 2;
    if (has_playback_ticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_ticks());
    }

    // optional int32 playback_frames = 3;
    if (has_playback_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_frames());
    }

    // optional .CGameInfo game_info = 4;
    if (has_game_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->game_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoFileInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoFileInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoFileInfo::MergeFrom(const CDemoFileInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playback_time()) {
      set_playback_time(from.playback_time());
    }
    if (from.has_playback_ticks()) {
      set_playback_ticks(from.playback_ticks());
    }
    if (from.has_playback_frames()) {
      set_playback_frames(from.playback_frames());
    }
    if (from.has_game_info()) {
      mutable_game_info()->::CGameInfo::MergeFrom(from.game_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileInfo::CopyFrom(const CDemoFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileInfo::IsInitialized() const {

  return true;
}

void CDemoFileInfo::Swap(CDemoFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFileInfo::InternalSwap(CDemoFileInfo* other) {
  std::swap(playback_time_, other->playback_time_);
  std::swap(playback_ticks_, other->playback_ticks_);
  std::swap(playback_frames_, other->playback_frames_);
  std::swap(game_info_, other->game_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoFileInfo_descriptor_;
  metadata.reflection = CDemoFileInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoFileInfo

// optional float playback_time = 1;
bool CDemoFileInfo::has_playback_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoFileInfo::set_has_playback_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoFileInfo::clear_has_playback_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoFileInfo::clear_playback_time() {
  playback_time_ = 0;
  clear_has_playback_time();
}
 float CDemoFileInfo::playback_time() const {
  // @@protoc_insertion_point(field_get:CDemoFileInfo.playback_time)
  return playback_time_;
}
 void CDemoFileInfo::set_playback_time(float value) {
  set_has_playback_time();
  playback_time_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileInfo.playback_time)
}

// optional int32 playback_ticks = 2;
bool CDemoFileInfo::has_playback_ticks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoFileInfo::set_has_playback_ticks() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoFileInfo::clear_has_playback_ticks() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoFileInfo::clear_playback_ticks() {
  playback_ticks_ = 0;
  clear_has_playback_ticks();
}
 ::google::protobuf::int32 CDemoFileInfo::playback_ticks() const {
  // @@protoc_insertion_point(field_get:CDemoFileInfo.playback_ticks)
  return playback_ticks_;
}
 void CDemoFileInfo::set_playback_ticks(::google::protobuf::int32 value) {
  set_has_playback_ticks();
  playback_ticks_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileInfo.playback_ticks)
}

// optional int32 playback_frames = 3;
bool CDemoFileInfo::has_playback_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoFileInfo::set_has_playback_frames() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoFileInfo::clear_has_playback_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoFileInfo::clear_playback_frames() {
  playback_frames_ = 0;
  clear_has_playback_frames();
}
 ::google::protobuf::int32 CDemoFileInfo::playback_frames() const {
  // @@protoc_insertion_point(field_get:CDemoFileInfo.playback_frames)
  return playback_frames_;
}
 void CDemoFileInfo::set_playback_frames(::google::protobuf::int32 value) {
  set_has_playback_frames();
  playback_frames_ = value;
  // @@protoc_insertion_point(field_set:CDemoFileInfo.playback_frames)
}

// optional .CGameInfo game_info = 4;
bool CDemoFileInfo::has_game_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoFileInfo::set_has_game_info() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoFileInfo::clear_has_game_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoFileInfo::clear_game_info() {
  if (game_info_ != NULL) game_info_->::CGameInfo::Clear();
  clear_has_game_info();
}
const ::CGameInfo& CDemoFileInfo::game_info() const {
  // @@protoc_insertion_point(field_get:CDemoFileInfo.game_info)
  return game_info_ != NULL ? *game_info_ : *default_instance_->game_info_;
}
::CGameInfo* CDemoFileInfo::mutable_game_info() {
  set_has_game_info();
  if (game_info_ == NULL) {
    game_info_ = new ::CGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:CDemoFileInfo.game_info)
  return game_info_;
}
::CGameInfo* CDemoFileInfo::release_game_info() {
  clear_has_game_info();
  ::CGameInfo* temp = game_info_;
  game_info_ = NULL;
  return temp;
}
void CDemoFileInfo::set_allocated_game_info(::CGameInfo* game_info) {
  delete game_info_;
  game_info_ = game_info;
  if (game_info) {
    set_has_game_info();
  } else {
    clear_has_game_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CDemoFileInfo.game_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoPacket::kSequenceInFieldNumber;
const int CDemoPacket::kSequenceOutAckFieldNumber;
const int CDemoPacket::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoPacket::CDemoPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoPacket)
}

void CDemoPacket::InitAsDefaultInstance() {
}

CDemoPacket::CDemoPacket(const CDemoPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoPacket)
}

void CDemoPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_in_ = 0;
  sequence_out_ack_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoPacket::~CDemoPacket() {
  // @@protoc_insertion_point(destructor:CDemoPacket)
  SharedDtor();
}

void CDemoPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoPacket_descriptor_;
}

const CDemoPacket& CDemoPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoPacket* CDemoPacket::default_instance_ = NULL;

CDemoPacket* CDemoPacket::New(::google::protobuf::Arena* arena) const {
  CDemoPacket* n = new CDemoPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoPacket::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDemoPacket*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(sequence_in_, sequence_out_ack_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_in = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_in_)));
          set_has_sequence_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_out_ack;
        break;
      }

      // optional int32 sequence_out_ack = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_out_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_out_ack_)));
          set_has_sequence_out_ack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoPacket)
  return false;
#undef DO_
}

void CDemoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoPacket)
  // optional int32 sequence_in = 1;
  if (has_sequence_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_in(), output);
  }

  // optional int32 sequence_out_ack = 2;
  if (has_sequence_out_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence_out_ack(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoPacket)
}

::google::protobuf::uint8* CDemoPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoPacket)
  // optional int32 sequence_in = 1;
  if (has_sequence_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_in(), target);
  }

  // optional int32 sequence_out_ack = 2;
  if (has_sequence_out_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence_out_ack(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoPacket)
  return target;
}

int CDemoPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 sequence_in = 1;
    if (has_sequence_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_in());
    }

    // optional int32 sequence_out_ack = 2;
    if (has_sequence_out_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_out_ack());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoPacket::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoPacket>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoPacket::MergeFrom(const CDemoPacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_in()) {
      set_sequence_in(from.sequence_in());
    }
    if (from.has_sequence_out_ack()) {
      set_sequence_out_ack(from.sequence_out_ack());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoPacket::CopyFrom(const CDemoPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoPacket::IsInitialized() const {

  return true;
}

void CDemoPacket::Swap(CDemoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoPacket::InternalSwap(CDemoPacket* other) {
  std::swap(sequence_in_, other->sequence_in_);
  std::swap(sequence_out_ack_, other->sequence_out_ack_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoPacket_descriptor_;
  metadata.reflection = CDemoPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoPacket

// optional int32 sequence_in = 1;
bool CDemoPacket::has_sequence_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoPacket::set_has_sequence_in() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoPacket::clear_has_sequence_in() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoPacket::clear_sequence_in() {
  sequence_in_ = 0;
  clear_has_sequence_in();
}
 ::google::protobuf::int32 CDemoPacket::sequence_in() const {
  // @@protoc_insertion_point(field_get:CDemoPacket.sequence_in)
  return sequence_in_;
}
 void CDemoPacket::set_sequence_in(::google::protobuf::int32 value) {
  set_has_sequence_in();
  sequence_in_ = value;
  // @@protoc_insertion_point(field_set:CDemoPacket.sequence_in)
}

// optional int32 sequence_out_ack = 2;
bool CDemoPacket::has_sequence_out_ack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoPacket::set_has_sequence_out_ack() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoPacket::clear_has_sequence_out_ack() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoPacket::clear_sequence_out_ack() {
  sequence_out_ack_ = 0;
  clear_has_sequence_out_ack();
}
 ::google::protobuf::int32 CDemoPacket::sequence_out_ack() const {
  // @@protoc_insertion_point(field_get:CDemoPacket.sequence_out_ack)
  return sequence_out_ack_;
}
 void CDemoPacket::set_sequence_out_ack(::google::protobuf::int32 value) {
  set_has_sequence_out_ack();
  sequence_out_ack_ = value;
  // @@protoc_insertion_point(field_set:CDemoPacket.sequence_out_ack)
}

// optional bytes data = 3;
bool CDemoPacket::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoPacket::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDemoPacket::data() const {
  // @@protoc_insertion_point(field_get:CDemoPacket.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoPacket::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoPacket.data)
}
 void CDemoPacket::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoPacket.data)
}
 void CDemoPacket::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoPacket.data)
}
 ::std::string* CDemoPacket::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDemoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoPacket::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDemoPacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoFullPacket::kStringTableFieldNumber;
const int CDemoFullPacket::kPacketFieldNumber;
#endif  // !_MSC_VER

CDemoFullPacket::CDemoFullPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoFullPacket)
}

void CDemoFullPacket::InitAsDefaultInstance() {
  string_table_ = const_cast< ::CDemoStringTables*>(&::CDemoStringTables::default_instance());
  packet_ = const_cast< ::CDemoPacket*>(&::CDemoPacket::default_instance());
}

CDemoFullPacket::CDemoFullPacket(const CDemoFullPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoFullPacket)
}

void CDemoFullPacket::SharedCtor() {
  _cached_size_ = 0;
  string_table_ = NULL;
  packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoFullPacket::~CDemoFullPacket() {
  // @@protoc_insertion_point(destructor:CDemoFullPacket)
  SharedDtor();
}

void CDemoFullPacket::SharedDtor() {
  if (this != default_instance_) {
    delete string_table_;
    delete packet_;
  }
}

void CDemoFullPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFullPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoFullPacket_descriptor_;
}

const CDemoFullPacket& CDemoFullPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoFullPacket* CDemoFullPacket::default_instance_ = NULL;

CDemoFullPacket* CDemoFullPacket::New(::google::protobuf::Arena* arena) const {
  CDemoFullPacket* n = new CDemoFullPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoFullPacket::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_string_table()) {
      if (string_table_ != NULL) string_table_->::CDemoStringTables::Clear();
    }
    if (has_packet()) {
      if (packet_ != NULL) packet_->::CDemoPacket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoFullPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoFullPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDemoStringTables string_table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packet;
        break;
      }

      // optional .CDemoPacket packet = 2;
      case 2: {
        if (tag == 18) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoFullPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoFullPacket)
  return false;
#undef DO_
}

void CDemoFullPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoFullPacket)
  // optional .CDemoStringTables string_table = 1;
  if (has_string_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->string_table_, output);
  }

  // optional .CDemoPacket packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->packet_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoFullPacket)
}

::google::protobuf::uint8* CDemoFullPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoFullPacket)
  // optional .CDemoStringTables string_table = 1;
  if (has_string_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->string_table_, target);
  }

  // optional .CDemoPacket packet = 2;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->packet_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoFullPacket)
  return target;
}

int CDemoFullPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CDemoStringTables string_table = 1;
    if (has_string_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->string_table_);
    }

    // optional .CDemoPacket packet = 2;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->packet_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFullPacket::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoFullPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoFullPacket>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoFullPacket::MergeFrom(const CDemoFullPacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_table()) {
      mutable_string_table()->::CDemoStringTables::MergeFrom(from.string_table());
    }
    if (from.has_packet()) {
      mutable_packet()->::CDemoPacket::MergeFrom(from.packet());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoFullPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFullPacket::CopyFrom(const CDemoFullPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFullPacket::IsInitialized() const {

  return true;
}

void CDemoFullPacket::Swap(CDemoFullPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoFullPacket::InternalSwap(CDemoFullPacket* other) {
  std::swap(string_table_, other->string_table_);
  std::swap(packet_, other->packet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoFullPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoFullPacket_descriptor_;
  metadata.reflection = CDemoFullPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoFullPacket

// optional .CDemoStringTables string_table = 1;
bool CDemoFullPacket::has_string_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoFullPacket::set_has_string_table() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoFullPacket::clear_has_string_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoFullPacket::clear_string_table() {
  if (string_table_ != NULL) string_table_->::CDemoStringTables::Clear();
  clear_has_string_table();
}
const ::CDemoStringTables& CDemoFullPacket::string_table() const {
  // @@protoc_insertion_point(field_get:CDemoFullPacket.string_table)
  return string_table_ != NULL ? *string_table_ : *default_instance_->string_table_;
}
::CDemoStringTables* CDemoFullPacket::mutable_string_table() {
  set_has_string_table();
  if (string_table_ == NULL) {
    string_table_ = new ::CDemoStringTables;
  }
  // @@protoc_insertion_point(field_mutable:CDemoFullPacket.string_table)
  return string_table_;
}
::CDemoStringTables* CDemoFullPacket::release_string_table() {
  clear_has_string_table();
  ::CDemoStringTables* temp = string_table_;
  string_table_ = NULL;
  return temp;
}
void CDemoFullPacket::set_allocated_string_table(::CDemoStringTables* string_table) {
  delete string_table_;
  string_table_ = string_table;
  if (string_table) {
    set_has_string_table();
  } else {
    clear_has_string_table();
  }
  // @@protoc_insertion_point(field_set_allocated:CDemoFullPacket.string_table)
}

// optional .CDemoPacket packet = 2;
bool CDemoFullPacket::has_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoFullPacket::set_has_packet() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoFullPacket::clear_has_packet() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoFullPacket::clear_packet() {
  if (packet_ != NULL) packet_->::CDemoPacket::Clear();
  clear_has_packet();
}
const ::CDemoPacket& CDemoFullPacket::packet() const {
  // @@protoc_insertion_point(field_get:CDemoFullPacket.packet)
  return packet_ != NULL ? *packet_ : *default_instance_->packet_;
}
::CDemoPacket* CDemoFullPacket::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) {
    packet_ = new ::CDemoPacket;
  }
  // @@protoc_insertion_point(field_mutable:CDemoFullPacket.packet)
  return packet_;
}
::CDemoPacket* CDemoFullPacket::release_packet() {
  clear_has_packet();
  ::CDemoPacket* temp = packet_;
  packet_ = NULL;
  return temp;
}
void CDemoFullPacket::set_allocated_packet(::CDemoPacket* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    set_has_packet();
  } else {
    clear_has_packet();
  }
  // @@protoc_insertion_point(field_set_allocated:CDemoFullPacket.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoSaveGame::kDataFieldNumber;
const int CDemoSaveGame::kSteamIdFieldNumber;
const int CDemoSaveGame::kSignatureFieldNumber;
const int CDemoSaveGame::kVersionFieldNumber;
#endif  // !_MSC_VER

CDemoSaveGame::CDemoSaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoSaveGame)
}

void CDemoSaveGame::InitAsDefaultInstance() {
}

CDemoSaveGame::CDemoSaveGame(const CDemoSaveGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoSaveGame)
}

void CDemoSaveGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
  signature_ = GOOGLE_ULONGLONG(0);
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoSaveGame::~CDemoSaveGame() {
  // @@protoc_insertion_point(destructor:CDemoSaveGame)
  SharedDtor();
}

void CDemoSaveGame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoSaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoSaveGame_descriptor_;
}

const CDemoSaveGame& CDemoSaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoSaveGame* CDemoSaveGame::default_instance_ = NULL;

CDemoSaveGame* CDemoSaveGame::New(::google::protobuf::Arena* arena) const {
  CDemoSaveGame* n = new CDemoSaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSaveGame::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDemoSaveGame*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(steam_id_, version_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoSaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoSaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_signature;
        break;
      }

      // optional fixed64 signature = 3;
      case 3: {
        if (tag == 25) {
         parse_signature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
          set_has_signature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional int32 version = 4;
      case 4: {
        if (tag == 32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoSaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoSaveGame)
  return false;
#undef DO_
}

void CDemoSaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoSaveGame)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional fixed64 signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->signature(), output);
  }

  // optional int32 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoSaveGame)
}

::google::protobuf::uint8* CDemoSaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoSaveGame)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional fixed64 signature = 3;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->signature(), target);
  }

  // optional int32 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoSaveGame)
  return target;
}

int CDemoSaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 3;
    if (has_signature()) {
      total_size += 1 + 8;
    }

    // optional int32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoSaveGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSaveGame>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoSaveGame::MergeFrom(const CDemoSaveGame& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoSaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSaveGame::CopyFrom(const CDemoSaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSaveGame::IsInitialized() const {

  return true;
}

void CDemoSaveGame::Swap(CDemoSaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSaveGame::InternalSwap(CDemoSaveGame* other) {
  data_.Swap(&other->data_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(signature_, other->signature_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoSaveGame_descriptor_;
  metadata.reflection = CDemoSaveGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSaveGame

// optional bytes data = 1;
bool CDemoSaveGame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoSaveGame::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoSaveGame::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoSaveGame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDemoSaveGame::data() const {
  // @@protoc_insertion_point(field_get:CDemoSaveGame.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoSaveGame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoSaveGame.data)
}
 void CDemoSaveGame::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoSaveGame.data)
}
 void CDemoSaveGame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoSaveGame.data)
}
 ::std::string* CDemoSaveGame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDemoSaveGame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoSaveGame::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoSaveGame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDemoSaveGame.data)
}

// optional fixed64 steam_id = 2;
bool CDemoSaveGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoSaveGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoSaveGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoSaveGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
 ::google::protobuf::uint64 CDemoSaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CDemoSaveGame.steam_id)
  return steam_id_;
}
 void CDemoSaveGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CDemoSaveGame.steam_id)
}

// optional fixed64 signature = 3;
bool CDemoSaveGame::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoSaveGame::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoSaveGame::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoSaveGame::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
 ::google::protobuf::uint64 CDemoSaveGame::signature() const {
  // @@protoc_insertion_point(field_get:CDemoSaveGame.signature)
  return signature_;
}
 void CDemoSaveGame::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:CDemoSaveGame.signature)
}

// optional int32 version = 4;
bool CDemoSaveGame::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoSaveGame::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoSaveGame::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoSaveGame::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 CDemoSaveGame::version() const {
  // @@protoc_insertion_point(field_get:CDemoSaveGame.version)
  return version_;
}
 void CDemoSaveGame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CDemoSaveGame.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDemoSyncTick::CDemoSyncTick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoSyncTick)
}

void CDemoSyncTick::InitAsDefaultInstance() {
}

CDemoSyncTick::CDemoSyncTick(const CDemoSyncTick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoSyncTick)
}

void CDemoSyncTick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoSyncTick::~CDemoSyncTick() {
  // @@protoc_insertion_point(destructor:CDemoSyncTick)
  SharedDtor();
}

void CDemoSyncTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoSyncTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSyncTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoSyncTick_descriptor_;
}

const CDemoSyncTick& CDemoSyncTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoSyncTick* CDemoSyncTick::default_instance_ = NULL;

CDemoSyncTick* CDemoSyncTick::New(::google::protobuf::Arena* arena) const {
  CDemoSyncTick* n = new CDemoSyncTick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSyncTick::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoSyncTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoSyncTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoSyncTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoSyncTick)
  return false;
#undef DO_
}

void CDemoSyncTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoSyncTick)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoSyncTick)
}

::google::protobuf::uint8* CDemoSyncTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoSyncTick)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoSyncTick)
  return target;
}

int CDemoSyncTick::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSyncTick::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoSyncTick* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSyncTick>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoSyncTick::MergeFrom(const CDemoSyncTick& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoSyncTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSyncTick::CopyFrom(const CDemoSyncTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSyncTick::IsInitialized() const {

  return true;
}

void CDemoSyncTick::Swap(CDemoSyncTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSyncTick::InternalSwap(CDemoSyncTick* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSyncTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoSyncTick_descriptor_;
  metadata.reflection = CDemoSyncTick_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSyncTick

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoConsoleCmd::kCmdstringFieldNumber;
#endif  // !_MSC_VER

CDemoConsoleCmd::CDemoConsoleCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoConsoleCmd)
}

void CDemoConsoleCmd::InitAsDefaultInstance() {
}

CDemoConsoleCmd::CDemoConsoleCmd(const CDemoConsoleCmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoConsoleCmd)
}

void CDemoConsoleCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoConsoleCmd::~CDemoConsoleCmd() {
  // @@protoc_insertion_point(destructor:CDemoConsoleCmd)
  SharedDtor();
}

void CDemoConsoleCmd::SharedDtor() {
  cmdstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoConsoleCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoConsoleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoConsoleCmd_descriptor_;
}

const CDemoConsoleCmd& CDemoConsoleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoConsoleCmd* CDemoConsoleCmd::default_instance_ = NULL;

CDemoConsoleCmd* CDemoConsoleCmd::New(::google::protobuf::Arena* arena) const {
  CDemoConsoleCmd* n = new CDemoConsoleCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoConsoleCmd::Clear() {
  if (has_cmdstring()) {
    cmdstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoConsoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoConsoleCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmdstring = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdstring().data(), this->cmdstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoConsoleCmd.cmdstring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoConsoleCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoConsoleCmd)
  return false;
#undef DO_
}

void CDemoConsoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoConsoleCmd)
  // optional string cmdstring = 1;
  if (has_cmdstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoConsoleCmd.cmdstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmdstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoConsoleCmd)
}

::google::protobuf::uint8* CDemoConsoleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoConsoleCmd)
  // optional string cmdstring = 1;
  if (has_cmdstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoConsoleCmd.cmdstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmdstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoConsoleCmd)
  return target;
}

int CDemoConsoleCmd::ByteSize() const {
  int total_size = 0;

  // optional string cmdstring = 1;
  if (has_cmdstring()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmdstring());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoConsoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoConsoleCmd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoConsoleCmd>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoConsoleCmd::MergeFrom(const CDemoConsoleCmd& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdstring()) {
      set_has_cmdstring();
      cmdstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdstring_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoConsoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoConsoleCmd::CopyFrom(const CDemoConsoleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoConsoleCmd::IsInitialized() const {

  return true;
}

void CDemoConsoleCmd::Swap(CDemoConsoleCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoConsoleCmd::InternalSwap(CDemoConsoleCmd* other) {
  cmdstring_.Swap(&other->cmdstring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoConsoleCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoConsoleCmd_descriptor_;
  metadata.reflection = CDemoConsoleCmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoConsoleCmd

// optional string cmdstring = 1;
bool CDemoConsoleCmd::has_cmdstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoConsoleCmd::set_has_cmdstring() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoConsoleCmd::clear_has_cmdstring() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoConsoleCmd::clear_cmdstring() {
  cmdstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdstring();
}
 const ::std::string& CDemoConsoleCmd::cmdstring() const {
  // @@protoc_insertion_point(field_get:CDemoConsoleCmd.cmdstring)
  return cmdstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoConsoleCmd::set_cmdstring(const ::std::string& value) {
  set_has_cmdstring();
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoConsoleCmd.cmdstring)
}
 void CDemoConsoleCmd::set_cmdstring(const char* value) {
  set_has_cmdstring();
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoConsoleCmd.cmdstring)
}
 void CDemoConsoleCmd::set_cmdstring(const char* value, size_t size) {
  set_has_cmdstring();
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoConsoleCmd.cmdstring)
}
 ::std::string* CDemoConsoleCmd::mutable_cmdstring() {
  set_has_cmdstring();
  // @@protoc_insertion_point(field_mutable:CDemoConsoleCmd.cmdstring)
  return cmdstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoConsoleCmd::release_cmdstring() {
  clear_has_cmdstring();
  return cmdstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoConsoleCmd::set_allocated_cmdstring(::std::string* cmdstring) {
  if (cmdstring != NULL) {
    set_has_cmdstring();
  } else {
    clear_has_cmdstring();
  }
  cmdstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdstring);
  // @@protoc_insertion_point(field_set_allocated:CDemoConsoleCmd.cmdstring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoSendTables::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoSendTables::CDemoSendTables()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoSendTables)
}

void CDemoSendTables::InitAsDefaultInstance() {
}

CDemoSendTables::CDemoSendTables(const CDemoSendTables& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoSendTables)
}

void CDemoSendTables::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoSendTables::~CDemoSendTables() {
  // @@protoc_insertion_point(destructor:CDemoSendTables)
  SharedDtor();
}

void CDemoSendTables::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoSendTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSendTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoSendTables_descriptor_;
}

const CDemoSendTables& CDemoSendTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoSendTables* CDemoSendTables::default_instance_ = NULL;

CDemoSendTables* CDemoSendTables::New(::google::protobuf::Arena* arena) const {
  CDemoSendTables* n = new CDemoSendTables;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSendTables::Clear() {
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoSendTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoSendTables)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoSendTables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoSendTables)
  return false;
#undef DO_
}

void CDemoSendTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoSendTables)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoSendTables)
}

::google::protobuf::uint8* CDemoSendTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoSendTables)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoSendTables)
  return target;
}

int CDemoSendTables::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSendTables::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoSendTables* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSendTables>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoSendTables::MergeFrom(const CDemoSendTables& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoSendTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSendTables::CopyFrom(const CDemoSendTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSendTables::IsInitialized() const {

  return true;
}

void CDemoSendTables::Swap(CDemoSendTables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSendTables::InternalSwap(CDemoSendTables* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSendTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoSendTables_descriptor_;
  metadata.reflection = CDemoSendTables_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSendTables

// optional bytes data = 1;
bool CDemoSendTables::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoSendTables::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoSendTables::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoSendTables::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDemoSendTables::data() const {
  // @@protoc_insertion_point(field_get:CDemoSendTables.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoSendTables::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoSendTables.data)
}
 void CDemoSendTables::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoSendTables.data)
}
 void CDemoSendTables::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoSendTables.data)
}
 ::std::string* CDemoSendTables::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDemoSendTables.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoSendTables::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoSendTables::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDemoSendTables.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoClassInfo_class_t::kClassIdFieldNumber;
const int CDemoClassInfo_class_t::kNetworkNameFieldNumber;
const int CDemoClassInfo_class_t::kTableNameFieldNumber;
#endif  // !_MSC_VER

CDemoClassInfo_class_t::CDemoClassInfo_class_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoClassInfo.class_t)
}

void CDemoClassInfo_class_t::InitAsDefaultInstance() {
}

CDemoClassInfo_class_t::CDemoClassInfo_class_t(const CDemoClassInfo_class_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoClassInfo.class_t)
}

void CDemoClassInfo_class_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  class_id_ = 0;
  network_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoClassInfo_class_t::~CDemoClassInfo_class_t() {
  // @@protoc_insertion_point(destructor:CDemoClassInfo.class_t)
  SharedDtor();
}

void CDemoClassInfo_class_t::SharedDtor() {
  network_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoClassInfo_class_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoClassInfo_class_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoClassInfo_class_t_descriptor_;
}

const CDemoClassInfo_class_t& CDemoClassInfo_class_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoClassInfo_class_t* CDemoClassInfo_class_t::default_instance_ = NULL;

CDemoClassInfo_class_t* CDemoClassInfo_class_t::New(::google::protobuf::Arena* arena) const {
  CDemoClassInfo_class_t* n = new CDemoClassInfo_class_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoClassInfo_class_t::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    class_id_ = 0;
    if (has_network_name()) {
      network_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_table_name()) {
      table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoClassInfo_class_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoClassInfo.class_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_network_name;
        break;
      }

      // optional string network_name = 2;
      case 2: {
        if (tag == 18) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoClassInfo.class_t.network_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (tag == 26) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoClassInfo.class_t.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoClassInfo.class_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoClassInfo.class_t)
  return false;
#undef DO_
}

void CDemoClassInfo_class_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoClassInfo.class_t)
  // optional int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoClassInfo.class_t.network_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network_name(), output);
  }

  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoClassInfo.class_t.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoClassInfo.class_t)
}

::google::protobuf::uint8* CDemoClassInfo_class_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoClassInfo.class_t)
  // optional int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoClassInfo.class_t.network_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoClassInfo.class_t.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoClassInfo.class_t)
  return target;
}

int CDemoClassInfo_class_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

    // optional string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoClassInfo_class_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoClassInfo_class_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoClassInfo_class_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoClassInfo_class_t::MergeFrom(const CDemoClassInfo_class_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_network_name()) {
      set_has_network_name();
      network_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_name_);
    }
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoClassInfo_class_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo_class_t::CopyFrom(const CDemoClassInfo_class_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo_class_t::IsInitialized() const {

  return true;
}

void CDemoClassInfo_class_t::Swap(CDemoClassInfo_class_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoClassInfo_class_t::InternalSwap(CDemoClassInfo_class_t* other) {
  std::swap(class_id_, other->class_id_);
  network_name_.Swap(&other->network_name_);
  table_name_.Swap(&other->table_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoClassInfo_class_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoClassInfo_class_t_descriptor_;
  metadata.reflection = CDemoClassInfo_class_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDemoClassInfo::kClassesFieldNumber;
#endif  // !_MSC_VER

CDemoClassInfo::CDemoClassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoClassInfo)
}

void CDemoClassInfo::InitAsDefaultInstance() {
}

CDemoClassInfo::CDemoClassInfo(const CDemoClassInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoClassInfo)
}

void CDemoClassInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoClassInfo::~CDemoClassInfo() {
  // @@protoc_insertion_point(destructor:CDemoClassInfo)
  SharedDtor();
}

void CDemoClassInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoClassInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoClassInfo_descriptor_;
}

const CDemoClassInfo& CDemoClassInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoClassInfo* CDemoClassInfo::default_instance_ = NULL;

CDemoClassInfo* CDemoClassInfo::New(::google::protobuf::Arena* arena) const {
  CDemoClassInfo* n = new CDemoClassInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoClassInfo::Clear() {
  classes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoClassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDemoClassInfo.class_t classes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_classes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoClassInfo)
  return false;
#undef DO_
}

void CDemoClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoClassInfo)
  // repeated .CDemoClassInfo.class_t classes = 1;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoClassInfo)
}

::google::protobuf::uint8* CDemoClassInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoClassInfo)
  // repeated .CDemoClassInfo.class_t classes = 1;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->classes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoClassInfo)
  return target;
}

int CDemoClassInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CDemoClassInfo.class_t classes = 1;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoClassInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoClassInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoClassInfo::MergeFrom(const CDemoClassInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  classes_.MergeFrom(from.classes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo::CopyFrom(const CDemoClassInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo::IsInitialized() const {

  return true;
}

void CDemoClassInfo::Swap(CDemoClassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoClassInfo::InternalSwap(CDemoClassInfo* other) {
  classes_.UnsafeArenaSwap(&other->classes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoClassInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoClassInfo_descriptor_;
  metadata.reflection = CDemoClassInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoClassInfo_class_t

// optional int32 class_id = 1;
bool CDemoClassInfo_class_t::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoClassInfo_class_t::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoClassInfo_class_t::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
 ::google::protobuf::int32 CDemoClassInfo_class_t::class_id() const {
  // @@protoc_insertion_point(field_get:CDemoClassInfo.class_t.class_id)
  return class_id_;
}
 void CDemoClassInfo_class_t::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CDemoClassInfo.class_t.class_id)
}

// optional string network_name = 2;
bool CDemoClassInfo_class_t::has_network_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoClassInfo_class_t::set_has_network_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoClassInfo_class_t::clear_has_network_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoClassInfo_class_t::clear_network_name() {
  network_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_name();
}
 const ::std::string& CDemoClassInfo_class_t::network_name() const {
  // @@protoc_insertion_point(field_get:CDemoClassInfo.class_t.network_name)
  return network_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoClassInfo_class_t::set_network_name(const ::std::string& value) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoClassInfo.class_t.network_name)
}
 void CDemoClassInfo_class_t::set_network_name(const char* value) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoClassInfo.class_t.network_name)
}
 void CDemoClassInfo_class_t::set_network_name(const char* value, size_t size) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoClassInfo.class_t.network_name)
}
 ::std::string* CDemoClassInfo_class_t::mutable_network_name() {
  set_has_network_name();
  // @@protoc_insertion_point(field_mutable:CDemoClassInfo.class_t.network_name)
  return network_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoClassInfo_class_t::release_network_name() {
  clear_has_network_name();
  return network_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoClassInfo_class_t::set_allocated_network_name(::std::string* network_name) {
  if (network_name != NULL) {
    set_has_network_name();
  } else {
    clear_has_network_name();
  }
  network_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_name);
  // @@protoc_insertion_point(field_set_allocated:CDemoClassInfo.class_t.network_name)
}

// optional string table_name = 3;
bool CDemoClassInfo_class_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDemoClassInfo_class_t::set_has_table_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CDemoClassInfo_class_t::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDemoClassInfo_class_t::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& CDemoClassInfo_class_t::table_name() const {
  // @@protoc_insertion_point(field_get:CDemoClassInfo.class_t.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoClassInfo_class_t::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoClassInfo.class_t.table_name)
}
 void CDemoClassInfo_class_t::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoClassInfo.class_t.table_name)
}
 void CDemoClassInfo_class_t::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoClassInfo.class_t.table_name)
}
 ::std::string* CDemoClassInfo_class_t::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:CDemoClassInfo.class_t.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoClassInfo_class_t::release_table_name() {
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoClassInfo_class_t::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:CDemoClassInfo.class_t.table_name)
}

// -------------------------------------------------------------------

// CDemoClassInfo

// repeated .CDemoClassInfo.class_t classes = 1;
int CDemoClassInfo::classes_size() const {
  return classes_.size();
}
void CDemoClassInfo::clear_classes() {
  classes_.Clear();
}
const ::CDemoClassInfo_class_t& CDemoClassInfo::classes(int index) const {
  // @@protoc_insertion_point(field_get:CDemoClassInfo.classes)
  return classes_.Get(index);
}
::CDemoClassInfo_class_t* CDemoClassInfo::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:CDemoClassInfo.classes)
  return classes_.Mutable(index);
}
::CDemoClassInfo_class_t* CDemoClassInfo::add_classes() {
  // @@protoc_insertion_point(field_add:CDemoClassInfo.classes)
  return classes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t >*
CDemoClassInfo::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:CDemoClassInfo.classes)
  return &classes_;
}
const ::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t >&
CDemoClassInfo::classes() const {
  // @@protoc_insertion_point(field_list:CDemoClassInfo.classes)
  return classes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoCustomData::kCallbackIndexFieldNumber;
const int CDemoCustomData::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoCustomData::CDemoCustomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoCustomData)
}

void CDemoCustomData::InitAsDefaultInstance() {
}

CDemoCustomData::CDemoCustomData(const CDemoCustomData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoCustomData)
}

void CDemoCustomData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callback_index_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoCustomData::~CDemoCustomData() {
  // @@protoc_insertion_point(destructor:CDemoCustomData)
  SharedDtor();
}

void CDemoCustomData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoCustomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoCustomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoCustomData_descriptor_;
}

const CDemoCustomData& CDemoCustomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoCustomData* CDemoCustomData::default_instance_ = NULL;

CDemoCustomData* CDemoCustomData::New(::google::protobuf::Arena* arena) const {
  CDemoCustomData* n = new CDemoCustomData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoCustomData::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    callback_index_ = 0;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoCustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoCustomData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_index_)));
          set_has_callback_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoCustomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoCustomData)
  return false;
#undef DO_
}

void CDemoCustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoCustomData)
  // optional int32 callback_index = 1;
  if (has_callback_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_index(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoCustomData)
}

::google::protobuf::uint8* CDemoCustomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoCustomData)
  // optional int32 callback_index = 1;
  if (has_callback_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_index(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoCustomData)
  return target;
}

int CDemoCustomData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 callback_index = 1;
    if (has_callback_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_index());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoCustomData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoCustomData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoCustomData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoCustomData::MergeFrom(const CDemoCustomData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_index()) {
      set_callback_index(from.callback_index());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoCustomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomData::CopyFrom(const CDemoCustomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomData::IsInitialized() const {

  return true;
}

void CDemoCustomData::Swap(CDemoCustomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoCustomData::InternalSwap(CDemoCustomData* other) {
  std::swap(callback_index_, other->callback_index_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoCustomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoCustomData_descriptor_;
  metadata.reflection = CDemoCustomData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoCustomData

// optional int32 callback_index = 1;
bool CDemoCustomData::has_callback_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoCustomData::set_has_callback_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoCustomData::clear_has_callback_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoCustomData::clear_callback_index() {
  callback_index_ = 0;
  clear_has_callback_index();
}
 ::google::protobuf::int32 CDemoCustomData::callback_index() const {
  // @@protoc_insertion_point(field_get:CDemoCustomData.callback_index)
  return callback_index_;
}
 void CDemoCustomData::set_callback_index(::google::protobuf::int32 value) {
  set_has_callback_index();
  callback_index_ = value;
  // @@protoc_insertion_point(field_set:CDemoCustomData.callback_index)
}

// optional bytes data = 2;
bool CDemoCustomData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoCustomData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoCustomData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoCustomData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDemoCustomData::data() const {
  // @@protoc_insertion_point(field_get:CDemoCustomData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoCustomData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoCustomData.data)
}
 void CDemoCustomData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoCustomData.data)
}
 void CDemoCustomData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoCustomData.data)
}
 ::std::string* CDemoCustomData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDemoCustomData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoCustomData::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoCustomData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDemoCustomData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoCustomDataCallbacks::kSaveIdFieldNumber;
#endif  // !_MSC_VER

CDemoCustomDataCallbacks::CDemoCustomDataCallbacks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoCustomDataCallbacks)
}

void CDemoCustomDataCallbacks::InitAsDefaultInstance() {
}

CDemoCustomDataCallbacks::CDemoCustomDataCallbacks(const CDemoCustomDataCallbacks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoCustomDataCallbacks)
}

void CDemoCustomDataCallbacks::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoCustomDataCallbacks::~CDemoCustomDataCallbacks() {
  // @@protoc_insertion_point(destructor:CDemoCustomDataCallbacks)
  SharedDtor();
}

void CDemoCustomDataCallbacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoCustomDataCallbacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoCustomDataCallbacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoCustomDataCallbacks_descriptor_;
}

const CDemoCustomDataCallbacks& CDemoCustomDataCallbacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoCustomDataCallbacks* CDemoCustomDataCallbacks::default_instance_ = NULL;

CDemoCustomDataCallbacks* CDemoCustomDataCallbacks::New(::google::protobuf::Arena* arena) const {
  CDemoCustomDataCallbacks* n = new CDemoCustomDataCallbacks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoCustomDataCallbacks::Clear() {
  save_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoCustomDataCallbacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoCustomDataCallbacks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string save_id = 1;
      case 1: {
        if (tag == 10) {
         parse_save_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_save_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_id(this->save_id_size() - 1).data(),
            this->save_id(this->save_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoCustomDataCallbacks.save_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_save_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoCustomDataCallbacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoCustomDataCallbacks)
  return false;
#undef DO_
}

void CDemoCustomDataCallbacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoCustomDataCallbacks)
  // repeated string save_id = 1;
  for (int i = 0; i < this->save_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_id(i).data(), this->save_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoCustomDataCallbacks.save_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->save_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoCustomDataCallbacks)
}

::google::protobuf::uint8* CDemoCustomDataCallbacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoCustomDataCallbacks)
  // repeated string save_id = 1;
  for (int i = 0; i < this->save_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_id(i).data(), this->save_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoCustomDataCallbacks.save_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->save_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoCustomDataCallbacks)
  return target;
}

int CDemoCustomDataCallbacks::ByteSize() const {
  int total_size = 0;

  // repeated string save_id = 1;
  total_size += 1 * this->save_id_size();
  for (int i = 0; i < this->save_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->save_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoCustomDataCallbacks::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoCustomDataCallbacks* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoCustomDataCallbacks>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoCustomDataCallbacks::MergeFrom(const CDemoCustomDataCallbacks& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  save_id_.MergeFrom(from.save_id_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoCustomDataCallbacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomDataCallbacks::CopyFrom(const CDemoCustomDataCallbacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomDataCallbacks::IsInitialized() const {

  return true;
}

void CDemoCustomDataCallbacks::Swap(CDemoCustomDataCallbacks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoCustomDataCallbacks::InternalSwap(CDemoCustomDataCallbacks* other) {
  save_id_.UnsafeArenaSwap(&other->save_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoCustomDataCallbacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoCustomDataCallbacks_descriptor_;
  metadata.reflection = CDemoCustomDataCallbacks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoCustomDataCallbacks

// repeated string save_id = 1;
int CDemoCustomDataCallbacks::save_id_size() const {
  return save_id_.size();
}
void CDemoCustomDataCallbacks::clear_save_id() {
  save_id_.Clear();
}
 const ::std::string& CDemoCustomDataCallbacks::save_id(int index) const {
  // @@protoc_insertion_point(field_get:CDemoCustomDataCallbacks.save_id)
  return save_id_.Get(index);
}
 ::std::string* CDemoCustomDataCallbacks::mutable_save_id(int index) {
  // @@protoc_insertion_point(field_mutable:CDemoCustomDataCallbacks.save_id)
  return save_id_.Mutable(index);
}
 void CDemoCustomDataCallbacks::set_save_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CDemoCustomDataCallbacks.save_id)
  save_id_.Mutable(index)->assign(value);
}
 void CDemoCustomDataCallbacks::set_save_id(int index, const char* value) {
  save_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CDemoCustomDataCallbacks.save_id)
}
 void CDemoCustomDataCallbacks::set_save_id(int index, const char* value, size_t size) {
  save_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDemoCustomDataCallbacks.save_id)
}
 ::std::string* CDemoCustomDataCallbacks::add_save_id() {
  return save_id_.Add();
}
 void CDemoCustomDataCallbacks::add_save_id(const ::std::string& value) {
  save_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CDemoCustomDataCallbacks.save_id)
}
 void CDemoCustomDataCallbacks::add_save_id(const char* value) {
  save_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CDemoCustomDataCallbacks.save_id)
}
 void CDemoCustomDataCallbacks::add_save_id(const char* value, size_t size) {
  save_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CDemoCustomDataCallbacks.save_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDemoCustomDataCallbacks::save_id() const {
  // @@protoc_insertion_point(field_list:CDemoCustomDataCallbacks.save_id)
  return save_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CDemoCustomDataCallbacks::mutable_save_id() {
  // @@protoc_insertion_point(field_mutable_list:CDemoCustomDataCallbacks.save_id)
  return &save_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoStringTables_items_t::kStrFieldNumber;
const int CDemoStringTables_items_t::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoStringTables_items_t::CDemoStringTables_items_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoStringTables.items_t)
}

void CDemoStringTables_items_t::InitAsDefaultInstance() {
}

CDemoStringTables_items_t::CDemoStringTables_items_t(const CDemoStringTables_items_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoStringTables.items_t)
}

void CDemoStringTables_items_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStringTables_items_t::~CDemoStringTables_items_t() {
  // @@protoc_insertion_point(destructor:CDemoStringTables.items_t)
  SharedDtor();
}

void CDemoStringTables_items_t::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoStringTables_items_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables_items_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStringTables_items_t_descriptor_;
}

const CDemoStringTables_items_t& CDemoStringTables_items_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoStringTables_items_t* CDemoStringTables_items_t::default_instance_ = NULL;

CDemoStringTables_items_t* CDemoStringTables_items_t::New(::google::protobuf::Arena* arena) const {
  CDemoStringTables_items_t* n = new CDemoStringTables_items_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStringTables_items_t::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_str()) {
      str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoStringTables_items_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoStringTables.items_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoStringTables.items_t.str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoStringTables.items_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoStringTables.items_t)
  return false;
#undef DO_
}

void CDemoStringTables_items_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoStringTables.items_t)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoStringTables.items_t.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoStringTables.items_t)
}

::google::protobuf::uint8* CDemoStringTables_items_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoStringTables.items_t)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoStringTables.items_t.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoStringTables.items_t)
  return target;
}

int CDemoStringTables_items_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables_items_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoStringTables_items_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStringTables_items_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStringTables_items_t::MergeFrom(const CDemoStringTables_items_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoStringTables_items_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_items_t::CopyFrom(const CDemoStringTables_items_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_items_t::IsInitialized() const {

  return true;
}

void CDemoStringTables_items_t::Swap(CDemoStringTables_items_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables_items_t::InternalSwap(CDemoStringTables_items_t* other) {
  str_.Swap(&other->str_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStringTables_items_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStringTables_items_t_descriptor_;
  metadata.reflection = CDemoStringTables_items_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDemoStringTables_table_t::kTableNameFieldNumber;
const int CDemoStringTables_table_t::kItemsFieldNumber;
const int CDemoStringTables_table_t::kItemsClientsideFieldNumber;
const int CDemoStringTables_table_t::kTableFlagsFieldNumber;
#endif  // !_MSC_VER

CDemoStringTables_table_t::CDemoStringTables_table_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoStringTables.table_t)
}

void CDemoStringTables_table_t::InitAsDefaultInstance() {
}

CDemoStringTables_table_t::CDemoStringTables_table_t(const CDemoStringTables_table_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoStringTables.table_t)
}

void CDemoStringTables_table_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStringTables_table_t::~CDemoStringTables_table_t() {
  // @@protoc_insertion_point(destructor:CDemoStringTables.table_t)
  SharedDtor();
}

void CDemoStringTables_table_t::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoStringTables_table_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables_table_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStringTables_table_t_descriptor_;
}

const CDemoStringTables_table_t& CDemoStringTables_table_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoStringTables_table_t* CDemoStringTables_table_t::default_instance_ = NULL;

CDemoStringTables_table_t* CDemoStringTables_table_t::New(::google::protobuf::Arena* arena) const {
  CDemoStringTables_table_t* n = new CDemoStringTables_table_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStringTables_table_t::Clear() {
  if (_has_bits_[0 / 32] & 9u) {
    if (has_table_name()) {
      table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    table_flags_ = 0;
  }
  items_.Clear();
  items_clientside_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoStringTables_table_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoStringTables.table_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDemoStringTables.table_t.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .CDemoStringTables.items_t items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_items;
        if (input->ExpectTag(26)) goto parse_loop_items_clientside;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CDemoStringTables.items_t items_clientside = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items_clientside:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items_clientside()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_items_clientside;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_table_flags;
        break;
      }

      // optional int32 table_flags = 4;
      case 4: {
        if (tag == 32) {
         parse_table_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_flags_)));
          set_has_table_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoStringTables.table_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoStringTables.table_t)
  return false;
#undef DO_
}

void CDemoStringTables_table_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoStringTables.table_t)
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoStringTables.table_t.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .CDemoStringTables.items_t items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // repeated .CDemoStringTables.items_t items_clientside = 3;
  for (unsigned int i = 0, n = this->items_clientside_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items_clientside(i), output);
  }

  // optional int32 table_flags = 4;
  if (has_table_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoStringTables.table_t)
}

::google::protobuf::uint8* CDemoStringTables_table_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoStringTables.table_t)
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDemoStringTables.table_t.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .CDemoStringTables.items_t items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // repeated .CDemoStringTables.items_t items_clientside = 3;
  for (unsigned int i = 0, n = this->items_clientside_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items_clientside(i), target);
  }

  // optional int32 table_flags = 4;
  if (has_table_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoStringTables.table_t)
  return target;
}

int CDemoStringTables_table_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional int32 table_flags = 4;
    if (has_table_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_flags());
    }

  }
  // repeated .CDemoStringTables.items_t items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .CDemoStringTables.items_t items_clientside = 3;
  total_size += 1 * this->items_clientside_size();
  for (int i = 0; i < this->items_clientside_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items_clientside(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables_table_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoStringTables_table_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStringTables_table_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStringTables_table_t::MergeFrom(const CDemoStringTables_table_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  items_clientside_.MergeFrom(from.items_clientside_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (from.has_table_flags()) {
      set_table_flags(from.table_flags());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoStringTables_table_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_table_t::CopyFrom(const CDemoStringTables_table_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_table_t::IsInitialized() const {

  return true;
}

void CDemoStringTables_table_t::Swap(CDemoStringTables_table_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables_table_t::InternalSwap(CDemoStringTables_table_t* other) {
  table_name_.Swap(&other->table_name_);
  items_.UnsafeArenaSwap(&other->items_);
  items_clientside_.UnsafeArenaSwap(&other->items_clientside_);
  std::swap(table_flags_, other->table_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStringTables_table_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStringTables_table_t_descriptor_;
  metadata.reflection = CDemoStringTables_table_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDemoStringTables::kTablesFieldNumber;
#endif  // !_MSC_VER

CDemoStringTables::CDemoStringTables()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoStringTables)
}

void CDemoStringTables::InitAsDefaultInstance() {
}

CDemoStringTables::CDemoStringTables(const CDemoStringTables& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoStringTables)
}

void CDemoStringTables::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStringTables::~CDemoStringTables() {
  // @@protoc_insertion_point(destructor:CDemoStringTables)
  SharedDtor();
}

void CDemoStringTables::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoStringTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStringTables_descriptor_;
}

const CDemoStringTables& CDemoStringTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoStringTables* CDemoStringTables::default_instance_ = NULL;

CDemoStringTables* CDemoStringTables::New(::google::protobuf::Arena* arena) const {
  CDemoStringTables* n = new CDemoStringTables;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStringTables::Clear() {
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoStringTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoStringTables)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDemoStringTables.table_t tables = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tables;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoStringTables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoStringTables)
  return false;
#undef DO_
}

void CDemoStringTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoStringTables)
  // repeated .CDemoStringTables.table_t tables = 1;
  for (unsigned int i = 0, n = this->tables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoStringTables)
}

::google::protobuf::uint8* CDemoStringTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoStringTables)
  // repeated .CDemoStringTables.table_t tables = 1;
  for (unsigned int i = 0, n = this->tables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tables(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoStringTables)
  return target;
}

int CDemoStringTables::ByteSize() const {
  int total_size = 0;

  // repeated .CDemoStringTables.table_t tables = 1;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoStringTables* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStringTables>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStringTables::MergeFrom(const CDemoStringTables& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tables_.MergeFrom(from.tables_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoStringTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables::CopyFrom(const CDemoStringTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables::IsInitialized() const {

  return true;
}

void CDemoStringTables::Swap(CDemoStringTables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStringTables::InternalSwap(CDemoStringTables* other) {
  tables_.UnsafeArenaSwap(&other->tables_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStringTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStringTables_descriptor_;
  metadata.reflection = CDemoStringTables_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoStringTables_items_t

// optional string str = 1;
bool CDemoStringTables_items_t::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoStringTables_items_t::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoStringTables_items_t::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoStringTables_items_t::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
 const ::std::string& CDemoStringTables_items_t::str() const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.items_t.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoStringTables_items_t::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoStringTables.items_t.str)
}
 void CDemoStringTables_items_t::set_str(const char* value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoStringTables.items_t.str)
}
 void CDemoStringTables_items_t::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoStringTables.items_t.str)
}
 ::std::string* CDemoStringTables_items_t::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:CDemoStringTables.items_t.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoStringTables_items_t::release_str() {
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoStringTables_items_t::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:CDemoStringTables.items_t.str)
}

// optional bytes data = 2;
bool CDemoStringTables_items_t::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoStringTables_items_t::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoStringTables_items_t::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoStringTables_items_t::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDemoStringTables_items_t::data() const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.items_t.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoStringTables_items_t::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoStringTables.items_t.data)
}
 void CDemoStringTables_items_t::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoStringTables.items_t.data)
}
 void CDemoStringTables_items_t::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoStringTables.items_t.data)
}
 ::std::string* CDemoStringTables_items_t::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDemoStringTables.items_t.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoStringTables_items_t::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoStringTables_items_t::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDemoStringTables.items_t.data)
}

// -------------------------------------------------------------------

// CDemoStringTables_table_t

// optional string table_name = 1;
bool CDemoStringTables_table_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoStringTables_table_t::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoStringTables_table_t::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoStringTables_table_t::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& CDemoStringTables_table_t::table_name() const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.table_t.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoStringTables_table_t::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoStringTables.table_t.table_name)
}
 void CDemoStringTables_table_t::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoStringTables.table_t.table_name)
}
 void CDemoStringTables_table_t::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoStringTables.table_t.table_name)
}
 ::std::string* CDemoStringTables_table_t::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:CDemoStringTables.table_t.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoStringTables_table_t::release_table_name() {
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoStringTables_table_t::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:CDemoStringTables.table_t.table_name)
}

// repeated .CDemoStringTables.items_t items = 2;
int CDemoStringTables_table_t::items_size() const {
  return items_.size();
}
void CDemoStringTables_table_t::clear_items() {
  items_.Clear();
}
const ::CDemoStringTables_items_t& CDemoStringTables_table_t::items(int index) const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.table_t.items)
  return items_.Get(index);
}
::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDemoStringTables.table_t.items)
  return items_.Mutable(index);
}
::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items() {
  // @@protoc_insertion_point(field_add:CDemoStringTables.table_t.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CDemoStringTables.table_t.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items() const {
  // @@protoc_insertion_point(field_list:CDemoStringTables.table_t.items)
  return items_;
}

// repeated .CDemoStringTables.items_t items_clientside = 3;
int CDemoStringTables_table_t::items_clientside_size() const {
  return items_clientside_.size();
}
void CDemoStringTables_table_t::clear_items_clientside() {
  items_clientside_.Clear();
}
const ::CDemoStringTables_items_t& CDemoStringTables_table_t::items_clientside(int index) const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Get(index);
}
::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items_clientside(int index) {
  // @@protoc_insertion_point(field_mutable:CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Mutable(index);
}
::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items_clientside() {
  // @@protoc_insertion_point(field_add:CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items_clientside() {
  // @@protoc_insertion_point(field_mutable_list:CDemoStringTables.table_t.items_clientside)
  return &items_clientside_;
}
const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items_clientside() const {
  // @@protoc_insertion_point(field_list:CDemoStringTables.table_t.items_clientside)
  return items_clientside_;
}

// optional int32 table_flags = 4;
bool CDemoStringTables_table_t::has_table_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDemoStringTables_table_t::set_has_table_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void CDemoStringTables_table_t::clear_has_table_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDemoStringTables_table_t::clear_table_flags() {
  table_flags_ = 0;
  clear_has_table_flags();
}
 ::google::protobuf::int32 CDemoStringTables_table_t::table_flags() const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.table_t.table_flags)
  return table_flags_;
}
 void CDemoStringTables_table_t::set_table_flags(::google::protobuf::int32 value) {
  set_has_table_flags();
  table_flags_ = value;
  // @@protoc_insertion_point(field_set:CDemoStringTables.table_t.table_flags)
}

// -------------------------------------------------------------------

// CDemoStringTables

// repeated .CDemoStringTables.table_t tables = 1;
int CDemoStringTables::tables_size() const {
  return tables_.size();
}
void CDemoStringTables::clear_tables() {
  tables_.Clear();
}
const ::CDemoStringTables_table_t& CDemoStringTables::tables(int index) const {
  // @@protoc_insertion_point(field_get:CDemoStringTables.tables)
  return tables_.Get(index);
}
::CDemoStringTables_table_t* CDemoStringTables::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:CDemoStringTables.tables)
  return tables_.Mutable(index);
}
::CDemoStringTables_table_t* CDemoStringTables::add_tables() {
  // @@protoc_insertion_point(field_add:CDemoStringTables.tables)
  return tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t >*
CDemoStringTables::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:CDemoStringTables.tables)
  return &tables_;
}
const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t >&
CDemoStringTables::tables() const {
  // @@protoc_insertion_point(field_list:CDemoStringTables.tables)
  return tables_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDemoStop::CDemoStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoStop)
}

void CDemoStop::InitAsDefaultInstance() {
}

CDemoStop::CDemoStop(const CDemoStop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoStop)
}

void CDemoStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStop::~CDemoStop() {
  // @@protoc_insertion_point(destructor:CDemoStop)
  SharedDtor();
}

void CDemoStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStop_descriptor_;
}

const CDemoStop& CDemoStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoStop* CDemoStop::default_instance_ = NULL;

CDemoStop* CDemoStop::New(::google::protobuf::Arena* arena) const {
  CDemoStop* n = new CDemoStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoStop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoStop)
  return false;
#undef DO_
}

void CDemoStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoStop)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoStop)
}

::google::protobuf::uint8* CDemoStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoStop)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoStop)
  return target;
}

int CDemoStop::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStop::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoStop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoStop>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStop::MergeFrom(const CDemoStop& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStop::CopyFrom(const CDemoStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStop::IsInitialized() const {

  return true;
}

void CDemoStop::Swap(CDemoStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoStop::InternalSwap(CDemoStop* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStop_descriptor_;
  metadata.reflection = CDemoStop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoUserCmd::kCmdNumberFieldNumber;
const int CDemoUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoUserCmd::CDemoUserCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoUserCmd)
}

void CDemoUserCmd::InitAsDefaultInstance() {
}

CDemoUserCmd::CDemoUserCmd(const CDemoUserCmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoUserCmd)
}

void CDemoUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_number_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoUserCmd::~CDemoUserCmd() {
  // @@protoc_insertion_point(destructor:CDemoUserCmd)
  SharedDtor();
}

void CDemoUserCmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDemoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoUserCmd_descriptor_;
}

const CDemoUserCmd& CDemoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoUserCmd* CDemoUserCmd::default_instance_ = NULL;

CDemoUserCmd* CDemoUserCmd::New(::google::protobuf::Arena* arena) const {
  CDemoUserCmd* n = new CDemoUserCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    cmd_number_ = 0;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_number_)));
          set_has_cmd_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoUserCmd)
  return false;
#undef DO_
}

void CDemoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoUserCmd)
  // optional int32 cmd_number = 1;
  if (has_cmd_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_number(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoUserCmd)
}

::google::protobuf::uint8* CDemoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoUserCmd)
  // optional int32 cmd_number = 1;
  if (has_cmd_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_number(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoUserCmd)
  return target;
}

int CDemoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 cmd_number = 1;
    if (has_cmd_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_number());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoUserCmd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoUserCmd>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoUserCmd::MergeFrom(const CDemoUserCmd& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_number()) {
      set_cmd_number(from.cmd_number());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoUserCmd::CopyFrom(const CDemoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoUserCmd::IsInitialized() const {

  return true;
}

void CDemoUserCmd::Swap(CDemoUserCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoUserCmd::InternalSwap(CDemoUserCmd* other) {
  std::swap(cmd_number_, other->cmd_number_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoUserCmd_descriptor_;
  metadata.reflection = CDemoUserCmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoUserCmd

// optional int32 cmd_number = 1;
bool CDemoUserCmd::has_cmd_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDemoUserCmd::set_has_cmd_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CDemoUserCmd::clear_has_cmd_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDemoUserCmd::clear_cmd_number() {
  cmd_number_ = 0;
  clear_has_cmd_number();
}
 ::google::protobuf::int32 CDemoUserCmd::cmd_number() const {
  // @@protoc_insertion_point(field_get:CDemoUserCmd.cmd_number)
  return cmd_number_;
}
 void CDemoUserCmd::set_cmd_number(::google::protobuf::int32 value) {
  set_has_cmd_number();
  cmd_number_ = value;
  // @@protoc_insertion_point(field_set:CDemoUserCmd.cmd_number)
}

// optional bytes data = 2;
bool CDemoUserCmd::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDemoUserCmd::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CDemoUserCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDemoUserCmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDemoUserCmd::data() const {
  // @@protoc_insertion_point(field_get:CDemoUserCmd.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoUserCmd::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDemoUserCmd.data)
}
 void CDemoUserCmd::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDemoUserCmd.data)
}
 void CDemoUserCmd::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDemoUserCmd.data)
}
 ::std::string* CDemoUserCmd::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDemoUserCmd.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDemoUserCmd::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDemoUserCmd::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDemoUserCmd.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDemoSpawnGroups::kMsgsFieldNumber;
#endif  // !_MSC_VER

CDemoSpawnGroups::CDemoSpawnGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDemoSpawnGroups)
}

void CDemoSpawnGroups::InitAsDefaultInstance() {
}

CDemoSpawnGroups::CDemoSpawnGroups(const CDemoSpawnGroups& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDemoSpawnGroups)
}

void CDemoSpawnGroups::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoSpawnGroups::~CDemoSpawnGroups() {
  // @@protoc_insertion_point(destructor:CDemoSpawnGroups)
  SharedDtor();
}

void CDemoSpawnGroups::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoSpawnGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSpawnGroups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoSpawnGroups_descriptor_;
}

const CDemoSpawnGroups& CDemoSpawnGroups::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

CDemoSpawnGroups* CDemoSpawnGroups::default_instance_ = NULL;

CDemoSpawnGroups* CDemoSpawnGroups::New(::google::protobuf::Arena* arena) const {
  CDemoSpawnGroups* n = new CDemoSpawnGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDemoSpawnGroups::Clear() {
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDemoSpawnGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDemoSpawnGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes msgs = 3;
      case 3: {
        if (tag == 26) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDemoSpawnGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDemoSpawnGroups)
  return false;
#undef DO_
}

void CDemoSpawnGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDemoSpawnGroups)
  // repeated bytes msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msgs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDemoSpawnGroups)
}

::google::protobuf::uint8* CDemoSpawnGroups::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDemoSpawnGroups)
  // repeated bytes msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->msgs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDemoSpawnGroups)
  return target;
}

int CDemoSpawnGroups::ByteSize() const {
  int total_size = 0;

  // repeated bytes msgs = 3;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSpawnGroups::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDemoSpawnGroups* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDemoSpawnGroups>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoSpawnGroups::MergeFrom(const CDemoSpawnGroups& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgs_.MergeFrom(from.msgs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDemoSpawnGroups::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSpawnGroups::CopyFrom(const CDemoSpawnGroups& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSpawnGroups::IsInitialized() const {

  return true;
}

void CDemoSpawnGroups::Swap(CDemoSpawnGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDemoSpawnGroups::InternalSwap(CDemoSpawnGroups* other) {
  msgs_.UnsafeArenaSwap(&other->msgs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDemoSpawnGroups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoSpawnGroups_descriptor_;
  metadata.reflection = CDemoSpawnGroups_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDemoSpawnGroups

// repeated bytes msgs = 3;
int CDemoSpawnGroups::msgs_size() const {
  return msgs_.size();
}
void CDemoSpawnGroups::clear_msgs() {
  msgs_.Clear();
}
 const ::std::string& CDemoSpawnGroups::msgs(int index) const {
  // @@protoc_insertion_point(field_get:CDemoSpawnGroups.msgs)
  return msgs_.Get(index);
}
 ::std::string* CDemoSpawnGroups::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:CDemoSpawnGroups.msgs)
  return msgs_.Mutable(index);
}
 void CDemoSpawnGroups::set_msgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CDemoSpawnGroups.msgs)
  msgs_.Mutable(index)->assign(value);
}
 void CDemoSpawnGroups::set_msgs(int index, const char* value) {
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CDemoSpawnGroups.msgs)
}
 void CDemoSpawnGroups::set_msgs(int index, const void* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDemoSpawnGroups.msgs)
}
 ::std::string* CDemoSpawnGroups::add_msgs() {
  return msgs_.Add();
}
 void CDemoSpawnGroups::add_msgs(const ::std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CDemoSpawnGroups.msgs)
}
 void CDemoSpawnGroups::add_msgs(const char* value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CDemoSpawnGroups.msgs)
}
 void CDemoSpawnGroups::add_msgs(const void* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CDemoSpawnGroups.msgs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDemoSpawnGroups::msgs() const {
  // @@protoc_insertion_point(field_list:CDemoSpawnGroups.msgs)
  return msgs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CDemoSpawnGroups::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:CDemoSpawnGroups.msgs)
  return &msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
