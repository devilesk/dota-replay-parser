// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_broadcastmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTABroadcastMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTABroadcastMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTABroadcastMsg_LANLobbyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTABroadcastMsg_LANLobbyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaBroadcastMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto() {
  protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_broadcastmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTABroadcastMsg_descriptor_ = file->message_type(0);
  static const int CDOTABroadcastMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, msg_),
  };
  CDOTABroadcastMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTABroadcastMsg_descriptor_,
      CDOTABroadcastMsg::default_instance_,
      CDOTABroadcastMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTABroadcastMsg));
  CDOTABroadcastMsg_LANLobbyRequest_descriptor_ = file->message_type(1);
  static const int CDOTABroadcastMsg_LANLobbyRequest_offsets_[1] = {
  };
  CDOTABroadcastMsg_LANLobbyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTABroadcastMsg_LANLobbyRequest_descriptor_,
      CDOTABroadcastMsg_LANLobbyRequest::default_instance_,
      CDOTABroadcastMsg_LANLobbyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTABroadcastMsg_LANLobbyRequest));
  CDOTABroadcastMsg_LANLobbyReply_descriptor_ = file->message_type(2);
  static const int CDOTABroadcastMsg_LANLobbyReply_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, requires_pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, leader_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, players_),
  };
  CDOTABroadcastMsg_LANLobbyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTABroadcastMsg_LANLobbyReply_descriptor_,
      CDOTABroadcastMsg_LANLobbyReply::default_instance_,
      CDOTABroadcastMsg_LANLobbyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTABroadcastMsg_LANLobbyReply));
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_descriptor_ = CDOTABroadcastMsg_LANLobbyReply_descriptor_->nested_type(0);
  static const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, player_name_),
  };
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_descriptor_,
      CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance_,
      CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember));
  EDotaBroadcastMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTABroadcastMsg_descriptor_, &CDOTABroadcastMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTABroadcastMsg_LANLobbyRequest_descriptor_, &CDOTABroadcastMsg_LANLobbyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTABroadcastMsg_LANLobbyReply_descriptor_, &CDOTABroadcastMsg_LANLobbyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_descriptor_, &CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto() {
  delete CDOTABroadcastMsg::default_instance_;
  delete CDOTABroadcastMsg_reflection_;
  delete CDOTABroadcastMsg_LANLobbyRequest::default_instance_;
  delete CDOTABroadcastMsg_LANLobbyRequest_reflection_;
  delete CDOTABroadcastMsg_LANLobbyReply::default_instance_;
  delete CDOTABroadcastMsg_LANLobbyReply_reflection_;
  delete CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance_;
  delete CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_reflection_;
}

void protobuf_AddDesc_dota_5fbroadcastmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034dota_broadcastmessages.proto\"`\n\021CDOTAB"
    "roadcastMsg\022>\n\004type\030\001 \002(\0162\027.EDotaBroadca"
    "stMessages:\027DOTA_BM_LANLobbyRequest\022\013\n\003m"
    "sg\030\002 \001(\014\"#\n!CDOTABroadcastMsg_LANLobbyRe"
    "quest\"\301\002\n\037CDOTABroadcastMsg_LANLobbyRepl"
    "y\022\n\n\002id\030\001 \001(\004\022\025\n\rtournament_id\030\002 \001(\r\022\032\n\022"
    "tournament_game_id\030\003 \001(\r\022>\n\007members\030\004 \003("
    "\0132-.CDOTABroadcastMsg_LANLobbyReply.CLob"
    "byMember\022\031\n\021requires_pass_key\030\005 \001(\010\022\031\n\021l"
    "eader_account_id\030\006 \001(\r\022\021\n\tgame_mode\030\007 \001("
    "\r\022\014\n\004name\030\010 \001(\t\022\017\n\007players\030\t \001(\r\0327\n\014CLob"
    "byMember\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_n"
    "ame\030\002 \001(\t*P\n\026EDotaBroadcastMessages\022\033\n\027D"
    "OTA_BM_LANLobbyRequest\020\001\022\031\n\025DOTA_BM_LANL"
    "obbyReply\020\002B\005H\001\200\001\000", 578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_broadcastmessages.proto", &protobuf_RegisterTypes);
  CDOTABroadcastMsg::default_instance_ = new CDOTABroadcastMsg();
  CDOTABroadcastMsg_LANLobbyRequest::default_instance_ = new CDOTABroadcastMsg_LANLobbyRequest();
  CDOTABroadcastMsg_LANLobbyReply::default_instance_ = new CDOTABroadcastMsg_LANLobbyReply();
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance_ = new CDOTABroadcastMsg_LANLobbyReply_CLobbyMember();
  CDOTABroadcastMsg::default_instance_->InitAsDefaultInstance();
  CDOTABroadcastMsg_LANLobbyRequest::default_instance_->InitAsDefaultInstance();
  CDOTABroadcastMsg_LANLobbyReply::default_instance_->InitAsDefaultInstance();
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fbroadcastmessages_2eproto {
  StaticDescriptorInitializer_dota_5fbroadcastmessages_2eproto() {
    protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  }
} static_descriptor_initializer_dota_5fbroadcastmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EDotaBroadcastMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaBroadcastMessages_descriptor_;
}
bool EDotaBroadcastMessages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTABroadcastMsg::kTypeFieldNumber;
const int CDOTABroadcastMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

CDOTABroadcastMsg::CDOTABroadcastMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTABroadcastMsg)
}

void CDOTABroadcastMsg::InitAsDefaultInstance() {
}

CDOTABroadcastMsg::CDOTABroadcastMsg(const CDOTABroadcastMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg)
}

void CDOTABroadcastMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTABroadcastMsg::~CDOTABroadcastMsg() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg)
  SharedDtor();
}

void CDOTABroadcastMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CDOTABroadcastMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTABroadcastMsg_descriptor_;
}

const CDOTABroadcastMsg& CDOTABroadcastMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  return *default_instance_;
}

CDOTABroadcastMsg* CDOTABroadcastMsg::default_instance_ = NULL;

CDOTABroadcastMsg* CDOTABroadcastMsg::New() const {
  return new CDOTABroadcastMsg;
}

void CDOTABroadcastMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTABroadcastMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTABroadcastMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDotaBroadcastMessages_IsValid(value)) {
            set_type(static_cast< ::EDotaBroadcastMessages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTABroadcastMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTABroadcastMsg)
  return false;
#undef DO_
}

void CDOTABroadcastMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTABroadcastMsg)
  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTABroadcastMsg)
}

::google::protobuf::uint8* CDOTABroadcastMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg)
  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg)
  return target;
}

int CDOTABroadcastMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTABroadcastMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTABroadcastMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg::MergeFrom(const CDOTABroadcastMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTABroadcastMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg::CopyFrom(const CDOTABroadcastMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CDOTABroadcastMsg::Swap(CDOTABroadcastMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTABroadcastMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTABroadcastMsg_descriptor_;
  metadata.reflection = CDOTABroadcastMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTABroadcastMsg_LANLobbyRequest)
}

void CDOTABroadcastMsg_LANLobbyRequest::InitAsDefaultInstance() {
}

CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyRequest)
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTABroadcastMsg_LANLobbyRequest::~CDOTABroadcastMsg_LANLobbyRequest() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyRequest)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTABroadcastMsg_LANLobbyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTABroadcastMsg_LANLobbyRequest_descriptor_;
}

const CDOTABroadcastMsg_LANLobbyRequest& CDOTABroadcastMsg_LANLobbyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  return *default_instance_;
}

CDOTABroadcastMsg_LANLobbyRequest* CDOTABroadcastMsg_LANLobbyRequest::default_instance_ = NULL;

CDOTABroadcastMsg_LANLobbyRequest* CDOTABroadcastMsg_LANLobbyRequest::New() const {
  return new CDOTABroadcastMsg_LANLobbyRequest;
}

void CDOTABroadcastMsg_LANLobbyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTABroadcastMsg_LANLobbyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTABroadcastMsg_LANLobbyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTABroadcastMsg_LANLobbyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTABroadcastMsg_LANLobbyRequest)
  return false;
#undef DO_
}

void CDOTABroadcastMsg_LANLobbyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTABroadcastMsg_LANLobbyRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTABroadcastMsg_LANLobbyRequest)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyRequest)
  return target;
}

int CDOTABroadcastMsg_LANLobbyRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTABroadcastMsg_LANLobbyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyRequest::IsInitialized() const {

  return true;
}

void CDOTABroadcastMsg_LANLobbyRequest::Swap(CDOTABroadcastMsg_LANLobbyRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTABroadcastMsg_LANLobbyRequest_descriptor_;
  metadata.reflection = CDOTABroadcastMsg_LANLobbyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::kAccountIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InitAsDefaultInstance() {
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_descriptor_;
}

const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  return *default_instance_;
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance_ = NULL;

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::New() const {
  return new CDOTABroadcastMsg_LANLobbyReply_CLobbyMember;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    account_id_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return false;
#undef DO_
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return target;
}

int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::IsInitialized() const {

  return true;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Swap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_descriptor_;
  metadata.reflection = CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTABroadcastMsg_LANLobbyReply::kIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kTournamentIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kTournamentGameIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kMembersFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kRequiresPassKeyFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kLeaderAccountIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kGameModeFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kNameFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kPlayersFieldNumber;
#endif  // !_MSC_VER

CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTABroadcastMsg_LANLobbyReply)
}

void CDOTABroadcastMsg_LANLobbyReply::InitAsDefaultInstance() {
}

CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyReply)
}

void CDOTABroadcastMsg_LANLobbyReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  requires_pass_key_ = false;
  leader_account_id_ = 0u;
  game_mode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  players_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTABroadcastMsg_LANLobbyReply::~CDOTABroadcastMsg_LANLobbyReply() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyReply)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyReply::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTABroadcastMsg_LANLobbyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTABroadcastMsg_LANLobbyReply_descriptor_;
}

const CDOTABroadcastMsg_LANLobbyReply& CDOTABroadcastMsg_LANLobbyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  return *default_instance_;
}

CDOTABroadcastMsg_LANLobbyReply* CDOTABroadcastMsg_LANLobbyReply::default_instance_ = NULL;

CDOTABroadcastMsg_LANLobbyReply* CDOTABroadcastMsg_LANLobbyReply::New() const {
  return new CDOTABroadcastMsg_LANLobbyReply;
}

void CDOTABroadcastMsg_LANLobbyReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTABroadcastMsg_LANLobbyReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(id_, tournament_game_id_);
    ZR_(requires_pass_key_, leader_account_id_);
    game_mode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  players_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTABroadcastMsg_LANLobbyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTABroadcastMsg_LANLobbyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 2;
      case 2: {
        if (tag == 16) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tournament_game_id;
        break;
      }

      // optional uint32 tournament_game_id = 3;
      case 3: {
        if (tag == 24) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectTag(40)) goto parse_requires_pass_key;
        break;
      }

      // optional bool requires_pass_key = 5;
      case 5: {
        if (tag == 40) {
         parse_requires_pass_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
          set_has_requires_pass_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leader_account_id;
        break;
      }

      // optional uint32 leader_account_id = 6;
      case 6: {
        if (tag == 48) {
         parse_leader_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
          set_has_leader_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (tag == 56) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_players;
        break;
      }

      // optional uint32 players = 9;
      case 9: {
        if (tag == 72) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTABroadcastMsg_LANLobbyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTABroadcastMsg_LANLobbyReply)
  return false;
#undef DO_
}

void CDOTABroadcastMsg_LANLobbyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTABroadcastMsg_LANLobbyReply)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 tournament_id = 2;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 3;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_game_id(), output);
  }

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional bool requires_pass_key = 5;
  if (has_requires_pass_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 6;
  if (has_leader_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leader_account_id(), output);
  }

  // optional uint32 game_mode = 7;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional uint32 players = 9;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->players(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTABroadcastMsg_LANLobbyReply)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyReply)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 tournament_id = 2;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 3;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_game_id(), target);
  }

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  // optional bool requires_pass_key = 5;
  if (has_requires_pass_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 6;
  if (has_leader_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leader_account_id(), target);
  }

  // optional uint32 game_mode = 7;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint32 players = 9;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->players(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyReply)
  return target;
}

int CDOTABroadcastMsg_LANLobbyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 tournament_id = 2;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 3;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional bool requires_pass_key = 5;
    if (has_requires_pass_key()) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 6;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 game_mode = 7;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 players = 9;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

  }
  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTABroadcastMsg_LANLobbyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_requires_pass_key()) {
      set_requires_pass_key(from.requires_pass_key());
    }
    if (from.has_leader_account_id()) {
      set_leader_account_id(from.leader_account_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_players()) {
      set_players(from.players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply::IsInitialized() const {

  return true;
}

void CDOTABroadcastMsg_LANLobbyReply::Swap(CDOTABroadcastMsg_LANLobbyReply* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_game_id_, other->tournament_game_id_);
    members_.Swap(&other->members_);
    std::swap(requires_pass_key_, other->requires_pass_key_);
    std::swap(leader_account_id_, other->leader_account_id_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(name_, other->name_);
    std::swap(players_, other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTABroadcastMsg_LANLobbyReply_descriptor_;
  metadata.reflection = CDOTABroadcastMsg_LANLobbyReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
