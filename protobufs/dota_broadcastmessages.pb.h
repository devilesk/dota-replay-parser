// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#ifndef PROTOBUF_dota_5fbroadcastmessages_2eproto__INCLUDED
#define PROTOBUF_dota_5fbroadcastmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
void protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto();
void protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto();

class CDOTABroadcastMsg;
class CDOTABroadcastMsg_LANLobbyRequest;
class CDOTABroadcastMsg_LANLobbyReply;
class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember;

enum EDotaBroadcastMessages {
  DOTA_BM_LANLobbyRequest = 1,
  DOTA_BM_LANLobbyReply = 2
};
bool EDotaBroadcastMessages_IsValid(int value);
const EDotaBroadcastMessages EDotaBroadcastMessages_MIN = DOTA_BM_LANLobbyRequest;
const EDotaBroadcastMessages EDotaBroadcastMessages_MAX = DOTA_BM_LANLobbyReply;
const int EDotaBroadcastMessages_ARRAYSIZE = EDotaBroadcastMessages_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDotaBroadcastMessages_descriptor();
inline const ::std::string& EDotaBroadcastMessages_Name(EDotaBroadcastMessages value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDotaBroadcastMessages_descriptor(), value);
}
inline bool EDotaBroadcastMessages_Parse(
    const ::std::string& name, EDotaBroadcastMessages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDotaBroadcastMessages>(
    EDotaBroadcastMessages_descriptor(), name, value);
}
// ===================================================================

class CDOTABroadcastMsg : public ::google::protobuf::Message {
 public:
  CDOTABroadcastMsg();
  virtual ~CDOTABroadcastMsg();

  CDOTABroadcastMsg(const CDOTABroadcastMsg& from);

  inline CDOTABroadcastMsg& operator=(const CDOTABroadcastMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTABroadcastMsg& default_instance();

  void Swap(CDOTABroadcastMsg* other);

  // implements Message ----------------------------------------------

  CDOTABroadcastMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTABroadcastMsg& from);
  void MergeFrom(const CDOTABroadcastMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::EDotaBroadcastMessages type() const;
  inline void set_type(::EDotaBroadcastMessages value);

  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  int type_;
  friend void  protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto();

  void InitAsDefaultInstance();
  static CDOTABroadcastMsg* default_instance_;
};
// -------------------------------------------------------------------

class CDOTABroadcastMsg_LANLobbyRequest : public ::google::protobuf::Message {
 public:
  CDOTABroadcastMsg_LANLobbyRequest();
  virtual ~CDOTABroadcastMsg_LANLobbyRequest();

  CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from);

  inline CDOTABroadcastMsg_LANLobbyRequest& operator=(const CDOTABroadcastMsg_LANLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTABroadcastMsg_LANLobbyRequest& default_instance();

  void Swap(CDOTABroadcastMsg_LANLobbyRequest* other);

  // implements Message ----------------------------------------------

  CDOTABroadcastMsg_LANLobbyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTABroadcastMsg_LANLobbyRequest& from);
  void MergeFrom(const CDOTABroadcastMsg_LANLobbyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg_LANLobbyRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto();

  void InitAsDefaultInstance();
  static CDOTABroadcastMsg_LANLobbyRequest* default_instance_;
};
// -------------------------------------------------------------------

class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember : public ::google::protobuf::Message {
 public:
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember();
  virtual ~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember();

  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from);

  inline CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& operator=(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& default_instance();

  void Swap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other);

  // implements Message ----------------------------------------------

  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from);
  void MergeFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto();

  void InitAsDefaultInstance();
  static CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CDOTABroadcastMsg_LANLobbyReply : public ::google::protobuf::Message {
 public:
  CDOTABroadcastMsg_LANLobbyReply();
  virtual ~CDOTABroadcastMsg_LANLobbyReply();

  CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from);

  inline CDOTABroadcastMsg_LANLobbyReply& operator=(const CDOTABroadcastMsg_LANLobbyReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTABroadcastMsg_LANLobbyReply& default_instance();

  void Swap(CDOTABroadcastMsg_LANLobbyReply* other);

  // implements Message ----------------------------------------------

  CDOTABroadcastMsg_LANLobbyReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from);
  void MergeFrom(const CDOTABroadcastMsg_LANLobbyReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTABroadcastMsg_LANLobbyReply_CLobbyMember CLobbyMember;

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 tournament_id = 2;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 3;
  inline bool has_tournament_game_id() const;
  inline void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 tournament_game_id() const;
  inline void set_tournament_game_id(::google::protobuf::uint32 value);

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& members(int index) const;
  inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* mutable_members(int index);
  inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >*
      mutable_members();

  // optional bool requires_pass_key = 5;
  inline bool has_requires_pass_key() const;
  inline void clear_requires_pass_key();
  static const int kRequiresPassKeyFieldNumber = 5;
  inline bool requires_pass_key() const;
  inline void set_requires_pass_key(bool value);

  // optional uint32 leader_account_id = 6;
  inline bool has_leader_account_id() const;
  inline void clear_leader_account_id();
  static const int kLeaderAccountIdFieldNumber = 6;
  inline ::google::protobuf::uint32 leader_account_id() const;
  inline void set_leader_account_id(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 7;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 7;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 players = 9;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 9;
  inline ::google::protobuf::uint32 players() const;
  inline void set_players(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg_LANLobbyReply)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_game_id();
  inline void clear_has_tournament_game_id();
  inline void set_has_requires_pass_key();
  inline void clear_has_requires_pass_key();
  inline void set_has_leader_account_id();
  inline void clear_has_leader_account_id();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_players();
  inline void clear_has_players();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember > members_;
  bool requires_pass_key_;
  ::google::protobuf::uint32 leader_account_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 players_;
  friend void  protobuf_AddDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_AssignDesc_dota_5fbroadcastmessages_2eproto();
  friend void protobuf_ShutdownFile_dota_5fbroadcastmessages_2eproto();

  void InitAsDefaultInstance();
  static CDOTABroadcastMsg_LANLobbyReply* default_instance_;
};
// ===================================================================


// ===================================================================

// CDOTABroadcastMsg

// required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
inline bool CDOTABroadcastMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTABroadcastMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTABroadcastMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTABroadcastMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::EDotaBroadcastMessages CDOTABroadcastMsg::type() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg.type)
  return static_cast< ::EDotaBroadcastMessages >(type_);
}
inline void CDOTABroadcastMsg::set_type(::EDotaBroadcastMessages value) {
  assert(::EDotaBroadcastMessages_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg.type)
}

// optional bytes msg = 2;
inline bool CDOTABroadcastMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTABroadcastMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTABroadcastMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTABroadcastMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CDOTABroadcastMsg::msg() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg.msg)
  return *msg_;
}
inline void CDOTABroadcastMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg.msg)
}
inline void CDOTABroadcastMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTABroadcastMsg.msg)
}
inline void CDOTABroadcastMsg::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcastMsg.msg)
}
inline ::std::string* CDOTABroadcastMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg.msg)
  return msg_;
}
inline ::std::string* CDOTABroadcastMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTABroadcastMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcastMsg.msg)
}

// -------------------------------------------------------------------

// CDOTABroadcastMsg_LANLobbyRequest

// -------------------------------------------------------------------

// CDOTABroadcastMsg_LANLobbyReply_CLobbyMember

// optional uint32 account_id = 1;
inline bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
  return account_id_;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
}

// optional string player_name = 2;
inline bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  return *player_name_;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline ::std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  return player_name_;
}
inline ::std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}

// -------------------------------------------------------------------

// CDOTABroadcastMsg_LANLobbyReply

// optional uint64 id = 1;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CDOTABroadcastMsg_LANLobbyReply::id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.id)
  return id_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.id)
}

// optional uint32 tournament_id = 2;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::tournament_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.tournament_id)
  return tournament_id_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.tournament_id)
}

// optional uint32 tournament_game_id = 3;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
  return tournament_game_id_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
}

// repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
inline int CDOTABroadcastMsg_LANLobbyReply::members_size() const {
  return members_.size();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_members() {
  members_.Clear();
}
inline const ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply::members(int index) const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Get(index);
}
inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Mutable(index);
}
inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::add_members() {
  // @@protoc_insertion_point(field_add:CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >&
CDOTABroadcastMsg_LANLobbyReply::members() const {
  // @@protoc_insertion_point(field_list:CDOTABroadcastMsg_LANLobbyReply.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >*
CDOTABroadcastMsg_LANLobbyReply::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CDOTABroadcastMsg_LANLobbyReply.members)
  return &members_;
}

// optional bool requires_pass_key = 5;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
inline bool CDOTABroadcastMsg_LANLobbyReply::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
  return requires_pass_key_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
}

// optional uint32 leader_account_id = 6;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
inline ::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
  return leader_account_id_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
}

// optional uint32 game_mode = 7;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_game_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_game_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::game_mode() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.game_mode)
  return game_mode_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.game_mode)
}

// optional string name = 8;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CDOTABroadcastMsg_LANLobbyReply::name() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.name)
  return *name_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline ::std::string* CDOTABroadcastMsg_LANLobbyReply::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg_LANLobbyReply.name)
  return name_;
}
inline ::std::string* CDOTABroadcastMsg_LANLobbyReply::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcastMsg_LANLobbyReply.name)
}

// optional uint32 players = 9;
inline bool CDOTABroadcastMsg_LANLobbyReply::has_players() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_has_players() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_has_players() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_players() {
  players_ = 0u;
  clear_has_players();
}
inline ::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::players() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.players)
  return players_;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.players)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EDotaBroadcastMessages> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDotaBroadcastMessages>() {
  return ::EDotaBroadcastMessages_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fbroadcastmessages_2eproto__INCLUDED
