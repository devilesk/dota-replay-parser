// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_client_enums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_client_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentTeamState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentNodeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOTAGroupMergeResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fclient_5fenums_2eproto() {
  protobuf_AddDesc_dota_5fclient_5fenums_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_client_enums.proto");
  GOOGLE_CHECK(file != NULL);
  ETournamentTemplate_descriptor_ = file->enum_type(0);
  ETournamentGameState_descriptor_ = file->enum_type(1);
  ETournamentTeamState_descriptor_ = file->enum_type(2);
  ETournamentState_descriptor_ = file->enum_type(3);
  ETournamentNodeState_descriptor_ = file->enum_type(4);
  EDOTAGroupMergeResult_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fclient_5fenums_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_dota_5fclient_5fenums_2eproto() {
}

void protobuf_AddDesc_dota_5fclient_5fenums_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027dota_client_enums.proto*^\n\023ETournament"
    "Template\022\036\n\032k_ETournamentTemplate_None\020\000"
    "\022\'\n#k_ETournamentTemplate_AutomatedWin3\020"
    "\001*\250\003\n\024ETournamentGameState\022\"\n\036k_ETournam"
    "entGameState_Unknown\020\000\022#\n\037k_ETournamentG"
    "ameState_Canceled\020\001\022$\n k_ETournamentGame"
    "State_Scheduled\020\002\022!\n\035k_ETournamentGameSt"
    "ate_Active\020\003\022%\n!k_ETournamentGameState_R"
    "adVictory\020\024\022&\n\"k_ETournamentGameState_Di"
    "reVictory\020\025\022.\n*k_ETournamentGameState_Ra"
    "dVictoryByForfeit\020\026\022/\n+k_ETournamentGame"
    "State_DireVictoryByForfeit\020\027\022(\n$k_ETourn"
    "amentGameState_ServerFailure\020(\022$\n k_ETou"
    "rnamentGameState_NotNeeded\020)*\347\006\n\024ETourna"
    "mentTeamState\022\"\n\036k_ETournamentTeamState_"
    "Unknown\020\000\022 \n\034k_ETournamentTeamState_Node"
    "1\020\001\022#\n\036k_ETournamentTeamState_NodeMax\020\200\010"
    "\022&\n!k_ETournamentTeamState_Eliminated\020\263m"
    "\022%\n k_ETournamentTeamState_Forfeited\020\264m\022"
    "\'\n\"k_ETournamentTeamState_Finished1st\020\231u"
    "\022\'\n\"k_ETournamentTeamState_Finished2nd\020\232"
    "u\022\'\n\"k_ETournamentTeamState_Finished3rd\020"
    "\233u\022\'\n\"k_ETournamentTeamState_Finished4th"
    "\020\234u\022\'\n\"k_ETournamentTeamState_Finished5t"
    "h\020\235u\022\'\n\"k_ETournamentTeamState_Finished6"
    "th\020\236u\022\'\n\"k_ETournamentTeamState_Finished"
    "7th\020\237u\022\'\n\"k_ETournamentTeamState_Finishe"
    "d8th\020\240u\022\'\n\"k_ETournamentTeamState_Finish"
    "ed9th\020\241u\022(\n#k_ETournamentTeamState_Finis"
    "hed10th\020\242u\022(\n#k_ETournamentTeamState_Fin"
    "ished11th\020\243u\022(\n#k_ETournamentTeamState_F"
    "inished12th\020\244u\022(\n#k_ETournamentTeamState"
    "_Finished13th\020\245u\022(\n#k_ETournamentTeamSta"
    "te_Finished14th\020\246u\022(\n#k_ETournamentTeamS"
    "tate_Finished15th\020\247u\022(\n#k_ETournamentTea"
    "mState_Finished16th\020\250u*\206\003\n\020ETournamentSt"
    "ate\022\036\n\032k_ETournamentState_Unknown\020\000\022&\n\"k"
    "_ETournamentState_CanceledByAdmin\020\001\022 \n\034k"
    "_ETournamentState_Completed\020\002\022\035\n\031k_ETour"
    "namentState_Merged\020\003\022$\n k_ETournamentSta"
    "te_ServerFailure\020\004\022$\n k_ETournamentState"
    "_TeamAbandoned\020\005\022)\n%k_ETournamentState_T"
    "eamTimeoutForfeit\020\006\022(\n$k_ETournamentStat"
    "e_TeamTimeoutRefund\020\007\022!\n\035k_ETournamentSt"
    "ate_InProgress\020d\022%\n!k_ETournamentState_W"
    "aitingToMerge\020e*\314\004\n\024ETournamentNodeState"
    "\022\"\n\036k_ETournamentNodeState_Unknown\020\000\022#\n\037"
    "k_ETournamentNodeState_Canceled\020\001\022.\n*k_E"
    "TournamentNodeState_TeamsNotYetAssigned\020"
    "\002\022)\n%k_ETournamentNodeState_InBetweenGam"
    "es\020\003\022)\n%k_ETournamentNodeState_GameInPro"
    "gress\020\004\022 \n\034k_ETournamentNodeState_A_Won\020"
    "\005\022 \n\034k_ETournamentNodeState_B_Won\020\006\022)\n%k"
    "_ETournamentNodeState_A_WonByForfeit\020\007\022)"
    "\n%k_ETournamentNodeState_B_WonByForfeit\020"
    "\010\022 \n\034k_ETournamentNodeState_A_Bye\020\t\022&\n\"k"
    "_ETournamentNodeState_A_Abandoned\020\n\022(\n$k"
    "_ETournamentNodeState_ServerFailure\020\013\022+\n"
    "\'k_ETournamentNodeState_A_TimeoutForfeit"
    "\020\014\022*\n&k_ETournamentNodeState_A_TimeoutRe"
    "fund\020\r*\307\003\n\025EDOTAGroupMergeResult\022\036\n\032k_ED"
    "OTAGroupMergeResult_OK\020\000\022*\n&k_EDOTAGroup"
    "MergeResult_FAILED_GENERIC\020\001\022&\n\"k_EDOTAG"
    "roupMergeResult_NOT_LEADER\020\002\022,\n(k_EDOTAG"
    "roupMergeResult_TOO_MANY_PLAYERS\020\003\022,\n(k_"
    "EDOTAGroupMergeResult_TOO_MANY_COACHES\020\004"
    "\022+\n\'k_EDOTAGroupMergeResult_ENGINE_MISMA"
    "TCH\020\005\022)\n%k_EDOTAGroupMergeResult_NO_SUCH"
    "_GROUP\020\006\0220\n,k_EDOTAGroupMergeResult_OTHE"
    "R_GROUP_NOT_OPEN\020\007\022+\n\'k_EDOTAGroupMergeR"
    "esult_ALREADY_INVITED\020\010\022\'\n#k_EDOTAGroupM"
    "ergeResult_NOT_INVITED\020\tB\005H\001\200\001\000", 2871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_client_enums.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fclient_5fenums_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fclient_5fenums_2eproto {
  StaticDescriptorInitializer_dota_5fclient_5fenums_2eproto() {
    protobuf_AddDesc_dota_5fclient_5fenums_2eproto();
  }
} static_descriptor_initializer_dota_5fclient_5fenums_2eproto_;
const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentTemplate_descriptor_;
}
bool ETournamentTemplate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentGameState_descriptor_;
}
bool ETournamentGameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 20:
    case 21:
    case 22:
    case 23:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentTeamState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentTeamState_descriptor_;
}
bool ETournamentTeamState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 1024:
    case 14003:
    case 14004:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentState_descriptor_;
}
bool ETournamentState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentNodeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentNodeState_descriptor_;
}
bool ETournamentNodeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGroupMergeResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOTAGroupMergeResult_descriptor_;
}
bool EDOTAGroupMergeResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
