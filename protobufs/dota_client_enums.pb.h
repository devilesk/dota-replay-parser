// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_client_enums.proto

#ifndef PROTOBUF_dota_5fclient_5fenums_2eproto__INCLUDED
#define PROTOBUF_dota_5fclient_5fenums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fclient_5fenums_2eproto();
void protobuf_AssignDesc_dota_5fclient_5fenums_2eproto();
void protobuf_ShutdownFile_dota_5fclient_5fenums_2eproto();


enum ETournamentTemplate {
  k_ETournamentTemplate_None = 0,
  k_ETournamentTemplate_AutomatedWin3 = 1
};
bool ETournamentTemplate_IsValid(int value);
const ETournamentTemplate ETournamentTemplate_MIN = k_ETournamentTemplate_None;
const ETournamentTemplate ETournamentTemplate_MAX = k_ETournamentTemplate_AutomatedWin3;
const int ETournamentTemplate_ARRAYSIZE = ETournamentTemplate_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor();
inline const ::std::string& ETournamentTemplate_Name(ETournamentTemplate value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentTemplate_descriptor(), value);
}
inline bool ETournamentTemplate_Parse(
    const ::std::string& name, ETournamentTemplate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentTemplate>(
    ETournamentTemplate_descriptor(), name, value);
}
enum ETournamentGameState {
  k_ETournamentGameState_Unknown = 0,
  k_ETournamentGameState_Canceled = 1,
  k_ETournamentGameState_Scheduled = 2,
  k_ETournamentGameState_Active = 3,
  k_ETournamentGameState_RadVictory = 20,
  k_ETournamentGameState_DireVictory = 21,
  k_ETournamentGameState_RadVictoryByForfeit = 22,
  k_ETournamentGameState_DireVictoryByForfeit = 23,
  k_ETournamentGameState_ServerFailure = 40,
  k_ETournamentGameState_NotNeeded = 41
};
bool ETournamentGameState_IsValid(int value);
const ETournamentGameState ETournamentGameState_MIN = k_ETournamentGameState_Unknown;
const ETournamentGameState ETournamentGameState_MAX = k_ETournamentGameState_NotNeeded;
const int ETournamentGameState_ARRAYSIZE = ETournamentGameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentGameState_descriptor();
inline const ::std::string& ETournamentGameState_Name(ETournamentGameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentGameState_descriptor(), value);
}
inline bool ETournamentGameState_Parse(
    const ::std::string& name, ETournamentGameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentGameState>(
    ETournamentGameState_descriptor(), name, value);
}
enum ETournamentTeamState {
  k_ETournamentTeamState_Unknown = 0,
  k_ETournamentTeamState_Node1 = 1,
  k_ETournamentTeamState_NodeMax = 1024,
  k_ETournamentTeamState_Eliminated = 14003,
  k_ETournamentTeamState_Forfeited = 14004,
  k_ETournamentTeamState_Finished1st = 15001,
  k_ETournamentTeamState_Finished2nd = 15002,
  k_ETournamentTeamState_Finished3rd = 15003,
  k_ETournamentTeamState_Finished4th = 15004,
  k_ETournamentTeamState_Finished5th = 15005,
  k_ETournamentTeamState_Finished6th = 15006,
  k_ETournamentTeamState_Finished7th = 15007,
  k_ETournamentTeamState_Finished8th = 15008,
  k_ETournamentTeamState_Finished9th = 15009,
  k_ETournamentTeamState_Finished10th = 15010,
  k_ETournamentTeamState_Finished11th = 15011,
  k_ETournamentTeamState_Finished12th = 15012,
  k_ETournamentTeamState_Finished13th = 15013,
  k_ETournamentTeamState_Finished14th = 15014,
  k_ETournamentTeamState_Finished15th = 15015,
  k_ETournamentTeamState_Finished16th = 15016
};
bool ETournamentTeamState_IsValid(int value);
const ETournamentTeamState ETournamentTeamState_MIN = k_ETournamentTeamState_Unknown;
const ETournamentTeamState ETournamentTeamState_MAX = k_ETournamentTeamState_Finished16th;
const int ETournamentTeamState_ARRAYSIZE = ETournamentTeamState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentTeamState_descriptor();
inline const ::std::string& ETournamentTeamState_Name(ETournamentTeamState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentTeamState_descriptor(), value);
}
inline bool ETournamentTeamState_Parse(
    const ::std::string& name, ETournamentTeamState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentTeamState>(
    ETournamentTeamState_descriptor(), name, value);
}
enum ETournamentState {
  k_ETournamentState_Unknown = 0,
  k_ETournamentState_CanceledByAdmin = 1,
  k_ETournamentState_Completed = 2,
  k_ETournamentState_Merged = 3,
  k_ETournamentState_ServerFailure = 4,
  k_ETournamentState_TeamAbandoned = 5,
  k_ETournamentState_TeamTimeoutForfeit = 6,
  k_ETournamentState_TeamTimeoutRefund = 7,
  k_ETournamentState_InProgress = 100,
  k_ETournamentState_WaitingToMerge = 101
};
bool ETournamentState_IsValid(int value);
const ETournamentState ETournamentState_MIN = k_ETournamentState_Unknown;
const ETournamentState ETournamentState_MAX = k_ETournamentState_WaitingToMerge;
const int ETournamentState_ARRAYSIZE = ETournamentState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentState_descriptor();
inline const ::std::string& ETournamentState_Name(ETournamentState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentState_descriptor(), value);
}
inline bool ETournamentState_Parse(
    const ::std::string& name, ETournamentState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentState>(
    ETournamentState_descriptor(), name, value);
}
enum ETournamentNodeState {
  k_ETournamentNodeState_Unknown = 0,
  k_ETournamentNodeState_Canceled = 1,
  k_ETournamentNodeState_TeamsNotYetAssigned = 2,
  k_ETournamentNodeState_InBetweenGames = 3,
  k_ETournamentNodeState_GameInProgress = 4,
  k_ETournamentNodeState_A_Won = 5,
  k_ETournamentNodeState_B_Won = 6,
  k_ETournamentNodeState_A_WonByForfeit = 7,
  k_ETournamentNodeState_B_WonByForfeit = 8,
  k_ETournamentNodeState_A_Bye = 9,
  k_ETournamentNodeState_A_Abandoned = 10,
  k_ETournamentNodeState_ServerFailure = 11,
  k_ETournamentNodeState_A_TimeoutForfeit = 12,
  k_ETournamentNodeState_A_TimeoutRefund = 13
};
bool ETournamentNodeState_IsValid(int value);
const ETournamentNodeState ETournamentNodeState_MIN = k_ETournamentNodeState_Unknown;
const ETournamentNodeState ETournamentNodeState_MAX = k_ETournamentNodeState_A_TimeoutRefund;
const int ETournamentNodeState_ARRAYSIZE = ETournamentNodeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentNodeState_descriptor();
inline const ::std::string& ETournamentNodeState_Name(ETournamentNodeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentNodeState_descriptor(), value);
}
inline bool ETournamentNodeState_Parse(
    const ::std::string& name, ETournamentNodeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentNodeState>(
    ETournamentNodeState_descriptor(), name, value);
}
enum EDOTAGroupMergeResult {
  k_EDOTAGroupMergeResult_OK = 0,
  k_EDOTAGroupMergeResult_FAILED_GENERIC = 1,
  k_EDOTAGroupMergeResult_NOT_LEADER = 2,
  k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS = 3,
  k_EDOTAGroupMergeResult_TOO_MANY_COACHES = 4,
  k_EDOTAGroupMergeResult_ENGINE_MISMATCH = 5,
  k_EDOTAGroupMergeResult_NO_SUCH_GROUP = 6,
  k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN = 7,
  k_EDOTAGroupMergeResult_ALREADY_INVITED = 8,
  k_EDOTAGroupMergeResult_NOT_INVITED = 9
};
bool EDOTAGroupMergeResult_IsValid(int value);
const EDOTAGroupMergeResult EDOTAGroupMergeResult_MIN = k_EDOTAGroupMergeResult_OK;
const EDOTAGroupMergeResult EDOTAGroupMergeResult_MAX = k_EDOTAGroupMergeResult_NOT_INVITED;
const int EDOTAGroupMergeResult_ARRAYSIZE = EDOTAGroupMergeResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAGroupMergeResult_descriptor();
inline const ::std::string& EDOTAGroupMergeResult_Name(EDOTAGroupMergeResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAGroupMergeResult_descriptor(), value);
}
inline bool EDOTAGroupMergeResult_Parse(
    const ::std::string& name, EDOTAGroupMergeResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAGroupMergeResult>(
    EDOTAGroupMergeResult_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ETournamentTemplate> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentTemplate>() {
  return ::ETournamentTemplate_descriptor();
}
template <> struct is_proto_enum< ::ETournamentGameState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentGameState>() {
  return ::ETournamentGameState_descriptor();
}
template <> struct is_proto_enum< ::ETournamentTeamState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentTeamState>() {
  return ::ETournamentTeamState_descriptor();
}
template <> struct is_proto_enum< ::ETournamentState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentState>() {
  return ::ETournamentState_descriptor();
}
template <> struct is_proto_enum< ::ETournamentNodeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentNodeState>() {
  return ::ETournamentNodeState_descriptor();
}
template <> struct is_proto_enum< ::EDOTAGroupMergeResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAGroupMergeResult>() {
  return ::EDOTAGroupMergeResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fclient_5fenums_2eproto__INCLUDED
