// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MapPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EnemyItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ModifierAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ClickedBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ClickedBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_HPManaAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_GlyphAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MapLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_AspectRatio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UnitsAutoAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeleportRequiresHalt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_AutoPurchaseItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_AutoPurchaseItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TestItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TestItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SearchString_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_Pause_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ShopViewMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SetUnitShareFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SwapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SwapAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_WorldLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RequestGraphUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChatWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SendStatPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BeginLastHitChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateQuickBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateQuickBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateCoachListen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateCoachListen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoachHUDPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CoachHUDPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RecordVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_WillPurchaseAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BuyBackStateAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_QuickBuyAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_PlayerShowCase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CameraZoomAmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BroadcasterUsingCameraman_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAdditionalEquipSlotClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_FreeInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_FillEmptySlotsWithBots_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_HeroStatueLike_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseEditor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeamShowcaseEditor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeamShowcaseClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayTeamShowcase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_PlayTeamShowcase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EventCNY2015Cmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_DemoHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_DemoHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChallengeSelect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeReroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChallengeReroll_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoinWager_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CoinWager_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fclientmessages_2eproto() {
  protobuf_AddDesc_dota_5fclientmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_clientmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAClientMsg_MapPing_descriptor_ = file->message_type(0);
  static const int CDOTAClientMsg_MapPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, location_ping_),
  };
  CDOTAClientMsg_MapPing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_MapPing_descriptor_,
      CDOTAClientMsg_MapPing::default_instance_,
      CDOTAClientMsg_MapPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_MapPing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _internal_metadata_),
      -1);
  CDOTAClientMsg_ItemAlert_descriptor_ = file->message_type(1);
  static const int CDOTAClientMsg_ItemAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, item_alert_),
  };
  CDOTAClientMsg_ItemAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ItemAlert_descriptor_,
      CDOTAClientMsg_ItemAlert::default_instance_,
      CDOTAClientMsg_ItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ItemAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_EnemyItemAlert_descriptor_ = file->message_type(2);
  static const int CDOTAClientMsg_EnemyItemAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, item_entindex_),
  };
  CDOTAClientMsg_EnemyItemAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_EnemyItemAlert_descriptor_,
      CDOTAClientMsg_EnemyItemAlert::default_instance_,
      CDOTAClientMsg_EnemyItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_EnemyItemAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_ModifierAlert_descriptor_ = file->message_type(3);
  static const int CDOTAClientMsg_ModifierAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, buff_internal_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, target_entindex_),
  };
  CDOTAClientMsg_ModifierAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ModifierAlert_descriptor_,
      CDOTAClientMsg_ModifierAlert::default_instance_,
      CDOTAClientMsg_ModifierAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ModifierAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_ClickedBuff_descriptor_ = file->message_type(4);
  static const int CDOTAClientMsg_ClickedBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, buff_internal_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, target_entindex_),
  };
  CDOTAClientMsg_ClickedBuff_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ClickedBuff_descriptor_,
      CDOTAClientMsg_ClickedBuff::default_instance_,
      CDOTAClientMsg_ClickedBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ClickedBuff),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, _internal_metadata_),
      -1);
  CDOTAClientMsg_HPManaAlert_descriptor_ = file->message_type(5);
  static const int CDOTAClientMsg_HPManaAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, target_entindex_),
  };
  CDOTAClientMsg_HPManaAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_HPManaAlert_descriptor_,
      CDOTAClientMsg_HPManaAlert::default_instance_,
      CDOTAClientMsg_HPManaAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_HPManaAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_GlyphAlert_descriptor_ = file->message_type(6);
  static const int CDOTAClientMsg_GlyphAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, negative_),
  };
  CDOTAClientMsg_GlyphAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_GlyphAlert_descriptor_,
      CDOTAClientMsg_GlyphAlert::default_instance_,
      CDOTAClientMsg_GlyphAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_GlyphAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_MapLine_descriptor_ = file->message_type(7);
  static const int CDOTAClientMsg_MapLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, mapline_),
  };
  CDOTAClientMsg_MapLine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_MapLine_descriptor_,
      CDOTAClientMsg_MapLine::default_instance_,
      CDOTAClientMsg_MapLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_MapLine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _internal_metadata_),
      -1);
  CDOTAClientMsg_AspectRatio_descriptor_ = file->message_type(8);
  static const int CDOTAClientMsg_AspectRatio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, ratio_),
  };
  CDOTAClientMsg_AspectRatio_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_AspectRatio_descriptor_,
      CDOTAClientMsg_AspectRatio::default_instance_,
      CDOTAClientMsg_AspectRatio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_AspectRatio),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _internal_metadata_),
      -1);
  CDOTAClientMsg_UnitsAutoAttack_descriptor_ = file->message_type(9);
  static const int CDOTAClientMsg_UnitsAutoAttack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttack, enabled_),
  };
  CDOTAClientMsg_UnitsAutoAttack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_UnitsAutoAttack_descriptor_,
      CDOTAClientMsg_UnitsAutoAttack::default_instance_,
      CDOTAClientMsg_UnitsAutoAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttack, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_UnitsAutoAttack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttack, _internal_metadata_),
      -1);
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_ = file->message_type(10);
  static const int CDOTAClientMsg_UnitsAutoAttackAfterSpell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, enabled_),
  };
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_,
      CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_,
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_UnitsAutoAttackAfterSpell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _internal_metadata_),
      -1);
  CDOTAClientMsg_TeleportRequiresHalt_descriptor_ = file->message_type(11);
  static const int CDOTAClientMsg_TeleportRequiresHalt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, enabled_),
  };
  CDOTAClientMsg_TeleportRequiresHalt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_TeleportRequiresHalt_descriptor_,
      CDOTAClientMsg_TeleportRequiresHalt::default_instance_,
      CDOTAClientMsg_TeleportRequiresHalt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_TeleportRequiresHalt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _internal_metadata_),
      -1);
  CDOTAClientMsg_AutoPurchaseItems_descriptor_ = file->message_type(12);
  static const int CDOTAClientMsg_AutoPurchaseItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AutoPurchaseItems, enabled_),
  };
  CDOTAClientMsg_AutoPurchaseItems_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_AutoPurchaseItems_descriptor_,
      CDOTAClientMsg_AutoPurchaseItems::default_instance_,
      CDOTAClientMsg_AutoPurchaseItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AutoPurchaseItems, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_AutoPurchaseItems),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AutoPurchaseItems, _internal_metadata_),
      -1);
  CDOTAClientMsg_TestItems_descriptor_ = file->message_type(13);
  static const int CDOTAClientMsg_TestItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TestItems, key_values_),
  };
  CDOTAClientMsg_TestItems_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_TestItems_descriptor_,
      CDOTAClientMsg_TestItems::default_instance_,
      CDOTAClientMsg_TestItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TestItems, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_TestItems),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TestItems, _internal_metadata_),
      -1);
  CDOTAClientMsg_SearchString_descriptor_ = file->message_type(14);
  static const int CDOTAClientMsg_SearchString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, search_),
  };
  CDOTAClientMsg_SearchString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_SearchString_descriptor_,
      CDOTAClientMsg_SearchString::default_instance_,
      CDOTAClientMsg_SearchString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_SearchString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _internal_metadata_),
      -1);
  CDOTAClientMsg_Pause_descriptor_ = file->message_type(15);
  static const int CDOTAClientMsg_Pause_offsets_[1] = {
  };
  CDOTAClientMsg_Pause_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_Pause_descriptor_,
      CDOTAClientMsg_Pause::default_instance_,
      CDOTAClientMsg_Pause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_Pause),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _internal_metadata_),
      -1);
  CDOTAClientMsg_ShopViewMode_descriptor_ = file->message_type(16);
  static const int CDOTAClientMsg_ShopViewMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, mode_),
  };
  CDOTAClientMsg_ShopViewMode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ShopViewMode_descriptor_,
      CDOTAClientMsg_ShopViewMode::default_instance_,
      CDOTAClientMsg_ShopViewMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ShopViewMode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _internal_metadata_),
      -1);
  CDOTAClientMsg_SetUnitShareFlag_descriptor_ = file->message_type(17);
  static const int CDOTAClientMsg_SetUnitShareFlag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, state_),
  };
  CDOTAClientMsg_SetUnitShareFlag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_SetUnitShareFlag_descriptor_,
      CDOTAClientMsg_SetUnitShareFlag::default_instance_,
      CDOTAClientMsg_SetUnitShareFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_SetUnitShareFlag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _internal_metadata_),
      -1);
  CDOTAClientMsg_SwapRequest_descriptor_ = file->message_type(18);
  static const int CDOTAClientMsg_SwapRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, player_id_),
  };
  CDOTAClientMsg_SwapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_SwapRequest_descriptor_,
      CDOTAClientMsg_SwapRequest::default_instance_,
      CDOTAClientMsg_SwapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_SwapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _internal_metadata_),
      -1);
  CDOTAClientMsg_SwapAccept_descriptor_ = file->message_type(19);
  static const int CDOTAClientMsg_SwapAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, player_id_),
  };
  CDOTAClientMsg_SwapAccept_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_SwapAccept_descriptor_,
      CDOTAClientMsg_SwapAccept::default_instance_,
      CDOTAClientMsg_SwapAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_SwapAccept),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _internal_metadata_),
      -1);
  CDOTAClientMsg_WorldLine_descriptor_ = file->message_type(20);
  static const int CDOTAClientMsg_WorldLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, worldline_),
  };
  CDOTAClientMsg_WorldLine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_WorldLine_descriptor_,
      CDOTAClientMsg_WorldLine::default_instance_,
      CDOTAClientMsg_WorldLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_WorldLine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _internal_metadata_),
      -1);
  CDOTAClientMsg_RequestGraphUpdate_descriptor_ = file->message_type(21);
  static const int CDOTAClientMsg_RequestGraphUpdate_offsets_[1] = {
  };
  CDOTAClientMsg_RequestGraphUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_RequestGraphUpdate_descriptor_,
      CDOTAClientMsg_RequestGraphUpdate::default_instance_,
      CDOTAClientMsg_RequestGraphUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_RequestGraphUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _internal_metadata_),
      -1);
  CDOTAClientMsg_ChatWheel_descriptor_ = file->message_type(22);
  static const int CDOTAClientMsg_ChatWheel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, chat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, param_hero_id_),
  };
  CDOTAClientMsg_ChatWheel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ChatWheel_descriptor_,
      CDOTAClientMsg_ChatWheel::default_instance_,
      CDOTAClientMsg_ChatWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ChatWheel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _internal_metadata_),
      -1);
  CDOTAClientMsg_SendStatPopup_descriptor_ = file->message_type(23);
  static const int CDOTAClientMsg_SendStatPopup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, statpopup_),
  };
  CDOTAClientMsg_SendStatPopup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_SendStatPopup_descriptor_,
      CDOTAClientMsg_SendStatPopup::default_instance_,
      CDOTAClientMsg_SendStatPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_SendStatPopup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _internal_metadata_),
      -1);
  CDOTAClientMsg_BeginLastHitChallenge_descriptor_ = file->message_type(24);
  static const int CDOTAClientMsg_BeginLastHitChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_),
  };
  CDOTAClientMsg_BeginLastHitChallenge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_BeginLastHitChallenge_descriptor_,
      CDOTAClientMsg_BeginLastHitChallenge::default_instance_,
      CDOTAClientMsg_BeginLastHitChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_BeginLastHitChallenge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _internal_metadata_),
      -1);
  CDOTAClientMsg_UpdateQuickBuyItem_descriptor_ = file->message_type(25);
  static const int CDOTAClientMsg_UpdateQuickBuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, purchasable_),
  };
  CDOTAClientMsg_UpdateQuickBuyItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_UpdateQuickBuyItem_descriptor_,
      CDOTAClientMsg_UpdateQuickBuyItem::default_instance_,
      CDOTAClientMsg_UpdateQuickBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_UpdateQuickBuyItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _internal_metadata_),
      -1);
  CDOTAClientMsg_UpdateQuickBuy_descriptor_ = file->message_type(26);
  static const int CDOTAClientMsg_UpdateQuickBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, items_),
  };
  CDOTAClientMsg_UpdateQuickBuy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_UpdateQuickBuy_descriptor_,
      CDOTAClientMsg_UpdateQuickBuy::default_instance_,
      CDOTAClientMsg_UpdateQuickBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_UpdateQuickBuy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _internal_metadata_),
      -1);
  CDOTAClientMsg_UpdateCoachListen_descriptor_ = file->message_type(27);
  static const int CDOTAClientMsg_UpdateCoachListen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, player_mask_),
  };
  CDOTAClientMsg_UpdateCoachListen_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_UpdateCoachListen_descriptor_,
      CDOTAClientMsg_UpdateCoachListen::default_instance_,
      CDOTAClientMsg_UpdateCoachListen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_UpdateCoachListen),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, _internal_metadata_),
      -1);
  CDOTAClientMsg_CoachHUDPing_descriptor_ = file->message_type(28);
  static const int CDOTAClientMsg_CoachHUDPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, hud_ping_),
  };
  CDOTAClientMsg_CoachHUDPing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_CoachHUDPing_descriptor_,
      CDOTAClientMsg_CoachHUDPing::default_instance_,
      CDOTAClientMsg_CoachHUDPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_CoachHUDPing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, _internal_metadata_),
      -1);
  CDOTAClientMsg_RecordVote_descriptor_ = file->message_type(29);
  static const int CDOTAClientMsg_RecordVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, choice_index_),
  };
  CDOTAClientMsg_RecordVote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_RecordVote_descriptor_,
      CDOTAClientMsg_RecordVote::default_instance_,
      CDOTAClientMsg_RecordVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_RecordVote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _internal_metadata_),
      -1);
  CDOTAClientMsg_WillPurchaseAlert_descriptor_ = file->message_type(30);
  static const int CDOTAClientMsg_WillPurchaseAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, gold_remaining_),
  };
  CDOTAClientMsg_WillPurchaseAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_WillPurchaseAlert_descriptor_,
      CDOTAClientMsg_WillPurchaseAlert::default_instance_,
      CDOTAClientMsg_WillPurchaseAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_WillPurchaseAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_BuyBackStateAlert_descriptor_ = file->message_type(31);
  static const int CDOTAClientMsg_BuyBackStateAlert_offsets_[1] = {
  };
  CDOTAClientMsg_BuyBackStateAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_BuyBackStateAlert_descriptor_,
      CDOTAClientMsg_BuyBackStateAlert::default_instance_,
      CDOTAClientMsg_BuyBackStateAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_BuyBackStateAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_QuickBuyAlert_descriptor_ = file->message_type(32);
  static const int CDOTAClientMsg_QuickBuyAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, gold_required_),
  };
  CDOTAClientMsg_QuickBuyAlert_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_QuickBuyAlert_descriptor_,
      CDOTAClientMsg_QuickBuyAlert::default_instance_,
      CDOTAClientMsg_QuickBuyAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_QuickBuyAlert),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _internal_metadata_),
      -1);
  CDOTAClientMsg_PlayerShowCase_descriptor_ = file->message_type(33);
  static const int CDOTAClientMsg_PlayerShowCase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, showcase_),
  };
  CDOTAClientMsg_PlayerShowCase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_PlayerShowCase_descriptor_,
      CDOTAClientMsg_PlayerShowCase::default_instance_,
      CDOTAClientMsg_PlayerShowCase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_PlayerShowCase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _internal_metadata_),
      -1);
  CDOTAClientMsg_CameraZoomAmount_descriptor_ = file->message_type(34);
  static const int CDOTAClientMsg_CameraZoomAmount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, zoom_amount_),
  };
  CDOTAClientMsg_CameraZoomAmount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_CameraZoomAmount_descriptor_,
      CDOTAClientMsg_CameraZoomAmount::default_instance_,
      CDOTAClientMsg_CameraZoomAmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_CameraZoomAmount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _internal_metadata_),
      -1);
  CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_ = file->message_type(35);
  static const int CDOTAClientMsg_BroadcasterUsingCameraman_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, cameraman_),
  };
  CDOTAClientMsg_BroadcasterUsingCameraman_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_,
      CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_,
      CDOTAClientMsg_BroadcasterUsingCameraman_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_BroadcasterUsingCameraman),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _internal_metadata_),
      -1);
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_ = file->message_type(36);
  static const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, enabled_),
  };
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_,
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_,
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _internal_metadata_),
      -1);
  CAdditionalEquipSlotClientMsg_descriptor_ = file->message_type(37);
  static const int CAdditionalEquipSlotClientMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, def_index_),
  };
  CAdditionalEquipSlotClientMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAdditionalEquipSlotClientMsg_descriptor_,
      CAdditionalEquipSlotClientMsg::default_instance_,
      CAdditionalEquipSlotClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CAdditionalEquipSlotClientMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _internal_metadata_),
      -1);
  CDOTAClientMsg_FreeInventory_descriptor_ = file->message_type(38);
  static const int CDOTAClientMsg_FreeInventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, equips_),
  };
  CDOTAClientMsg_FreeInventory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_FreeInventory_descriptor_,
      CDOTAClientMsg_FreeInventory::default_instance_,
      CDOTAClientMsg_FreeInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_FreeInventory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _internal_metadata_),
      -1);
  CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_ = file->message_type(39);
  static const int CDOTAClientMsg_FillEmptySlotsWithBots_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, fillwithbots_),
  };
  CDOTAClientMsg_FillEmptySlotsWithBots_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_,
      CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_,
      CDOTAClientMsg_FillEmptySlotsWithBots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_FillEmptySlotsWithBots),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, _internal_metadata_),
      -1);
  CDOTAClientMsg_HeroStatueLike_descriptor_ = file->message_type(40);
  static const int CDOTAClientMsg_HeroStatueLike_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, owner_player_id_),
  };
  CDOTAClientMsg_HeroStatueLike_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_HeroStatueLike_descriptor_,
      CDOTAClientMsg_HeroStatueLike::default_instance_,
      CDOTAClientMsg_HeroStatueLike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_HeroStatueLike),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _internal_metadata_),
      -1);
  CDOTAClientMsg_TeamShowcaseEditor_descriptor_ = file->message_type(41);
  static const int CDOTAClientMsg_TeamShowcaseEditor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseEditor, data_),
  };
  CDOTAClientMsg_TeamShowcaseEditor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_TeamShowcaseEditor_descriptor_,
      CDOTAClientMsg_TeamShowcaseEditor::default_instance_,
      CDOTAClientMsg_TeamShowcaseEditor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseEditor, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_TeamShowcaseEditor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseEditor, _internal_metadata_),
      -1);
  CDOTAClientMsg_TeamShowcaseClientData_descriptor_ = file->message_type(42);
  static const int CDOTAClientMsg_TeamShowcaseClientData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseClientData, data_),
  };
  CDOTAClientMsg_TeamShowcaseClientData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_TeamShowcaseClientData_descriptor_,
      CDOTAClientMsg_TeamShowcaseClientData::default_instance_,
      CDOTAClientMsg_TeamShowcaseClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseClientData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_TeamShowcaseClientData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeamShowcaseClientData, _internal_metadata_),
      -1);
  CDOTAClientMsg_PlayTeamShowcase_descriptor_ = file->message_type(43);
  static const int CDOTAClientMsg_PlayTeamShowcase_offsets_[1] = {
  };
  CDOTAClientMsg_PlayTeamShowcase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_PlayTeamShowcase_descriptor_,
      CDOTAClientMsg_PlayTeamShowcase::default_instance_,
      CDOTAClientMsg_PlayTeamShowcase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayTeamShowcase, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_PlayTeamShowcase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayTeamShowcase, _internal_metadata_),
      -1);
  CDOTAClientMsg_EventCNY2015Cmd_descriptor_ = file->message_type(44);
  static const int CDOTAClientMsg_EventCNY2015Cmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, data_),
  };
  CDOTAClientMsg_EventCNY2015Cmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_EventCNY2015Cmd_descriptor_,
      CDOTAClientMsg_EventCNY2015Cmd::default_instance_,
      CDOTAClientMsg_EventCNY2015Cmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_EventCNY2015Cmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _internal_metadata_),
      -1);
  CDOTAClientMsg_DemoHero_descriptor_ = file->message_type(45);
  static const int CDOTAClientMsg_DemoHero_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_to_spawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, item_defs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, style_index_),
  };
  CDOTAClientMsg_DemoHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_DemoHero_descriptor_,
      CDOTAClientMsg_DemoHero::default_instance_,
      CDOTAClientMsg_DemoHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_DemoHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, _internal_metadata_),
      -1);
  CDOTAClientMsg_ChallengeSelect_descriptor_ = file->message_type(46);
  static const int CDOTAClientMsg_ChallengeSelect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, sequence_id_),
  };
  CDOTAClientMsg_ChallengeSelect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ChallengeSelect_descriptor_,
      CDOTAClientMsg_ChallengeSelect::default_instance_,
      CDOTAClientMsg_ChallengeSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ChallengeSelect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, _internal_metadata_),
      -1);
  CDOTAClientMsg_ChallengeReroll_descriptor_ = file->message_type(47);
  static const int CDOTAClientMsg_ChallengeReroll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, sequence_id_),
  };
  CDOTAClientMsg_ChallengeReroll_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_ChallengeReroll_descriptor_,
      CDOTAClientMsg_ChallengeReroll::default_instance_,
      CDOTAClientMsg_ChallengeReroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_ChallengeReroll),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, _internal_metadata_),
      -1);
  CDOTAClientMsg_CoinWager_descriptor_ = file->message_type(48);
  static const int CDOTAClientMsg_CoinWager_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, wager_amount_),
  };
  CDOTAClientMsg_CoinWager_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDOTAClientMsg_CoinWager_descriptor_,
      CDOTAClientMsg_CoinWager::default_instance_,
      CDOTAClientMsg_CoinWager_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDOTAClientMsg_CoinWager),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, _internal_metadata_),
      -1);
  EDotaClientMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fclientmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_MapPing_descriptor_, &CDOTAClientMsg_MapPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ItemAlert_descriptor_, &CDOTAClientMsg_ItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_EnemyItemAlert_descriptor_, &CDOTAClientMsg_EnemyItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ModifierAlert_descriptor_, &CDOTAClientMsg_ModifierAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ClickedBuff_descriptor_, &CDOTAClientMsg_ClickedBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_HPManaAlert_descriptor_, &CDOTAClientMsg_HPManaAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_GlyphAlert_descriptor_, &CDOTAClientMsg_GlyphAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_MapLine_descriptor_, &CDOTAClientMsg_MapLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_AspectRatio_descriptor_, &CDOTAClientMsg_AspectRatio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_UnitsAutoAttack_descriptor_, &CDOTAClientMsg_UnitsAutoAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_, &CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_TeleportRequiresHalt_descriptor_, &CDOTAClientMsg_TeleportRequiresHalt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_AutoPurchaseItems_descriptor_, &CDOTAClientMsg_AutoPurchaseItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_TestItems_descriptor_, &CDOTAClientMsg_TestItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_SearchString_descriptor_, &CDOTAClientMsg_SearchString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_Pause_descriptor_, &CDOTAClientMsg_Pause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ShopViewMode_descriptor_, &CDOTAClientMsg_ShopViewMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_SetUnitShareFlag_descriptor_, &CDOTAClientMsg_SetUnitShareFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_SwapRequest_descriptor_, &CDOTAClientMsg_SwapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_SwapAccept_descriptor_, &CDOTAClientMsg_SwapAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_WorldLine_descriptor_, &CDOTAClientMsg_WorldLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_RequestGraphUpdate_descriptor_, &CDOTAClientMsg_RequestGraphUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ChatWheel_descriptor_, &CDOTAClientMsg_ChatWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_SendStatPopup_descriptor_, &CDOTAClientMsg_SendStatPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_BeginLastHitChallenge_descriptor_, &CDOTAClientMsg_BeginLastHitChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_UpdateQuickBuyItem_descriptor_, &CDOTAClientMsg_UpdateQuickBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_UpdateQuickBuy_descriptor_, &CDOTAClientMsg_UpdateQuickBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_UpdateCoachListen_descriptor_, &CDOTAClientMsg_UpdateCoachListen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_CoachHUDPing_descriptor_, &CDOTAClientMsg_CoachHUDPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_RecordVote_descriptor_, &CDOTAClientMsg_RecordVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_WillPurchaseAlert_descriptor_, &CDOTAClientMsg_WillPurchaseAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_BuyBackStateAlert_descriptor_, &CDOTAClientMsg_BuyBackStateAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_QuickBuyAlert_descriptor_, &CDOTAClientMsg_QuickBuyAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_PlayerShowCase_descriptor_, &CDOTAClientMsg_PlayerShowCase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_CameraZoomAmount_descriptor_, &CDOTAClientMsg_CameraZoomAmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_, &CDOTAClientMsg_BroadcasterUsingCameraman::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_, &CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAdditionalEquipSlotClientMsg_descriptor_, &CAdditionalEquipSlotClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_FreeInventory_descriptor_, &CDOTAClientMsg_FreeInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_, &CDOTAClientMsg_FillEmptySlotsWithBots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_HeroStatueLike_descriptor_, &CDOTAClientMsg_HeroStatueLike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_TeamShowcaseEditor_descriptor_, &CDOTAClientMsg_TeamShowcaseEditor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_TeamShowcaseClientData_descriptor_, &CDOTAClientMsg_TeamShowcaseClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_PlayTeamShowcase_descriptor_, &CDOTAClientMsg_PlayTeamShowcase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_EventCNY2015Cmd_descriptor_, &CDOTAClientMsg_EventCNY2015Cmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_DemoHero_descriptor_, &CDOTAClientMsg_DemoHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ChallengeSelect_descriptor_, &CDOTAClientMsg_ChallengeSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_ChallengeReroll_descriptor_, &CDOTAClientMsg_ChallengeReroll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDOTAClientMsg_CoinWager_descriptor_, &CDOTAClientMsg_CoinWager::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fclientmessages_2eproto() {
  delete CDOTAClientMsg_MapPing::default_instance_;
  delete CDOTAClientMsg_MapPing_reflection_;
  delete CDOTAClientMsg_ItemAlert::default_instance_;
  delete CDOTAClientMsg_ItemAlert_reflection_;
  delete CDOTAClientMsg_EnemyItemAlert::default_instance_;
  delete CDOTAClientMsg_EnemyItemAlert_reflection_;
  delete CDOTAClientMsg_ModifierAlert::default_instance_;
  delete CDOTAClientMsg_ModifierAlert_reflection_;
  delete CDOTAClientMsg_ClickedBuff::default_instance_;
  delete CDOTAClientMsg_ClickedBuff_reflection_;
  delete CDOTAClientMsg_HPManaAlert::default_instance_;
  delete CDOTAClientMsg_HPManaAlert_reflection_;
  delete CDOTAClientMsg_GlyphAlert::default_instance_;
  delete CDOTAClientMsg_GlyphAlert_reflection_;
  delete CDOTAClientMsg_MapLine::default_instance_;
  delete CDOTAClientMsg_MapLine_reflection_;
  delete CDOTAClientMsg_AspectRatio::default_instance_;
  delete CDOTAClientMsg_AspectRatio_reflection_;
  delete CDOTAClientMsg_UnitsAutoAttack::default_instance_;
  delete CDOTAClientMsg_UnitsAutoAttack_reflection_;
  delete CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_;
  delete CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_;
  delete CDOTAClientMsg_TeleportRequiresHalt::default_instance_;
  delete CDOTAClientMsg_TeleportRequiresHalt_reflection_;
  delete CDOTAClientMsg_AutoPurchaseItems::default_instance_;
  delete CDOTAClientMsg_AutoPurchaseItems_reflection_;
  delete CDOTAClientMsg_TestItems::default_instance_;
  delete CDOTAClientMsg_TestItems_reflection_;
  delete CDOTAClientMsg_SearchString::default_instance_;
  delete CDOTAClientMsg_SearchString_reflection_;
  delete CDOTAClientMsg_Pause::default_instance_;
  delete CDOTAClientMsg_Pause_reflection_;
  delete CDOTAClientMsg_ShopViewMode::default_instance_;
  delete CDOTAClientMsg_ShopViewMode_reflection_;
  delete CDOTAClientMsg_SetUnitShareFlag::default_instance_;
  delete CDOTAClientMsg_SetUnitShareFlag_reflection_;
  delete CDOTAClientMsg_SwapRequest::default_instance_;
  delete CDOTAClientMsg_SwapRequest_reflection_;
  delete CDOTAClientMsg_SwapAccept::default_instance_;
  delete CDOTAClientMsg_SwapAccept_reflection_;
  delete CDOTAClientMsg_WorldLine::default_instance_;
  delete CDOTAClientMsg_WorldLine_reflection_;
  delete CDOTAClientMsg_RequestGraphUpdate::default_instance_;
  delete CDOTAClientMsg_RequestGraphUpdate_reflection_;
  delete CDOTAClientMsg_ChatWheel::default_instance_;
  delete CDOTAClientMsg_ChatWheel_reflection_;
  delete CDOTAClientMsg_SendStatPopup::default_instance_;
  delete CDOTAClientMsg_SendStatPopup_reflection_;
  delete CDOTAClientMsg_BeginLastHitChallenge::default_instance_;
  delete CDOTAClientMsg_BeginLastHitChallenge_reflection_;
  delete CDOTAClientMsg_UpdateQuickBuyItem::default_instance_;
  delete CDOTAClientMsg_UpdateQuickBuyItem_reflection_;
  delete CDOTAClientMsg_UpdateQuickBuy::default_instance_;
  delete CDOTAClientMsg_UpdateQuickBuy_reflection_;
  delete CDOTAClientMsg_UpdateCoachListen::default_instance_;
  delete CDOTAClientMsg_UpdateCoachListen_reflection_;
  delete CDOTAClientMsg_CoachHUDPing::default_instance_;
  delete CDOTAClientMsg_CoachHUDPing_reflection_;
  delete CDOTAClientMsg_RecordVote::default_instance_;
  delete CDOTAClientMsg_RecordVote_reflection_;
  delete CDOTAClientMsg_WillPurchaseAlert::default_instance_;
  delete CDOTAClientMsg_WillPurchaseAlert_reflection_;
  delete CDOTAClientMsg_BuyBackStateAlert::default_instance_;
  delete CDOTAClientMsg_BuyBackStateAlert_reflection_;
  delete CDOTAClientMsg_QuickBuyAlert::default_instance_;
  delete CDOTAClientMsg_QuickBuyAlert_reflection_;
  delete CDOTAClientMsg_PlayerShowCase::default_instance_;
  delete CDOTAClientMsg_PlayerShowCase_reflection_;
  delete CDOTAClientMsg_CameraZoomAmount::default_instance_;
  delete CDOTAClientMsg_CameraZoomAmount_reflection_;
  delete CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_;
  delete CDOTAClientMsg_BroadcasterUsingCameraman_reflection_;
  delete CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_;
  delete CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_;
  delete CAdditionalEquipSlotClientMsg::default_instance_;
  delete CAdditionalEquipSlotClientMsg_reflection_;
  delete CDOTAClientMsg_FreeInventory::default_instance_;
  delete CDOTAClientMsg_FreeInventory_reflection_;
  delete CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_;
  delete CDOTAClientMsg_FillEmptySlotsWithBots_reflection_;
  delete CDOTAClientMsg_HeroStatueLike::default_instance_;
  delete CDOTAClientMsg_HeroStatueLike_reflection_;
  delete CDOTAClientMsg_TeamShowcaseEditor::default_instance_;
  delete CDOTAClientMsg_TeamShowcaseEditor_reflection_;
  delete CDOTAClientMsg_TeamShowcaseClientData::default_instance_;
  delete CDOTAClientMsg_TeamShowcaseClientData_reflection_;
  delete CDOTAClientMsg_PlayTeamShowcase::default_instance_;
  delete CDOTAClientMsg_PlayTeamShowcase_reflection_;
  delete CDOTAClientMsg_EventCNY2015Cmd::default_instance_;
  delete CDOTAClientMsg_EventCNY2015Cmd_reflection_;
  delete CDOTAClientMsg_DemoHero::default_instance_;
  delete CDOTAClientMsg_DemoHero_reflection_;
  delete CDOTAClientMsg_ChallengeSelect::default_instance_;
  delete CDOTAClientMsg_ChallengeSelect_reflection_;
  delete CDOTAClientMsg_ChallengeReroll::default_instance_;
  delete CDOTAClientMsg_ChallengeReroll_reflection_;
  delete CDOTAClientMsg_CoinWager::default_instance_;
  delete CDOTAClientMsg_CoinWager_reflection_;
}

void protobuf_AddDesc_dota_5fclientmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fcommonmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031dota_clientmessages.proto\032\031dota_common"
    "messages.proto\"G\n\026CDOTAClientMsg_MapPing"
    "\022-\n\rlocation_ping\030\001 \001(\0132\026.CDOTAMsg_Locat"
    "ionPing\"C\n\030CDOTAClientMsg_ItemAlert\022\'\n\ni"
    "tem_alert\030\001 \001(\0132\023.CDOTAMsg_ItemAlert\"6\n\035"
    "CDOTAClientMsg_EnemyItemAlert\022\025\n\ritem_en"
    "tindex\030\001 \001(\r\"T\n\034CDOTAClientMsg_ModifierA"
    "lert\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n\017tar"
    "get_entindex\030\002 \001(\r\"R\n\032CDOTAClientMsg_Cli"
    "ckedBuff\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n"
    "\017target_entindex\030\002 \001(\r\"5\n\032CDOTAClientMsg"
    "_HPManaAlert\022\027\n\017target_entindex\030\001 \001(\r\"-\n"
    "\031CDOTAClientMsg_GlyphAlert\022\020\n\010negative\030\001"
    " \001(\010\"<\n\026CDOTAClientMsg_MapLine\022\"\n\007maplin"
    "e\030\001 \001(\0132\021.CDOTAMsg_MapLine\"+\n\032CDOTAClien"
    "tMsg_AspectRatio\022\r\n\005ratio\030\001 \001(\002\"1\n\036CDOTA"
    "ClientMsg_UnitsAutoAttack\022\017\n\007enabled\030\001 \001"
    "(\010\";\n(CDOTAClientMsg_UnitsAutoAttackAfte"
    "rSpell\022\017\n\007enabled\030\001 \001(\010\"6\n#CDOTAClientMs"
    "g_TeleportRequiresHalt\022\017\n\007enabled\030\001 \001(\010\""
    "3\n CDOTAClientMsg_AutoPurchaseItems\022\017\n\007e"
    "nabled\030\001 \001(\010\".\n\030CDOTAClientMsg_TestItems"
    "\022\022\n\nkey_values\030\001 \001(\t\"-\n\033CDOTAClientMsg_S"
    "earchString\022\016\n\006search\030\001 \001(\t\"\026\n\024CDOTAClie"
    "ntMsg_Pause\"+\n\033CDOTAClientMsg_ShopViewMo"
    "de\022\014\n\004mode\030\001 \001(\r\"P\n\037CDOTAClientMsg_SetUn"
    "itShareFlag\022\020\n\010playerID\030\001 \001(\r\022\014\n\004flag\030\002 "
    "\001(\r\022\r\n\005state\030\003 \001(\010\"/\n\032CDOTAClientMsg_Swa"
    "pRequest\022\021\n\tplayer_id\030\001 \001(\r\".\n\031CDOTAClie"
    "ntMsg_SwapAccept\022\021\n\tplayer_id\030\001 \001(\r\"B\n\030C"
    "DOTAClientMsg_WorldLine\022&\n\tworldline\030\001 \001"
    "(\0132\023.CDOTAMsg_WorldLine\"#\n!CDOTAClientMs"
    "g_RequestGraphUpdate\"n\n\030CDOTAClientMsg_C"
    "hatWheel\022;\n\014chat_message\030\001 \001(\0162\026.EDOTACh"
    "atWheelMessage:\rk_EDOTA_CW_Ok\022\025\n\rparam_h"
    "ero_id\030\002 \001(\r\"J\n\034CDOTAClientMsg_SendStatP"
    "opup\022*\n\tstatpopup\030\001 \001(\0132\027.CDOTAMsg_SendS"
    "tatPopup\"S\n$CDOTAClientMsg_BeginLastHitC"
    "hallenge\022\023\n\013chosen_lane\030\001 \001(\r\022\026\n\016helper_"
    "enabled\030\002 \001(\010\"K\n!CDOTAClientMsg_UpdateQu"
    "ickBuyItem\022\021\n\titem_type\030\001 \001(\005\022\023\n\013purchas"
    "able\030\002 \001(\010\"R\n\035CDOTAClientMsg_UpdateQuick"
    "Buy\0221\n\005items\030\001 \003(\0132\".CDOTAClientMsg_Upda"
    "teQuickBuyItem\"7\n CDOTAClientMsg_UpdateC"
    "oachListen\022\023\n\013player_mask\030\001 \001(\r\"G\n\033CDOTA"
    "ClientMsg_CoachHUDPing\022(\n\010hud_ping\030\001 \001(\013"
    "2\026.CDOTAMsg_CoachHUDPing\"1\n\031CDOTAClientM"
    "sg_RecordVote\022\024\n\014choice_index\030\001 \001(\005\"J\n C"
    "DOTAClientMsg_WillPurchaseAlert\022\016\n\006itemi"
    "d\030\001 \001(\005\022\026\n\016gold_remaining\030\002 \001(\r\"\"\n CDOTA"
    "ClientMsg_BuyBackStateAlert\"E\n\034CDOTAClie"
    "ntMsg_QuickBuyAlert\022\016\n\006itemid\030\001 \001(\005\022\025\n\rg"
    "old_required\030\002 \001(\005\"1\n\035CDOTAClientMsg_Pla"
    "yerShowCase\022\020\n\010showcase\030\001 \001(\010\"6\n\037CDOTACl"
    "ientMsg_CameraZoomAmount\022\023\n\013zoom_amount\030"
    "\001 \001(\002\"=\n(CDOTAClientMsg_BroadcasterUsing"
    "Cameraman\022\021\n\tcameraman\030\001 \001(\010\"H\n5CDOTACli"
    "entMsg_BroadcasterUsingAssistedCameraOpe"
    "rator\022\017\n\007enabled\030\001 \001(\010\"U\n\035CAdditionalEqu"
    "ipSlotClientMsg\022\020\n\010class_id\030\001 \001(\r\022\017\n\007slo"
    "t_id\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\"N\n\034CDOTACl"
    "ientMsg_FreeInventory\022.\n\006equips\030\001 \003(\0132\036."
    "CAdditionalEquipSlotClientMsg\"=\n%CDOTACl"
    "ientMsg_FillEmptySlotsWithBots\022\024\n\014fillwi"
    "thbots\030\001 \001(\010\"8\n\035CDOTAClientMsg_HeroStatu"
    "eLike\022\027\n\017owner_player_id\030\001 \001(\r\"1\n!CDOTAC"
    "lientMsg_TeamShowcaseEditor\022\014\n\004data\030\001 \001("
    "\014\"5\n%CDOTAClientMsg_TeamShowcaseClientDa"
    "ta\022\014\n\004data\030\001 \001(\014\"!\n\037CDOTAClientMsg_PlayT"
    "eamShowcase\".\n\036CDOTAClientMsg_EventCNY20"
    "15Cmd\022\014\n\004data\030\001 \001(\014\"~\n\027CDOTAClientMsg_De"
    "moHero\022\017\n\007hero_id\030\001 \001(\005\022\030\n\020hero_id_to_sp"
    "awn\030\002 \001(\005\022\021\n\titem_defs\030\003 \003(\r\022\020\n\010item_ids"
    "\030\004 \003(\004\022\023\n\013style_index\030\005 \001(\r\"X\n\036CDOTAClie"
    "ntMsg_ChallengeSelect\022\020\n\010event_id\030\001 \001(\r\022"
    "\017\n\007slot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"X\n"
    "\036CDOTAClientMsg_ChallengeReroll\022\020\n\010event"
    "_id\030\001 \001(\r\022\017\n\007slot_id\030\002 \001(\r\022\023\n\013sequence_i"
    "d\030\003 \001(\r\"0\n\030CDOTAClientMsg_CoinWager\022\024\n\014w"
    "ager_amount\030\001 \001(\r*\274\013\n\023EDotaClientMessage"
    "s\022\024\n\017DOTA_CM_MapLine\020\255\002\022\030\n\023DOTA_CM_Aspec"
    "tRatio\020\256\002\022\024\n\017DOTA_CM_MapPing\020\257\002\022\034\n\027DOTA_"
    "CM_UnitsAutoAttack\020\260\002\022\036\n\031DOTA_CM_AutoPur"
    "chaseItems\020\261\002\022\026\n\021DOTA_CM_TestItems\020\262\002\022\031\n"
    "\024DOTA_CM_SearchString\020\263\002\022\022\n\rDOTA_CM_Paus"
    "e\020\264\002\022\031\n\024DOTA_CM_ShopViewMode\020\265\002\022\035\n\030DOTA_"
    "CM_SetUnitShareFlag\020\266\002\022\030\n\023DOTA_CM_SwapRe"
    "quest\020\267\002\022\027\n\022DOTA_CM_SwapAccept\020\270\002\022\026\n\021DOT"
    "A_CM_WorldLine\020\271\002\022\037\n\032DOTA_CM_RequestGrap"
    "hUpdate\020\272\002\022\026\n\021DOTA_CM_ItemAlert\020\273\002\022\026\n\021DO"
    "TA_CM_ChatWheel\020\274\002\022\032\n\025DOTA_CM_SendStatPo"
    "pup\020\275\002\022\"\n\035DOTA_CM_BeginLastHitChallenge\020"
    "\276\002\022\033\n\026DOTA_CM_UpdateQuickBuy\020\277\002\022\036\n\031DOTA_"
    "CM_UpdateCoachListen\020\300\002\022\031\n\024DOTA_CM_Coach"
    "HUDPing\020\301\002\022\027\n\022DOTA_CM_RecordVote\020\302\002\022&\n!D"
    "OTA_CM_UnitsAutoAttackAfterSpell\020\303\002\022\036\n\031D"
    "OTA_CM_WillPurchaseAlert\020\304\002\022\033\n\026DOTA_CM_P"
    "layerShowCase\020\305\002\022!\n\034DOTA_CM_TeleportRequ"
    "iresHalt\020\306\002\022\035\n\030DOTA_CM_CameraZoomAmount\020"
    "\307\002\022%\n DOTA_CM_BroadcasterUsingCamerman\020\310"
    "\002\0223\n.DOTA_CM_BroadcasterUsingAssistedCam"
    "eraOperator\020\311\002\022\033\n\026DOTA_CM_EnemyItemAlert"
    "\020\312\002\022\032\n\025DOTA_CM_FreeInventory\020\313\002\022\036\n\031DOTA_"
    "CM_BuyBackStateAlert\020\314\002\022\032\n\025DOTA_CM_Quick"
    "BuyAlert\020\315\002\022\033\n\026DOTA_CM_HeroStatueLike\020\316\002"
    "\022\032\n\025DOTA_CM_ModifierAlert\020\317\002\022\037\n\032DOTA_CM_"
    "TeamShowcaseEditor\020\320\002\022\030\n\023DOTA_CM_HPManaA"
    "lert\020\321\002\022\027\n\022DOTA_CM_GlyphAlert\020\322\002\022#\n\036DOTA"
    "_CM_TeamShowcaseClientData\020\323\002\022\035\n\030DOTA_CM"
    "_PlayTeamShowcase\020\324\002\022\034\n\027DOTA_CM_EventCNY"
    "2015Cmd\020\325\002\022#\n\036DOTA_CM_FillEmptySlotsWith"
    "Bots\020\326\002\022\025\n\020DOTA_CM_DemoHero\020\327\002\022$\n\037DOTA_C"
    "M_AbilityLearnModeToggled\020\330\002\022\034\n\027DOTA_CM_"
    "AbilityStartUse\020\331\002\022\034\n\027DOTA_CM_ChallengeS"
    "elect\020\332\002\022\034\n\027DOTA_CM_ChallengeReroll\020\333\002\022\030"
    "\n\023DOTA_CM_ClickedBuff\020\334\002\022\026\n\021DOTA_CM_Coin"
    "Wager\020\335\002B\005H\001\200\001\000", 4655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_clientmessages.proto", &protobuf_RegisterTypes);
  CDOTAClientMsg_MapPing::default_instance_ = new CDOTAClientMsg_MapPing();
  CDOTAClientMsg_ItemAlert::default_instance_ = new CDOTAClientMsg_ItemAlert();
  CDOTAClientMsg_EnemyItemAlert::default_instance_ = new CDOTAClientMsg_EnemyItemAlert();
  CDOTAClientMsg_ModifierAlert::default_instance_ = new CDOTAClientMsg_ModifierAlert();
  CDOTAClientMsg_ClickedBuff::default_instance_ = new CDOTAClientMsg_ClickedBuff();
  CDOTAClientMsg_HPManaAlert::default_instance_ = new CDOTAClientMsg_HPManaAlert();
  CDOTAClientMsg_GlyphAlert::default_instance_ = new CDOTAClientMsg_GlyphAlert();
  CDOTAClientMsg_MapLine::default_instance_ = new CDOTAClientMsg_MapLine();
  CDOTAClientMsg_AspectRatio::default_instance_ = new CDOTAClientMsg_AspectRatio();
  CDOTAClientMsg_UnitsAutoAttack::default_instance_ = new CDOTAClientMsg_UnitsAutoAttack();
  CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_ = new CDOTAClientMsg_UnitsAutoAttackAfterSpell();
  CDOTAClientMsg_TeleportRequiresHalt::default_instance_ = new CDOTAClientMsg_TeleportRequiresHalt();
  CDOTAClientMsg_AutoPurchaseItems::default_instance_ = new CDOTAClientMsg_AutoPurchaseItems();
  CDOTAClientMsg_TestItems::default_instance_ = new CDOTAClientMsg_TestItems();
  CDOTAClientMsg_SearchString::default_instance_ = new CDOTAClientMsg_SearchString();
  CDOTAClientMsg_Pause::default_instance_ = new CDOTAClientMsg_Pause();
  CDOTAClientMsg_ShopViewMode::default_instance_ = new CDOTAClientMsg_ShopViewMode();
  CDOTAClientMsg_SetUnitShareFlag::default_instance_ = new CDOTAClientMsg_SetUnitShareFlag();
  CDOTAClientMsg_SwapRequest::default_instance_ = new CDOTAClientMsg_SwapRequest();
  CDOTAClientMsg_SwapAccept::default_instance_ = new CDOTAClientMsg_SwapAccept();
  CDOTAClientMsg_WorldLine::default_instance_ = new CDOTAClientMsg_WorldLine();
  CDOTAClientMsg_RequestGraphUpdate::default_instance_ = new CDOTAClientMsg_RequestGraphUpdate();
  CDOTAClientMsg_ChatWheel::default_instance_ = new CDOTAClientMsg_ChatWheel();
  CDOTAClientMsg_SendStatPopup::default_instance_ = new CDOTAClientMsg_SendStatPopup();
  CDOTAClientMsg_BeginLastHitChallenge::default_instance_ = new CDOTAClientMsg_BeginLastHitChallenge();
  CDOTAClientMsg_UpdateQuickBuyItem::default_instance_ = new CDOTAClientMsg_UpdateQuickBuyItem();
  CDOTAClientMsg_UpdateQuickBuy::default_instance_ = new CDOTAClientMsg_UpdateQuickBuy();
  CDOTAClientMsg_UpdateCoachListen::default_instance_ = new CDOTAClientMsg_UpdateCoachListen();
  CDOTAClientMsg_CoachHUDPing::default_instance_ = new CDOTAClientMsg_CoachHUDPing();
  CDOTAClientMsg_RecordVote::default_instance_ = new CDOTAClientMsg_RecordVote();
  CDOTAClientMsg_WillPurchaseAlert::default_instance_ = new CDOTAClientMsg_WillPurchaseAlert();
  CDOTAClientMsg_BuyBackStateAlert::default_instance_ = new CDOTAClientMsg_BuyBackStateAlert();
  CDOTAClientMsg_QuickBuyAlert::default_instance_ = new CDOTAClientMsg_QuickBuyAlert();
  CDOTAClientMsg_PlayerShowCase::default_instance_ = new CDOTAClientMsg_PlayerShowCase();
  CDOTAClientMsg_CameraZoomAmount::default_instance_ = new CDOTAClientMsg_CameraZoomAmount();
  CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_ = new CDOTAClientMsg_BroadcasterUsingCameraman();
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_ = new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator();
  CAdditionalEquipSlotClientMsg::default_instance_ = new CAdditionalEquipSlotClientMsg();
  CDOTAClientMsg_FreeInventory::default_instance_ = new CDOTAClientMsg_FreeInventory();
  CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_ = new CDOTAClientMsg_FillEmptySlotsWithBots();
  CDOTAClientMsg_HeroStatueLike::default_instance_ = new CDOTAClientMsg_HeroStatueLike();
  CDOTAClientMsg_TeamShowcaseEditor::default_instance_ = new CDOTAClientMsg_TeamShowcaseEditor();
  CDOTAClientMsg_TeamShowcaseClientData::default_instance_ = new CDOTAClientMsg_TeamShowcaseClientData();
  CDOTAClientMsg_PlayTeamShowcase::default_instance_ = new CDOTAClientMsg_PlayTeamShowcase();
  CDOTAClientMsg_EventCNY2015Cmd::default_instance_ = new CDOTAClientMsg_EventCNY2015Cmd();
  CDOTAClientMsg_DemoHero::default_instance_ = new CDOTAClientMsg_DemoHero();
  CDOTAClientMsg_ChallengeSelect::default_instance_ = new CDOTAClientMsg_ChallengeSelect();
  CDOTAClientMsg_ChallengeReroll::default_instance_ = new CDOTAClientMsg_ChallengeReroll();
  CDOTAClientMsg_CoinWager::default_instance_ = new CDOTAClientMsg_CoinWager();
  CDOTAClientMsg_MapPing::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EnemyItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ModifierAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ClickedBuff::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_HPManaAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_GlyphAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_MapLine::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_AspectRatio::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UnitsAutoAttack::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeleportRequiresHalt::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_AutoPurchaseItems::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TestItems::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SearchString::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_Pause::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ShopViewMode::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SetUnitShareFlag::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SwapRequest::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SwapAccept::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_WorldLine::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RequestGraphUpdate::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChatWheel::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SendStatPopup::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BeginLastHitChallenge::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateQuickBuyItem::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateQuickBuy::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateCoachListen::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CoachHUDPing::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RecordVote::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_WillPurchaseAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BuyBackStateAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_QuickBuyAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_PlayerShowCase::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CameraZoomAmount::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_->InitAsDefaultInstance();
  CAdditionalEquipSlotClientMsg::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_FreeInventory::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_HeroStatueLike::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeamShowcaseEditor::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeamShowcaseClientData::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_PlayTeamShowcase::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EventCNY2015Cmd::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_DemoHero::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChallengeSelect::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChallengeReroll::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CoinWager::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fclientmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fclientmessages_2eproto {
  StaticDescriptorInitializer_dota_5fclientmessages_2eproto() {
    protobuf_AddDesc_dota_5fclientmessages_2eproto();
  }
} static_descriptor_initializer_dota_5fclientmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaClientMessages_descriptor_;
}
bool EDotaClientMessages_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MapPing::kLocationPingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::InitAsDefaultInstance() {
  location_ping_ = const_cast< ::CDOTAMsg_LocationPing*>(&::CDOTAMsg_LocationPing::default_instance());
}

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::SharedCtor() {
  _cached_size_ = 0;
  location_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MapPing::~CDOTAClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapPing)
  SharedDtor();
}

void CDOTAClientMsg_MapPing::SharedDtor() {
  if (this != default_instance_) {
    delete location_ping_;
  }
}

void CDOTAClientMsg_MapPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MapPing_descriptor_;
}

const CDOTAClientMsg_MapPing& CDOTAClientMsg_MapPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::default_instance_ = NULL;

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_MapPing* n = new CDOTAClientMsg_MapPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_MapPing::Clear() {
  if (has_location_ping()) {
    if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_MapPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MapPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_LocationPing location_ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MapPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MapPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MapPing)
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_ping_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MapPing)
}

::google::protobuf::uint8* CDOTAClientMsg_MapPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapPing)
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->location_ping_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapPing)
  return target;
}

int CDOTAClientMsg_MapPing::ByteSize() const {
  int total_size = 0;

  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_ping_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapPing::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_MapPing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_MapPing>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapPing::MergeFrom(const CDOTAClientMsg_MapPing& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location_ping()) {
      mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_MapPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapPing::CopyFrom(const CDOTAClientMsg_MapPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapPing::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MapPing::Swap(CDOTAClientMsg_MapPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MapPing::InternalSwap(CDOTAClientMsg_MapPing* other) {
  std::swap(location_ping_, other->location_ping_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_MapPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MapPing_descriptor_;
  metadata.reflection = CDOTAClientMsg_MapPing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_MapPing

// optional .CDOTAMsg_LocationPing location_ping = 1;
bool CDOTAClientMsg_MapPing::has_location_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_MapPing::set_has_location_ping() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_MapPing::clear_has_location_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_MapPing::clear_location_ping() {
  if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
  clear_has_location_ping();
}
const ::CDOTAMsg_LocationPing& CDOTAClientMsg_MapPing::location_ping() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MapPing.location_ping)
  return location_ping_ != NULL ? *location_ping_ : *default_instance_->location_ping_;
}
::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::mutable_location_ping() {
  set_has_location_ping();
  if (location_ping_ == NULL) {
    location_ping_ = new ::CDOTAMsg_LocationPing;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_MapPing.location_ping)
  return location_ping_;
}
::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::release_location_ping() {
  clear_has_location_ping();
  ::CDOTAMsg_LocationPing* temp = location_ping_;
  location_ping_ = NULL;
  return temp;
}
void CDOTAClientMsg_MapPing::set_allocated_location_ping(::CDOTAMsg_LocationPing* location_ping) {
  delete location_ping_;
  location_ping_ = location_ping;
  if (location_ping) {
    set_has_location_ping();
  } else {
    clear_has_location_ping();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_MapPing.location_ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::InitAsDefaultInstance() {
  item_alert_ = const_cast< ::CDOTAMsg_ItemAlert*>(&::CDOTAMsg_ItemAlert::default_instance());
}

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ItemAlert::~CDOTAClientMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_ItemAlert::SharedDtor() {
  if (this != default_instance_) {
    delete item_alert_;
  }
}

void CDOTAClientMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ItemAlert_descriptor_;
}

const CDOTAClientMsg_ItemAlert& CDOTAClientMsg_ItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::default_instance_ = NULL;

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ItemAlert* n = new CDOTAClientMsg_ItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ItemAlert::Clear() {
  if (has_item_alert()) {
    if (item_alert_ != NULL) item_alert_->::CDOTAMsg_ItemAlert::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_ItemAlert item_alert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ItemAlert)
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->item_alert_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ItemAlert)
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->item_alert_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ItemAlert)
  return target;
}

int CDOTAClientMsg_ItemAlert::ByteSize() const {
  int total_size = 0;

  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_alert_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ItemAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ItemAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const CDOTAClientMsg_ItemAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_alert()) {
      mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const CDOTAClientMsg_ItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ItemAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ItemAlert::Swap(CDOTAClientMsg_ItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ItemAlert::InternalSwap(CDOTAClientMsg_ItemAlert* other) {
  std::swap(item_alert_, other->item_alert_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ItemAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_ItemAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ItemAlert

// optional .CDOTAMsg_ItemAlert item_alert = 1;
bool CDOTAClientMsg_ItemAlert::has_item_alert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ItemAlert::set_has_item_alert() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ItemAlert::clear_has_item_alert() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != NULL) item_alert_->::CDOTAMsg_ItemAlert::Clear();
  clear_has_item_alert();
}
const ::CDOTAMsg_ItemAlert& CDOTAClientMsg_ItemAlert::item_alert() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ItemAlert.item_alert)
  return item_alert_ != NULL ? *item_alert_ : *default_instance_->item_alert_;
}
::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::mutable_item_alert() {
  set_has_item_alert();
  if (item_alert_ == NULL) {
    item_alert_ = new ::CDOTAMsg_ItemAlert;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_ItemAlert.item_alert)
  return item_alert_;
}
::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::release_item_alert() {
  clear_has_item_alert();
  ::CDOTAMsg_ItemAlert* temp = item_alert_;
  item_alert_ = NULL;
  return temp;
}
void CDOTAClientMsg_ItemAlert::set_allocated_item_alert(::CDOTAMsg_ItemAlert* item_alert) {
  delete item_alert_;
  item_alert_ = item_alert;
  if (item_alert) {
    set_has_item_alert();
  } else {
    clear_has_item_alert();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_ItemAlert.item_alert)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EnemyItemAlert::kItemEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EnemyItemAlert::~CDOTAClientMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_EnemyItemAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EnemyItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EnemyItemAlert_descriptor_;
}

const CDOTAClientMsg_EnemyItemAlert& CDOTAClientMsg_EnemyItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::default_instance_ = NULL;

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_EnemyItemAlert* n = new CDOTAClientMsg_EnemyItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_EnemyItemAlert::Clear() {
  item_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_entindex_)));
          set_has_item_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EnemyItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EnemyItemAlert)
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EnemyItemAlert)
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EnemyItemAlert)
  return target;
}

int CDOTAClientMsg_EnemyItemAlert::ByteSize() const {
  int total_size = 0;

  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_entindex());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_EnemyItemAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_EnemyItemAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_entindex()) {
      set_item_entindex(from.item_entindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EnemyItemAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EnemyItemAlert::Swap(CDOTAClientMsg_EnemyItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EnemyItemAlert::InternalSwap(CDOTAClientMsg_EnemyItemAlert* other) {
  std::swap(item_entindex_, other->item_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_EnemyItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EnemyItemAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_EnemyItemAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_EnemyItemAlert

// optional uint32 item_entindex = 1;
bool CDOTAClientMsg_EnemyItemAlert::has_item_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_EnemyItemAlert::set_has_item_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_EnemyItemAlert::clear_has_item_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_EnemyItemAlert::clear_item_entindex() {
  item_entindex_ = 0u;
  clear_has_item_entindex();
}
 ::google::protobuf::uint32 CDOTAClientMsg_EnemyItemAlert::item_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EnemyItemAlert.item_entindex)
  return item_entindex_;
}
 void CDOTAClientMsg_EnemyItemAlert::set_item_entindex(::google::protobuf::uint32 value) {
  set_has_item_entindex();
  item_entindex_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EnemyItemAlert.item_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ModifierAlert::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::SharedCtor() {
  _cached_size_ = 0;
  buff_internal_index_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ModifierAlert::~CDOTAClientMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAClientMsg_ModifierAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ModifierAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ModifierAlert_descriptor_;
}

const CDOTAClientMsg_ModifierAlert& CDOTAClientMsg_ModifierAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::default_instance_ = NULL;

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ModifierAlert* n = new CDOTAClientMsg_ModifierAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ModifierAlert::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_ModifierAlert*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(buff_internal_index_, target_entindex_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ModifierAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
          set_has_buff_internal_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ModifierAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ModifierAlert)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ModifierAlert)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ModifierAlert)
  return target;
}

int CDOTAClientMsg_ModifierAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ModifierAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ModifierAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const CDOTAClientMsg_ModifierAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_internal_index()) {
      set_buff_internal_index(from.buff_internal_index());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const CDOTAClientMsg_ModifierAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ModifierAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ModifierAlert::Swap(CDOTAClientMsg_ModifierAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ModifierAlert::InternalSwap(CDOTAClientMsg_ModifierAlert* other) {
  std::swap(buff_internal_index_, other->buff_internal_index_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ModifierAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ModifierAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_ModifierAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ModifierAlert

// optional int32 buff_internal_index = 1;
bool CDOTAClientMsg_ModifierAlert::has_buff_internal_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ModifierAlert::set_has_buff_internal_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ModifierAlert::clear_has_buff_internal_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ModifierAlert::clear_buff_internal_index() {
  buff_internal_index_ = 0;
  clear_has_buff_internal_index();
}
 ::google::protobuf::int32 CDOTAClientMsg_ModifierAlert::buff_internal_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ModifierAlert.buff_internal_index)
  return buff_internal_index_;
}
 void CDOTAClientMsg_ModifierAlert::set_buff_internal_index(::google::protobuf::int32 value) {
  set_has_buff_internal_index();
  buff_internal_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ModifierAlert.buff_internal_index)
}

// optional uint32 target_entindex = 2;
bool CDOTAClientMsg_ModifierAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ModifierAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ModifierAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ModifierAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ModifierAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ModifierAlert.target_entindex)
  return target_entindex_;
}
 void CDOTAClientMsg_ModifierAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ModifierAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ClickedBuff::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ClickedBuff::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::InitAsDefaultInstance() {
}

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(const CDOTAClientMsg_ClickedBuff& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::SharedCtor() {
  _cached_size_ = 0;
  buff_internal_index_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ClickedBuff::~CDOTAClientMsg_ClickedBuff() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ClickedBuff)
  SharedDtor();
}

void CDOTAClientMsg_ClickedBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ClickedBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ClickedBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ClickedBuff_descriptor_;
}

const CDOTAClientMsg_ClickedBuff& CDOTAClientMsg_ClickedBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ClickedBuff* CDOTAClientMsg_ClickedBuff::default_instance_ = NULL;

CDOTAClientMsg_ClickedBuff* CDOTAClientMsg_ClickedBuff::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ClickedBuff* n = new CDOTAClientMsg_ClickedBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ClickedBuff::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_ClickedBuff*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(buff_internal_index_, target_entindex_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ClickedBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ClickedBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
          set_has_buff_internal_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ClickedBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ClickedBuff)
  return false;
#undef DO_
}

void CDOTAClientMsg_ClickedBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ClickedBuff)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ClickedBuff)
}

::google::protobuf::uint8* CDOTAClientMsg_ClickedBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ClickedBuff)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ClickedBuff)
  return target;
}

int CDOTAClientMsg_ClickedBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ClickedBuff* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ClickedBuff>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const CDOTAClientMsg_ClickedBuff& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_internal_index()) {
      set_buff_internal_index(from.buff_internal_index());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const CDOTAClientMsg_ClickedBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ClickedBuff::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ClickedBuff::Swap(CDOTAClientMsg_ClickedBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ClickedBuff::InternalSwap(CDOTAClientMsg_ClickedBuff* other) {
  std::swap(buff_internal_index_, other->buff_internal_index_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ClickedBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ClickedBuff_descriptor_;
  metadata.reflection = CDOTAClientMsg_ClickedBuff_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ClickedBuff

// optional int32 buff_internal_index = 1;
bool CDOTAClientMsg_ClickedBuff::has_buff_internal_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ClickedBuff::set_has_buff_internal_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ClickedBuff::clear_has_buff_internal_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ClickedBuff::clear_buff_internal_index() {
  buff_internal_index_ = 0;
  clear_has_buff_internal_index();
}
 ::google::protobuf::int32 CDOTAClientMsg_ClickedBuff::buff_internal_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ClickedBuff.buff_internal_index)
  return buff_internal_index_;
}
 void CDOTAClientMsg_ClickedBuff::set_buff_internal_index(::google::protobuf::int32 value) {
  set_has_buff_internal_index();
  buff_internal_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ClickedBuff.buff_internal_index)
}

// optional uint32 target_entindex = 2;
bool CDOTAClientMsg_ClickedBuff::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ClickedBuff::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ClickedBuff::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ClickedBuff::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ClickedBuff::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ClickedBuff.target_entindex)
  return target_entindex_;
}
 void CDOTAClientMsg_ClickedBuff::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ClickedBuff.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_HPManaAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::SharedCtor() {
  _cached_size_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_HPManaAlert::~CDOTAClientMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAClientMsg_HPManaAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_HPManaAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_HPManaAlert_descriptor_;
}

const CDOTAClientMsg_HPManaAlert& CDOTAClientMsg_HPManaAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::default_instance_ = NULL;

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_HPManaAlert* n = new CDOTAClientMsg_HPManaAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_HPManaAlert::Clear() {
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_HPManaAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_HPManaAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_HPManaAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HPManaAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HPManaAlert)
  return target;
}

int CDOTAClientMsg_HPManaAlert::ByteSize() const {
  int total_size = 0;

  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_entindex());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_HPManaAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_HPManaAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const CDOTAClientMsg_HPManaAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const CDOTAClientMsg_HPManaAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HPManaAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_HPManaAlert::Swap(CDOTAClientMsg_HPManaAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HPManaAlert::InternalSwap(CDOTAClientMsg_HPManaAlert* other) {
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_HPManaAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_HPManaAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_HPManaAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_HPManaAlert

// optional uint32 target_entindex = 1;
bool CDOTAClientMsg_HPManaAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_HPManaAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_HPManaAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_HPManaAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
 ::google::protobuf::uint32 CDOTAClientMsg_HPManaAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_HPManaAlert.target_entindex)
  return target_entindex_;
}
 void CDOTAClientMsg_HPManaAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_HPManaAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::SharedCtor() {
  _cached_size_ = 0;
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_GlyphAlert::~CDOTAClientMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAClientMsg_GlyphAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_GlyphAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_GlyphAlert_descriptor_;
}

const CDOTAClientMsg_GlyphAlert& CDOTAClientMsg_GlyphAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::default_instance_ = NULL;

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_GlyphAlert* n = new CDOTAClientMsg_GlyphAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_GlyphAlert::Clear() {
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_GlyphAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
          set_has_negative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_GlyphAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_GlyphAlert)
  // optional bool negative = 1;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GlyphAlert)
  // optional bool negative = 1;
  if (has_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GlyphAlert)
  return target;
}

int CDOTAClientMsg_GlyphAlert::ByteSize() const {
  int total_size = 0;

  // optional bool negative = 1;
  if (has_negative()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_GlyphAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_GlyphAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const CDOTAClientMsg_GlyphAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative()) {
      set_negative(from.negative());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const CDOTAClientMsg_GlyphAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GlyphAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_GlyphAlert::Swap(CDOTAClientMsg_GlyphAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_GlyphAlert::InternalSwap(CDOTAClientMsg_GlyphAlert* other) {
  std::swap(negative_, other->negative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_GlyphAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_GlyphAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_GlyphAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_GlyphAlert

// optional bool negative = 1;
bool CDOTAClientMsg_GlyphAlert::has_negative() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_GlyphAlert::set_has_negative() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_GlyphAlert::clear_has_negative() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_GlyphAlert::clear_negative() {
  negative_ = false;
  clear_has_negative();
}
 bool CDOTAClientMsg_GlyphAlert::negative() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GlyphAlert.negative)
  return negative_;
}
 void CDOTAClientMsg_GlyphAlert::set_negative(bool value) {
  set_has_negative();
  negative_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GlyphAlert.negative)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MapLine::kMaplineFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::InitAsDefaultInstance() {
  mapline_ = const_cast< ::CDOTAMsg_MapLine*>(&::CDOTAMsg_MapLine::default_instance());
}

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  mapline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MapLine::~CDOTAClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapLine)
  SharedDtor();
}

void CDOTAClientMsg_MapLine::SharedDtor() {
  if (this != default_instance_) {
    delete mapline_;
  }
}

void CDOTAClientMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MapLine_descriptor_;
}

const CDOTAClientMsg_MapLine& CDOTAClientMsg_MapLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::default_instance_ = NULL;

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_MapLine* n = new CDOTAClientMsg_MapLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_MapLine::Clear() {
  if (has_mapline()) {
    if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_MapLine mapline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MapLine)
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mapline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MapLine)
}

::google::protobuf::uint8* CDOTAClientMsg_MapLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapLine)
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->mapline_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapLine)
  return target;
}

int CDOTAClientMsg_MapLine::ByteSize() const {
  int total_size = 0;

  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mapline_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_MapLine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_MapLine>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapLine::MergeFrom(const CDOTAClientMsg_MapLine& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapline()) {
      mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from.mapline());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapLine::CopyFrom(const CDOTAClientMsg_MapLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapLine::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MapLine::Swap(CDOTAClientMsg_MapLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MapLine::InternalSwap(CDOTAClientMsg_MapLine* other) {
  std::swap(mapline_, other->mapline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_MapLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MapLine_descriptor_;
  metadata.reflection = CDOTAClientMsg_MapLine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_MapLine

// optional .CDOTAMsg_MapLine mapline = 1;
bool CDOTAClientMsg_MapLine::has_mapline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_MapLine::set_has_mapline() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_MapLine::clear_has_mapline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_MapLine::clear_mapline() {
  if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
  clear_has_mapline();
}
const ::CDOTAMsg_MapLine& CDOTAClientMsg_MapLine::mapline() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MapLine.mapline)
  return mapline_ != NULL ? *mapline_ : *default_instance_->mapline_;
}
::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::mutable_mapline() {
  set_has_mapline();
  if (mapline_ == NULL) {
    mapline_ = new ::CDOTAMsg_MapLine;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_MapLine.mapline)
  return mapline_;
}
::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::release_mapline() {
  clear_has_mapline();
  ::CDOTAMsg_MapLine* temp = mapline_;
  mapline_ = NULL;
  return temp;
}
void CDOTAClientMsg_MapLine::set_allocated_mapline(::CDOTAMsg_MapLine* mapline) {
  delete mapline_;
  mapline_ = mapline;
  if (mapline) {
    set_has_mapline();
  } else {
    clear_has_mapline();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_MapLine.mapline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_AspectRatio::kRatioFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::InitAsDefaultInstance() {
}

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::SharedCtor() {
  _cached_size_ = 0;
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_AspectRatio::~CDOTAClientMsg_AspectRatio() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AspectRatio)
  SharedDtor();
}

void CDOTAClientMsg_AspectRatio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_AspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_AspectRatio_descriptor_;
}

const CDOTAClientMsg_AspectRatio& CDOTAClientMsg_AspectRatio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::default_instance_ = NULL;

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_AspectRatio* n = new CDOTAClientMsg_AspectRatio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_AspectRatio::Clear() {
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_AspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_AspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ratio = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_AspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_AspectRatio)
  return false;
#undef DO_
}

void CDOTAClientMsg_AspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_AspectRatio)
  // optional float ratio = 1;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_AspectRatio)
}

::google::protobuf::uint8* CDOTAClientMsg_AspectRatio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AspectRatio)
  // optional float ratio = 1;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AspectRatio)
  return target;
}

int CDOTAClientMsg_AspectRatio::ByteSize() const {
  int total_size = 0;

  // optional float ratio = 1;
  if (has_ratio()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_AspectRatio* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_AspectRatio>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const CDOTAClientMsg_AspectRatio& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const CDOTAClientMsg_AspectRatio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AspectRatio::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_AspectRatio::Swap(CDOTAClientMsg_AspectRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_AspectRatio::InternalSwap(CDOTAClientMsg_AspectRatio* other) {
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_AspectRatio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_AspectRatio_descriptor_;
  metadata.reflection = CDOTAClientMsg_AspectRatio_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_AspectRatio

// optional float ratio = 1;
bool CDOTAClientMsg_AspectRatio::has_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_AspectRatio::set_has_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_AspectRatio::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_AspectRatio::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
 float CDOTAClientMsg_AspectRatio::ratio() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AspectRatio.ratio)
  return ratio_;
}
 void CDOTAClientMsg_AspectRatio::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AspectRatio.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UnitsAutoAttack::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UnitsAutoAttack::CDOTAClientMsg_UnitsAutoAttack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UnitsAutoAttack)
}

void CDOTAClientMsg_UnitsAutoAttack::InitAsDefaultInstance() {
}

CDOTAClientMsg_UnitsAutoAttack::CDOTAClientMsg_UnitsAutoAttack(const CDOTAClientMsg_UnitsAutoAttack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttack)
}

void CDOTAClientMsg_UnitsAutoAttack::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UnitsAutoAttack::~CDOTAClientMsg_UnitsAutoAttack() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttack)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UnitsAutoAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttack_descriptor_;
}

const CDOTAClientMsg_UnitsAutoAttack& CDOTAClientMsg_UnitsAutoAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UnitsAutoAttack* CDOTAClientMsg_UnitsAutoAttack::default_instance_ = NULL;

CDOTAClientMsg_UnitsAutoAttack* CDOTAClientMsg_UnitsAutoAttack::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UnitsAutoAttack* n = new CDOTAClientMsg_UnitsAutoAttack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UnitsAutoAttack::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_UnitsAutoAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UnitsAutoAttack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UnitsAutoAttack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UnitsAutoAttack)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UnitsAutoAttack)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UnitsAutoAttack)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttack)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttack)
  return target;
}

int CDOTAClientMsg_UnitsAutoAttack::ByteSize() const {
  int total_size = 0;

  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_UnitsAutoAttack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UnitsAutoAttack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttack::MergeFrom(const CDOTAClientMsg_UnitsAutoAttack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_UnitsAutoAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttack::CopyFrom(const CDOTAClientMsg_UnitsAutoAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttack::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UnitsAutoAttack::Swap(CDOTAClientMsg_UnitsAutoAttack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UnitsAutoAttack::InternalSwap(CDOTAClientMsg_UnitsAutoAttack* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UnitsAutoAttack_descriptor_;
  metadata.reflection = CDOTAClientMsg_UnitsAutoAttack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UnitsAutoAttack

// optional bool enabled = 1;
bool CDOTAClientMsg_UnitsAutoAttack::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UnitsAutoAttack::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttack::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttack::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool CDOTAClientMsg_UnitsAutoAttack::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UnitsAutoAttack.enabled)
  return enabled_;
}
 void CDOTAClientMsg_UnitsAutoAttack::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UnitsAutoAttack.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UnitsAutoAttackAfterSpell::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InitAsDefaultInstance() {
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::~CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_;
}

const CDOTAClientMsg_UnitsAutoAttackAfterSpell& CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_ = NULL;

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UnitsAutoAttackAfterSpell* n = new CDOTAClientMsg_UnitsAutoAttackAfterSpell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return target;
}

int CDOTAClientMsg_UnitsAutoAttackAfterSpell::ByteSize() const {
  int total_size = 0;

  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_UnitsAutoAttackAfterSpell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UnitsAutoAttackAfterSpell>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InternalSwap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackAfterSpell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_;
  metadata.reflection = CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UnitsAutoAttackAfterSpell

// optional bool enabled = 1;
bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UnitsAutoAttackAfterSpell.enabled)
  return enabled_;
}
 void CDOTAClientMsg_UnitsAutoAttackAfterSpell::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UnitsAutoAttackAfterSpell.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeleportRequiresHalt::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeleportRequiresHalt::~CDOTAClientMsg_TeleportRequiresHalt() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeleportRequiresHalt)
  SharedDtor();
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeleportRequiresHalt_descriptor_;
}

const CDOTAClientMsg_TeleportRequiresHalt& CDOTAClientMsg_TeleportRequiresHalt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::default_instance_ = NULL;

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_TeleportRequiresHalt* n = new CDOTAClientMsg_TeleportRequiresHalt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_TeleportRequiresHalt::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_TeleportRequiresHalt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeleportRequiresHalt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeleportRequiresHalt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeleportRequiresHalt)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeleportRequiresHalt)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeleportRequiresHalt)
}

::google::protobuf::uint8* CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeleportRequiresHalt)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeleportRequiresHalt)
  return target;
}

int CDOTAClientMsg_TeleportRequiresHalt::ByteSize() const {
  int total_size = 0;

  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_TeleportRequiresHalt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_TeleportRequiresHalt>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeleportRequiresHalt::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeleportRequiresHalt::Swap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TeleportRequiresHalt::InternalSwap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_TeleportRequiresHalt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeleportRequiresHalt_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeleportRequiresHalt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_TeleportRequiresHalt

// optional bool enabled = 1;
bool CDOTAClientMsg_TeleportRequiresHalt::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_TeleportRequiresHalt::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_TeleportRequiresHalt::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_TeleportRequiresHalt::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool CDOTAClientMsg_TeleportRequiresHalt::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TeleportRequiresHalt.enabled)
  return enabled_;
}
 void CDOTAClientMsg_TeleportRequiresHalt::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TeleportRequiresHalt.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_AutoPurchaseItems::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_AutoPurchaseItems::CDOTAClientMsg_AutoPurchaseItems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_AutoPurchaseItems)
}

void CDOTAClientMsg_AutoPurchaseItems::InitAsDefaultInstance() {
}

CDOTAClientMsg_AutoPurchaseItems::CDOTAClientMsg_AutoPurchaseItems(const CDOTAClientMsg_AutoPurchaseItems& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AutoPurchaseItems)
}

void CDOTAClientMsg_AutoPurchaseItems::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_AutoPurchaseItems::~CDOTAClientMsg_AutoPurchaseItems() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AutoPurchaseItems)
  SharedDtor();
}

void CDOTAClientMsg_AutoPurchaseItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_AutoPurchaseItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_AutoPurchaseItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_AutoPurchaseItems_descriptor_;
}

const CDOTAClientMsg_AutoPurchaseItems& CDOTAClientMsg_AutoPurchaseItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_AutoPurchaseItems* CDOTAClientMsg_AutoPurchaseItems::default_instance_ = NULL;

CDOTAClientMsg_AutoPurchaseItems* CDOTAClientMsg_AutoPurchaseItems::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_AutoPurchaseItems* n = new CDOTAClientMsg_AutoPurchaseItems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_AutoPurchaseItems::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_AutoPurchaseItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_AutoPurchaseItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_AutoPurchaseItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_AutoPurchaseItems)
  return false;
#undef DO_
}

void CDOTAClientMsg_AutoPurchaseItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_AutoPurchaseItems)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_AutoPurchaseItems)
}

::google::protobuf::uint8* CDOTAClientMsg_AutoPurchaseItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AutoPurchaseItems)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AutoPurchaseItems)
  return target;
}

int CDOTAClientMsg_AutoPurchaseItems::ByteSize() const {
  int total_size = 0;

  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_AutoPurchaseItems::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_AutoPurchaseItems* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_AutoPurchaseItems>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AutoPurchaseItems::MergeFrom(const CDOTAClientMsg_AutoPurchaseItems& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_AutoPurchaseItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AutoPurchaseItems::CopyFrom(const CDOTAClientMsg_AutoPurchaseItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AutoPurchaseItems::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_AutoPurchaseItems::Swap(CDOTAClientMsg_AutoPurchaseItems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_AutoPurchaseItems::InternalSwap(CDOTAClientMsg_AutoPurchaseItems* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_AutoPurchaseItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_AutoPurchaseItems_descriptor_;
  metadata.reflection = CDOTAClientMsg_AutoPurchaseItems_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_AutoPurchaseItems

// optional bool enabled = 1;
bool CDOTAClientMsg_AutoPurchaseItems::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_AutoPurchaseItems::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_AutoPurchaseItems::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_AutoPurchaseItems::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool CDOTAClientMsg_AutoPurchaseItems::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AutoPurchaseItems.enabled)
  return enabled_;
}
 void CDOTAClientMsg_AutoPurchaseItems::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AutoPurchaseItems.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TestItems::kKeyValuesFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TestItems::CDOTAClientMsg_TestItems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TestItems)
}

void CDOTAClientMsg_TestItems::InitAsDefaultInstance() {
}

CDOTAClientMsg_TestItems::CDOTAClientMsg_TestItems(const CDOTAClientMsg_TestItems& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TestItems)
}

void CDOTAClientMsg_TestItems::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TestItems::~CDOTAClientMsg_TestItems() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TestItems)
  SharedDtor();
}

void CDOTAClientMsg_TestItems::SharedDtor() {
  key_values_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TestItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TestItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TestItems_descriptor_;
}

const CDOTAClientMsg_TestItems& CDOTAClientMsg_TestItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TestItems* CDOTAClientMsg_TestItems::default_instance_ = NULL;

CDOTAClientMsg_TestItems* CDOTAClientMsg_TestItems::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_TestItems* n = new CDOTAClientMsg_TestItems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_TestItems::Clear() {
  if (has_key_values()) {
    key_values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_TestItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TestItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_values = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_values().data(), this->key_values().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTAClientMsg_TestItems.key_values");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TestItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TestItems)
  return false;
#undef DO_
}

void CDOTAClientMsg_TestItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TestItems)
  // optional string key_values = 1;
  if (has_key_values()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_values().data(), this->key_values().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_TestItems.key_values");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TestItems)
}

::google::protobuf::uint8* CDOTAClientMsg_TestItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TestItems)
  // optional string key_values = 1;
  if (has_key_values()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_values().data(), this->key_values().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_TestItems.key_values");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TestItems)
  return target;
}

int CDOTAClientMsg_TestItems::ByteSize() const {
  int total_size = 0;

  // optional string key_values = 1;
  if (has_key_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_values());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TestItems::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_TestItems* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_TestItems>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TestItems::MergeFrom(const CDOTAClientMsg_TestItems& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_values()) {
      set_has_key_values();
      key_values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_values_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_TestItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TestItems::CopyFrom(const CDOTAClientMsg_TestItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TestItems::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TestItems::Swap(CDOTAClientMsg_TestItems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TestItems::InternalSwap(CDOTAClientMsg_TestItems* other) {
  key_values_.Swap(&other->key_values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_TestItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TestItems_descriptor_;
  metadata.reflection = CDOTAClientMsg_TestItems_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_TestItems

// optional string key_values = 1;
bool CDOTAClientMsg_TestItems::has_key_values() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_TestItems::set_has_key_values() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_TestItems::clear_has_key_values() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_TestItems::clear_key_values() {
  key_values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_values();
}
 const ::std::string& CDOTAClientMsg_TestItems::key_values() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TestItems.key_values)
  return key_values_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_TestItems::set_key_values(const ::std::string& value) {
  set_has_key_values();
  key_values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TestItems.key_values)
}
 void CDOTAClientMsg_TestItems::set_key_values(const char* value) {
  set_has_key_values();
  key_values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTAClientMsg_TestItems.key_values)
}
 void CDOTAClientMsg_TestItems::set_key_values(const char* value, size_t size) {
  set_has_key_values();
  key_values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTAClientMsg_TestItems.key_values)
}
 ::std::string* CDOTAClientMsg_TestItems::mutable_key_values() {
  set_has_key_values();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_TestItems.key_values)
  return key_values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTAClientMsg_TestItems::release_key_values() {
  clear_has_key_values();
  return key_values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_TestItems::set_allocated_key_values(::std::string* key_values) {
  if (key_values != NULL) {
    set_has_key_values();
  } else {
    clear_has_key_values();
  }
  key_values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_values);
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_TestItems.key_values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SearchString::kSearchFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::InitAsDefaultInstance() {
}

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SearchString::~CDOTAClientMsg_SearchString() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SearchString)
  SharedDtor();
}

void CDOTAClientMsg_SearchString::SharedDtor() {
  search_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SearchString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SearchString_descriptor_;
}

const CDOTAClientMsg_SearchString& CDOTAClientMsg_SearchString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::default_instance_ = NULL;

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SearchString* n = new CDOTAClientMsg_SearchString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SearchString::Clear() {
  if (has_search()) {
    search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_SearchString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SearchString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTAClientMsg_SearchString.search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SearchString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SearchString)
  return false;
#undef DO_
}

void CDOTAClientMsg_SearchString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SearchString)
  // optional string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_SearchString.search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SearchString)
}

::google::protobuf::uint8* CDOTAClientMsg_SearchString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SearchString)
  // optional string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_SearchString.search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SearchString)
  return target;
}

int CDOTAClientMsg_SearchString::ByteSize() const {
  int total_size = 0;

  // optional string search = 1;
  if (has_search()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SearchString::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_SearchString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SearchString>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SearchString::MergeFrom(const CDOTAClientMsg_SearchString& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search()) {
      set_has_search();
      search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_SearchString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SearchString::CopyFrom(const CDOTAClientMsg_SearchString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SearchString::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SearchString::Swap(CDOTAClientMsg_SearchString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SearchString::InternalSwap(CDOTAClientMsg_SearchString* other) {
  search_.Swap(&other->search_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SearchString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SearchString_descriptor_;
  metadata.reflection = CDOTAClientMsg_SearchString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SearchString

// optional string search = 1;
bool CDOTAClientMsg_SearchString::has_search() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SearchString::set_has_search() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SearchString::clear_has_search() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SearchString::clear_search() {
  search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search();
}
 const ::std::string& CDOTAClientMsg_SearchString::search() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SearchString.search)
  return search_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_SearchString::set_search(const ::std::string& value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SearchString.search)
}
 void CDOTAClientMsg_SearchString::set_search(const char* value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTAClientMsg_SearchString.search)
}
 void CDOTAClientMsg_SearchString::set_search(const char* value, size_t size) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTAClientMsg_SearchString.search)
}
 ::std::string* CDOTAClientMsg_SearchString::mutable_search() {
  set_has_search();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_SearchString.search)
  return search_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTAClientMsg_SearchString::release_search() {
  clear_has_search();
  return search_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_SearchString::set_allocated_search(::std::string* search) {
  if (search != NULL) {
    set_has_search();
  } else {
    clear_has_search();
  }
  search_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_SearchString.search)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::InitAsDefaultInstance() {
}

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_Pause::~CDOTAClientMsg_Pause() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_Pause)
  SharedDtor();
}

void CDOTAClientMsg_Pause::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_Pause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_Pause_descriptor_;
}

const CDOTAClientMsg_Pause& CDOTAClientMsg_Pause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::default_instance_ = NULL;

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_Pause* n = new CDOTAClientMsg_Pause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_Pause::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_Pause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_Pause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_Pause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_Pause)
  return false;
#undef DO_
}

void CDOTAClientMsg_Pause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_Pause)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_Pause)
}

::google::protobuf::uint8* CDOTAClientMsg_Pause::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_Pause)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_Pause)
  return target;
}

int CDOTAClientMsg_Pause::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_Pause::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_Pause* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_Pause>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_Pause::MergeFrom(const CDOTAClientMsg_Pause& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_Pause::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_Pause::CopyFrom(const CDOTAClientMsg_Pause& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_Pause::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_Pause::Swap(CDOTAClientMsg_Pause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_Pause::InternalSwap(CDOTAClientMsg_Pause* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_Pause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_Pause_descriptor_;
  metadata.reflection = CDOTAClientMsg_Pause_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_Pause

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ShopViewMode::kModeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::InitAsDefaultInstance() {
}

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ShopViewMode::~CDOTAClientMsg_ShopViewMode() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ShopViewMode)
  SharedDtor();
}

void CDOTAClientMsg_ShopViewMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ShopViewMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ShopViewMode_descriptor_;
}

const CDOTAClientMsg_ShopViewMode& CDOTAClientMsg_ShopViewMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::default_instance_ = NULL;

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ShopViewMode* n = new CDOTAClientMsg_ShopViewMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ShopViewMode::Clear() {
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ShopViewMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ShopViewMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ShopViewMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ShopViewMode)
  return false;
#undef DO_
}

void CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ShopViewMode)
  // optional uint32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ShopViewMode)
}

::google::protobuf::uint8* CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ShopViewMode)
  // optional uint32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ShopViewMode)
  return target;
}

int CDOTAClientMsg_ShopViewMode::ByteSize() const {
  int total_size = 0;

  // optional uint32 mode = 1;
  if (has_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ShopViewMode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ShopViewMode>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const CDOTAClientMsg_ShopViewMode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const CDOTAClientMsg_ShopViewMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ShopViewMode::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ShopViewMode::Swap(CDOTAClientMsg_ShopViewMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ShopViewMode::InternalSwap(CDOTAClientMsg_ShopViewMode* other) {
  std::swap(mode_, other->mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ShopViewMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ShopViewMode_descriptor_;
  metadata.reflection = CDOTAClientMsg_ShopViewMode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ShopViewMode

// optional uint32 mode = 1;
bool CDOTAClientMsg_ShopViewMode::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ShopViewMode::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ShopViewMode::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ShopViewMode::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ShopViewMode::mode() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ShopViewMode.mode)
  return mode_;
}
 void CDOTAClientMsg_ShopViewMode::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ShopViewMode.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SetUnitShareFlag::kPlayerIDFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kFlagFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kStateFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::InitAsDefaultInstance() {
}

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  flag_ = 0u;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SetUnitShareFlag::~CDOTAClientMsg_SetUnitShareFlag() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetUnitShareFlag)
  SharedDtor();
}

void CDOTAClientMsg_SetUnitShareFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SetUnitShareFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SetUnitShareFlag_descriptor_;
}

const CDOTAClientMsg_SetUnitShareFlag& CDOTAClientMsg_SetUnitShareFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::default_instance_ = NULL;

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SetUnitShareFlag* n = new CDOTAClientMsg_SetUnitShareFlag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SetUnitShareFlag::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_SetUnitShareFlag*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, state_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_SetUnitShareFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SetUnitShareFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional bool state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SetUnitShareFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SetUnitShareFlag)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SetUnitShareFlag)
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional bool state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SetUnitShareFlag)
}

::google::protobuf::uint8* CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetUnitShareFlag)
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional bool state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetUnitShareFlag)
  return target;
}

int CDOTAClientMsg_SetUnitShareFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool state = 3;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_SetUnitShareFlag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SetUnitShareFlag>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetUnitShareFlag::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SetUnitShareFlag::Swap(CDOTAClientMsg_SetUnitShareFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetUnitShareFlag::InternalSwap(CDOTAClientMsg_SetUnitShareFlag* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(flag_, other->flag_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetUnitShareFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SetUnitShareFlag_descriptor_;
  metadata.reflection = CDOTAClientMsg_SetUnitShareFlag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SetUnitShareFlag

// optional uint32 playerID = 1;
bool CDOTAClientMsg_SetUnitShareFlag::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SetUnitShareFlag::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
 ::google::protobuf::uint32 CDOTAClientMsg_SetUnitShareFlag::playerid() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetUnitShareFlag.playerID)
  return playerid_;
}
 void CDOTAClientMsg_SetUnitShareFlag::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetUnitShareFlag.playerID)
}

// optional uint32 flag = 2;
bool CDOTAClientMsg_SetUnitShareFlag::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_SetUnitShareFlag::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
 ::google::protobuf::uint32 CDOTAClientMsg_SetUnitShareFlag::flag() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetUnitShareFlag.flag)
  return flag_;
}
 void CDOTAClientMsg_SetUnitShareFlag::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetUnitShareFlag.flag)
}

// optional bool state = 3;
bool CDOTAClientMsg_SetUnitShareFlag::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_SetUnitShareFlag::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_state() {
  state_ = false;
  clear_has_state();
}
 bool CDOTAClientMsg_SetUnitShareFlag::state() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetUnitShareFlag.state)
  return state_;
}
 void CDOTAClientMsg_SetUnitShareFlag::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetUnitShareFlag.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SwapRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::InitAsDefaultInstance() {
}

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SwapRequest::~CDOTAClientMsg_SwapRequest() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapRequest)
  SharedDtor();
}

void CDOTAClientMsg_SwapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SwapRequest_descriptor_;
}

const CDOTAClientMsg_SwapRequest& CDOTAClientMsg_SwapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::default_instance_ = NULL;

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SwapRequest* n = new CDOTAClientMsg_SwapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SwapRequest::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_SwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SwapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SwapRequest)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SwapRequest)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SwapRequest)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapRequest)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapRequest)
  return target;
}

int CDOTAClientMsg_SwapRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_SwapRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SwapRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const CDOTAClientMsg_SwapRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const CDOTAClientMsg_SwapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapRequest::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SwapRequest::Swap(CDOTAClientMsg_SwapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SwapRequest::InternalSwap(CDOTAClientMsg_SwapRequest* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SwapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SwapRequest_descriptor_;
  metadata.reflection = CDOTAClientMsg_SwapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SwapRequest

// optional uint32 player_id = 1;
bool CDOTAClientMsg_SwapRequest::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SwapRequest::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SwapRequest::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SwapRequest::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_SwapRequest::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SwapRequest.player_id)
  return player_id_;
}
 void CDOTAClientMsg_SwapRequest::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SwapRequest.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SwapAccept::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::InitAsDefaultInstance() {
}

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SwapAccept::~CDOTAClientMsg_SwapAccept() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapAccept)
  SharedDtor();
}

void CDOTAClientMsg_SwapAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SwapAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SwapAccept_descriptor_;
}

const CDOTAClientMsg_SwapAccept& CDOTAClientMsg_SwapAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::default_instance_ = NULL;

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SwapAccept* n = new CDOTAClientMsg_SwapAccept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SwapAccept::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_SwapAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SwapAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SwapAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SwapAccept)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SwapAccept)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SwapAccept)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapAccept)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapAccept)
  return target;
}

int CDOTAClientMsg_SwapAccept::ByteSize() const {
  int total_size = 0;

  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_SwapAccept* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SwapAccept>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const CDOTAClientMsg_SwapAccept& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const CDOTAClientMsg_SwapAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapAccept::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SwapAccept::Swap(CDOTAClientMsg_SwapAccept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SwapAccept::InternalSwap(CDOTAClientMsg_SwapAccept* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SwapAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SwapAccept_descriptor_;
  metadata.reflection = CDOTAClientMsg_SwapAccept_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SwapAccept

// optional uint32 player_id = 1;
bool CDOTAClientMsg_SwapAccept::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SwapAccept::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SwapAccept::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SwapAccept::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_SwapAccept::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SwapAccept.player_id)
  return player_id_;
}
 void CDOTAClientMsg_SwapAccept::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SwapAccept.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::InitAsDefaultInstance() {
  worldline_ = const_cast< ::CDOTAMsg_WorldLine*>(&::CDOTAMsg_WorldLine::default_instance());
}

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  worldline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_WorldLine::~CDOTAClientMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WorldLine)
  SharedDtor();
}

void CDOTAClientMsg_WorldLine::SharedDtor() {
  if (this != default_instance_) {
    delete worldline_;
  }
}

void CDOTAClientMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_WorldLine_descriptor_;
}

const CDOTAClientMsg_WorldLine& CDOTAClientMsg_WorldLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::default_instance_ = NULL;

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_WorldLine* n = new CDOTAClientMsg_WorldLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_WorldLine::Clear() {
  if (has_worldline()) {
    if (worldline_ != NULL) worldline_->::CDOTAMsg_WorldLine::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_WorldLine worldline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_WorldLine)
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->worldline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAClientMsg_WorldLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WorldLine)
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->worldline_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WorldLine)
  return target;
}

int CDOTAClientMsg_WorldLine::ByteSize() const {
  int total_size = 0;

  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->worldline_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_WorldLine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_WorldLine>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WorldLine::MergeFrom(const CDOTAClientMsg_WorldLine& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldline()) {
      mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WorldLine::CopyFrom(const CDOTAClientMsg_WorldLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WorldLine::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_WorldLine::Swap(CDOTAClientMsg_WorldLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_WorldLine::InternalSwap(CDOTAClientMsg_WorldLine* other) {
  std::swap(worldline_, other->worldline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_WorldLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_WorldLine_descriptor_;
  metadata.reflection = CDOTAClientMsg_WorldLine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_WorldLine

// optional .CDOTAMsg_WorldLine worldline = 1;
bool CDOTAClientMsg_WorldLine::has_worldline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_WorldLine::set_has_worldline() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_WorldLine::clear_has_worldline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_WorldLine::clear_worldline() {
  if (worldline_ != NULL) worldline_->::CDOTAMsg_WorldLine::Clear();
  clear_has_worldline();
}
const ::CDOTAMsg_WorldLine& CDOTAClientMsg_WorldLine::worldline() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WorldLine.worldline)
  return worldline_ != NULL ? *worldline_ : *default_instance_->worldline_;
}
::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::mutable_worldline() {
  set_has_worldline();
  if (worldline_ == NULL) {
    worldline_ = new ::CDOTAMsg_WorldLine;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_WorldLine.worldline)
  return worldline_;
}
::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::release_worldline() {
  clear_has_worldline();
  ::CDOTAMsg_WorldLine* temp = worldline_;
  worldline_ = NULL;
  return temp;
}
void CDOTAClientMsg_WorldLine::set_allocated_worldline(::CDOTAMsg_WorldLine* worldline) {
  delete worldline_;
  worldline_ = worldline;
  if (worldline) {
    set_has_worldline();
  } else {
    clear_has_worldline();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_WorldLine.worldline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::InitAsDefaultInstance() {
}

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RequestGraphUpdate::~CDOTAClientMsg_RequestGraphUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RequestGraphUpdate)
  SharedDtor();
}

void CDOTAClientMsg_RequestGraphUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RequestGraphUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RequestGraphUpdate_descriptor_;
}

const CDOTAClientMsg_RequestGraphUpdate& CDOTAClientMsg_RequestGraphUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::default_instance_ = NULL;

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RequestGraphUpdate* n = new CDOTAClientMsg_RequestGraphUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RequestGraphUpdate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_RequestGraphUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RequestGraphUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RequestGraphUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RequestGraphUpdate)
  return false;
#undef DO_
}

void CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RequestGraphUpdate)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RequestGraphUpdate)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RequestGraphUpdate)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RequestGraphUpdate)
  return target;
}

int CDOTAClientMsg_RequestGraphUpdate::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_RequestGraphUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RequestGraphUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestGraphUpdate::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RequestGraphUpdate::Swap(CDOTAClientMsg_RequestGraphUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RequestGraphUpdate::InternalSwap(CDOTAClientMsg_RequestGraphUpdate* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RequestGraphUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RequestGraphUpdate_descriptor_;
  metadata.reflection = CDOTAClientMsg_RequestGraphUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RequestGraphUpdate

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChatWheel::kChatMessageFieldNumber;
const int CDOTAClientMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::SharedCtor() {
  _cached_size_ = 0;
  chat_message_ = 0;
  param_hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChatWheel::~CDOTAClientMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChatWheel)
  SharedDtor();
}

void CDOTAClientMsg_ChatWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChatWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChatWheel_descriptor_;
}

const CDOTAClientMsg_ChatWheel& CDOTAClientMsg_ChatWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::default_instance_ = NULL;

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ChatWheel* n = new CDOTAClientMsg_ChatWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ChatWheel::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_ChatWheel*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chat_message_, param_hero_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChatWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDOTAChatWheelMessage_IsValid(value)) {
            set_chat_message(static_cast< ::EDOTAChatWheelMessage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param_hero_id;
        break;
      }

      // optional uint32 param_hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_param_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
          set_has_param_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChatWheel)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_message(), output);
  }

  // optional uint32 param_hero_id = 2;
  if (has_param_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAClientMsg_ChatWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_message(), target);
  }

  // optional uint32 param_hero_id = 2;
  if (has_param_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChatWheel)
  return target;
}

int CDOTAClientMsg_ChatWheel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
    if (has_chat_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_message());
    }

    // optional uint32 param_hero_id = 2;
    if (has_param_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ChatWheel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ChatWheel>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const CDOTAClientMsg_ChatWheel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_message()) {
      set_chat_message(from.chat_message());
    }
    if (from.has_param_hero_id()) {
      set_param_hero_id(from.param_hero_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const CDOTAClientMsg_ChatWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatWheel::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChatWheel::Swap(CDOTAClientMsg_ChatWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChatWheel::InternalSwap(CDOTAClientMsg_ChatWheel* other) {
  std::swap(chat_message_, other->chat_message_);
  std::swap(param_hero_id_, other->param_hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChatWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChatWheel_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChatWheel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ChatWheel

// optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
bool CDOTAClientMsg_ChatWheel::has_chat_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ChatWheel::set_has_chat_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ChatWheel::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ChatWheel::clear_chat_message() {
  chat_message_ = 0;
  clear_has_chat_message();
}
 ::EDOTAChatWheelMessage CDOTAClientMsg_ChatWheel::chat_message() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatWheel.chat_message)
  return static_cast< ::EDOTAChatWheelMessage >(chat_message_);
}
 void CDOTAClientMsg_ChatWheel::set_chat_message(::EDOTAChatWheelMessage value) {
  assert(::EDOTAChatWheelMessage_IsValid(value));
  set_has_chat_message();
  chat_message_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatWheel.chat_message)
}

// optional uint32 param_hero_id = 2;
bool CDOTAClientMsg_ChatWheel::has_param_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ChatWheel::set_has_param_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ChatWheel::clear_has_param_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ChatWheel::clear_param_hero_id() {
  param_hero_id_ = 0u;
  clear_has_param_hero_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChatWheel::param_hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatWheel.param_hero_id)
  return param_hero_id_;
}
 void CDOTAClientMsg_ChatWheel::set_param_hero_id(::google::protobuf::uint32 value) {
  set_has_param_hero_id();
  param_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatWheel.param_hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::InitAsDefaultInstance() {
  statpopup_ = const_cast< ::CDOTAMsg_SendStatPopup*>(&::CDOTAMsg_SendStatPopup::default_instance());
}

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  statpopup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SendStatPopup::~CDOTAClientMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAClientMsg_SendStatPopup::SharedDtor() {
  if (this != default_instance_) {
    delete statpopup_;
  }
}

void CDOTAClientMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SendStatPopup_descriptor_;
}

const CDOTAClientMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::default_instance_ = NULL;

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SendStatPopup* n = new CDOTAClientMsg_SendStatPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SendStatPopup::Clear() {
  if (has_statpopup()) {
    if (statpopup_ != NULL) statpopup_->::CDOTAMsg_SendStatPopup::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_SendStatPopup statpopup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SendStatPopup)
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statpopup_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SendStatPopup)
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->statpopup_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SendStatPopup)
  return target;
}

int CDOTAClientMsg_SendStatPopup::ByteSize() const {
  int total_size = 0;

  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statpopup_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_SendStatPopup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SendStatPopup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const CDOTAClientMsg_SendStatPopup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statpopup()) {
      mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const CDOTAClientMsg_SendStatPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SendStatPopup::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SendStatPopup::Swap(CDOTAClientMsg_SendStatPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SendStatPopup::InternalSwap(CDOTAClientMsg_SendStatPopup* other) {
  std::swap(statpopup_, other->statpopup_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SendStatPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SendStatPopup_descriptor_;
  metadata.reflection = CDOTAClientMsg_SendStatPopup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SendStatPopup

// optional .CDOTAMsg_SendStatPopup statpopup = 1;
bool CDOTAClientMsg_SendStatPopup::has_statpopup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SendStatPopup::set_has_statpopup() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SendStatPopup::clear_has_statpopup() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != NULL) statpopup_->::CDOTAMsg_SendStatPopup::Clear();
  clear_has_statpopup();
}
const ::CDOTAMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::statpopup() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SendStatPopup.statpopup)
  return statpopup_ != NULL ? *statpopup_ : *default_instance_->statpopup_;
}
::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::mutable_statpopup() {
  set_has_statpopup();
  if (statpopup_ == NULL) {
    statpopup_ = new ::CDOTAMsg_SendStatPopup;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_SendStatPopup.statpopup)
  return statpopup_;
}
::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::release_statpopup() {
  clear_has_statpopup();
  ::CDOTAMsg_SendStatPopup* temp = statpopup_;
  statpopup_ = NULL;
  return temp;
}
void CDOTAClientMsg_SendStatPopup::set_allocated_statpopup(::CDOTAMsg_SendStatPopup* statpopup) {
  delete statpopup_;
  statpopup_ = statpopup;
  if (statpopup) {
    set_has_statpopup();
  } else {
    clear_has_statpopup();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_SendStatPopup.statpopup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BeginLastHitChallenge::kChosenLaneFieldNumber;
const int CDOTAClientMsg_BeginLastHitChallenge::kHelperEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::InitAsDefaultInstance() {
}

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedCtor() {
  _cached_size_ = 0;
  chosen_lane_ = 0u;
  helper_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BeginLastHitChallenge::~CDOTAClientMsg_BeginLastHitChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BeginLastHitChallenge)
  SharedDtor();
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BeginLastHitChallenge_descriptor_;
}

const CDOTAClientMsg_BeginLastHitChallenge& CDOTAClientMsg_BeginLastHitChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::default_instance_ = NULL;

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BeginLastHitChallenge* n = new CDOTAClientMsg_BeginLastHitChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BeginLastHitChallenge::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_BeginLastHitChallenge*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chosen_lane_, helper_enabled_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_BeginLastHitChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BeginLastHitChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chosen_lane = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chosen_lane_)));
          set_has_chosen_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_helper_enabled;
        break;
      }

      // optional bool helper_enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_helper_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helper_enabled_)));
          set_has_helper_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BeginLastHitChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BeginLastHitChallenge)
  return false;
#undef DO_
}

void CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BeginLastHitChallenge)
  // optional uint32 chosen_lane = 1;
  if (has_chosen_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chosen_lane(), output);
  }

  // optional bool helper_enabled = 2;
  if (has_helper_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->helper_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BeginLastHitChallenge)
}

::google::protobuf::uint8* CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BeginLastHitChallenge)
  // optional uint32 chosen_lane = 1;
  if (has_chosen_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chosen_lane(), target);
  }

  // optional bool helper_enabled = 2;
  if (has_helper_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->helper_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BeginLastHitChallenge)
  return target;
}

int CDOTAClientMsg_BeginLastHitChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 chosen_lane = 1;
    if (has_chosen_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chosen_lane());
    }

    // optional bool helper_enabled = 2;
    if (has_helper_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_BeginLastHitChallenge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BeginLastHitChallenge>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chosen_lane()) {
      set_chosen_lane(from.chosen_lane());
    }
    if (from.has_helper_enabled()) {
      set_helper_enabled(from.helper_enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BeginLastHitChallenge::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BeginLastHitChallenge::Swap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BeginLastHitChallenge::InternalSwap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  std::swap(chosen_lane_, other->chosen_lane_);
  std::swap(helper_enabled_, other->helper_enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BeginLastHitChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BeginLastHitChallenge_descriptor_;
  metadata.reflection = CDOTAClientMsg_BeginLastHitChallenge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BeginLastHitChallenge

// optional uint32 chosen_lane = 1;
bool CDOTAClientMsg_BeginLastHitChallenge::has_chosen_lane() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_BeginLastHitChallenge::set_has_chosen_lane() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_has_chosen_lane() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_chosen_lane() {
  chosen_lane_ = 0u;
  clear_has_chosen_lane();
}
 ::google::protobuf::uint32 CDOTAClientMsg_BeginLastHitChallenge::chosen_lane() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BeginLastHitChallenge.chosen_lane)
  return chosen_lane_;
}
 void CDOTAClientMsg_BeginLastHitChallenge::set_chosen_lane(::google::protobuf::uint32 value) {
  set_has_chosen_lane();
  chosen_lane_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BeginLastHitChallenge.chosen_lane)
}

// optional bool helper_enabled = 2;
bool CDOTAClientMsg_BeginLastHitChallenge::has_helper_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_BeginLastHitChallenge::set_has_helper_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_has_helper_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_helper_enabled() {
  helper_enabled_ = false;
  clear_has_helper_enabled();
}
 bool CDOTAClientMsg_BeginLastHitChallenge::helper_enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BeginLastHitChallenge.helper_enabled)
  return helper_enabled_;
}
 void CDOTAClientMsg_BeginLastHitChallenge::set_helper_enabled(bool value) {
  set_has_helper_enabled();
  helper_enabled_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BeginLastHitChallenge.helper_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateQuickBuyItem::kItemTypeFieldNumber;
const int CDOTAClientMsg_UpdateQuickBuyItem::kPurchasableFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  purchasable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateQuickBuyItem::~CDOTAClientMsg_UpdateQuickBuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuyItem)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateQuickBuyItem_descriptor_;
}

const CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::default_instance_ = NULL;

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UpdateQuickBuyItem* n = new CDOTAClientMsg_UpdateQuickBuyItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_UpdateQuickBuyItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_type_, purchasable_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_UpdateQuickBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateQuickBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_purchasable;
        break;
      }

      // optional bool purchasable = 2;
      case 2: {
        if (tag == 16) {
         parse_purchasable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchasable_)));
          set_has_purchasable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateQuickBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateQuickBuyItem)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateQuickBuyItem)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // optional bool purchasable = 2;
  if (has_purchasable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->purchasable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateQuickBuyItem)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuyItem)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // optional bool purchasable = 2;
  if (has_purchasable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->purchasable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuyItem)
  return target;
}

int CDOTAClientMsg_UpdateQuickBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional bool purchasable = 2;
    if (has_purchasable()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_UpdateQuickBuyItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UpdateQuickBuyItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_purchasable()) {
      set_purchasable(from.purchasable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuyItem::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Swap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateQuickBuyItem::InternalSwap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  std::swap(item_type_, other->item_type_);
  std::swap(purchasable_, other->purchasable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateQuickBuyItem_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateQuickBuyItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UpdateQuickBuyItem

// optional int32 item_type = 1;
bool CDOTAClientMsg_UpdateQuickBuyItem::has_item_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UpdateQuickBuyItem::set_has_item_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
 ::google::protobuf::int32 CDOTAClientMsg_UpdateQuickBuyItem::item_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateQuickBuyItem.item_type)
  return item_type_;
}
 void CDOTAClientMsg_UpdateQuickBuyItem::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UpdateQuickBuyItem.item_type)
}

// optional bool purchasable = 2;
bool CDOTAClientMsg_UpdateQuickBuyItem::has_purchasable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_UpdateQuickBuyItem::set_has_purchasable() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_has_purchasable() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_purchasable() {
  purchasable_ = false;
  clear_has_purchasable();
}
 bool CDOTAClientMsg_UpdateQuickBuyItem::purchasable() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateQuickBuyItem.purchasable)
  return purchasable_;
}
 void CDOTAClientMsg_UpdateQuickBuyItem::set_purchasable(bool value) {
  set_has_purchasable();
  purchasable_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UpdateQuickBuyItem.purchasable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateQuickBuy::kItemsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateQuickBuy::~CDOTAClientMsg_UpdateQuickBuy() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuy)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateQuickBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateQuickBuy_descriptor_;
}

const CDOTAClientMsg_UpdateQuickBuy& CDOTAClientMsg_UpdateQuickBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::default_instance_ = NULL;

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UpdateQuickBuy* n = new CDOTAClientMsg_UpdateQuickBuy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UpdateQuickBuy::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_UpdateQuickBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateQuickBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateQuickBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateQuickBuy)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateQuickBuy)
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateQuickBuy)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuy)
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuy)
  return target;
}

int CDOTAClientMsg_UpdateQuickBuy::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_UpdateQuickBuy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UpdateQuickBuy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuy::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateQuickBuy::Swap(CDOTAClientMsg_UpdateQuickBuy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateQuickBuy::InternalSwap(CDOTAClientMsg_UpdateQuickBuy* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateQuickBuy_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateQuickBuy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UpdateQuickBuy

// repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
int CDOTAClientMsg_UpdateQuickBuy::items_size() const {
  return items_.size();
}
void CDOTAClientMsg_UpdateQuickBuy::clear_items() {
  items_.Clear();
}
const ::CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuy::items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateQuickBuy.items)
  return items_.Get(index);
}
::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_UpdateQuickBuy.items)
  return items_.Mutable(index);
}
::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::add_items() {
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_UpdateQuickBuy.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem >*
CDOTAClientMsg_UpdateQuickBuy::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_UpdateQuickBuy.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem >&
CDOTAClientMsg_UpdateQuickBuy::items() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_UpdateQuickBuy.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateCoachListen::kPlayerMaskFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateCoachListen::CDOTAClientMsg_UpdateCoachListen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateCoachListen)
}

void CDOTAClientMsg_UpdateCoachListen::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateCoachListen::CDOTAClientMsg_UpdateCoachListen(const CDOTAClientMsg_UpdateCoachListen& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateCoachListen)
}

void CDOTAClientMsg_UpdateCoachListen::SharedCtor() {
  _cached_size_ = 0;
  player_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateCoachListen::~CDOTAClientMsg_UpdateCoachListen() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateCoachListen)
  SharedDtor();
}

void CDOTAClientMsg_UpdateCoachListen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateCoachListen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateCoachListen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateCoachListen_descriptor_;
}

const CDOTAClientMsg_UpdateCoachListen& CDOTAClientMsg_UpdateCoachListen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateCoachListen* CDOTAClientMsg_UpdateCoachListen::default_instance_ = NULL;

CDOTAClientMsg_UpdateCoachListen* CDOTAClientMsg_UpdateCoachListen::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UpdateCoachListen* n = new CDOTAClientMsg_UpdateCoachListen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UpdateCoachListen::Clear() {
  player_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_UpdateCoachListen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateCoachListen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_mask = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_mask_)));
          set_has_player_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateCoachListen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateCoachListen)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateCoachListen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateCoachListen)
  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateCoachListen)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateCoachListen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateCoachListen)
  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateCoachListen)
  return target;
}

int CDOTAClientMsg_UpdateCoachListen::ByteSize() const {
  int total_size = 0;

  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_mask());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateCoachListen::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_UpdateCoachListen* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UpdateCoachListen>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateCoachListen::MergeFrom(const CDOTAClientMsg_UpdateCoachListen& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_mask()) {
      set_player_mask(from.player_mask());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_UpdateCoachListen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateCoachListen::CopyFrom(const CDOTAClientMsg_UpdateCoachListen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateCoachListen::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateCoachListen::Swap(CDOTAClientMsg_UpdateCoachListen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateCoachListen::InternalSwap(CDOTAClientMsg_UpdateCoachListen* other) {
  std::swap(player_mask_, other->player_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateCoachListen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateCoachListen_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateCoachListen_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UpdateCoachListen

// optional uint32 player_mask = 1;
bool CDOTAClientMsg_UpdateCoachListen::has_player_mask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UpdateCoachListen::set_has_player_mask() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UpdateCoachListen::clear_has_player_mask() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UpdateCoachListen::clear_player_mask() {
  player_mask_ = 0u;
  clear_has_player_mask();
}
 ::google::protobuf::uint32 CDOTAClientMsg_UpdateCoachListen::player_mask() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateCoachListen.player_mask)
  return player_mask_;
}
 void CDOTAClientMsg_UpdateCoachListen::set_player_mask(::google::protobuf::uint32 value) {
  set_has_player_mask();
  player_mask_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UpdateCoachListen.player_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CoachHUDPing::kHudPingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CoachHUDPing::CDOTAClientMsg_CoachHUDPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CoachHUDPing)
}

void CDOTAClientMsg_CoachHUDPing::InitAsDefaultInstance() {
  hud_ping_ = const_cast< ::CDOTAMsg_CoachHUDPing*>(&::CDOTAMsg_CoachHUDPing::default_instance());
}

CDOTAClientMsg_CoachHUDPing::CDOTAClientMsg_CoachHUDPing(const CDOTAClientMsg_CoachHUDPing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoachHUDPing)
}

void CDOTAClientMsg_CoachHUDPing::SharedCtor() {
  _cached_size_ = 0;
  hud_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CoachHUDPing::~CDOTAClientMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoachHUDPing)
  SharedDtor();
}

void CDOTAClientMsg_CoachHUDPing::SharedDtor() {
  if (this != default_instance_) {
    delete hud_ping_;
  }
}

void CDOTAClientMsg_CoachHUDPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoachHUDPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CoachHUDPing_descriptor_;
}

const CDOTAClientMsg_CoachHUDPing& CDOTAClientMsg_CoachHUDPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::default_instance_ = NULL;

CDOTAClientMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_CoachHUDPing* n = new CDOTAClientMsg_CoachHUDPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_CoachHUDPing::Clear() {
  if (has_hud_ping()) {
    if (hud_ping_ != NULL) hud_ping_->::CDOTAMsg_CoachHUDPing::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_CoachHUDPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CoachHUDPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hud_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CoachHUDPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CoachHUDPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoachHUDPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CoachHUDPing)
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hud_ping_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CoachHUDPing)
}

::google::protobuf::uint8* CDOTAClientMsg_CoachHUDPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoachHUDPing)
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->hud_ping_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoachHUDPing)
  return target;
}

int CDOTAClientMsg_CoachHUDPing::ByteSize() const {
  int total_size = 0;

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hud_ping_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoachHUDPing::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_CoachHUDPing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_CoachHUDPing>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoachHUDPing::MergeFrom(const CDOTAClientMsg_CoachHUDPing& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hud_ping()) {
      mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from.hud_ping());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_CoachHUDPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoachHUDPing::CopyFrom(const CDOTAClientMsg_CoachHUDPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoachHUDPing::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CoachHUDPing::Swap(CDOTAClientMsg_CoachHUDPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CoachHUDPing::InternalSwap(CDOTAClientMsg_CoachHUDPing* other) {
  std::swap(hud_ping_, other->hud_ping_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_CoachHUDPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CoachHUDPing_descriptor_;
  metadata.reflection = CDOTAClientMsg_CoachHUDPing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_CoachHUDPing

// optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
bool CDOTAClientMsg_CoachHUDPing::has_hud_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_CoachHUDPing::set_has_hud_ping() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_CoachHUDPing::clear_has_hud_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_CoachHUDPing::clear_hud_ping() {
  if (hud_ping_ != NULL) hud_ping_->::CDOTAMsg_CoachHUDPing::Clear();
  clear_has_hud_ping();
}
const ::CDOTAMsg_CoachHUDPing& CDOTAClientMsg_CoachHUDPing::hud_ping() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CoachHUDPing.hud_ping)
  return hud_ping_ != NULL ? *hud_ping_ : *default_instance_->hud_ping_;
}
::CDOTAMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::mutable_hud_ping() {
  set_has_hud_ping();
  if (hud_ping_ == NULL) {
    hud_ping_ = new ::CDOTAMsg_CoachHUDPing;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_CoachHUDPing.hud_ping)
  return hud_ping_;
}
::CDOTAMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::release_hud_ping() {
  clear_has_hud_ping();
  ::CDOTAMsg_CoachHUDPing* temp = hud_ping_;
  hud_ping_ = NULL;
  return temp;
}
void CDOTAClientMsg_CoachHUDPing::set_allocated_hud_ping(::CDOTAMsg_CoachHUDPing* hud_ping) {
  delete hud_ping_;
  hud_ping_ = hud_ping;
  if (hud_ping) {
    set_has_hud_ping();
  } else {
    clear_has_hud_ping();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_CoachHUDPing.hud_ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_RecordVote::kChoiceIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::InitAsDefaultInstance() {
}

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::SharedCtor() {
  _cached_size_ = 0;
  choice_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RecordVote::~CDOTAClientMsg_RecordVote() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RecordVote)
  SharedDtor();
}

void CDOTAClientMsg_RecordVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RecordVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RecordVote_descriptor_;
}

const CDOTAClientMsg_RecordVote& CDOTAClientMsg_RecordVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::default_instance_ = NULL;

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RecordVote* n = new CDOTAClientMsg_RecordVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RecordVote::Clear() {
  choice_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_RecordVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RecordVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 choice_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_index_)));
          set_has_choice_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RecordVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RecordVote)
  return false;
#undef DO_
}

void CDOTAClientMsg_RecordVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RecordVote)
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choice_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RecordVote)
}

::google::protobuf::uint8* CDOTAClientMsg_RecordVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RecordVote)
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choice_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RecordVote)
  return target;
}

int CDOTAClientMsg_RecordVote::ByteSize() const {
  int total_size = 0;

  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->choice_index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RecordVote::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_RecordVote* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RecordVote>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RecordVote::MergeFrom(const CDOTAClientMsg_RecordVote& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choice_index()) {
      set_choice_index(from.choice_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_RecordVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RecordVote::CopyFrom(const CDOTAClientMsg_RecordVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RecordVote::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RecordVote::Swap(CDOTAClientMsg_RecordVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RecordVote::InternalSwap(CDOTAClientMsg_RecordVote* other) {
  std::swap(choice_index_, other->choice_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RecordVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RecordVote_descriptor_;
  metadata.reflection = CDOTAClientMsg_RecordVote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RecordVote

// optional int32 choice_index = 1;
bool CDOTAClientMsg_RecordVote::has_choice_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_RecordVote::set_has_choice_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_RecordVote::clear_has_choice_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_RecordVote::clear_choice_index() {
  choice_index_ = 0;
  clear_has_choice_index();
}
 ::google::protobuf::int32 CDOTAClientMsg_RecordVote::choice_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RecordVote.choice_index)
  return choice_index_;
}
 void CDOTAClientMsg_RecordVote::set_choice_index(::google::protobuf::int32 value) {
  set_has_choice_index();
  choice_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RecordVote.choice_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_WillPurchaseAlert::kItemidFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  gold_remaining_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_WillPurchaseAlert::~CDOTAClientMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAClientMsg_WillPurchaseAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_WillPurchaseAlert_descriptor_;
}

const CDOTAClientMsg_WillPurchaseAlert& CDOTAClientMsg_WillPurchaseAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::default_instance_ = NULL;

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_WillPurchaseAlert* n = new CDOTAClientMsg_WillPurchaseAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_WillPurchaseAlert::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_WillPurchaseAlert*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, gold_remaining_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_remaining;
        break;
      }

      // optional uint32 gold_remaining = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
          set_has_gold_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_WillPurchaseAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional uint32 gold_remaining = 2;
  if (has_gold_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 gold_remaining = 2;
  if (has_gold_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WillPurchaseAlert)
  return target;
}

int CDOTAClientMsg_WillPurchaseAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional uint32 gold_remaining = 2;
    if (has_gold_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_WillPurchaseAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_WillPurchaseAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_remaining()) {
      set_gold_remaining(from.gold_remaining());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WillPurchaseAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_WillPurchaseAlert::Swap(CDOTAClientMsg_WillPurchaseAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_WillPurchaseAlert::InternalSwap(CDOTAClientMsg_WillPurchaseAlert* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(gold_remaining_, other->gold_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_WillPurchaseAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_WillPurchaseAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_WillPurchaseAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_WillPurchaseAlert

// optional int32 itemid = 1;
bool CDOTAClientMsg_WillPurchaseAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_WillPurchaseAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 CDOTAClientMsg_WillPurchaseAlert::itemid() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WillPurchaseAlert.itemid)
  return itemid_;
}
 void CDOTAClientMsg_WillPurchaseAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_WillPurchaseAlert.itemid)
}

// optional uint32 gold_remaining = 2;
bool CDOTAClientMsg_WillPurchaseAlert::has_gold_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_WillPurchaseAlert::set_has_gold_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_has_gold_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_gold_remaining() {
  gold_remaining_ = 0u;
  clear_has_gold_remaining();
}
 ::google::protobuf::uint32 CDOTAClientMsg_WillPurchaseAlert::gold_remaining() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WillPurchaseAlert.gold_remaining)
  return gold_remaining_;
}
 void CDOTAClientMsg_WillPurchaseAlert::set_gold_remaining(::google::protobuf::uint32 value) {
  set_has_gold_remaining();
  gold_remaining_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_WillPurchaseAlert.gold_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BuyBackStateAlert::~CDOTAClientMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAClientMsg_BuyBackStateAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BuyBackStateAlert_descriptor_;
}

const CDOTAClientMsg_BuyBackStateAlert& CDOTAClientMsg_BuyBackStateAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::default_instance_ = NULL;

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BuyBackStateAlert* n = new CDOTAClientMsg_BuyBackStateAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BuyBackStateAlert::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BuyBackStateAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BuyBackStateAlert)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BuyBackStateAlert)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BuyBackStateAlert)
  return target;
}

int CDOTAClientMsg_BuyBackStateAlert::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_BuyBackStateAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BuyBackStateAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BuyBackStateAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BuyBackStateAlert::Swap(CDOTAClientMsg_BuyBackStateAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BuyBackStateAlert::InternalSwap(CDOTAClientMsg_BuyBackStateAlert* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BuyBackStateAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BuyBackStateAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_BuyBackStateAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BuyBackStateAlert

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_QuickBuyAlert::kItemidFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kGoldRequiredFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  gold_required_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_QuickBuyAlert::~CDOTAClientMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAClientMsg_QuickBuyAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_QuickBuyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_QuickBuyAlert_descriptor_;
}

const CDOTAClientMsg_QuickBuyAlert& CDOTAClientMsg_QuickBuyAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::default_instance_ = NULL;

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_QuickBuyAlert* n = new CDOTAClientMsg_QuickBuyAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_QuickBuyAlert::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_QuickBuyAlert*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, gold_required_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_required;
        break;
      }

      // optional int32 gold_required = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_required_)));
          set_has_gold_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_QuickBuyAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_QuickBuyAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 gold_required = 2;
  if (has_gold_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_required(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_QuickBuyAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 gold_required = 2;
  if (has_gold_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_required(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_QuickBuyAlert)
  return target;
}

int CDOTAClientMsg_QuickBuyAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 gold_required = 2;
    if (has_gold_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_required());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_QuickBuyAlert* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_QuickBuyAlert>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_required()) {
      set_gold_required(from.gold_required());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuickBuyAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_QuickBuyAlert::Swap(CDOTAClientMsg_QuickBuyAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_QuickBuyAlert::InternalSwap(CDOTAClientMsg_QuickBuyAlert* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(gold_required_, other->gold_required_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_QuickBuyAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_QuickBuyAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_QuickBuyAlert_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_QuickBuyAlert

// optional int32 itemid = 1;
bool CDOTAClientMsg_QuickBuyAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_QuickBuyAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 CDOTAClientMsg_QuickBuyAlert::itemid() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuickBuyAlert.itemid)
  return itemid_;
}
 void CDOTAClientMsg_QuickBuyAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuickBuyAlert.itemid)
}

// optional int32 gold_required = 2;
bool CDOTAClientMsg_QuickBuyAlert::has_gold_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_QuickBuyAlert::set_has_gold_required() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_has_gold_required() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_gold_required() {
  gold_required_ = 0;
  clear_has_gold_required();
}
 ::google::protobuf::int32 CDOTAClientMsg_QuickBuyAlert::gold_required() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuickBuyAlert.gold_required)
  return gold_required_;
}
 void CDOTAClientMsg_QuickBuyAlert::set_gold_required(::google::protobuf::int32 value) {
  set_has_gold_required();
  gold_required_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuickBuyAlert.gold_required)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_PlayerShowCase::kShowcaseFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::InitAsDefaultInstance() {
}

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::SharedCtor() {
  _cached_size_ = 0;
  showcase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_PlayerShowCase::~CDOTAClientMsg_PlayerShowCase() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayerShowCase)
  SharedDtor();
}

void CDOTAClientMsg_PlayerShowCase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_PlayerShowCase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_PlayerShowCase_descriptor_;
}

const CDOTAClientMsg_PlayerShowCase& CDOTAClientMsg_PlayerShowCase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::default_instance_ = NULL;

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_PlayerShowCase* n = new CDOTAClientMsg_PlayerShowCase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_PlayerShowCase::Clear() {
  showcase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_PlayerShowCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_PlayerShowCase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showcase = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showcase_)));
          set_has_showcase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_PlayerShowCase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_PlayerShowCase)
  return false;
#undef DO_
}

void CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_PlayerShowCase)
  // optional bool showcase = 1;
  if (has_showcase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showcase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_PlayerShowCase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayerShowCase)
  // optional bool showcase = 1;
  if (has_showcase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showcase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayerShowCase)
  return target;
}

int CDOTAClientMsg_PlayerShowCase::ByteSize() const {
  int total_size = 0;

  // optional bool showcase = 1;
  if (has_showcase()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_PlayerShowCase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_PlayerShowCase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const CDOTAClientMsg_PlayerShowCase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showcase()) {
      set_showcase(from.showcase());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const CDOTAClientMsg_PlayerShowCase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerShowCase::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_PlayerShowCase::Swap(CDOTAClientMsg_PlayerShowCase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_PlayerShowCase::InternalSwap(CDOTAClientMsg_PlayerShowCase* other) {
  std::swap(showcase_, other->showcase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_PlayerShowCase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_PlayerShowCase_descriptor_;
  metadata.reflection = CDOTAClientMsg_PlayerShowCase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_PlayerShowCase

// optional bool showcase = 1;
bool CDOTAClientMsg_PlayerShowCase::has_showcase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_PlayerShowCase::set_has_showcase() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_PlayerShowCase::clear_has_showcase() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_PlayerShowCase::clear_showcase() {
  showcase_ = false;
  clear_has_showcase();
}
 bool CDOTAClientMsg_PlayerShowCase::showcase() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerShowCase.showcase)
  return showcase_;
}
 void CDOTAClientMsg_PlayerShowCase::set_showcase(bool value) {
  set_has_showcase();
  showcase_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerShowCase.showcase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CameraZoomAmount::kZoomAmountFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::InitAsDefaultInstance() {
}

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::SharedCtor() {
  _cached_size_ = 0;
  zoom_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CameraZoomAmount::~CDOTAClientMsg_CameraZoomAmount() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CameraZoomAmount)
  SharedDtor();
}

void CDOTAClientMsg_CameraZoomAmount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_CameraZoomAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CameraZoomAmount_descriptor_;
}

const CDOTAClientMsg_CameraZoomAmount& CDOTAClientMsg_CameraZoomAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::default_instance_ = NULL;

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_CameraZoomAmount* n = new CDOTAClientMsg_CameraZoomAmount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_CameraZoomAmount::Clear() {
  zoom_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_CameraZoomAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CameraZoomAmount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float zoom_amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_amount_)));
          set_has_zoom_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CameraZoomAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CameraZoomAmount)
  return false;
#undef DO_
}

void CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CameraZoomAmount)
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->zoom_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CameraZoomAmount)
}

::google::protobuf::uint8* CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CameraZoomAmount)
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->zoom_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CameraZoomAmount)
  return target;
}

int CDOTAClientMsg_CameraZoomAmount::ByteSize() const {
  int total_size = 0;

  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_CameraZoomAmount* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_CameraZoomAmount>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoom_amount()) {
      set_zoom_amount(from.zoom_amount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CameraZoomAmount::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CameraZoomAmount::Swap(CDOTAClientMsg_CameraZoomAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CameraZoomAmount::InternalSwap(CDOTAClientMsg_CameraZoomAmount* other) {
  std::swap(zoom_amount_, other->zoom_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_CameraZoomAmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CameraZoomAmount_descriptor_;
  metadata.reflection = CDOTAClientMsg_CameraZoomAmount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_CameraZoomAmount

// optional float zoom_amount = 1;
bool CDOTAClientMsg_CameraZoomAmount::has_zoom_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_CameraZoomAmount::set_has_zoom_amount() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_CameraZoomAmount::clear_has_zoom_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_CameraZoomAmount::clear_zoom_amount() {
  zoom_amount_ = 0;
  clear_has_zoom_amount();
}
 float CDOTAClientMsg_CameraZoomAmount::zoom_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CameraZoomAmount.zoom_amount)
  return zoom_amount_;
}
 void CDOTAClientMsg_CameraZoomAmount::set_zoom_amount(float value) {
  set_has_zoom_amount();
  zoom_amount_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_CameraZoomAmount.zoom_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BroadcasterUsingCameraman::kCameramanFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::InitAsDefaultInstance() {
}

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedCtor() {
  _cached_size_ = 0;
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BroadcasterUsingCameraman::~CDOTAClientMsg_BroadcasterUsingCameraman() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingCameraman)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_;
}

const CDOTAClientMsg_BroadcasterUsingCameraman& CDOTAClientMsg_BroadcasterUsingCameraman::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_ = NULL;

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BroadcasterUsingCameraman* n = new CDOTAClientMsg_BroadcasterUsingCameraman;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Clear() {
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cameraman = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
          set_has_cameraman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BroadcasterUsingCameraman)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BroadcasterUsingCameraman)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cameraman(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BroadcasterUsingCameraman)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cameraman(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingCameraman)
  return target;
}

int CDOTAClientMsg_BroadcasterUsingCameraman::ByteSize() const {
  int total_size = 0;

  // optional bool cameraman = 1;
  if (has_cameraman()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_BroadcasterUsingCameraman* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BroadcasterUsingCameraman>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraman()) {
      set_cameraman(from.cameraman());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Swap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BroadcasterUsingCameraman::InternalSwap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  std::swap(cameraman_, other->cameraman_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingCameraman::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_;
  metadata.reflection = CDOTAClientMsg_BroadcasterUsingCameraman_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BroadcasterUsingCameraman

// optional bool cameraman = 1;
bool CDOTAClientMsg_BroadcasterUsingCameraman::has_cameraman() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::set_has_cameraman() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::clear_has_cameraman() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::clear_cameraman() {
  cameraman_ = false;
  clear_has_cameraman();
}
 bool CDOTAClientMsg_BroadcasterUsingCameraman::cameraman() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BroadcasterUsingCameraman.cameraman)
  return cameraman_;
}
 void CDOTAClientMsg_BroadcasterUsingCameraman::set_cameraman(bool value) {
  set_has_cameraman();
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BroadcasterUsingCameraman.cameraman)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InitAsDefaultInstance() {
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_;
}

const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_ = NULL;

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* n = new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return target;
}

int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ByteSize() const {
  int total_size = 0;

  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InternalSwap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_;
  metadata.reflection = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator

// optional bool enabled = 1;
bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
 bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.enabled)
  return enabled_;
}
 void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CAdditionalEquipSlotClientMsg::kClassIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kSlotIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kDefIndexFieldNumber;
#endif  // !_MSC_VER

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::InitAsDefaultInstance() {
}

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(const CAdditionalEquipSlotClientMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  slot_id_ = 0u;
  def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAdditionalEquipSlotClientMsg::~CAdditionalEquipSlotClientMsg() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlotClientMsg)
  SharedDtor();
}

void CAdditionalEquipSlotClientMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAdditionalEquipSlotClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAdditionalEquipSlotClientMsg_descriptor_;
}

const CAdditionalEquipSlotClientMsg& CAdditionalEquipSlotClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::default_instance_ = NULL;

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::New(::google::protobuf::Arena* arena) const {
  CAdditionalEquipSlotClientMsg* n = new CAdditionalEquipSlotClientMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAdditionalEquipSlotClientMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CAdditionalEquipSlotClientMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(class_id_, def_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CAdditionalEquipSlotClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAdditionalEquipSlotClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_def_index;
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (tag == 24) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAdditionalEquipSlotClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAdditionalEquipSlotClientMsg)
  return false;
#undef DO_
}

void CAdditionalEquipSlotClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAdditionalEquipSlotClientMsg)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAdditionalEquipSlotClientMsg)
}

::google::protobuf::uint8* CAdditionalEquipSlotClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlotClientMsg)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlotClientMsg)
  return target;
}

int CAdditionalEquipSlotClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAdditionalEquipSlotClientMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CAdditionalEquipSlotClientMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const CAdditionalEquipSlotClientMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const CAdditionalEquipSlotClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlotClientMsg::IsInitialized() const {

  return true;
}

void CAdditionalEquipSlotClientMsg::Swap(CAdditionalEquipSlotClientMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAdditionalEquipSlotClientMsg::InternalSwap(CAdditionalEquipSlotClientMsg* other) {
  std::swap(class_id_, other->class_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(def_index_, other->def_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAdditionalEquipSlotClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAdditionalEquipSlotClientMsg_descriptor_;
  metadata.reflection = CAdditionalEquipSlotClientMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAdditionalEquipSlotClientMsg

// optional uint32 class_id = 1;
bool CAdditionalEquipSlotClientMsg::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAdditionalEquipSlotClientMsg::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CAdditionalEquipSlotClientMsg::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAdditionalEquipSlotClientMsg::clear_class_id() {
  class_id_ = 0u;
  clear_has_class_id();
}
 ::google::protobuf::uint32 CAdditionalEquipSlotClientMsg::class_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlotClientMsg.class_id)
  return class_id_;
}
 void CAdditionalEquipSlotClientMsg::set_class_id(::google::protobuf::uint32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlotClientMsg.class_id)
}

// optional uint32 slot_id = 2;
bool CAdditionalEquipSlotClientMsg::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CAdditionalEquipSlotClientMsg::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CAdditionalEquipSlotClientMsg::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CAdditionalEquipSlotClientMsg::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
 ::google::protobuf::uint32 CAdditionalEquipSlotClientMsg::slot_id() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlotClientMsg.slot_id)
  return slot_id_;
}
 void CAdditionalEquipSlotClientMsg::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlotClientMsg.slot_id)
}

// optional uint32 def_index = 3;
bool CAdditionalEquipSlotClientMsg::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CAdditionalEquipSlotClientMsg::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CAdditionalEquipSlotClientMsg::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CAdditionalEquipSlotClientMsg::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
 ::google::protobuf::uint32 CAdditionalEquipSlotClientMsg::def_index() const {
  // @@protoc_insertion_point(field_get:CAdditionalEquipSlotClientMsg.def_index)
  return def_index_;
}
 void CAdditionalEquipSlotClientMsg::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:CAdditionalEquipSlotClientMsg.def_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_FreeInventory::kEquipsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::InitAsDefaultInstance() {
}

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(const CDOTAClientMsg_FreeInventory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_FreeInventory::~CDOTAClientMsg_FreeInventory() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FreeInventory)
  SharedDtor();
}

void CDOTAClientMsg_FreeInventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_FreeInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_FreeInventory_descriptor_;
}

const CDOTAClientMsg_FreeInventory& CDOTAClientMsg_FreeInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::default_instance_ = NULL;

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_FreeInventory* n = new CDOTAClientMsg_FreeInventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_FreeInventory::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_FreeInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_FreeInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CAdditionalEquipSlotClientMsg equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_equips;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_FreeInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_FreeInventory)
  return false;
#undef DO_
}

void CDOTAClientMsg_FreeInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_FreeInventory)
  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_FreeInventory)
}

::google::protobuf::uint8* CDOTAClientMsg_FreeInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FreeInventory)
  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FreeInventory)
  return target;
}

int CDOTAClientMsg_FreeInventory::ByteSize() const {
  int total_size = 0;

  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_FreeInventory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_FreeInventory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const CDOTAClientMsg_FreeInventory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  equips_.MergeFrom(from.equips_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const CDOTAClientMsg_FreeInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FreeInventory::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_FreeInventory::Swap(CDOTAClientMsg_FreeInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FreeInventory::InternalSwap(CDOTAClientMsg_FreeInventory* other) {
  equips_.UnsafeArenaSwap(&other->equips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_FreeInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_FreeInventory_descriptor_;
  metadata.reflection = CDOTAClientMsg_FreeInventory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_FreeInventory

// repeated .CAdditionalEquipSlotClientMsg equips = 1;
int CDOTAClientMsg_FreeInventory::equips_size() const {
  return equips_.size();
}
void CDOTAClientMsg_FreeInventory::clear_equips() {
  equips_.Clear();
}
const ::CAdditionalEquipSlotClientMsg& CDOTAClientMsg_FreeInventory::equips(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_FreeInventory.equips)
  return equips_.Get(index);
}
::CAdditionalEquipSlotClientMsg* CDOTAClientMsg_FreeInventory::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_FreeInventory.equips)
  return equips_.Mutable(index);
}
::CAdditionalEquipSlotClientMsg* CDOTAClientMsg_FreeInventory::add_equips() {
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_FreeInventory.equips)
  return equips_.Add();
}
::google::protobuf::RepeatedPtrField< ::CAdditionalEquipSlotClientMsg >*
CDOTAClientMsg_FreeInventory::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_FreeInventory.equips)
  return &equips_;
}
const ::google::protobuf::RepeatedPtrField< ::CAdditionalEquipSlotClientMsg >&
CDOTAClientMsg_FreeInventory::equips() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_FreeInventory.equips)
  return equips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_FillEmptySlotsWithBots::kFillwithbotsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::InitAsDefaultInstance() {
}

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(const CDOTAClientMsg_FillEmptySlotsWithBots& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedCtor() {
  _cached_size_ = 0;
  fillwithbots_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_FillEmptySlotsWithBots::~CDOTAClientMsg_FillEmptySlotsWithBots() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FillEmptySlotsWithBots)
  SharedDtor();
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FillEmptySlotsWithBots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_;
}

const CDOTAClientMsg_FillEmptySlotsWithBots& CDOTAClientMsg_FillEmptySlotsWithBots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_FillEmptySlotsWithBots* CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_ = NULL;

CDOTAClientMsg_FillEmptySlotsWithBots* CDOTAClientMsg_FillEmptySlotsWithBots::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_FillEmptySlotsWithBots* n = new CDOTAClientMsg_FillEmptySlotsWithBots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Clear() {
  fillwithbots_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool fillwithbots = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithbots_)));
          set_has_fillwithbots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_FillEmptySlotsWithBots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_FillEmptySlotsWithBots)
  return false;
#undef DO_
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  // optional bool fillwithbots = 1;
  if (has_fillwithbots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fillwithbots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_FillEmptySlotsWithBots)
}

::google::protobuf::uint8* CDOTAClientMsg_FillEmptySlotsWithBots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  // optional bool fillwithbots = 1;
  if (has_fillwithbots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fillwithbots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FillEmptySlotsWithBots)
  return target;
}

int CDOTAClientMsg_FillEmptySlotsWithBots::ByteSize() const {
  int total_size = 0;

  // optional bool fillwithbots = 1;
  if (has_fillwithbots()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_FillEmptySlotsWithBots* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_FillEmptySlotsWithBots>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fillwithbots()) {
      set_fillwithbots(from.fillwithbots());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Swap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FillEmptySlotsWithBots::InternalSwap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  std::swap(fillwithbots_, other->fillwithbots_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_FillEmptySlotsWithBots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_;
  metadata.reflection = CDOTAClientMsg_FillEmptySlotsWithBots_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_FillEmptySlotsWithBots

// optional bool fillwithbots = 1;
bool CDOTAClientMsg_FillEmptySlotsWithBots::has_fillwithbots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::set_has_fillwithbots() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::clear_has_fillwithbots() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::clear_fillwithbots() {
  fillwithbots_ = false;
  clear_has_fillwithbots();
}
 bool CDOTAClientMsg_FillEmptySlotsWithBots::fillwithbots() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_FillEmptySlotsWithBots.fillwithbots)
  return fillwithbots_;
}
 void CDOTAClientMsg_FillEmptySlotsWithBots::set_fillwithbots(bool value) {
  set_has_fillwithbots();
  fillwithbots_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_FillEmptySlotsWithBots.fillwithbots)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_HeroStatueLike::kOwnerPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::InitAsDefaultInstance() {
}

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::SharedCtor() {
  _cached_size_ = 0;
  owner_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_HeroStatueLike::~CDOTAClientMsg_HeroStatueLike() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HeroStatueLike)
  SharedDtor();
}

void CDOTAClientMsg_HeroStatueLike::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_HeroStatueLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_HeroStatueLike_descriptor_;
}

const CDOTAClientMsg_HeroStatueLike& CDOTAClientMsg_HeroStatueLike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::default_instance_ = NULL;

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_HeroStatueLike* n = new CDOTAClientMsg_HeroStatueLike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_HeroStatueLike::Clear() {
  owner_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_HeroStatueLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_HeroStatueLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_player_id_)));
          set_has_owner_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_HeroStatueLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_HeroStatueLike)
  return false;
#undef DO_
}

void CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_HeroStatueLike)
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_HeroStatueLike)
}

::google::protobuf::uint8* CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HeroStatueLike)
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HeroStatueLike)
  return target;
}

int CDOTAClientMsg_HeroStatueLike::ByteSize() const {
  int total_size = 0;

  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_player_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_HeroStatueLike* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_HeroStatueLike>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const CDOTAClientMsg_HeroStatueLike& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_player_id()) {
      set_owner_player_id(from.owner_player_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const CDOTAClientMsg_HeroStatueLike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HeroStatueLike::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_HeroStatueLike::Swap(CDOTAClientMsg_HeroStatueLike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HeroStatueLike::InternalSwap(CDOTAClientMsg_HeroStatueLike* other) {
  std::swap(owner_player_id_, other->owner_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_HeroStatueLike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_HeroStatueLike_descriptor_;
  metadata.reflection = CDOTAClientMsg_HeroStatueLike_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_HeroStatueLike

// optional uint32 owner_player_id = 1;
bool CDOTAClientMsg_HeroStatueLike::has_owner_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_HeroStatueLike::set_has_owner_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_HeroStatueLike::clear_has_owner_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_HeroStatueLike::clear_owner_player_id() {
  owner_player_id_ = 0u;
  clear_has_owner_player_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_HeroStatueLike::owner_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_HeroStatueLike.owner_player_id)
  return owner_player_id_;
}
 void CDOTAClientMsg_HeroStatueLike::set_owner_player_id(::google::protobuf::uint32 value) {
  set_has_owner_player_id();
  owner_player_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_HeroStatueLike.owner_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeamShowcaseEditor::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeamShowcaseEditor::CDOTAClientMsg_TeamShowcaseEditor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeamShowcaseEditor)
}

void CDOTAClientMsg_TeamShowcaseEditor::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeamShowcaseEditor::CDOTAClientMsg_TeamShowcaseEditor(const CDOTAClientMsg_TeamShowcaseEditor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeamShowcaseEditor)
}

void CDOTAClientMsg_TeamShowcaseEditor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeamShowcaseEditor::~CDOTAClientMsg_TeamShowcaseEditor() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeamShowcaseEditor)
  SharedDtor();
}

void CDOTAClientMsg_TeamShowcaseEditor::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeamShowcaseEditor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseEditor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeamShowcaseEditor_descriptor_;
}

const CDOTAClientMsg_TeamShowcaseEditor& CDOTAClientMsg_TeamShowcaseEditor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeamShowcaseEditor* CDOTAClientMsg_TeamShowcaseEditor::default_instance_ = NULL;

CDOTAClientMsg_TeamShowcaseEditor* CDOTAClientMsg_TeamShowcaseEditor::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_TeamShowcaseEditor* n = new CDOTAClientMsg_TeamShowcaseEditor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_TeamShowcaseEditor::Clear() {
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_TeamShowcaseEditor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeamShowcaseEditor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeamShowcaseEditor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeamShowcaseEditor)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeamShowcaseEditor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeamShowcaseEditor)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeamShowcaseEditor)
}

::google::protobuf::uint8* CDOTAClientMsg_TeamShowcaseEditor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeamShowcaseEditor)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeamShowcaseEditor)
  return target;
}

int CDOTAClientMsg_TeamShowcaseEditor::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeamShowcaseEditor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_TeamShowcaseEditor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_TeamShowcaseEditor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeamShowcaseEditor::MergeFrom(const CDOTAClientMsg_TeamShowcaseEditor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_TeamShowcaseEditor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeamShowcaseEditor::CopyFrom(const CDOTAClientMsg_TeamShowcaseEditor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeamShowcaseEditor::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeamShowcaseEditor::Swap(CDOTAClientMsg_TeamShowcaseEditor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TeamShowcaseEditor::InternalSwap(CDOTAClientMsg_TeamShowcaseEditor* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_TeamShowcaseEditor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeamShowcaseEditor_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeamShowcaseEditor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_TeamShowcaseEditor

// optional bytes data = 1;
bool CDOTAClientMsg_TeamShowcaseEditor::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_TeamShowcaseEditor::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_TeamShowcaseEditor::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_TeamShowcaseEditor::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDOTAClientMsg_TeamShowcaseEditor::data() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TeamShowcaseEditor.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_TeamShowcaseEditor::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TeamShowcaseEditor.data)
}
 void CDOTAClientMsg_TeamShowcaseEditor::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTAClientMsg_TeamShowcaseEditor.data)
}
 void CDOTAClientMsg_TeamShowcaseEditor::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTAClientMsg_TeamShowcaseEditor.data)
}
 ::std::string* CDOTAClientMsg_TeamShowcaseEditor::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_TeamShowcaseEditor.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTAClientMsg_TeamShowcaseEditor::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_TeamShowcaseEditor::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_TeamShowcaseEditor.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeamShowcaseClientData::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeamShowcaseClientData::CDOTAClientMsg_TeamShowcaseClientData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeamShowcaseClientData)
}

void CDOTAClientMsg_TeamShowcaseClientData::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeamShowcaseClientData::CDOTAClientMsg_TeamShowcaseClientData(const CDOTAClientMsg_TeamShowcaseClientData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeamShowcaseClientData)
}

void CDOTAClientMsg_TeamShowcaseClientData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeamShowcaseClientData::~CDOTAClientMsg_TeamShowcaseClientData() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeamShowcaseClientData)
  SharedDtor();
}

void CDOTAClientMsg_TeamShowcaseClientData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeamShowcaseClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeamShowcaseClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeamShowcaseClientData_descriptor_;
}

const CDOTAClientMsg_TeamShowcaseClientData& CDOTAClientMsg_TeamShowcaseClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeamShowcaseClientData* CDOTAClientMsg_TeamShowcaseClientData::default_instance_ = NULL;

CDOTAClientMsg_TeamShowcaseClientData* CDOTAClientMsg_TeamShowcaseClientData::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_TeamShowcaseClientData* n = new CDOTAClientMsg_TeamShowcaseClientData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_TeamShowcaseClientData::Clear() {
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_TeamShowcaseClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeamShowcaseClientData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeamShowcaseClientData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeamShowcaseClientData)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeamShowcaseClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeamShowcaseClientData)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeamShowcaseClientData)
}

::google::protobuf::uint8* CDOTAClientMsg_TeamShowcaseClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeamShowcaseClientData)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeamShowcaseClientData)
  return target;
}

int CDOTAClientMsg_TeamShowcaseClientData::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeamShowcaseClientData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_TeamShowcaseClientData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_TeamShowcaseClientData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeamShowcaseClientData::MergeFrom(const CDOTAClientMsg_TeamShowcaseClientData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_TeamShowcaseClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeamShowcaseClientData::CopyFrom(const CDOTAClientMsg_TeamShowcaseClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeamShowcaseClientData::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeamShowcaseClientData::Swap(CDOTAClientMsg_TeamShowcaseClientData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TeamShowcaseClientData::InternalSwap(CDOTAClientMsg_TeamShowcaseClientData* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_TeamShowcaseClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeamShowcaseClientData_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeamShowcaseClientData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_TeamShowcaseClientData

// optional bytes data = 1;
bool CDOTAClientMsg_TeamShowcaseClientData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_TeamShowcaseClientData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_TeamShowcaseClientData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_TeamShowcaseClientData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDOTAClientMsg_TeamShowcaseClientData::data() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TeamShowcaseClientData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_TeamShowcaseClientData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TeamShowcaseClientData.data)
}
 void CDOTAClientMsg_TeamShowcaseClientData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTAClientMsg_TeamShowcaseClientData.data)
}
 void CDOTAClientMsg_TeamShowcaseClientData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTAClientMsg_TeamShowcaseClientData.data)
}
 ::std::string* CDOTAClientMsg_TeamShowcaseClientData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_TeamShowcaseClientData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTAClientMsg_TeamShowcaseClientData::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_TeamShowcaseClientData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_TeamShowcaseClientData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_PlayTeamShowcase::CDOTAClientMsg_PlayTeamShowcase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_PlayTeamShowcase)
}

void CDOTAClientMsg_PlayTeamShowcase::InitAsDefaultInstance() {
}

CDOTAClientMsg_PlayTeamShowcase::CDOTAClientMsg_PlayTeamShowcase(const CDOTAClientMsg_PlayTeamShowcase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayTeamShowcase)
}

void CDOTAClientMsg_PlayTeamShowcase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_PlayTeamShowcase::~CDOTAClientMsg_PlayTeamShowcase() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayTeamShowcase)
  SharedDtor();
}

void CDOTAClientMsg_PlayTeamShowcase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_PlayTeamShowcase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayTeamShowcase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_PlayTeamShowcase_descriptor_;
}

const CDOTAClientMsg_PlayTeamShowcase& CDOTAClientMsg_PlayTeamShowcase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_PlayTeamShowcase* CDOTAClientMsg_PlayTeamShowcase::default_instance_ = NULL;

CDOTAClientMsg_PlayTeamShowcase* CDOTAClientMsg_PlayTeamShowcase::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_PlayTeamShowcase* n = new CDOTAClientMsg_PlayTeamShowcase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_PlayTeamShowcase::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_PlayTeamShowcase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_PlayTeamShowcase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_PlayTeamShowcase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_PlayTeamShowcase)
  return false;
#undef DO_
}

void CDOTAClientMsg_PlayTeamShowcase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_PlayTeamShowcase)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_PlayTeamShowcase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayTeamShowcase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayTeamShowcase)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayTeamShowcase)
  return target;
}

int CDOTAClientMsg_PlayTeamShowcase::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_PlayTeamShowcase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_PlayTeamShowcase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_PlayTeamShowcase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayTeamShowcase::MergeFrom(const CDOTAClientMsg_PlayTeamShowcase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_PlayTeamShowcase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayTeamShowcase::CopyFrom(const CDOTAClientMsg_PlayTeamShowcase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayTeamShowcase::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_PlayTeamShowcase::Swap(CDOTAClientMsg_PlayTeamShowcase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_PlayTeamShowcase::InternalSwap(CDOTAClientMsg_PlayTeamShowcase* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_PlayTeamShowcase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_PlayTeamShowcase_descriptor_;
  metadata.reflection = CDOTAClientMsg_PlayTeamShowcase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_PlayTeamShowcase

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EventCNY2015Cmd::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::InitAsDefaultInstance() {
}

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EventCNY2015Cmd_descriptor_;
}

const CDOTAClientMsg_EventCNY2015Cmd& CDOTAClientMsg_EventCNY2015Cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::default_instance_ = NULL;

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_EventCNY2015Cmd* n = new CDOTAClientMsg_EventCNY2015Cmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_EventCNY2015Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EventCNY2015Cmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EventCNY2015Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EventCNY2015Cmd)
  return false;
#undef DO_
}

void CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EventCNY2015Cmd)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EventCNY2015Cmd)
}

::google::protobuf::uint8* CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventCNY2015Cmd)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

int CDOTAClientMsg_EventCNY2015Cmd::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_EventCNY2015Cmd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_EventCNY2015Cmd>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EventCNY2015Cmd::InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EventCNY2015Cmd_descriptor_;
  metadata.reflection = CDOTAClientMsg_EventCNY2015Cmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_EventCNY2015Cmd

// optional bytes data = 1;
bool CDOTAClientMsg_EventCNY2015Cmd::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_EventCNY2015Cmd::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_EventCNY2015Cmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_EventCNY2015Cmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& CDOTAClientMsg_EventCNY2015Cmd::data() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EventCNY2015Cmd.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_EventCNY2015Cmd::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EventCNY2015Cmd.data)
}
 void CDOTAClientMsg_EventCNY2015Cmd::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDOTAClientMsg_EventCNY2015Cmd.data)
}
 void CDOTAClientMsg_EventCNY2015Cmd::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDOTAClientMsg_EventCNY2015Cmd.data)
}
 ::std::string* CDOTAClientMsg_EventCNY2015Cmd::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_EventCNY2015Cmd.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDOTAClientMsg_EventCNY2015Cmd::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDOTAClientMsg_EventCNY2015Cmd::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_EventCNY2015Cmd.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_DemoHero::kHeroIdFieldNumber;
const int CDOTAClientMsg_DemoHero::kHeroIdToSpawnFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemDefsFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemIdsFieldNumber;
const int CDOTAClientMsg_DemoHero::kStyleIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::InitAsDefaultInstance() {
}

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(const CDOTAClientMsg_DemoHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0;
  hero_id_to_spawn_ = 0;
  style_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_DemoHero::~CDOTAClientMsg_DemoHero() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_DemoHero)
  SharedDtor();
}

void CDOTAClientMsg_DemoHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_DemoHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_DemoHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_DemoHero_descriptor_;
}

const CDOTAClientMsg_DemoHero& CDOTAClientMsg_DemoHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_DemoHero* CDOTAClientMsg_DemoHero::default_instance_ = NULL;

CDOTAClientMsg_DemoHero* CDOTAClientMsg_DemoHero::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_DemoHero* n = new CDOTAClientMsg_DemoHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_DemoHero::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_DemoHero*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 19u) {
    ZR_(hero_id_, hero_id_to_spawn_);
    style_index_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  item_defs_.Clear();
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_DemoHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_DemoHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id_to_spawn;
        break;
      }

      // optional int32 hero_id_to_spawn = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id_to_spawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_to_spawn_)));
          set_has_hero_id_to_spawn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_defs;
        break;
      }

      // repeated uint32 item_defs = 3;
      case 3: {
        if (tag == 24) {
         parse_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_item_defs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_defs;
        if (input->ExpectTag(32)) goto parse_item_ids;
        break;
      }

      // repeated uint64 item_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_item_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_ids;
        if (input->ExpectTag(40)) goto parse_style_index;
        break;
      }

      // optional uint32 style_index = 5;
      case 5: {
        if (tag == 40) {
         parse_style_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_index_)));
          set_has_style_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_DemoHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_DemoHero)
  return false;
#undef DO_
}

void CDOTAClientMsg_DemoHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_DemoHero)
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (has_hero_id_to_spawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id_to_spawn(), output);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0; i < this->item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->item_defs(i), output);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->item_ids(i), output);
  }

  // optional uint32 style_index = 5;
  if (has_style_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->style_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_DemoHero)
}

::google::protobuf::uint8* CDOTAClientMsg_DemoHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_DemoHero)
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (has_hero_id_to_spawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id_to_spawn(), target);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0; i < this->item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->item_defs(i), target);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->item_ids(i), target);
  }

  // optional uint32 style_index = 5;
  if (has_style_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->style_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_DemoHero)
  return target;
}

int CDOTAClientMsg_DemoHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 hero_id_to_spawn = 2;
    if (has_hero_id_to_spawn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id_to_spawn());
    }

    // optional uint32 style_index = 5;
    if (has_style_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_index());
    }

  }
  // repeated uint32 item_defs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_defs(i));
    }
    total_size += 1 * this->item_defs_size() + data_size;
  }

  // repeated uint64 item_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_DemoHero::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_DemoHero* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_DemoHero>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DemoHero::MergeFrom(const CDOTAClientMsg_DemoHero& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_defs_.MergeFrom(from.item_defs_);
  item_ids_.MergeFrom(from.item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_id_to_spawn()) {
      set_hero_id_to_spawn(from.hero_id_to_spawn());
    }
    if (from.has_style_index()) {
      set_style_index(from.style_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_DemoHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DemoHero::CopyFrom(const CDOTAClientMsg_DemoHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DemoHero::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_DemoHero::Swap(CDOTAClientMsg_DemoHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_DemoHero::InternalSwap(CDOTAClientMsg_DemoHero* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(hero_id_to_spawn_, other->hero_id_to_spawn_);
  item_defs_.UnsafeArenaSwap(&other->item_defs_);
  item_ids_.UnsafeArenaSwap(&other->item_ids_);
  std::swap(style_index_, other->style_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_DemoHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_DemoHero_descriptor_;
  metadata.reflection = CDOTAClientMsg_DemoHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_DemoHero

// optional int32 hero_id = 1;
bool CDOTAClientMsg_DemoHero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_DemoHero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_DemoHero::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
 ::google::protobuf::int32 CDOTAClientMsg_DemoHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.hero_id)
  return hero_id_;
}
 void CDOTAClientMsg_DemoHero::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.hero_id)
}

// optional int32 hero_id_to_spawn = 2;
bool CDOTAClientMsg_DemoHero::has_hero_id_to_spawn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_hero_id_to_spawn() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_DemoHero::clear_has_hero_id_to_spawn() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_DemoHero::clear_hero_id_to_spawn() {
  hero_id_to_spawn_ = 0;
  clear_has_hero_id_to_spawn();
}
 ::google::protobuf::int32 CDOTAClientMsg_DemoHero::hero_id_to_spawn() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.hero_id_to_spawn)
  return hero_id_to_spawn_;
}
 void CDOTAClientMsg_DemoHero::set_hero_id_to_spawn(::google::protobuf::int32 value) {
  set_has_hero_id_to_spawn();
  hero_id_to_spawn_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.hero_id_to_spawn)
}

// repeated uint32 item_defs = 3;
int CDOTAClientMsg_DemoHero::item_defs_size() const {
  return item_defs_.size();
}
void CDOTAClientMsg_DemoHero::clear_item_defs() {
  item_defs_.Clear();
}
 ::google::protobuf::uint32 CDOTAClientMsg_DemoHero::item_defs(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.item_defs)
  return item_defs_.Get(index);
}
 void CDOTAClientMsg_DemoHero::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.item_defs)
}
 void CDOTAClientMsg_DemoHero::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_DemoHero.item_defs)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAClientMsg_DemoHero::item_defs() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_DemoHero.item_defs)
  return item_defs_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAClientMsg_DemoHero::mutable_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_DemoHero.item_defs)
  return &item_defs_;
}

// repeated uint64 item_ids = 4;
int CDOTAClientMsg_DemoHero::item_ids_size() const {
  return item_ids_.size();
}
void CDOTAClientMsg_DemoHero::clear_item_ids() {
  item_ids_.Clear();
}
 ::google::protobuf::uint64 CDOTAClientMsg_DemoHero::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.item_ids)
  return item_ids_.Get(index);
}
 void CDOTAClientMsg_DemoHero::set_item_ids(int index, ::google::protobuf::uint64 value) {
  item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.item_ids)
}
 void CDOTAClientMsg_DemoHero::add_item_ids(::google::protobuf::uint64 value) {
  item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_DemoHero.item_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CDOTAClientMsg_DemoHero::item_ids() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_DemoHero.item_ids)
  return item_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CDOTAClientMsg_DemoHero::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_DemoHero.item_ids)
  return &item_ids_;
}

// optional uint32 style_index = 5;
bool CDOTAClientMsg_DemoHero::has_style_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_style_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAClientMsg_DemoHero::clear_has_style_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAClientMsg_DemoHero::clear_style_index() {
  style_index_ = 0u;
  clear_has_style_index();
}
 ::google::protobuf::uint32 CDOTAClientMsg_DemoHero::style_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.style_index)
  return style_index_;
}
 void CDOTAClientMsg_DemoHero::set_style_index(::google::protobuf::uint32 value) {
  set_has_style_index();
  style_index_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.style_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChallengeSelect::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(const CDOTAClientMsg_ChallengeSelect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  slot_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChallengeSelect::~CDOTAClientMsg_ChallengeSelect() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChallengeSelect)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChallengeSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChallengeSelect_descriptor_;
}

const CDOTAClientMsg_ChallengeSelect& CDOTAClientMsg_ChallengeSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChallengeSelect* CDOTAClientMsg_ChallengeSelect::default_instance_ = NULL;

CDOTAClientMsg_ChallengeSelect* CDOTAClientMsg_ChallengeSelect::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ChallengeSelect* n = new CDOTAClientMsg_ChallengeSelect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ChallengeSelect::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_ChallengeSelect*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(event_id_, sequence_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ChallengeSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChallengeSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChallengeSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChallengeSelect)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChallengeSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChallengeSelect)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChallengeSelect)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChallengeSelect)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChallengeSelect)
  return target;
}

int CDOTAClientMsg_ChallengeSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ChallengeSelect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ChallengeSelect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const CDOTAClientMsg_ChallengeSelect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const CDOTAClientMsg_ChallengeSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeSelect::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChallengeSelect::Swap(CDOTAClientMsg_ChallengeSelect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChallengeSelect::InternalSwap(CDOTAClientMsg_ChallengeSelect* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChallengeSelect_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChallengeSelect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ChallengeSelect

// optional uint32 event_id = 1;
bool CDOTAClientMsg_ChallengeSelect::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ChallengeSelect::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ChallengeSelect::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ChallengeSelect::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChallengeSelect::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeSelect.event_id)
  return event_id_;
}
 void CDOTAClientMsg_ChallengeSelect::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeSelect.event_id)
}

// optional uint32 slot_id = 2;
bool CDOTAClientMsg_ChallengeSelect::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ChallengeSelect::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ChallengeSelect::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ChallengeSelect::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChallengeSelect::slot_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeSelect.slot_id)
  return slot_id_;
}
 void CDOTAClientMsg_ChallengeSelect::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeSelect.slot_id)
}

// optional uint32 sequence_id = 3;
bool CDOTAClientMsg_ChallengeSelect::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_ChallengeSelect::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_ChallengeSelect::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_ChallengeSelect::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChallengeSelect::sequence_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeSelect.sequence_id)
  return sequence_id_;
}
 void CDOTAClientMsg_ChallengeSelect::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeSelect.sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChallengeReroll::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(const CDOTAClientMsg_ChallengeReroll& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  slot_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChallengeReroll::~CDOTAClientMsg_ChallengeReroll() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChallengeReroll)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeReroll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChallengeReroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeReroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChallengeReroll_descriptor_;
}

const CDOTAClientMsg_ChallengeReroll& CDOTAClientMsg_ChallengeReroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChallengeReroll* CDOTAClientMsg_ChallengeReroll::default_instance_ = NULL;

CDOTAClientMsg_ChallengeReroll* CDOTAClientMsg_ChallengeReroll::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ChallengeReroll* n = new CDOTAClientMsg_ChallengeReroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ChallengeReroll::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CDOTAClientMsg_ChallengeReroll*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(event_id_, sequence_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_ChallengeReroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChallengeReroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChallengeReroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChallengeReroll)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChallengeReroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChallengeReroll)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChallengeReroll)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeReroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChallengeReroll)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChallengeReroll)
  return target;
}

int CDOTAClientMsg_ChallengeReroll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_ChallengeReroll* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ChallengeReroll>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const CDOTAClientMsg_ChallengeReroll& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const CDOTAClientMsg_ChallengeReroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeReroll::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChallengeReroll::Swap(CDOTAClientMsg_ChallengeReroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChallengeReroll::InternalSwap(CDOTAClientMsg_ChallengeReroll* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeReroll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChallengeReroll_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChallengeReroll_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ChallengeReroll

// optional uint32 event_id = 1;
bool CDOTAClientMsg_ChallengeReroll::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ChallengeReroll::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ChallengeReroll::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ChallengeReroll::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChallengeReroll::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.event_id)
  return event_id_;
}
 void CDOTAClientMsg_ChallengeReroll::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.event_id)
}

// optional uint32 slot_id = 2;
bool CDOTAClientMsg_ChallengeReroll::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ChallengeReroll::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ChallengeReroll::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ChallengeReroll::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChallengeReroll::slot_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.slot_id)
  return slot_id_;
}
 void CDOTAClientMsg_ChallengeReroll::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.slot_id)
}

// optional uint32 sequence_id = 3;
bool CDOTAClientMsg_ChallengeReroll::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_ChallengeReroll::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_ChallengeReroll::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_ChallengeReroll::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
 ::google::protobuf::uint32 CDOTAClientMsg_ChallengeReroll::sequence_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.sequence_id)
  return sequence_id_;
}
 void CDOTAClientMsg_ChallengeReroll::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CoinWager::kWagerAmountFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::InitAsDefaultInstance() {
}

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::SharedCtor() {
  _cached_size_ = 0;
  wager_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoinWager)
  SharedDtor();
}

void CDOTAClientMsg_CoinWager::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoinWager::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CoinWager_descriptor_;
}

const CDOTAClientMsg_CoinWager& CDOTAClientMsg_CoinWager::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CoinWager* CDOTAClientMsg_CoinWager::default_instance_ = NULL;

CDOTAClientMsg_CoinWager* CDOTAClientMsg_CoinWager::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_CoinWager* n = new CDOTAClientMsg_CoinWager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_CoinWager::Clear() {
  wager_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDOTAClientMsg_CoinWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CoinWager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wager_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_amount_)));
          set_has_wager_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CoinWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CoinWager)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoinWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CoinWager)
  // optional uint32 wager_amount = 1;
  if (has_wager_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wager_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CoinWager)
}

::google::protobuf::uint8* CDOTAClientMsg_CoinWager::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoinWager)
  // optional uint32 wager_amount = 1;
  if (has_wager_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wager_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoinWager)
  return target;
}

int CDOTAClientMsg_CoinWager::ByteSize() const {
  int total_size = 0;

  // optional uint32 wager_amount = 1;
  if (has_wager_amount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wager_amount());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoinWager::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDOTAClientMsg_CoinWager* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_CoinWager>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wager_amount()) {
      set_wager_amount(from.wager_amount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDOTAClientMsg_CoinWager::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CoinWager::Swap(CDOTAClientMsg_CoinWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CoinWager::InternalSwap(CDOTAClientMsg_CoinWager* other) {
  std::swap(wager_amount_, other->wager_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CoinWager_descriptor_;
  metadata.reflection = CDOTAClientMsg_CoinWager_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_CoinWager

// optional uint32 wager_amount = 1;
bool CDOTAClientMsg_CoinWager::has_wager_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_CoinWager::set_has_wager_amount() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_CoinWager::clear_has_wager_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_CoinWager::clear_wager_amount() {
  wager_amount_ = 0u;
  clear_has_wager_amount();
}
 ::google::protobuf::uint32 CDOTAClientMsg_CoinWager::wager_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CoinWager.wager_amount)
  return wager_amount_;
}
 void CDOTAClientMsg_CoinWager::set_wager_amount(::google::protobuf::uint32 value) {
  set_has_wager_amount();
  wager_amount_ = value;
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_CoinWager.wager_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
