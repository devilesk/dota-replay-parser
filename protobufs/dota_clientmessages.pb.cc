// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MapPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EnemyItemAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ModifierAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ClickedBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ClickedBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_HPManaAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_GlyphAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MapLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_AspectRatio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UnitsAutoAttackMode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_TeleportRequiresHalt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SearchString_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_Pause_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ShopViewMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SetUnitShareFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SwapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SwapAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_WorldLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RequestGraphUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChatWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SendStatPopup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BeginLastHitChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateQuickBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateQuickBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateCoachListen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_UpdateCoachListen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoachHUDPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CoachHUDPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RecordVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_WillPurchaseAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BuyBackStateAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_QuickBuyAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_PlayerShowCase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CameraZoomAmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BroadcasterUsingCameraman_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAdditionalEquipSlotClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_FreeInventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_FillEmptySlotsWithBots_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_HeroStatueLike_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EventCNY2015Cmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_DemoHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_DemoHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChallengeSelect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeReroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ChallengeReroll_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoinWager_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_CoinWager_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventPointsTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_EventPointsTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ExecuteOrders_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ExecuteOrders_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_XPAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_XPAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_KillcamDamageTaken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_KillcamDamageTaken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_MatchMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_MatchMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_KillMyHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_KillMyHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuestStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_QuestStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_ToggleAutoattack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_ToggleAutoattack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SpecialAbility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SpecialAbility_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetEnemyStartingPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SetEnemyStartingPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetDesiredWardPlacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_SetDesiredWardPlacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_RollDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_RollDice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAClientMsg_FlipCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAClientMsg_FlipCoin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fclientmessages_2eproto() {
  protobuf_AddDesc_dota_5fclientmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_clientmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAClientMsg_MapPing_descriptor_ = file->message_type(0);
  static const int CDOTAClientMsg_MapPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, location_ping_),
  };
  CDOTAClientMsg_MapPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_MapPing_descriptor_,
      CDOTAClientMsg_MapPing::default_instance_,
      CDOTAClientMsg_MapPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_MapPing));
  CDOTAClientMsg_ItemAlert_descriptor_ = file->message_type(1);
  static const int CDOTAClientMsg_ItemAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, item_alert_),
  };
  CDOTAClientMsg_ItemAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ItemAlert_descriptor_,
      CDOTAClientMsg_ItemAlert::default_instance_,
      CDOTAClientMsg_ItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ItemAlert));
  CDOTAClientMsg_EnemyItemAlert_descriptor_ = file->message_type(2);
  static const int CDOTAClientMsg_EnemyItemAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, item_entindex_),
  };
  CDOTAClientMsg_EnemyItemAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_EnemyItemAlert_descriptor_,
      CDOTAClientMsg_EnemyItemAlert::default_instance_,
      CDOTAClientMsg_EnemyItemAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_EnemyItemAlert));
  CDOTAClientMsg_ModifierAlert_descriptor_ = file->message_type(3);
  static const int CDOTAClientMsg_ModifierAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, buff_internal_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, target_entindex_),
  };
  CDOTAClientMsg_ModifierAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ModifierAlert_descriptor_,
      CDOTAClientMsg_ModifierAlert::default_instance_,
      CDOTAClientMsg_ModifierAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ModifierAlert));
  CDOTAClientMsg_ClickedBuff_descriptor_ = file->message_type(4);
  static const int CDOTAClientMsg_ClickedBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, buff_internal_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, target_entindex_),
  };
  CDOTAClientMsg_ClickedBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ClickedBuff_descriptor_,
      CDOTAClientMsg_ClickedBuff::default_instance_,
      CDOTAClientMsg_ClickedBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ClickedBuff));
  CDOTAClientMsg_HPManaAlert_descriptor_ = file->message_type(5);
  static const int CDOTAClientMsg_HPManaAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, target_entindex_),
  };
  CDOTAClientMsg_HPManaAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_HPManaAlert_descriptor_,
      CDOTAClientMsg_HPManaAlert::default_instance_,
      CDOTAClientMsg_HPManaAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_HPManaAlert));
  CDOTAClientMsg_GlyphAlert_descriptor_ = file->message_type(6);
  static const int CDOTAClientMsg_GlyphAlert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, negative_),
  };
  CDOTAClientMsg_GlyphAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_GlyphAlert_descriptor_,
      CDOTAClientMsg_GlyphAlert::default_instance_,
      CDOTAClientMsg_GlyphAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_GlyphAlert));
  CDOTAClientMsg_MapLine_descriptor_ = file->message_type(7);
  static const int CDOTAClientMsg_MapLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, mapline_),
  };
  CDOTAClientMsg_MapLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_MapLine_descriptor_,
      CDOTAClientMsg_MapLine::default_instance_,
      CDOTAClientMsg_MapLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_MapLine));
  CDOTAClientMsg_AspectRatio_descriptor_ = file->message_type(8);
  static const int CDOTAClientMsg_AspectRatio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, ratio_),
  };
  CDOTAClientMsg_AspectRatio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_AspectRatio_descriptor_,
      CDOTAClientMsg_AspectRatio::default_instance_,
      CDOTAClientMsg_AspectRatio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_AspectRatio));
  CDOTAClientMsg_UnitsAutoAttackMode_descriptor_ = file->message_type(9);
  static const int CDOTAClientMsg_UnitsAutoAttackMode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, unit_type_),
  };
  CDOTAClientMsg_UnitsAutoAttackMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UnitsAutoAttackMode_descriptor_,
      CDOTAClientMsg_UnitsAutoAttackMode::default_instance_,
      CDOTAClientMsg_UnitsAutoAttackMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UnitsAutoAttackMode));
  CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor_ = CDOTAClientMsg_UnitsAutoAttackMode_descriptor_->enum_type(0);
  CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor_ = CDOTAClientMsg_UnitsAutoAttackMode_descriptor_->enum_type(1);
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_ = file->message_type(10);
  static const int CDOTAClientMsg_UnitsAutoAttackAfterSpell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, enabled_),
  };
  CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_,
      CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_,
      CDOTAClientMsg_UnitsAutoAttackAfterSpell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UnitsAutoAttackAfterSpell));
  CDOTAClientMsg_TeleportRequiresHalt_descriptor_ = file->message_type(11);
  static const int CDOTAClientMsg_TeleportRequiresHalt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, enabled_),
  };
  CDOTAClientMsg_TeleportRequiresHalt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_TeleportRequiresHalt_descriptor_,
      CDOTAClientMsg_TeleportRequiresHalt::default_instance_,
      CDOTAClientMsg_TeleportRequiresHalt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_TeleportRequiresHalt));
  CDOTAClientMsg_SearchString_descriptor_ = file->message_type(12);
  static const int CDOTAClientMsg_SearchString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, search_),
  };
  CDOTAClientMsg_SearchString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SearchString_descriptor_,
      CDOTAClientMsg_SearchString::default_instance_,
      CDOTAClientMsg_SearchString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SearchString));
  CDOTAClientMsg_Pause_descriptor_ = file->message_type(13);
  static const int CDOTAClientMsg_Pause_offsets_[1] = {
  };
  CDOTAClientMsg_Pause_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_Pause_descriptor_,
      CDOTAClientMsg_Pause::default_instance_,
      CDOTAClientMsg_Pause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_Pause));
  CDOTAClientMsg_ShopViewMode_descriptor_ = file->message_type(14);
  static const int CDOTAClientMsg_ShopViewMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, mode_),
  };
  CDOTAClientMsg_ShopViewMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ShopViewMode_descriptor_,
      CDOTAClientMsg_ShopViewMode::default_instance_,
      CDOTAClientMsg_ShopViewMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ShopViewMode));
  CDOTAClientMsg_SetUnitShareFlag_descriptor_ = file->message_type(15);
  static const int CDOTAClientMsg_SetUnitShareFlag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, state_),
  };
  CDOTAClientMsg_SetUnitShareFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SetUnitShareFlag_descriptor_,
      CDOTAClientMsg_SetUnitShareFlag::default_instance_,
      CDOTAClientMsg_SetUnitShareFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SetUnitShareFlag));
  CDOTAClientMsg_SwapRequest_descriptor_ = file->message_type(16);
  static const int CDOTAClientMsg_SwapRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, player_id_),
  };
  CDOTAClientMsg_SwapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SwapRequest_descriptor_,
      CDOTAClientMsg_SwapRequest::default_instance_,
      CDOTAClientMsg_SwapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SwapRequest));
  CDOTAClientMsg_SwapAccept_descriptor_ = file->message_type(17);
  static const int CDOTAClientMsg_SwapAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, player_id_),
  };
  CDOTAClientMsg_SwapAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SwapAccept_descriptor_,
      CDOTAClientMsg_SwapAccept::default_instance_,
      CDOTAClientMsg_SwapAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SwapAccept));
  CDOTAClientMsg_WorldLine_descriptor_ = file->message_type(18);
  static const int CDOTAClientMsg_WorldLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, worldline_),
  };
  CDOTAClientMsg_WorldLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_WorldLine_descriptor_,
      CDOTAClientMsg_WorldLine::default_instance_,
      CDOTAClientMsg_WorldLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_WorldLine));
  CDOTAClientMsg_RequestGraphUpdate_descriptor_ = file->message_type(19);
  static const int CDOTAClientMsg_RequestGraphUpdate_offsets_[1] = {
  };
  CDOTAClientMsg_RequestGraphUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_RequestGraphUpdate_descriptor_,
      CDOTAClientMsg_RequestGraphUpdate::default_instance_,
      CDOTAClientMsg_RequestGraphUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_RequestGraphUpdate));
  CDOTAClientMsg_ChatWheel_descriptor_ = file->message_type(20);
  static const int CDOTAClientMsg_ChatWheel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, chat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, param_hero_id_),
  };
  CDOTAClientMsg_ChatWheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ChatWheel_descriptor_,
      CDOTAClientMsg_ChatWheel::default_instance_,
      CDOTAClientMsg_ChatWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ChatWheel));
  CDOTAClientMsg_SendStatPopup_descriptor_ = file->message_type(21);
  static const int CDOTAClientMsg_SendStatPopup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, statpopup_),
  };
  CDOTAClientMsg_SendStatPopup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SendStatPopup_descriptor_,
      CDOTAClientMsg_SendStatPopup::default_instance_,
      CDOTAClientMsg_SendStatPopup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SendStatPopup));
  CDOTAClientMsg_BeginLastHitChallenge_descriptor_ = file->message_type(22);
  static const int CDOTAClientMsg_BeginLastHitChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_),
  };
  CDOTAClientMsg_BeginLastHitChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BeginLastHitChallenge_descriptor_,
      CDOTAClientMsg_BeginLastHitChallenge::default_instance_,
      CDOTAClientMsg_BeginLastHitChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BeginLastHitChallenge));
  CDOTAClientMsg_UpdateQuickBuyItem_descriptor_ = file->message_type(23);
  static const int CDOTAClientMsg_UpdateQuickBuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, purchasable_),
  };
  CDOTAClientMsg_UpdateQuickBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UpdateQuickBuyItem_descriptor_,
      CDOTAClientMsg_UpdateQuickBuyItem::default_instance_,
      CDOTAClientMsg_UpdateQuickBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UpdateQuickBuyItem));
  CDOTAClientMsg_UpdateQuickBuy_descriptor_ = file->message_type(24);
  static const int CDOTAClientMsg_UpdateQuickBuy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, items_),
  };
  CDOTAClientMsg_UpdateQuickBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UpdateQuickBuy_descriptor_,
      CDOTAClientMsg_UpdateQuickBuy::default_instance_,
      CDOTAClientMsg_UpdateQuickBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UpdateQuickBuy));
  CDOTAClientMsg_UpdateCoachListen_descriptor_ = file->message_type(25);
  static const int CDOTAClientMsg_UpdateCoachListen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, player_mask_),
  };
  CDOTAClientMsg_UpdateCoachListen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_UpdateCoachListen_descriptor_,
      CDOTAClientMsg_UpdateCoachListen::default_instance_,
      CDOTAClientMsg_UpdateCoachListen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateCoachListen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_UpdateCoachListen));
  CDOTAClientMsg_CoachHUDPing_descriptor_ = file->message_type(26);
  static const int CDOTAClientMsg_CoachHUDPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, hud_ping_),
  };
  CDOTAClientMsg_CoachHUDPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_CoachHUDPing_descriptor_,
      CDOTAClientMsg_CoachHUDPing::default_instance_,
      CDOTAClientMsg_CoachHUDPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoachHUDPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_CoachHUDPing));
  CDOTAClientMsg_RecordVote_descriptor_ = file->message_type(27);
  static const int CDOTAClientMsg_RecordVote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, choice_index_),
  };
  CDOTAClientMsg_RecordVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_RecordVote_descriptor_,
      CDOTAClientMsg_RecordVote::default_instance_,
      CDOTAClientMsg_RecordVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_RecordVote));
  CDOTAClientMsg_WillPurchaseAlert_descriptor_ = file->message_type(28);
  static const int CDOTAClientMsg_WillPurchaseAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, gold_remaining_),
  };
  CDOTAClientMsg_WillPurchaseAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_WillPurchaseAlert_descriptor_,
      CDOTAClientMsg_WillPurchaseAlert::default_instance_,
      CDOTAClientMsg_WillPurchaseAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_WillPurchaseAlert));
  CDOTAClientMsg_BuyBackStateAlert_descriptor_ = file->message_type(29);
  static const int CDOTAClientMsg_BuyBackStateAlert_offsets_[1] = {
  };
  CDOTAClientMsg_BuyBackStateAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BuyBackStateAlert_descriptor_,
      CDOTAClientMsg_BuyBackStateAlert::default_instance_,
      CDOTAClientMsg_BuyBackStateAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BuyBackStateAlert));
  CDOTAClientMsg_QuickBuyAlert_descriptor_ = file->message_type(30);
  static const int CDOTAClientMsg_QuickBuyAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, gold_required_),
  };
  CDOTAClientMsg_QuickBuyAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_QuickBuyAlert_descriptor_,
      CDOTAClientMsg_QuickBuyAlert::default_instance_,
      CDOTAClientMsg_QuickBuyAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_QuickBuyAlert));
  CDOTAClientMsg_PlayerShowCase_descriptor_ = file->message_type(31);
  static const int CDOTAClientMsg_PlayerShowCase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, showcase_),
  };
  CDOTAClientMsg_PlayerShowCase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_PlayerShowCase_descriptor_,
      CDOTAClientMsg_PlayerShowCase::default_instance_,
      CDOTAClientMsg_PlayerShowCase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_PlayerShowCase));
  CDOTAClientMsg_CameraZoomAmount_descriptor_ = file->message_type(32);
  static const int CDOTAClientMsg_CameraZoomAmount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, zoom_amount_),
  };
  CDOTAClientMsg_CameraZoomAmount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_CameraZoomAmount_descriptor_,
      CDOTAClientMsg_CameraZoomAmount::default_instance_,
      CDOTAClientMsg_CameraZoomAmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_CameraZoomAmount));
  CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_ = file->message_type(33);
  static const int CDOTAClientMsg_BroadcasterUsingCameraman_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, cameraman_),
  };
  CDOTAClientMsg_BroadcasterUsingCameraman_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_,
      CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_,
      CDOTAClientMsg_BroadcasterUsingCameraman_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BroadcasterUsingCameraman));
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_ = file->message_type(34);
  static const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, enabled_),
  };
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_,
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_,
      CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator));
  CAdditionalEquipSlotClientMsg_descriptor_ = file->message_type(35);
  static const int CAdditionalEquipSlotClientMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, def_index_),
  };
  CAdditionalEquipSlotClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAdditionalEquipSlotClientMsg_descriptor_,
      CAdditionalEquipSlotClientMsg::default_instance_,
      CAdditionalEquipSlotClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAdditionalEquipSlotClientMsg));
  CDOTAClientMsg_FreeInventory_descriptor_ = file->message_type(36);
  static const int CDOTAClientMsg_FreeInventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, equips_),
  };
  CDOTAClientMsg_FreeInventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_FreeInventory_descriptor_,
      CDOTAClientMsg_FreeInventory::default_instance_,
      CDOTAClientMsg_FreeInventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_FreeInventory));
  CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_ = file->message_type(37);
  static const int CDOTAClientMsg_FillEmptySlotsWithBots_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, fillwithbots_),
  };
  CDOTAClientMsg_FillEmptySlotsWithBots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_,
      CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_,
      CDOTAClientMsg_FillEmptySlotsWithBots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_FillEmptySlotsWithBots));
  CDOTAClientMsg_HeroStatueLike_descriptor_ = file->message_type(38);
  static const int CDOTAClientMsg_HeroStatueLike_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, owner_player_id_),
  };
  CDOTAClientMsg_HeroStatueLike_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_HeroStatueLike_descriptor_,
      CDOTAClientMsg_HeroStatueLike::default_instance_,
      CDOTAClientMsg_HeroStatueLike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_HeroStatueLike));
  CDOTAClientMsg_EventCNY2015Cmd_descriptor_ = file->message_type(39);
  static const int CDOTAClientMsg_EventCNY2015Cmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, data_),
  };
  CDOTAClientMsg_EventCNY2015Cmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_EventCNY2015Cmd_descriptor_,
      CDOTAClientMsg_EventCNY2015Cmd::default_instance_,
      CDOTAClientMsg_EventCNY2015Cmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_EventCNY2015Cmd));
  CDOTAClientMsg_DemoHero_descriptor_ = file->message_type(40);
  static const int CDOTAClientMsg_DemoHero_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_to_spawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, item_defs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, style_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, keep_existing_demohero_),
  };
  CDOTAClientMsg_DemoHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_DemoHero_descriptor_,
      CDOTAClientMsg_DemoHero::default_instance_,
      CDOTAClientMsg_DemoHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_DemoHero));
  CDOTAClientMsg_ChallengeSelect_descriptor_ = file->message_type(41);
  static const int CDOTAClientMsg_ChallengeSelect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, sequence_id_),
  };
  CDOTAClientMsg_ChallengeSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ChallengeSelect_descriptor_,
      CDOTAClientMsg_ChallengeSelect::default_instance_,
      CDOTAClientMsg_ChallengeSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ChallengeSelect));
  CDOTAClientMsg_ChallengeReroll_descriptor_ = file->message_type(42);
  static const int CDOTAClientMsg_ChallengeReroll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, sequence_id_),
  };
  CDOTAClientMsg_ChallengeReroll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ChallengeReroll_descriptor_,
      CDOTAClientMsg_ChallengeReroll::default_instance_,
      CDOTAClientMsg_ChallengeReroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ChallengeReroll));
  CDOTAClientMsg_CoinWager_descriptor_ = file->message_type(43);
  static const int CDOTAClientMsg_CoinWager_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, wager_amount_),
  };
  CDOTAClientMsg_CoinWager_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_CoinWager_descriptor_,
      CDOTAClientMsg_CoinWager::default_instance_,
      CDOTAClientMsg_CoinWager_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_CoinWager));
  CDOTAClientMsg_EventPointsTip_descriptor_ = file->message_type(44);
  static const int CDOTAClientMsg_EventPointsTip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventPointsTip, recipient_player_id_),
  };
  CDOTAClientMsg_EventPointsTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_EventPointsTip_descriptor_,
      CDOTAClientMsg_EventPointsTip::default_instance_,
      CDOTAClientMsg_EventPointsTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventPointsTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventPointsTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_EventPointsTip));
  CDOTAClientMsg_ExecuteOrders_descriptor_ = file->message_type(45);
  static const int CDOTAClientMsg_ExecuteOrders_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ExecuteOrders, orders_),
  };
  CDOTAClientMsg_ExecuteOrders_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ExecuteOrders_descriptor_,
      CDOTAClientMsg_ExecuteOrders::default_instance_,
      CDOTAClientMsg_ExecuteOrders_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ExecuteOrders, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ExecuteOrders, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ExecuteOrders));
  CDOTAClientMsg_XPAlert_descriptor_ = file->message_type(46);
  static const int CDOTAClientMsg_XPAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, target_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, damage_taken_),
  };
  CDOTAClientMsg_XPAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_XPAlert_descriptor_,
      CDOTAClientMsg_XPAlert::default_instance_,
      CDOTAClientMsg_XPAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_XPAlert));
  CDOTAClientMsg_KillcamDamageTaken_descriptor_ = file->message_type(47);
  static const int CDOTAClientMsg_KillcamDamageTaken_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, target_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, damage_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, damage_color_),
  };
  CDOTAClientMsg_KillcamDamageTaken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_KillcamDamageTaken_descriptor_,
      CDOTAClientMsg_KillcamDamageTaken::default_instance_,
      CDOTAClientMsg_KillcamDamageTaken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_KillcamDamageTaken));
  CDOTAClientMsg_MatchMetadata_descriptor_ = file->message_type(48);
  static const int CDOTAClientMsg_MatchMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, metadata_),
  };
  CDOTAClientMsg_MatchMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_MatchMetadata_descriptor_,
      CDOTAClientMsg_MatchMetadata::default_instance_,
      CDOTAClientMsg_MatchMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_MatchMetadata));
  CDOTAClientMsg_KillMyHero_descriptor_ = file->message_type(49);
  static const int CDOTAClientMsg_KillMyHero_offsets_[1] = {
  };
  CDOTAClientMsg_KillMyHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_KillMyHero_descriptor_,
      CDOTAClientMsg_KillMyHero::default_instance_,
      CDOTAClientMsg_KillMyHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillMyHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillMyHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_KillMyHero));
  CDOTAClientMsg_QuestStatus_descriptor_ = file->message_type(50);
  static const int CDOTAClientMsg_QuestStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, challenge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, goal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, fail_gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, item_id_),
  };
  CDOTAClientMsg_QuestStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_QuestStatus_descriptor_,
      CDOTAClientMsg_QuestStatus::default_instance_,
      CDOTAClientMsg_QuestStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_QuestStatus));
  CDOTAClientMsg_ToggleAutoattack_descriptor_ = file->message_type(51);
  static const int CDOTAClientMsg_ToggleAutoattack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, show_message_),
  };
  CDOTAClientMsg_ToggleAutoattack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_ToggleAutoattack_descriptor_,
      CDOTAClientMsg_ToggleAutoattack::default_instance_,
      CDOTAClientMsg_ToggleAutoattack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_ToggleAutoattack));
  CDOTAClientMsg_SpecialAbility_descriptor_ = file->message_type(52);
  static const int CDOTAClientMsg_SpecialAbility_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, ability_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, target_entindex_),
  };
  CDOTAClientMsg_SpecialAbility_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SpecialAbility_descriptor_,
      CDOTAClientMsg_SpecialAbility::default_instance_,
      CDOTAClientMsg_SpecialAbility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SpecialAbility));
  CDOTAClientMsg_SetEnemyStartingPosition_descriptor_ = file->message_type(53);
  static const int CDOTAClientMsg_SetEnemyStartingPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, enemy_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, enemy_starting_position_),
  };
  CDOTAClientMsg_SetEnemyStartingPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SetEnemyStartingPosition_descriptor_,
      CDOTAClientMsg_SetEnemyStartingPosition::default_instance_,
      CDOTAClientMsg_SetEnemyStartingPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SetEnemyStartingPosition));
  CDOTAClientMsg_SetDesiredWardPlacement_descriptor_ = file->message_type(54);
  static const int CDOTAClientMsg_SetDesiredWardPlacement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_y_),
  };
  CDOTAClientMsg_SetDesiredWardPlacement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_SetDesiredWardPlacement_descriptor_,
      CDOTAClientMsg_SetDesiredWardPlacement::default_instance_,
      CDOTAClientMsg_SetDesiredWardPlacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_SetDesiredWardPlacement));
  CDOTAClientMsg_RollDice_descriptor_ = file->message_type(55);
  static const int CDOTAClientMsg_RollDice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, roll_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, roll_max_),
  };
  CDOTAClientMsg_RollDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_RollDice_descriptor_,
      CDOTAClientMsg_RollDice::default_instance_,
      CDOTAClientMsg_RollDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_RollDice));
  CDOTAClientMsg_FlipCoin_descriptor_ = file->message_type(56);
  static const int CDOTAClientMsg_FlipCoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FlipCoin, channel_type_),
  };
  CDOTAClientMsg_FlipCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAClientMsg_FlipCoin_descriptor_,
      CDOTAClientMsg_FlipCoin::default_instance_,
      CDOTAClientMsg_FlipCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FlipCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FlipCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAClientMsg_FlipCoin));
  EDotaClientMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fclientmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_MapPing_descriptor_, &CDOTAClientMsg_MapPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ItemAlert_descriptor_, &CDOTAClientMsg_ItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_EnemyItemAlert_descriptor_, &CDOTAClientMsg_EnemyItemAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ModifierAlert_descriptor_, &CDOTAClientMsg_ModifierAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ClickedBuff_descriptor_, &CDOTAClientMsg_ClickedBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_HPManaAlert_descriptor_, &CDOTAClientMsg_HPManaAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_GlyphAlert_descriptor_, &CDOTAClientMsg_GlyphAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_MapLine_descriptor_, &CDOTAClientMsg_MapLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_AspectRatio_descriptor_, &CDOTAClientMsg_AspectRatio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UnitsAutoAttackMode_descriptor_, &CDOTAClientMsg_UnitsAutoAttackMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_, &CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_TeleportRequiresHalt_descriptor_, &CDOTAClientMsg_TeleportRequiresHalt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SearchString_descriptor_, &CDOTAClientMsg_SearchString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_Pause_descriptor_, &CDOTAClientMsg_Pause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ShopViewMode_descriptor_, &CDOTAClientMsg_ShopViewMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SetUnitShareFlag_descriptor_, &CDOTAClientMsg_SetUnitShareFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SwapRequest_descriptor_, &CDOTAClientMsg_SwapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SwapAccept_descriptor_, &CDOTAClientMsg_SwapAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_WorldLine_descriptor_, &CDOTAClientMsg_WorldLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_RequestGraphUpdate_descriptor_, &CDOTAClientMsg_RequestGraphUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ChatWheel_descriptor_, &CDOTAClientMsg_ChatWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SendStatPopup_descriptor_, &CDOTAClientMsg_SendStatPopup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BeginLastHitChallenge_descriptor_, &CDOTAClientMsg_BeginLastHitChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UpdateQuickBuyItem_descriptor_, &CDOTAClientMsg_UpdateQuickBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UpdateQuickBuy_descriptor_, &CDOTAClientMsg_UpdateQuickBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_UpdateCoachListen_descriptor_, &CDOTAClientMsg_UpdateCoachListen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_CoachHUDPing_descriptor_, &CDOTAClientMsg_CoachHUDPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_RecordVote_descriptor_, &CDOTAClientMsg_RecordVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_WillPurchaseAlert_descriptor_, &CDOTAClientMsg_WillPurchaseAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BuyBackStateAlert_descriptor_, &CDOTAClientMsg_BuyBackStateAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_QuickBuyAlert_descriptor_, &CDOTAClientMsg_QuickBuyAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_PlayerShowCase_descriptor_, &CDOTAClientMsg_PlayerShowCase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_CameraZoomAmount_descriptor_, &CDOTAClientMsg_CameraZoomAmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_, &CDOTAClientMsg_BroadcasterUsingCameraman::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_, &CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAdditionalEquipSlotClientMsg_descriptor_, &CAdditionalEquipSlotClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_FreeInventory_descriptor_, &CDOTAClientMsg_FreeInventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_, &CDOTAClientMsg_FillEmptySlotsWithBots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_HeroStatueLike_descriptor_, &CDOTAClientMsg_HeroStatueLike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_EventCNY2015Cmd_descriptor_, &CDOTAClientMsg_EventCNY2015Cmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_DemoHero_descriptor_, &CDOTAClientMsg_DemoHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ChallengeSelect_descriptor_, &CDOTAClientMsg_ChallengeSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ChallengeReroll_descriptor_, &CDOTAClientMsg_ChallengeReroll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_CoinWager_descriptor_, &CDOTAClientMsg_CoinWager::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_EventPointsTip_descriptor_, &CDOTAClientMsg_EventPointsTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ExecuteOrders_descriptor_, &CDOTAClientMsg_ExecuteOrders::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_XPAlert_descriptor_, &CDOTAClientMsg_XPAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_KillcamDamageTaken_descriptor_, &CDOTAClientMsg_KillcamDamageTaken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_MatchMetadata_descriptor_, &CDOTAClientMsg_MatchMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_KillMyHero_descriptor_, &CDOTAClientMsg_KillMyHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_QuestStatus_descriptor_, &CDOTAClientMsg_QuestStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_ToggleAutoattack_descriptor_, &CDOTAClientMsg_ToggleAutoattack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SpecialAbility_descriptor_, &CDOTAClientMsg_SpecialAbility::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SetEnemyStartingPosition_descriptor_, &CDOTAClientMsg_SetEnemyStartingPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_SetDesiredWardPlacement_descriptor_, &CDOTAClientMsg_SetDesiredWardPlacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_RollDice_descriptor_, &CDOTAClientMsg_RollDice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAClientMsg_FlipCoin_descriptor_, &CDOTAClientMsg_FlipCoin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fclientmessages_2eproto() {
  delete CDOTAClientMsg_MapPing::default_instance_;
  delete CDOTAClientMsg_MapPing_reflection_;
  delete CDOTAClientMsg_ItemAlert::default_instance_;
  delete CDOTAClientMsg_ItemAlert_reflection_;
  delete CDOTAClientMsg_EnemyItemAlert::default_instance_;
  delete CDOTAClientMsg_EnemyItemAlert_reflection_;
  delete CDOTAClientMsg_ModifierAlert::default_instance_;
  delete CDOTAClientMsg_ModifierAlert_reflection_;
  delete CDOTAClientMsg_ClickedBuff::default_instance_;
  delete CDOTAClientMsg_ClickedBuff_reflection_;
  delete CDOTAClientMsg_HPManaAlert::default_instance_;
  delete CDOTAClientMsg_HPManaAlert_reflection_;
  delete CDOTAClientMsg_GlyphAlert::default_instance_;
  delete CDOTAClientMsg_GlyphAlert_reflection_;
  delete CDOTAClientMsg_MapLine::default_instance_;
  delete CDOTAClientMsg_MapLine_reflection_;
  delete CDOTAClientMsg_AspectRatio::default_instance_;
  delete CDOTAClientMsg_AspectRatio_reflection_;
  delete CDOTAClientMsg_UnitsAutoAttackMode::default_instance_;
  delete CDOTAClientMsg_UnitsAutoAttackMode_reflection_;
  delete CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_;
  delete CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_;
  delete CDOTAClientMsg_TeleportRequiresHalt::default_instance_;
  delete CDOTAClientMsg_TeleportRequiresHalt_reflection_;
  delete CDOTAClientMsg_SearchString::default_instance_;
  delete CDOTAClientMsg_SearchString_reflection_;
  delete CDOTAClientMsg_Pause::default_instance_;
  delete CDOTAClientMsg_Pause_reflection_;
  delete CDOTAClientMsg_ShopViewMode::default_instance_;
  delete CDOTAClientMsg_ShopViewMode_reflection_;
  delete CDOTAClientMsg_SetUnitShareFlag::default_instance_;
  delete CDOTAClientMsg_SetUnitShareFlag_reflection_;
  delete CDOTAClientMsg_SwapRequest::default_instance_;
  delete CDOTAClientMsg_SwapRequest_reflection_;
  delete CDOTAClientMsg_SwapAccept::default_instance_;
  delete CDOTAClientMsg_SwapAccept_reflection_;
  delete CDOTAClientMsg_WorldLine::default_instance_;
  delete CDOTAClientMsg_WorldLine_reflection_;
  delete CDOTAClientMsg_RequestGraphUpdate::default_instance_;
  delete CDOTAClientMsg_RequestGraphUpdate_reflection_;
  delete CDOTAClientMsg_ChatWheel::default_instance_;
  delete CDOTAClientMsg_ChatWheel_reflection_;
  delete CDOTAClientMsg_SendStatPopup::default_instance_;
  delete CDOTAClientMsg_SendStatPopup_reflection_;
  delete CDOTAClientMsg_BeginLastHitChallenge::default_instance_;
  delete CDOTAClientMsg_BeginLastHitChallenge_reflection_;
  delete CDOTAClientMsg_UpdateQuickBuyItem::default_instance_;
  delete CDOTAClientMsg_UpdateQuickBuyItem_reflection_;
  delete CDOTAClientMsg_UpdateQuickBuy::default_instance_;
  delete CDOTAClientMsg_UpdateQuickBuy_reflection_;
  delete CDOTAClientMsg_UpdateCoachListen::default_instance_;
  delete CDOTAClientMsg_UpdateCoachListen_reflection_;
  delete CDOTAClientMsg_CoachHUDPing::default_instance_;
  delete CDOTAClientMsg_CoachHUDPing_reflection_;
  delete CDOTAClientMsg_RecordVote::default_instance_;
  delete CDOTAClientMsg_RecordVote_reflection_;
  delete CDOTAClientMsg_WillPurchaseAlert::default_instance_;
  delete CDOTAClientMsg_WillPurchaseAlert_reflection_;
  delete CDOTAClientMsg_BuyBackStateAlert::default_instance_;
  delete CDOTAClientMsg_BuyBackStateAlert_reflection_;
  delete CDOTAClientMsg_QuickBuyAlert::default_instance_;
  delete CDOTAClientMsg_QuickBuyAlert_reflection_;
  delete CDOTAClientMsg_PlayerShowCase::default_instance_;
  delete CDOTAClientMsg_PlayerShowCase_reflection_;
  delete CDOTAClientMsg_CameraZoomAmount::default_instance_;
  delete CDOTAClientMsg_CameraZoomAmount_reflection_;
  delete CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_;
  delete CDOTAClientMsg_BroadcasterUsingCameraman_reflection_;
  delete CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_;
  delete CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_;
  delete CAdditionalEquipSlotClientMsg::default_instance_;
  delete CAdditionalEquipSlotClientMsg_reflection_;
  delete CDOTAClientMsg_FreeInventory::default_instance_;
  delete CDOTAClientMsg_FreeInventory_reflection_;
  delete CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_;
  delete CDOTAClientMsg_FillEmptySlotsWithBots_reflection_;
  delete CDOTAClientMsg_HeroStatueLike::default_instance_;
  delete CDOTAClientMsg_HeroStatueLike_reflection_;
  delete CDOTAClientMsg_EventCNY2015Cmd::default_instance_;
  delete CDOTAClientMsg_EventCNY2015Cmd_reflection_;
  delete CDOTAClientMsg_DemoHero::default_instance_;
  delete CDOTAClientMsg_DemoHero_reflection_;
  delete CDOTAClientMsg_ChallengeSelect::default_instance_;
  delete CDOTAClientMsg_ChallengeSelect_reflection_;
  delete CDOTAClientMsg_ChallengeReroll::default_instance_;
  delete CDOTAClientMsg_ChallengeReroll_reflection_;
  delete CDOTAClientMsg_CoinWager::default_instance_;
  delete CDOTAClientMsg_CoinWager_reflection_;
  delete CDOTAClientMsg_EventPointsTip::default_instance_;
  delete CDOTAClientMsg_EventPointsTip_reflection_;
  delete CDOTAClientMsg_ExecuteOrders::default_instance_;
  delete CDOTAClientMsg_ExecuteOrders_reflection_;
  delete CDOTAClientMsg_XPAlert::default_instance_;
  delete CDOTAClientMsg_XPAlert_reflection_;
  delete CDOTAClientMsg_KillcamDamageTaken::default_instance_;
  delete CDOTAClientMsg_KillcamDamageTaken_reflection_;
  delete CDOTAClientMsg_MatchMetadata::default_instance_;
  delete CDOTAClientMsg_MatchMetadata_reflection_;
  delete CDOTAClientMsg_KillMyHero::default_instance_;
  delete CDOTAClientMsg_KillMyHero_reflection_;
  delete CDOTAClientMsg_QuestStatus::default_instance_;
  delete CDOTAClientMsg_QuestStatus_reflection_;
  delete CDOTAClientMsg_ToggleAutoattack::default_instance_;
  delete CDOTAClientMsg_ToggleAutoattack_reflection_;
  delete CDOTAClientMsg_SpecialAbility::default_instance_;
  delete CDOTAClientMsg_SpecialAbility_reflection_;
  delete CDOTAClientMsg_SetEnemyStartingPosition::default_instance_;
  delete CDOTAClientMsg_SetEnemyStartingPosition_reflection_;
  delete CDOTAClientMsg_SetDesiredWardPlacement::default_instance_;
  delete CDOTAClientMsg_SetDesiredWardPlacement_reflection_;
  delete CDOTAClientMsg_RollDice::default_instance_;
  delete CDOTAClientMsg_RollDice_reflection_;
  delete CDOTAClientMsg_FlipCoin::default_instance_;
  delete CDOTAClientMsg_FlipCoin_reflection_;
}

void protobuf_AddDesc_dota_5fclientmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fcommonmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031dota_clientmessages.proto\032\031dota_common"
    "messages.proto\"G\n\026CDOTAClientMsg_MapPing"
    "\022-\n\rlocation_ping\030\001 \001(\0132\026.CDOTAMsg_Locat"
    "ionPing\"C\n\030CDOTAClientMsg_ItemAlert\022\'\n\ni"
    "tem_alert\030\001 \001(\0132\023.CDOTAMsg_ItemAlert\"6\n\035"
    "CDOTAClientMsg_EnemyItemAlert\022\025\n\ritem_en"
    "tindex\030\001 \001(\r\"T\n\034CDOTAClientMsg_ModifierA"
    "lert\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n\017tar"
    "get_entindex\030\002 \001(\r\"R\n\032CDOTAClientMsg_Cli"
    "ckedBuff\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n"
    "\017target_entindex\030\002 \001(\r\"5\n\032CDOTAClientMsg"
    "_HPManaAlert\022\027\n\017target_entindex\030\001 \001(\r\"-\n"
    "\031CDOTAClientMsg_GlyphAlert\022\020\n\010negative\030\001"
    " \001(\010\"<\n\026CDOTAClientMsg_MapLine\022\"\n\007maplin"
    "e\030\001 \001(\0132\021.CDOTAMsg_MapLine\"+\n\032CDOTAClien"
    "tMsg_AspectRatio\022\r\n\005ratio\030\001 \001(\002\"\242\002\n\"CDOT"
    "AClientMsg_UnitsAutoAttackMode\022@\n\004mode\030\001"
    " \001(\0162).CDOTAClientMsg_UnitsAutoAttackMod"
    "e.EMode:\007INVALID\022H\n\tunit_type\030\002 \001(\0162-.CD"
    "OTAClientMsg_UnitsAutoAttackMode.EUnitTy"
    "pe:\006NORMAL\"I\n\005EMode\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377"
    "\001\022\t\n\005NEVER\020\000\022\023\n\017AFTER_SPELLCAST\020\001\022\n\n\006ALW"
    "AYS\020\002\"%\n\tEUnitType\022\n\n\006NORMAL\020\000\022\014\n\010SUMMON"
    "ED\020\001\";\n(CDOTAClientMsg_UnitsAutoAttackAf"
    "terSpell\022\017\n\007enabled\030\001 \001(\010\"6\n#CDOTAClient"
    "Msg_TeleportRequiresHalt\022\017\n\007enabled\030\001 \001("
    "\010\"-\n\033CDOTAClientMsg_SearchString\022\016\n\006sear"
    "ch\030\001 \001(\t\"\026\n\024CDOTAClientMsg_Pause\"+\n\033CDOT"
    "AClientMsg_ShopViewMode\022\014\n\004mode\030\001 \001(\r\"P\n"
    "\037CDOTAClientMsg_SetUnitShareFlag\022\020\n\010play"
    "erID\030\001 \001(\r\022\014\n\004flag\030\002 \001(\r\022\r\n\005state\030\003 \001(\010\""
    "/\n\032CDOTAClientMsg_SwapRequest\022\021\n\tplayer_"
    "id\030\001 \001(\r\".\n\031CDOTAClientMsg_SwapAccept\022\021\n"
    "\tplayer_id\030\001 \001(\r\"B\n\030CDOTAClientMsg_World"
    "Line\022&\n\tworldline\030\001 \001(\0132\023.CDOTAMsg_World"
    "Line\"#\n!CDOTAClientMsg_RequestGraphUpdat"
    "e\"n\n\030CDOTAClientMsg_ChatWheel\022;\n\014chat_me"
    "ssage\030\001 \001(\0162\026.EDOTAChatWheelMessage:\rk_E"
    "DOTA_CW_Ok\022\025\n\rparam_hero_id\030\002 \001(\r\"J\n\034CDO"
    "TAClientMsg_SendStatPopup\022*\n\tstatpopup\030\001"
    " \001(\0132\027.CDOTAMsg_SendStatPopup\"S\n$CDOTACl"
    "ientMsg_BeginLastHitChallenge\022\023\n\013chosen_"
    "lane\030\001 \001(\r\022\026\n\016helper_enabled\030\002 \001(\010\"K\n!CD"
    "OTAClientMsg_UpdateQuickBuyItem\022\021\n\titem_"
    "type\030\001 \001(\005\022\023\n\013purchasable\030\002 \001(\010\"R\n\035CDOTA"
    "ClientMsg_UpdateQuickBuy\0221\n\005items\030\001 \003(\0132"
    "\".CDOTAClientMsg_UpdateQuickBuyItem\"7\n C"
    "DOTAClientMsg_UpdateCoachListen\022\023\n\013playe"
    "r_mask\030\001 \001(\r\"G\n\033CDOTAClientMsg_CoachHUDP"
    "ing\022(\n\010hud_ping\030\001 \001(\0132\026.CDOTAMsg_CoachHU"
    "DPing\"1\n\031CDOTAClientMsg_RecordVote\022\024\n\014ch"
    "oice_index\030\001 \001(\005\"J\n CDOTAClientMsg_WillP"
    "urchaseAlert\022\016\n\006itemid\030\001 \001(\005\022\026\n\016gold_rem"
    "aining\030\002 \001(\r\"\"\n CDOTAClientMsg_BuyBackSt"
    "ateAlert\"E\n\034CDOTAClientMsg_QuickBuyAlert"
    "\022\016\n\006itemid\030\001 \001(\005\022\025\n\rgold_required\030\002 \001(\005\""
    "1\n\035CDOTAClientMsg_PlayerShowCase\022\020\n\010show"
    "case\030\001 \001(\010\"6\n\037CDOTAClientMsg_CameraZoomA"
    "mount\022\023\n\013zoom_amount\030\001 \001(\002\"=\n(CDOTAClien"
    "tMsg_BroadcasterUsingCameraman\022\021\n\tcamera"
    "man\030\001 \001(\010\"H\n5CDOTAClientMsg_BroadcasterU"
    "singAssistedCameraOperator\022\017\n\007enabled\030\001 "
    "\001(\010\"U\n\035CAdditionalEquipSlotClientMsg\022\020\n\010"
    "class_id\030\001 \001(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_i"
    "ndex\030\003 \001(\r\"N\n\034CDOTAClientMsg_FreeInvento"
    "ry\022.\n\006equips\030\001 \003(\0132\036.CAdditionalEquipSlo"
    "tClientMsg\"=\n%CDOTAClientMsg_FillEmptySl"
    "otsWithBots\022\024\n\014fillwithbots\030\001 \001(\010\"8\n\035CDO"
    "TAClientMsg_HeroStatueLike\022\027\n\017owner_play"
    "er_id\030\001 \001(\r\".\n\036CDOTAClientMsg_EventCNY20"
    "15Cmd\022\014\n\004data\030\001 \001(\014\"\236\001\n\027CDOTAClientMsg_D"
    "emoHero\022\017\n\007hero_id\030\001 \001(\005\022\030\n\020hero_id_to_s"
    "pawn\030\002 \001(\005\022\021\n\titem_defs\030\003 \003(\r\022\020\n\010item_id"
    "s\030\004 \003(\004\022\023\n\013style_index\030\005 \001(\r\022\036\n\026keep_exi"
    "sting_demohero\030\006 \001(\010\"X\n\036CDOTAClientMsg_C"
    "hallengeSelect\022\020\n\010event_id\030\001 \001(\r\022\017\n\007slot"
    "_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"X\n\036CDOTAC"
    "lientMsg_ChallengeReroll\022\020\n\010event_id\030\001 \001"
    "(\r\022\017\n\007slot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r"
    "\"0\n\030CDOTAClientMsg_CoinWager\022\024\n\014wager_am"
    "ount\030\001 \001(\r\"<\n\035CDOTAClientMsg_EventPoints"
    "Tip\022\033\n\023recipient_player_id\030\001 \001(\r\"C\n\034CDOT"
    "AClientMsg_ExecuteOrders\022#\n\006orders\030\001 \003(\013"
    "2\023.CDOTAMsg_UnitOrder\"G\n\026CDOTAClientMsg_"
    "XPAlert\022\027\n\017target_entindex\030\001 \001(\r\022\024\n\014dama"
    "ge_taken\030\002 \001(\r\"\237\001\n!CDOTAClientMsg_Killca"
    "mDamageTaken\022\027\n\017target_entindex\030\001 \001(\r\022\024\n"
    "\014damage_taken\030\002 \001(\r\022\021\n\titem_type\030\003 \001(\r\022\017"
    "\n\007item_id\030\004 \001(\r\022\021\n\thero_name\030\005 \001(\t\022\024\n\014da"
    "mage_color\030\006 \001(\t\"B\n\034CDOTAClientMsg_Match"
    "Metadata\022\020\n\010match_id\030\001 \001(\004\022\020\n\010metadata\030\002"
    " \001(\014\"\033\n\031CDOTAClientMsg_KillMyHero\"\233\001\n\032CD"
    "OTAClientMsg_QuestStatus\022\020\n\010quest_id\030\001 \001"
    "(\r\022\024\n\014challenge_id\030\002 \001(\r\022\020\n\010progress\030\003 \001"
    "(\r\022\014\n\004goal\030\004 \001(\r\022\r\n\005query\030\005 \001(\r\022\025\n\rfail_"
    "gametime\030\006 \001(\002\022\017\n\007item_id\030\007 \001(\r\"E\n\037CDOTA"
    "ClientMsg_ToggleAutoattack\022\014\n\004mode\030\001 \001(\005"
    "\022\024\n\014show_message\030\002 \001(\010\"O\n\035CDOTAClientMsg"
    "_SpecialAbility\022\025\n\rability_index\030\001 \001(\r\022\027"
    "\n\017target_entindex\030\002 \001(\r\"c\n\'CDOTAClientMs"
    "g_SetEnemyStartingPosition\022\027\n\017enemy_play"
    "er_id\030\001 \001(\r\022\037\n\027enemy_starting_position\030\002"
    " \001(\r\"\\\n&CDOTAClientMsg_SetDesiredWardPla"
    "cement\022\022\n\nward_index\030\001 \001(\r\022\016\n\006ward_x\030\002 \001"
    "(\002\022\016\n\006ward_y\030\003 \001(\002\"S\n\027CDOTAClientMsg_Rol"
    "lDice\022\024\n\014channel_type\030\001 \001(\r\022\020\n\010roll_min\030"
    "\002 \001(\r\022\020\n\010roll_max\030\003 \001(\r\"/\n\027CDOTAClientMs"
    "g_FlipCoin\022\024\n\014channel_type\030\001 \001(\r*\372\r\n\023EDo"
    "taClientMessages\022\024\n\017DOTA_CM_MapLine\020\255\002\022\030"
    "\n\023DOTA_CM_AspectRatio\020\256\002\022\024\n\017DOTA_CM_MapP"
    "ing\020\257\002\022\034\n\027DOTA_CM_UnitsAutoAttack\020\260\002\022\031\n\024"
    "DOTA_CM_SearchString\020\263\002\022\022\n\rDOTA_CM_Pause"
    "\020\264\002\022\031\n\024DOTA_CM_ShopViewMode\020\265\002\022\035\n\030DOTA_C"
    "M_SetUnitShareFlag\020\266\002\022\030\n\023DOTA_CM_SwapReq"
    "uest\020\267\002\022\027\n\022DOTA_CM_SwapAccept\020\270\002\022\026\n\021DOTA"
    "_CM_WorldLine\020\271\002\022\037\n\032DOTA_CM_RequestGraph"
    "Update\020\272\002\022\026\n\021DOTA_CM_ItemAlert\020\273\002\022\026\n\021DOT"
    "A_CM_ChatWheel\020\274\002\022\032\n\025DOTA_CM_SendStatPop"
    "up\020\275\002\022\"\n\035DOTA_CM_BeginLastHitChallenge\020\276"
    "\002\022\033\n\026DOTA_CM_UpdateQuickBuy\020\277\002\022\036\n\031DOTA_C"
    "M_UpdateCoachListen\020\300\002\022\031\n\024DOTA_CM_CoachH"
    "UDPing\020\301\002\022\027\n\022DOTA_CM_RecordVote\020\302\002\022&\n!DO"
    "TA_CM_UnitsAutoAttackAfterSpell\020\303\002\022\036\n\031DO"
    "TA_CM_WillPurchaseAlert\020\304\002\022\033\n\026DOTA_CM_Pl"
    "ayerShowCase\020\305\002\022!\n\034DOTA_CM_TeleportRequi"
    "resHalt\020\306\002\022\035\n\030DOTA_CM_CameraZoomAmount\020\307"
    "\002\022%\n DOTA_CM_BroadcasterUsingCamerman\020\310\002"
    "\0223\n.DOTA_CM_BroadcasterUsingAssistedCame"
    "raOperator\020\311\002\022\033\n\026DOTA_CM_EnemyItemAlert\020"
    "\312\002\022\032\n\025DOTA_CM_FreeInventory\020\313\002\022\036\n\031DOTA_C"
    "M_BuyBackStateAlert\020\314\002\022\032\n\025DOTA_CM_QuickB"
    "uyAlert\020\315\002\022\033\n\026DOTA_CM_HeroStatueLike\020\316\002\022"
    "\032\n\025DOTA_CM_ModifierAlert\020\317\002\022\037\n\032DOTA_CM_T"
    "eamShowcaseEditor\020\320\002\022\030\n\023DOTA_CM_HPManaAl"
    "ert\020\321\002\022\027\n\022DOTA_CM_GlyphAlert\020\322\002\022#\n\036DOTA_"
    "CM_TeamShowcaseClientData\020\323\002\022\035\n\030DOTA_CM_"
    "PlayTeamShowcase\020\324\002\022\034\n\027DOTA_CM_EventCNY2"
    "015Cmd\020\325\002\022#\n\036DOTA_CM_FillEmptySlotsWithB"
    "ots\020\326\002\022\025\n\020DOTA_CM_DemoHero\020\327\002\022$\n\037DOTA_CM"
    "_AbilityLearnModeToggled\020\330\002\022\034\n\027DOTA_CM_A"
    "bilityStartUse\020\331\002\022\034\n\027DOTA_CM_ChallengeSe"
    "lect\020\332\002\022\034\n\027DOTA_CM_ChallengeReroll\020\333\002\022\030\n"
    "\023DOTA_CM_ClickedBuff\020\334\002\022\026\n\021DOTA_CM_CoinW"
    "ager\020\335\002\022\032\n\025DOTA_CM_ExecuteOrders\020\336\002\022\024\n\017D"
    "OTA_CM_XPAlert\020\337\002\022\033\n\026DOTA_CM_EventPoints"
    "Tip\020\341\002\022\032\n\025DOTA_CM_MatchMetadata\020\342\002\022\027\n\022DO"
    "TA_CM_KillMyHero\020\343\002\022\030\n\023DOTA_CM_QuestStat"
    "us\020\344\002\022\035\n\030DOTA_CM_ToggleAutoattack\020\345\002\022\033\n\026"
    "DOTA_CM_SpecialAbility\020\346\002\022\037\n\032DOTA_CM_Kil"
    "lcamDamageTaken\020\347\002\022%\n DOTA_CM_SetEnemySt"
    "artingPosition\020\350\002\022$\n\037DOTA_CM_SetDesiredW"
    "ardPlacement\020\351\002\022\025\n\020DOTA_CM_RollDice\020\352\002\022\025"
    "\n\020DOTA_CM_FlipCoin\020\353\002B\005H\001\200\001\000", 6108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_clientmessages.proto", &protobuf_RegisterTypes);
  CDOTAClientMsg_MapPing::default_instance_ = new CDOTAClientMsg_MapPing();
  CDOTAClientMsg_ItemAlert::default_instance_ = new CDOTAClientMsg_ItemAlert();
  CDOTAClientMsg_EnemyItemAlert::default_instance_ = new CDOTAClientMsg_EnemyItemAlert();
  CDOTAClientMsg_ModifierAlert::default_instance_ = new CDOTAClientMsg_ModifierAlert();
  CDOTAClientMsg_ClickedBuff::default_instance_ = new CDOTAClientMsg_ClickedBuff();
  CDOTAClientMsg_HPManaAlert::default_instance_ = new CDOTAClientMsg_HPManaAlert();
  CDOTAClientMsg_GlyphAlert::default_instance_ = new CDOTAClientMsg_GlyphAlert();
  CDOTAClientMsg_MapLine::default_instance_ = new CDOTAClientMsg_MapLine();
  CDOTAClientMsg_AspectRatio::default_instance_ = new CDOTAClientMsg_AspectRatio();
  CDOTAClientMsg_UnitsAutoAttackMode::default_instance_ = new CDOTAClientMsg_UnitsAutoAttackMode();
  CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_ = new CDOTAClientMsg_UnitsAutoAttackAfterSpell();
  CDOTAClientMsg_TeleportRequiresHalt::default_instance_ = new CDOTAClientMsg_TeleportRequiresHalt();
  CDOTAClientMsg_SearchString::default_instance_ = new CDOTAClientMsg_SearchString();
  CDOTAClientMsg_Pause::default_instance_ = new CDOTAClientMsg_Pause();
  CDOTAClientMsg_ShopViewMode::default_instance_ = new CDOTAClientMsg_ShopViewMode();
  CDOTAClientMsg_SetUnitShareFlag::default_instance_ = new CDOTAClientMsg_SetUnitShareFlag();
  CDOTAClientMsg_SwapRequest::default_instance_ = new CDOTAClientMsg_SwapRequest();
  CDOTAClientMsg_SwapAccept::default_instance_ = new CDOTAClientMsg_SwapAccept();
  CDOTAClientMsg_WorldLine::default_instance_ = new CDOTAClientMsg_WorldLine();
  CDOTAClientMsg_RequestGraphUpdate::default_instance_ = new CDOTAClientMsg_RequestGraphUpdate();
  CDOTAClientMsg_ChatWheel::default_instance_ = new CDOTAClientMsg_ChatWheel();
  CDOTAClientMsg_SendStatPopup::default_instance_ = new CDOTAClientMsg_SendStatPopup();
  CDOTAClientMsg_BeginLastHitChallenge::default_instance_ = new CDOTAClientMsg_BeginLastHitChallenge();
  CDOTAClientMsg_UpdateQuickBuyItem::default_instance_ = new CDOTAClientMsg_UpdateQuickBuyItem();
  CDOTAClientMsg_UpdateQuickBuy::default_instance_ = new CDOTAClientMsg_UpdateQuickBuy();
  CDOTAClientMsg_UpdateCoachListen::default_instance_ = new CDOTAClientMsg_UpdateCoachListen();
  CDOTAClientMsg_CoachHUDPing::default_instance_ = new CDOTAClientMsg_CoachHUDPing();
  CDOTAClientMsg_RecordVote::default_instance_ = new CDOTAClientMsg_RecordVote();
  CDOTAClientMsg_WillPurchaseAlert::default_instance_ = new CDOTAClientMsg_WillPurchaseAlert();
  CDOTAClientMsg_BuyBackStateAlert::default_instance_ = new CDOTAClientMsg_BuyBackStateAlert();
  CDOTAClientMsg_QuickBuyAlert::default_instance_ = new CDOTAClientMsg_QuickBuyAlert();
  CDOTAClientMsg_PlayerShowCase::default_instance_ = new CDOTAClientMsg_PlayerShowCase();
  CDOTAClientMsg_CameraZoomAmount::default_instance_ = new CDOTAClientMsg_CameraZoomAmount();
  CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_ = new CDOTAClientMsg_BroadcasterUsingCameraman();
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_ = new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator();
  CAdditionalEquipSlotClientMsg::default_instance_ = new CAdditionalEquipSlotClientMsg();
  CDOTAClientMsg_FreeInventory::default_instance_ = new CDOTAClientMsg_FreeInventory();
  CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_ = new CDOTAClientMsg_FillEmptySlotsWithBots();
  CDOTAClientMsg_HeroStatueLike::default_instance_ = new CDOTAClientMsg_HeroStatueLike();
  CDOTAClientMsg_EventCNY2015Cmd::default_instance_ = new CDOTAClientMsg_EventCNY2015Cmd();
  CDOTAClientMsg_DemoHero::default_instance_ = new CDOTAClientMsg_DemoHero();
  CDOTAClientMsg_ChallengeSelect::default_instance_ = new CDOTAClientMsg_ChallengeSelect();
  CDOTAClientMsg_ChallengeReroll::default_instance_ = new CDOTAClientMsg_ChallengeReroll();
  CDOTAClientMsg_CoinWager::default_instance_ = new CDOTAClientMsg_CoinWager();
  CDOTAClientMsg_EventPointsTip::default_instance_ = new CDOTAClientMsg_EventPointsTip();
  CDOTAClientMsg_ExecuteOrders::default_instance_ = new CDOTAClientMsg_ExecuteOrders();
  CDOTAClientMsg_XPAlert::default_instance_ = new CDOTAClientMsg_XPAlert();
  CDOTAClientMsg_KillcamDamageTaken::default_instance_ = new CDOTAClientMsg_KillcamDamageTaken();
  CDOTAClientMsg_MatchMetadata::default_instance_ = new CDOTAClientMsg_MatchMetadata();
  CDOTAClientMsg_KillMyHero::default_instance_ = new CDOTAClientMsg_KillMyHero();
  CDOTAClientMsg_QuestStatus::default_instance_ = new CDOTAClientMsg_QuestStatus();
  CDOTAClientMsg_ToggleAutoattack::default_instance_ = new CDOTAClientMsg_ToggleAutoattack();
  CDOTAClientMsg_SpecialAbility::default_instance_ = new CDOTAClientMsg_SpecialAbility();
  CDOTAClientMsg_SetEnemyStartingPosition::default_instance_ = new CDOTAClientMsg_SetEnemyStartingPosition();
  CDOTAClientMsg_SetDesiredWardPlacement::default_instance_ = new CDOTAClientMsg_SetDesiredWardPlacement();
  CDOTAClientMsg_RollDice::default_instance_ = new CDOTAClientMsg_RollDice();
  CDOTAClientMsg_FlipCoin::default_instance_ = new CDOTAClientMsg_FlipCoin();
  CDOTAClientMsg_MapPing::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EnemyItemAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ModifierAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ClickedBuff::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_HPManaAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_GlyphAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_MapLine::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_AspectRatio::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UnitsAutoAttackMode::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_TeleportRequiresHalt::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SearchString::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_Pause::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ShopViewMode::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SetUnitShareFlag::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SwapRequest::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SwapAccept::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_WorldLine::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RequestGraphUpdate::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChatWheel::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SendStatPopup::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BeginLastHitChallenge::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateQuickBuyItem::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateQuickBuy::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_UpdateCoachListen::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CoachHUDPing::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RecordVote::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_WillPurchaseAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BuyBackStateAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_QuickBuyAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_PlayerShowCase::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CameraZoomAmount::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_->InitAsDefaultInstance();
  CAdditionalEquipSlotClientMsg::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_FreeInventory::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_HeroStatueLike::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EventCNY2015Cmd::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_DemoHero::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChallengeSelect::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ChallengeReroll::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_CoinWager::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_EventPointsTip::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ExecuteOrders::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_XPAlert::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_KillcamDamageTaken::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_MatchMetadata::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_KillMyHero::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_QuestStatus::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_ToggleAutoattack::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SpecialAbility::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SetEnemyStartingPosition::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_SetDesiredWardPlacement::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_RollDice::default_instance_->InitAsDefaultInstance();
  CDOTAClientMsg_FlipCoin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fclientmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fclientmessages_2eproto {
  StaticDescriptorInitializer_dota_5fclientmessages_2eproto() {
    protobuf_AddDesc_dota_5fclientmessages_2eproto();
  }
} static_descriptor_initializer_dota_5fclientmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaClientMessages_descriptor_;
}
bool EDotaClientMessages_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MapPing::kLocationPingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::InitAsDefaultInstance() {
  location_ping_ = const_cast< ::CDOTAMsg_LocationPing*>(&::CDOTAMsg_LocationPing::default_instance());
}

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::SharedCtor() {
  _cached_size_ = 0;
  location_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MapPing::~CDOTAClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapPing)
  SharedDtor();
}

void CDOTAClientMsg_MapPing::SharedDtor() {
  if (this != default_instance_) {
    delete location_ping_;
  }
}

void CDOTAClientMsg_MapPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MapPing_descriptor_;
}

const CDOTAClientMsg_MapPing& CDOTAClientMsg_MapPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::default_instance_ = NULL;

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::New() const {
  return new CDOTAClientMsg_MapPing;
}

void CDOTAClientMsg_MapPing::Clear() {
  if (has_location_ping()) {
    if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_MapPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MapPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_LocationPing location_ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MapPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MapPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MapPing)
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MapPing)
}

::google::protobuf::uint8* CDOTAClientMsg_MapPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapPing)
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapPing)
  return target;
}

int CDOTAClientMsg_MapPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_LocationPing location_ping = 1;
    if (has_location_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location_ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_MapPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_MapPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapPing::MergeFrom(const CDOTAClientMsg_MapPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location_ping()) {
      mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_MapPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapPing::CopyFrom(const CDOTAClientMsg_MapPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapPing::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MapPing::Swap(CDOTAClientMsg_MapPing* other) {
  if (other != this) {
    std::swap(location_ping_, other->location_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_MapPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MapPing_descriptor_;
  metadata.reflection = CDOTAClientMsg_MapPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::InitAsDefaultInstance() {
  item_alert_ = const_cast< ::CDOTAMsg_ItemAlert*>(&::CDOTAMsg_ItemAlert::default_instance());
}

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ItemAlert::~CDOTAClientMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_ItemAlert::SharedDtor() {
  if (this != default_instance_) {
    delete item_alert_;
  }
}

void CDOTAClientMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ItemAlert_descriptor_;
}

const CDOTAClientMsg_ItemAlert& CDOTAClientMsg_ItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::default_instance_ = NULL;

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::New() const {
  return new CDOTAClientMsg_ItemAlert;
}

void CDOTAClientMsg_ItemAlert::Clear() {
  if (has_item_alert()) {
    if (item_alert_ != NULL) item_alert_->::CDOTAMsg_ItemAlert::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_ItemAlert item_alert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ItemAlert)
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_alert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ItemAlert)
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_alert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ItemAlert)
  return target;
}

int CDOTAClientMsg_ItemAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_ItemAlert item_alert = 1;
    if (has_item_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_alert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ItemAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ItemAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const CDOTAClientMsg_ItemAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_alert()) {
      mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const CDOTAClientMsg_ItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ItemAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ItemAlert::Swap(CDOTAClientMsg_ItemAlert* other) {
  if (other != this) {
    std::swap(item_alert_, other->item_alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ItemAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_ItemAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EnemyItemAlert::kItemEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EnemyItemAlert::~CDOTAClientMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_EnemyItemAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EnemyItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EnemyItemAlert_descriptor_;
}

const CDOTAClientMsg_EnemyItemAlert& CDOTAClientMsg_EnemyItemAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::default_instance_ = NULL;

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::New() const {
  return new CDOTAClientMsg_EnemyItemAlert;
}

void CDOTAClientMsg_EnemyItemAlert::Clear() {
  item_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_entindex_)));
          set_has_item_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EnemyItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EnemyItemAlert)
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EnemyItemAlert)
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EnemyItemAlert)
  return target;
}

int CDOTAClientMsg_EnemyItemAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_entindex = 1;
    if (has_item_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_EnemyItemAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_EnemyItemAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_entindex()) {
      set_item_entindex(from.item_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EnemyItemAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EnemyItemAlert::Swap(CDOTAClientMsg_EnemyItemAlert* other) {
  if (other != this) {
    std::swap(item_entindex_, other->item_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_EnemyItemAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EnemyItemAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_EnemyItemAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ModifierAlert::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::SharedCtor() {
  _cached_size_ = 0;
  buff_internal_index_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ModifierAlert::~CDOTAClientMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAClientMsg_ModifierAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ModifierAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ModifierAlert_descriptor_;
}

const CDOTAClientMsg_ModifierAlert& CDOTAClientMsg_ModifierAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::default_instance_ = NULL;

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::New() const {
  return new CDOTAClientMsg_ModifierAlert;
}

void CDOTAClientMsg_ModifierAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ModifierAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_internal_index_, target_entindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ModifierAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
          set_has_buff_internal_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ModifierAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ModifierAlert)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ModifierAlert)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ModifierAlert)
  return target;
}

int CDOTAClientMsg_ModifierAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ModifierAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ModifierAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const CDOTAClientMsg_ModifierAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_internal_index()) {
      set_buff_internal_index(from.buff_internal_index());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const CDOTAClientMsg_ModifierAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ModifierAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ModifierAlert::Swap(CDOTAClientMsg_ModifierAlert* other) {
  if (other != this) {
    std::swap(buff_internal_index_, other->buff_internal_index_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ModifierAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ModifierAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_ModifierAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ClickedBuff::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ClickedBuff::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::InitAsDefaultInstance() {
}

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(const CDOTAClientMsg_ClickedBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::SharedCtor() {
  _cached_size_ = 0;
  buff_internal_index_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ClickedBuff::~CDOTAClientMsg_ClickedBuff() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ClickedBuff)
  SharedDtor();
}

void CDOTAClientMsg_ClickedBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ClickedBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ClickedBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ClickedBuff_descriptor_;
}

const CDOTAClientMsg_ClickedBuff& CDOTAClientMsg_ClickedBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ClickedBuff* CDOTAClientMsg_ClickedBuff::default_instance_ = NULL;

CDOTAClientMsg_ClickedBuff* CDOTAClientMsg_ClickedBuff::New() const {
  return new CDOTAClientMsg_ClickedBuff;
}

void CDOTAClientMsg_ClickedBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ClickedBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_internal_index_, target_entindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ClickedBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ClickedBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
          set_has_buff_internal_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ClickedBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ClickedBuff)
  return false;
#undef DO_
}

void CDOTAClientMsg_ClickedBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ClickedBuff)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ClickedBuff)
}

::google::protobuf::uint8* CDOTAClientMsg_ClickedBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ClickedBuff)
  // optional int32 buff_internal_index = 1;
  if (has_buff_internal_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ClickedBuff)
  return target;
}

int CDOTAClientMsg_ClickedBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ClickedBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ClickedBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const CDOTAClientMsg_ClickedBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_internal_index()) {
      set_buff_internal_index(from.buff_internal_index());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const CDOTAClientMsg_ClickedBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ClickedBuff::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ClickedBuff::Swap(CDOTAClientMsg_ClickedBuff* other) {
  if (other != this) {
    std::swap(buff_internal_index_, other->buff_internal_index_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ClickedBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ClickedBuff_descriptor_;
  metadata.reflection = CDOTAClientMsg_ClickedBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_HPManaAlert::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::SharedCtor() {
  _cached_size_ = 0;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_HPManaAlert::~CDOTAClientMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAClientMsg_HPManaAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_HPManaAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_HPManaAlert_descriptor_;
}

const CDOTAClientMsg_HPManaAlert& CDOTAClientMsg_HPManaAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::default_instance_ = NULL;

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::New() const {
  return new CDOTAClientMsg_HPManaAlert;
}

void CDOTAClientMsg_HPManaAlert::Clear() {
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_HPManaAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_HPManaAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_HPManaAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HPManaAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HPManaAlert)
  return target;
}

int CDOTAClientMsg_HPManaAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_HPManaAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_HPManaAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const CDOTAClientMsg_HPManaAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const CDOTAClientMsg_HPManaAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HPManaAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_HPManaAlert::Swap(CDOTAClientMsg_HPManaAlert* other) {
  if (other != this) {
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_HPManaAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_HPManaAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_HPManaAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::SharedCtor() {
  _cached_size_ = 0;
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_GlyphAlert::~CDOTAClientMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAClientMsg_GlyphAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_GlyphAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_GlyphAlert_descriptor_;
}

const CDOTAClientMsg_GlyphAlert& CDOTAClientMsg_GlyphAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::default_instance_ = NULL;

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::New() const {
  return new CDOTAClientMsg_GlyphAlert;
}

void CDOTAClientMsg_GlyphAlert::Clear() {
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_GlyphAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
          set_has_negative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_GlyphAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_GlyphAlert)
  // optional bool negative = 1;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GlyphAlert)
  // optional bool negative = 1;
  if (has_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GlyphAlert)
  return target;
}

int CDOTAClientMsg_GlyphAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool negative = 1;
    if (has_negative()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_GlyphAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_GlyphAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const CDOTAClientMsg_GlyphAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative()) {
      set_negative(from.negative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const CDOTAClientMsg_GlyphAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GlyphAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_GlyphAlert::Swap(CDOTAClientMsg_GlyphAlert* other) {
  if (other != this) {
    std::swap(negative_, other->negative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_GlyphAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_GlyphAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_GlyphAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MapLine::kMaplineFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::InitAsDefaultInstance() {
  mapline_ = const_cast< ::CDOTAMsg_MapLine*>(&::CDOTAMsg_MapLine::default_instance());
}

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  mapline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MapLine::~CDOTAClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MapLine)
  SharedDtor();
}

void CDOTAClientMsg_MapLine::SharedDtor() {
  if (this != default_instance_) {
    delete mapline_;
  }
}

void CDOTAClientMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MapLine_descriptor_;
}

const CDOTAClientMsg_MapLine& CDOTAClientMsg_MapLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::default_instance_ = NULL;

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::New() const {
  return new CDOTAClientMsg_MapLine;
}

void CDOTAClientMsg_MapLine::Clear() {
  if (has_mapline()) {
    if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_MapLine mapline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MapLine)
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MapLine)
}

::google::protobuf::uint8* CDOTAClientMsg_MapLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MapLine)
  // optional .CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MapLine)
  return target;
}

int CDOTAClientMsg_MapLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_MapLine mapline = 1;
    if (has_mapline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_MapLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_MapLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapLine::MergeFrom(const CDOTAClientMsg_MapLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapline()) {
      mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from.mapline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapLine::CopyFrom(const CDOTAClientMsg_MapLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapLine::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MapLine::Swap(CDOTAClientMsg_MapLine* other) {
  if (other != this) {
    std::swap(mapline_, other->mapline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_MapLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MapLine_descriptor_;
  metadata.reflection = CDOTAClientMsg_MapLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_AspectRatio::kRatioFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::InitAsDefaultInstance() {
}

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::SharedCtor() {
  _cached_size_ = 0;
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_AspectRatio::~CDOTAClientMsg_AspectRatio() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_AspectRatio)
  SharedDtor();
}

void CDOTAClientMsg_AspectRatio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_AspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_AspectRatio_descriptor_;
}

const CDOTAClientMsg_AspectRatio& CDOTAClientMsg_AspectRatio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::default_instance_ = NULL;

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::New() const {
  return new CDOTAClientMsg_AspectRatio;
}

void CDOTAClientMsg_AspectRatio::Clear() {
  ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_AspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_AspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ratio = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_AspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_AspectRatio)
  return false;
#undef DO_
}

void CDOTAClientMsg_AspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_AspectRatio)
  // optional float ratio = 1;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_AspectRatio)
}

::google::protobuf::uint8* CDOTAClientMsg_AspectRatio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_AspectRatio)
  // optional float ratio = 1;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_AspectRatio)
  return target;
}

int CDOTAClientMsg_AspectRatio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ratio = 1;
    if (has_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_AspectRatio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_AspectRatio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const CDOTAClientMsg_AspectRatio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const CDOTAClientMsg_AspectRatio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AspectRatio::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_AspectRatio::Swap(CDOTAClientMsg_AspectRatio* other) {
  if (other != this) {
    std::swap(ratio_, other->ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_AspectRatio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_AspectRatio_descriptor_;
  metadata.reflection = CDOTAClientMsg_AspectRatio_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor_;
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::INVALID;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::NEVER;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::AFTER_SPELLCAST;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::ALWAYS;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MIN;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MAX;
const int CDOTAClientMsg_UnitsAutoAttackMode::EMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor_;
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::NORMAL;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::SUMMONED;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MIN;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MAX;
const int CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CDOTAClientMsg_UnitsAutoAttackMode::kModeFieldNumber;
const int CDOTAClientMsg_UnitsAutoAttackMode::kUnitTypeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UnitsAutoAttackMode)
}

void CDOTAClientMsg_UnitsAutoAttackMode::InitAsDefaultInstance() {
}

CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode(const CDOTAClientMsg_UnitsAutoAttackMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttackMode)
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = -1;
  unit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UnitsAutoAttackMode::~CDOTAClientMsg_UnitsAutoAttackMode() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttackMode)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttackMode_descriptor_;
}

const CDOTAClientMsg_UnitsAutoAttackMode& CDOTAClientMsg_UnitsAutoAttackMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UnitsAutoAttackMode* CDOTAClientMsg_UnitsAutoAttackMode::default_instance_ = NULL;

CDOTAClientMsg_UnitsAutoAttackMode* CDOTAClientMsg_UnitsAutoAttackMode::New() const {
  return new CDOTAClientMsg_UnitsAutoAttackMode;
}

void CDOTAClientMsg_UnitsAutoAttackMode::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mode_ = -1;
    unit_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UnitsAutoAttackMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UnitsAutoAttackMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(value)) {
            set_mode(static_cast< ::CDOTAClientMsg_UnitsAutoAttackMode_EMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_type;
        break;
      }

      // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
      case 2: {
        if (tag == 16) {
         parse_unit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(value)) {
            set_unit_type(static_cast< ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UnitsAutoAttackMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UnitsAutoAttackMode)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttackMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UnitsAutoAttackMode)
  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UnitsAutoAttackMode)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttackMode)
  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttackMode)
  return target;
}

int CDOTAClientMsg_UnitsAutoAttackMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UnitsAutoAttackMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackMode::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UnitsAutoAttackMode::Swap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(unit_type_, other->unit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UnitsAutoAttackMode_descriptor_;
  metadata.reflection = CDOTAClientMsg_UnitsAutoAttackMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UnitsAutoAttackAfterSpell::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InitAsDefaultInstance() {
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::~CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_;
}

const CDOTAClientMsg_UnitsAutoAttackAfterSpell& CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance_ = NULL;

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::New() const {
  return new CDOTAClientMsg_UnitsAutoAttackAfterSpell;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return target;
}

int CDOTAClientMsg_UnitsAutoAttackAfterSpell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackAfterSpell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UnitsAutoAttackAfterSpell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackAfterSpell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UnitsAutoAttackAfterSpell_descriptor_;
  metadata.reflection = CDOTAClientMsg_UnitsAutoAttackAfterSpell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_TeleportRequiresHalt::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::InitAsDefaultInstance() {
}

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_TeleportRequiresHalt::~CDOTAClientMsg_TeleportRequiresHalt() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TeleportRequiresHalt)
  SharedDtor();
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_TeleportRequiresHalt_descriptor_;
}

const CDOTAClientMsg_TeleportRequiresHalt& CDOTAClientMsg_TeleportRequiresHalt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::default_instance_ = NULL;

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::New() const {
  return new CDOTAClientMsg_TeleportRequiresHalt;
}

void CDOTAClientMsg_TeleportRequiresHalt::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_TeleportRequiresHalt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_TeleportRequiresHalt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_TeleportRequiresHalt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_TeleportRequiresHalt)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_TeleportRequiresHalt)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_TeleportRequiresHalt)
}

::google::protobuf::uint8* CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TeleportRequiresHalt)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TeleportRequiresHalt)
  return target;
}

int CDOTAClientMsg_TeleportRequiresHalt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_TeleportRequiresHalt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_TeleportRequiresHalt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeleportRequiresHalt::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_TeleportRequiresHalt::Swap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_TeleportRequiresHalt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_TeleportRequiresHalt_descriptor_;
  metadata.reflection = CDOTAClientMsg_TeleportRequiresHalt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SearchString::kSearchFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::InitAsDefaultInstance() {
}

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SearchString::~CDOTAClientMsg_SearchString() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SearchString)
  SharedDtor();
}

void CDOTAClientMsg_SearchString::SharedDtor() {
  if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SearchString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SearchString_descriptor_;
}

const CDOTAClientMsg_SearchString& CDOTAClientMsg_SearchString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::default_instance_ = NULL;

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::New() const {
  return new CDOTAClientMsg_SearchString;
}

void CDOTAClientMsg_SearchString::Clear() {
  if (has_search()) {
    if (search_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      search_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SearchString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SearchString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SearchString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SearchString)
  return false;
#undef DO_
}

void CDOTAClientMsg_SearchString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SearchString)
  // optional string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SearchString)
}

::google::protobuf::uint8* CDOTAClientMsg_SearchString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SearchString)
  // optional string search = 1;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SearchString)
  return target;
}

int CDOTAClientMsg_SearchString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search = 1;
    if (has_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SearchString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SearchString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SearchString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SearchString::MergeFrom(const CDOTAClientMsg_SearchString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search()) {
      set_search(from.search());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SearchString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SearchString::CopyFrom(const CDOTAClientMsg_SearchString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SearchString::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SearchString::Swap(CDOTAClientMsg_SearchString* other) {
  if (other != this) {
    std::swap(search_, other->search_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SearchString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SearchString_descriptor_;
  metadata.reflection = CDOTAClientMsg_SearchString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::InitAsDefaultInstance() {
}

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_Pause::~CDOTAClientMsg_Pause() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_Pause)
  SharedDtor();
}

void CDOTAClientMsg_Pause::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_Pause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_Pause_descriptor_;
}

const CDOTAClientMsg_Pause& CDOTAClientMsg_Pause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::default_instance_ = NULL;

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::New() const {
  return new CDOTAClientMsg_Pause;
}

void CDOTAClientMsg_Pause::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_Pause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_Pause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_Pause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_Pause)
  return false;
#undef DO_
}

void CDOTAClientMsg_Pause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_Pause)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_Pause)
}

::google::protobuf::uint8* CDOTAClientMsg_Pause::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_Pause)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_Pause)
  return target;
}

int CDOTAClientMsg_Pause::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_Pause::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_Pause* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_Pause*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_Pause::MergeFrom(const CDOTAClientMsg_Pause& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_Pause::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_Pause::CopyFrom(const CDOTAClientMsg_Pause& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_Pause::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_Pause::Swap(CDOTAClientMsg_Pause* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_Pause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_Pause_descriptor_;
  metadata.reflection = CDOTAClientMsg_Pause_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ShopViewMode::kModeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::InitAsDefaultInstance() {
}

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ShopViewMode::~CDOTAClientMsg_ShopViewMode() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ShopViewMode)
  SharedDtor();
}

void CDOTAClientMsg_ShopViewMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ShopViewMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ShopViewMode_descriptor_;
}

const CDOTAClientMsg_ShopViewMode& CDOTAClientMsg_ShopViewMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::default_instance_ = NULL;

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::New() const {
  return new CDOTAClientMsg_ShopViewMode;
}

void CDOTAClientMsg_ShopViewMode::Clear() {
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ShopViewMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ShopViewMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ShopViewMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ShopViewMode)
  return false;
#undef DO_
}

void CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ShopViewMode)
  // optional uint32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ShopViewMode)
}

::google::protobuf::uint8* CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ShopViewMode)
  // optional uint32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ShopViewMode)
  return target;
}

int CDOTAClientMsg_ShopViewMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ShopViewMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ShopViewMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const CDOTAClientMsg_ShopViewMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const CDOTAClientMsg_ShopViewMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ShopViewMode::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ShopViewMode::Swap(CDOTAClientMsg_ShopViewMode* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ShopViewMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ShopViewMode_descriptor_;
  metadata.reflection = CDOTAClientMsg_ShopViewMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SetUnitShareFlag::kPlayerIDFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kFlagFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kStateFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::InitAsDefaultInstance() {
}

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  flag_ = 0u;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SetUnitShareFlag::~CDOTAClientMsg_SetUnitShareFlag() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetUnitShareFlag)
  SharedDtor();
}

void CDOTAClientMsg_SetUnitShareFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SetUnitShareFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SetUnitShareFlag_descriptor_;
}

const CDOTAClientMsg_SetUnitShareFlag& CDOTAClientMsg_SetUnitShareFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::default_instance_ = NULL;

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::New() const {
  return new CDOTAClientMsg_SetUnitShareFlag;
}

void CDOTAClientMsg_SetUnitShareFlag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_SetUnitShareFlag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SetUnitShareFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SetUnitShareFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional bool state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SetUnitShareFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SetUnitShareFlag)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SetUnitShareFlag)
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional bool state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SetUnitShareFlag)
}

::google::protobuf::uint8* CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetUnitShareFlag)
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional bool state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetUnitShareFlag)
  return target;
}

int CDOTAClientMsg_SetUnitShareFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool state = 3;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SetUnitShareFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SetUnitShareFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetUnitShareFlag::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SetUnitShareFlag::Swap(CDOTAClientMsg_SetUnitShareFlag* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(flag_, other->flag_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SetUnitShareFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SetUnitShareFlag_descriptor_;
  metadata.reflection = CDOTAClientMsg_SetUnitShareFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SwapRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::InitAsDefaultInstance() {
}

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SwapRequest::~CDOTAClientMsg_SwapRequest() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapRequest)
  SharedDtor();
}

void CDOTAClientMsg_SwapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SwapRequest_descriptor_;
}

const CDOTAClientMsg_SwapRequest& CDOTAClientMsg_SwapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::default_instance_ = NULL;

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::New() const {
  return new CDOTAClientMsg_SwapRequest;
}

void CDOTAClientMsg_SwapRequest::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SwapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SwapRequest)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SwapRequest)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SwapRequest)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapRequest)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapRequest)
  return target;
}

int CDOTAClientMsg_SwapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SwapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SwapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const CDOTAClientMsg_SwapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const CDOTAClientMsg_SwapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapRequest::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SwapRequest::Swap(CDOTAClientMsg_SwapRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SwapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SwapRequest_descriptor_;
  metadata.reflection = CDOTAClientMsg_SwapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SwapAccept::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::InitAsDefaultInstance() {
}

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SwapAccept::~CDOTAClientMsg_SwapAccept() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SwapAccept)
  SharedDtor();
}

void CDOTAClientMsg_SwapAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SwapAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SwapAccept_descriptor_;
}

const CDOTAClientMsg_SwapAccept& CDOTAClientMsg_SwapAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::default_instance_ = NULL;

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::New() const {
  return new CDOTAClientMsg_SwapAccept;
}

void CDOTAClientMsg_SwapAccept::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SwapAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SwapAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SwapAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SwapAccept)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SwapAccept)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SwapAccept)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SwapAccept)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SwapAccept)
  return target;
}

int CDOTAClientMsg_SwapAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SwapAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SwapAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const CDOTAClientMsg_SwapAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const CDOTAClientMsg_SwapAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapAccept::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SwapAccept::Swap(CDOTAClientMsg_SwapAccept* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SwapAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SwapAccept_descriptor_;
  metadata.reflection = CDOTAClientMsg_SwapAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::InitAsDefaultInstance() {
  worldline_ = const_cast< ::CDOTAMsg_WorldLine*>(&::CDOTAMsg_WorldLine::default_instance());
}

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  worldline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_WorldLine::~CDOTAClientMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WorldLine)
  SharedDtor();
}

void CDOTAClientMsg_WorldLine::SharedDtor() {
  if (this != default_instance_) {
    delete worldline_;
  }
}

void CDOTAClientMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_WorldLine_descriptor_;
}

const CDOTAClientMsg_WorldLine& CDOTAClientMsg_WorldLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::default_instance_ = NULL;

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::New() const {
  return new CDOTAClientMsg_WorldLine;
}

void CDOTAClientMsg_WorldLine::Clear() {
  if (has_worldline()) {
    if (worldline_ != NULL) worldline_->::CDOTAMsg_WorldLine::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_WorldLine worldline = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_WorldLine)
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAClientMsg_WorldLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WorldLine)
  // optional .CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WorldLine)
  return target;
}

int CDOTAClientMsg_WorldLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_WorldLine worldline = 1;
    if (has_worldline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_WorldLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_WorldLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WorldLine::MergeFrom(const CDOTAClientMsg_WorldLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldline()) {
      mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WorldLine::CopyFrom(const CDOTAClientMsg_WorldLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WorldLine::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_WorldLine::Swap(CDOTAClientMsg_WorldLine* other) {
  if (other != this) {
    std::swap(worldline_, other->worldline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_WorldLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_WorldLine_descriptor_;
  metadata.reflection = CDOTAClientMsg_WorldLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::InitAsDefaultInstance() {
}

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RequestGraphUpdate::~CDOTAClientMsg_RequestGraphUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RequestGraphUpdate)
  SharedDtor();
}

void CDOTAClientMsg_RequestGraphUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RequestGraphUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RequestGraphUpdate_descriptor_;
}

const CDOTAClientMsg_RequestGraphUpdate& CDOTAClientMsg_RequestGraphUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::default_instance_ = NULL;

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::New() const {
  return new CDOTAClientMsg_RequestGraphUpdate;
}

void CDOTAClientMsg_RequestGraphUpdate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_RequestGraphUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RequestGraphUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RequestGraphUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RequestGraphUpdate)
  return false;
#undef DO_
}

void CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RequestGraphUpdate)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RequestGraphUpdate)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RequestGraphUpdate)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RequestGraphUpdate)
  return target;
}

int CDOTAClientMsg_RequestGraphUpdate::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_RequestGraphUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_RequestGraphUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestGraphUpdate::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RequestGraphUpdate::Swap(CDOTAClientMsg_RequestGraphUpdate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_RequestGraphUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RequestGraphUpdate_descriptor_;
  metadata.reflection = CDOTAClientMsg_RequestGraphUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChatWheel::kChatMessageFieldNumber;
const int CDOTAClientMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::SharedCtor() {
  _cached_size_ = 0;
  chat_message_ = 0;
  param_hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChatWheel::~CDOTAClientMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChatWheel)
  SharedDtor();
}

void CDOTAClientMsg_ChatWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChatWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChatWheel_descriptor_;
}

const CDOTAClientMsg_ChatWheel& CDOTAClientMsg_ChatWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::default_instance_ = NULL;

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::New() const {
  return new CDOTAClientMsg_ChatWheel;
}

void CDOTAClientMsg_ChatWheel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ChatWheel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chat_message_, param_hero_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChatWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDOTAChatWheelMessage_IsValid(value)) {
            set_chat_message(static_cast< ::EDOTAChatWheelMessage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param_hero_id;
        break;
      }

      // optional uint32 param_hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_param_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
          set_has_param_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChatWheel)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_message(), output);
  }

  // optional uint32 param_hero_id = 2;
  if (has_param_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAClientMsg_ChatWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChatWheel)
  // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
  if (has_chat_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_message(), target);
  }

  // optional uint32 param_hero_id = 2;
  if (has_param_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChatWheel)
  return target;
}

int CDOTAClientMsg_ChatWheel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
    if (has_chat_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_message());
    }

    // optional uint32 param_hero_id = 2;
    if (has_param_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ChatWheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ChatWheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const CDOTAClientMsg_ChatWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_message()) {
      set_chat_message(from.chat_message());
    }
    if (from.has_param_hero_id()) {
      set_param_hero_id(from.param_hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const CDOTAClientMsg_ChatWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatWheel::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChatWheel::Swap(CDOTAClientMsg_ChatWheel* other) {
  if (other != this) {
    std::swap(chat_message_, other->chat_message_);
    std::swap(param_hero_id_, other->param_hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ChatWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChatWheel_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChatWheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::InitAsDefaultInstance() {
  statpopup_ = const_cast< ::CDOTAMsg_SendStatPopup*>(&::CDOTAMsg_SendStatPopup::default_instance());
}

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  statpopup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SendStatPopup::~CDOTAClientMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAClientMsg_SendStatPopup::SharedDtor() {
  if (this != default_instance_) {
    delete statpopup_;
  }
}

void CDOTAClientMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SendStatPopup_descriptor_;
}

const CDOTAClientMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::default_instance_ = NULL;

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::New() const {
  return new CDOTAClientMsg_SendStatPopup;
}

void CDOTAClientMsg_SendStatPopup::Clear() {
  if (has_statpopup()) {
    if (statpopup_ != NULL) statpopup_->::CDOTAMsg_SendStatPopup::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_SendStatPopup statpopup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SendStatPopup)
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statpopup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SendStatPopup)
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statpopup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SendStatPopup)
  return target;
}

int CDOTAClientMsg_SendStatPopup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_SendStatPopup statpopup = 1;
    if (has_statpopup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statpopup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SendStatPopup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SendStatPopup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const CDOTAClientMsg_SendStatPopup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statpopup()) {
      mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const CDOTAClientMsg_SendStatPopup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SendStatPopup::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SendStatPopup::Swap(CDOTAClientMsg_SendStatPopup* other) {
  if (other != this) {
    std::swap(statpopup_, other->statpopup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SendStatPopup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SendStatPopup_descriptor_;
  metadata.reflection = CDOTAClientMsg_SendStatPopup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BeginLastHitChallenge::kChosenLaneFieldNumber;
const int CDOTAClientMsg_BeginLastHitChallenge::kHelperEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::InitAsDefaultInstance() {
}

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedCtor() {
  _cached_size_ = 0;
  chosen_lane_ = 0u;
  helper_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BeginLastHitChallenge::~CDOTAClientMsg_BeginLastHitChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BeginLastHitChallenge)
  SharedDtor();
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BeginLastHitChallenge_descriptor_;
}

const CDOTAClientMsg_BeginLastHitChallenge& CDOTAClientMsg_BeginLastHitChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::default_instance_ = NULL;

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::New() const {
  return new CDOTAClientMsg_BeginLastHitChallenge;
}

void CDOTAClientMsg_BeginLastHitChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_BeginLastHitChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chosen_lane_, helper_enabled_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BeginLastHitChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BeginLastHitChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chosen_lane = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chosen_lane_)));
          set_has_chosen_lane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_helper_enabled;
        break;
      }

      // optional bool helper_enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_helper_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helper_enabled_)));
          set_has_helper_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BeginLastHitChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BeginLastHitChallenge)
  return false;
#undef DO_
}

void CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BeginLastHitChallenge)
  // optional uint32 chosen_lane = 1;
  if (has_chosen_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chosen_lane(), output);
  }

  // optional bool helper_enabled = 2;
  if (has_helper_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->helper_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BeginLastHitChallenge)
}

::google::protobuf::uint8* CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BeginLastHitChallenge)
  // optional uint32 chosen_lane = 1;
  if (has_chosen_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chosen_lane(), target);
  }

  // optional bool helper_enabled = 2;
  if (has_helper_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->helper_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BeginLastHitChallenge)
  return target;
}

int CDOTAClientMsg_BeginLastHitChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chosen_lane = 1;
    if (has_chosen_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chosen_lane());
    }

    // optional bool helper_enabled = 2;
    if (has_helper_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BeginLastHitChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BeginLastHitChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chosen_lane()) {
      set_chosen_lane(from.chosen_lane());
    }
    if (from.has_helper_enabled()) {
      set_helper_enabled(from.helper_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BeginLastHitChallenge::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BeginLastHitChallenge::Swap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  if (other != this) {
    std::swap(chosen_lane_, other->chosen_lane_);
    std::swap(helper_enabled_, other->helper_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BeginLastHitChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BeginLastHitChallenge_descriptor_;
  metadata.reflection = CDOTAClientMsg_BeginLastHitChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateQuickBuyItem::kItemTypeFieldNumber;
const int CDOTAClientMsg_UpdateQuickBuyItem::kPurchasableFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = 0;
  purchasable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateQuickBuyItem::~CDOTAClientMsg_UpdateQuickBuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuyItem)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateQuickBuyItem_descriptor_;
}

const CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::default_instance_ = NULL;

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::New() const {
  return new CDOTAClientMsg_UpdateQuickBuyItem;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_UpdateQuickBuyItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_type_, purchasable_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UpdateQuickBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateQuickBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_purchasable;
        break;
      }

      // optional bool purchasable = 2;
      case 2: {
        if (tag == 16) {
         parse_purchasable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchasable_)));
          set_has_purchasable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateQuickBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateQuickBuyItem)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateQuickBuyItem)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // optional bool purchasable = 2;
  if (has_purchasable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->purchasable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateQuickBuyItem)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuyItem)
  // optional int32 item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // optional bool purchasable = 2;
  if (has_purchasable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->purchasable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuyItem)
  return target;
}

int CDOTAClientMsg_UpdateQuickBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional bool purchasable = 2;
    if (has_purchasable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UpdateQuickBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_purchasable()) {
      set_purchasable(from.purchasable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuyItem::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Swap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(purchasable_, other->purchasable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateQuickBuyItem_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateQuickBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateQuickBuy::kItemsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateQuickBuy::~CDOTAClientMsg_UpdateQuickBuy() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateQuickBuy)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateQuickBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateQuickBuy_descriptor_;
}

const CDOTAClientMsg_UpdateQuickBuy& CDOTAClientMsg_UpdateQuickBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::default_instance_ = NULL;

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::New() const {
  return new CDOTAClientMsg_UpdateQuickBuy;
}

void CDOTAClientMsg_UpdateQuickBuy::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UpdateQuickBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateQuickBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateQuickBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateQuickBuy)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateQuickBuy)
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateQuickBuy)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateQuickBuy)
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateQuickBuy)
  return target;
}

int CDOTAClientMsg_UpdateQuickBuy::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UpdateQuickBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuy::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateQuickBuy::Swap(CDOTAClientMsg_UpdateQuickBuy* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateQuickBuy_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateQuickBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_UpdateCoachListen::kPlayerMaskFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_UpdateCoachListen::CDOTAClientMsg_UpdateCoachListen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_UpdateCoachListen)
}

void CDOTAClientMsg_UpdateCoachListen::InitAsDefaultInstance() {
}

CDOTAClientMsg_UpdateCoachListen::CDOTAClientMsg_UpdateCoachListen(const CDOTAClientMsg_UpdateCoachListen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_UpdateCoachListen)
}

void CDOTAClientMsg_UpdateCoachListen::SharedCtor() {
  _cached_size_ = 0;
  player_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_UpdateCoachListen::~CDOTAClientMsg_UpdateCoachListen() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_UpdateCoachListen)
  SharedDtor();
}

void CDOTAClientMsg_UpdateCoachListen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_UpdateCoachListen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateCoachListen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_UpdateCoachListen_descriptor_;
}

const CDOTAClientMsg_UpdateCoachListen& CDOTAClientMsg_UpdateCoachListen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_UpdateCoachListen* CDOTAClientMsg_UpdateCoachListen::default_instance_ = NULL;

CDOTAClientMsg_UpdateCoachListen* CDOTAClientMsg_UpdateCoachListen::New() const {
  return new CDOTAClientMsg_UpdateCoachListen;
}

void CDOTAClientMsg_UpdateCoachListen::Clear() {
  player_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_UpdateCoachListen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_UpdateCoachListen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_mask = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_mask_)));
          set_has_player_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_UpdateCoachListen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_UpdateCoachListen)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateCoachListen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_UpdateCoachListen)
  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_UpdateCoachListen)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateCoachListen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_UpdateCoachListen)
  // optional uint32 player_mask = 1;
  if (has_player_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_UpdateCoachListen)
  return target;
}

int CDOTAClientMsg_UpdateCoachListen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_mask = 1;
    if (has_player_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_mask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateCoachListen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateCoachListen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_UpdateCoachListen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateCoachListen::MergeFrom(const CDOTAClientMsg_UpdateCoachListen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_mask()) {
      set_player_mask(from.player_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_UpdateCoachListen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateCoachListen::CopyFrom(const CDOTAClientMsg_UpdateCoachListen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateCoachListen::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_UpdateCoachListen::Swap(CDOTAClientMsg_UpdateCoachListen* other) {
  if (other != this) {
    std::swap(player_mask_, other->player_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateCoachListen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_UpdateCoachListen_descriptor_;
  metadata.reflection = CDOTAClientMsg_UpdateCoachListen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CoachHUDPing::kHudPingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CoachHUDPing::CDOTAClientMsg_CoachHUDPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CoachHUDPing)
}

void CDOTAClientMsg_CoachHUDPing::InitAsDefaultInstance() {
  hud_ping_ = const_cast< ::CDOTAMsg_CoachHUDPing*>(&::CDOTAMsg_CoachHUDPing::default_instance());
}

CDOTAClientMsg_CoachHUDPing::CDOTAClientMsg_CoachHUDPing(const CDOTAClientMsg_CoachHUDPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoachHUDPing)
}

void CDOTAClientMsg_CoachHUDPing::SharedCtor() {
  _cached_size_ = 0;
  hud_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CoachHUDPing::~CDOTAClientMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoachHUDPing)
  SharedDtor();
}

void CDOTAClientMsg_CoachHUDPing::SharedDtor() {
  if (this != default_instance_) {
    delete hud_ping_;
  }
}

void CDOTAClientMsg_CoachHUDPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoachHUDPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CoachHUDPing_descriptor_;
}

const CDOTAClientMsg_CoachHUDPing& CDOTAClientMsg_CoachHUDPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::default_instance_ = NULL;

CDOTAClientMsg_CoachHUDPing* CDOTAClientMsg_CoachHUDPing::New() const {
  return new CDOTAClientMsg_CoachHUDPing;
}

void CDOTAClientMsg_CoachHUDPing::Clear() {
  if (has_hud_ping()) {
    if (hud_ping_ != NULL) hud_ping_->::CDOTAMsg_CoachHUDPing::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_CoachHUDPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CoachHUDPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hud_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CoachHUDPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CoachHUDPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoachHUDPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CoachHUDPing)
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hud_ping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CoachHUDPing)
}

::google::protobuf::uint8* CDOTAClientMsg_CoachHUDPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoachHUDPing)
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
  if (has_hud_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hud_ping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoachHUDPing)
  return target;
}

int CDOTAClientMsg_CoachHUDPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDOTAMsg_CoachHUDPing hud_ping = 1;
    if (has_hud_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hud_ping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoachHUDPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_CoachHUDPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_CoachHUDPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoachHUDPing::MergeFrom(const CDOTAClientMsg_CoachHUDPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hud_ping()) {
      mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from.hud_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_CoachHUDPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoachHUDPing::CopyFrom(const CDOTAClientMsg_CoachHUDPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoachHUDPing::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CoachHUDPing::Swap(CDOTAClientMsg_CoachHUDPing* other) {
  if (other != this) {
    std::swap(hud_ping_, other->hud_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_CoachHUDPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CoachHUDPing_descriptor_;
  metadata.reflection = CDOTAClientMsg_CoachHUDPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_RecordVote::kChoiceIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::InitAsDefaultInstance() {
}

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::SharedCtor() {
  _cached_size_ = 0;
  choice_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RecordVote::~CDOTAClientMsg_RecordVote() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RecordVote)
  SharedDtor();
}

void CDOTAClientMsg_RecordVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RecordVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RecordVote_descriptor_;
}

const CDOTAClientMsg_RecordVote& CDOTAClientMsg_RecordVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::default_instance_ = NULL;

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::New() const {
  return new CDOTAClientMsg_RecordVote;
}

void CDOTAClientMsg_RecordVote::Clear() {
  choice_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_RecordVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RecordVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 choice_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_index_)));
          set_has_choice_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RecordVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RecordVote)
  return false;
#undef DO_
}

void CDOTAClientMsg_RecordVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RecordVote)
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choice_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RecordVote)
}

::google::protobuf::uint8* CDOTAClientMsg_RecordVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RecordVote)
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choice_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RecordVote)
  return target;
}

int CDOTAClientMsg_RecordVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 choice_index = 1;
    if (has_choice_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RecordVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_RecordVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_RecordVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RecordVote::MergeFrom(const CDOTAClientMsg_RecordVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choice_index()) {
      set_choice_index(from.choice_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_RecordVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RecordVote::CopyFrom(const CDOTAClientMsg_RecordVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RecordVote::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RecordVote::Swap(CDOTAClientMsg_RecordVote* other) {
  if (other != this) {
    std::swap(choice_index_, other->choice_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_RecordVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RecordVote_descriptor_;
  metadata.reflection = CDOTAClientMsg_RecordVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_WillPurchaseAlert::kItemidFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  gold_remaining_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_WillPurchaseAlert::~CDOTAClientMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAClientMsg_WillPurchaseAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_WillPurchaseAlert_descriptor_;
}

const CDOTAClientMsg_WillPurchaseAlert& CDOTAClientMsg_WillPurchaseAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::default_instance_ = NULL;

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::New() const {
  return new CDOTAClientMsg_WillPurchaseAlert;
}

void CDOTAClientMsg_WillPurchaseAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_WillPurchaseAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, gold_remaining_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_remaining;
        break;
      }

      // optional uint32 gold_remaining = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
          set_has_gold_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_WillPurchaseAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional uint32 gold_remaining = 2;
  if (has_gold_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_remaining(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_WillPurchaseAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 gold_remaining = 2;
  if (has_gold_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_remaining(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_WillPurchaseAlert)
  return target;
}

int CDOTAClientMsg_WillPurchaseAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional uint32 gold_remaining = 2;
    if (has_gold_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_WillPurchaseAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_WillPurchaseAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_remaining()) {
      set_gold_remaining(from.gold_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WillPurchaseAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_WillPurchaseAlert::Swap(CDOTAClientMsg_WillPurchaseAlert* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(gold_remaining_, other->gold_remaining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_WillPurchaseAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_WillPurchaseAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_WillPurchaseAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BuyBackStateAlert::~CDOTAClientMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAClientMsg_BuyBackStateAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BuyBackStateAlert_descriptor_;
}

const CDOTAClientMsg_BuyBackStateAlert& CDOTAClientMsg_BuyBackStateAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::default_instance_ = NULL;

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::New() const {
  return new CDOTAClientMsg_BuyBackStateAlert;
}

void CDOTAClientMsg_BuyBackStateAlert::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BuyBackStateAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BuyBackStateAlert)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BuyBackStateAlert)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BuyBackStateAlert)
  return target;
}

int CDOTAClientMsg_BuyBackStateAlert::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BuyBackStateAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BuyBackStateAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BuyBackStateAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BuyBackStateAlert::Swap(CDOTAClientMsg_BuyBackStateAlert* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BuyBackStateAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BuyBackStateAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_BuyBackStateAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_QuickBuyAlert::kItemidFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kGoldRequiredFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  gold_required_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_QuickBuyAlert::~CDOTAClientMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAClientMsg_QuickBuyAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_QuickBuyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_QuickBuyAlert_descriptor_;
}

const CDOTAClientMsg_QuickBuyAlert& CDOTAClientMsg_QuickBuyAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::default_instance_ = NULL;

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::New() const {
  return new CDOTAClientMsg_QuickBuyAlert;
}

void CDOTAClientMsg_QuickBuyAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_QuickBuyAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, gold_required_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold_required;
        break;
      }

      // optional int32 gold_required = 2;
      case 2: {
        if (tag == 16) {
         parse_gold_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_required_)));
          set_has_gold_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_QuickBuyAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_QuickBuyAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 gold_required = 2;
  if (has_gold_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_required(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_QuickBuyAlert)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 gold_required = 2;
  if (has_gold_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_required(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_QuickBuyAlert)
  return target;
}

int CDOTAClientMsg_QuickBuyAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 gold_required = 2;
    if (has_gold_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_required());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_QuickBuyAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_QuickBuyAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_gold_required()) {
      set_gold_required(from.gold_required());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuickBuyAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_QuickBuyAlert::Swap(CDOTAClientMsg_QuickBuyAlert* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(gold_required_, other->gold_required_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_QuickBuyAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_QuickBuyAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_QuickBuyAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_PlayerShowCase::kShowcaseFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::InitAsDefaultInstance() {
}

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::SharedCtor() {
  _cached_size_ = 0;
  showcase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_PlayerShowCase::~CDOTAClientMsg_PlayerShowCase() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_PlayerShowCase)
  SharedDtor();
}

void CDOTAClientMsg_PlayerShowCase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_PlayerShowCase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_PlayerShowCase_descriptor_;
}

const CDOTAClientMsg_PlayerShowCase& CDOTAClientMsg_PlayerShowCase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::default_instance_ = NULL;

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::New() const {
  return new CDOTAClientMsg_PlayerShowCase;
}

void CDOTAClientMsg_PlayerShowCase::Clear() {
  showcase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_PlayerShowCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_PlayerShowCase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showcase = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showcase_)));
          set_has_showcase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_PlayerShowCase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_PlayerShowCase)
  return false;
#undef DO_
}

void CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_PlayerShowCase)
  // optional bool showcase = 1;
  if (has_showcase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showcase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_PlayerShowCase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_PlayerShowCase)
  // optional bool showcase = 1;
  if (has_showcase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showcase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_PlayerShowCase)
  return target;
}

int CDOTAClientMsg_PlayerShowCase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool showcase = 1;
    if (has_showcase()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_PlayerShowCase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_PlayerShowCase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const CDOTAClientMsg_PlayerShowCase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showcase()) {
      set_showcase(from.showcase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const CDOTAClientMsg_PlayerShowCase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerShowCase::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_PlayerShowCase::Swap(CDOTAClientMsg_PlayerShowCase* other) {
  if (other != this) {
    std::swap(showcase_, other->showcase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_PlayerShowCase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_PlayerShowCase_descriptor_;
  metadata.reflection = CDOTAClientMsg_PlayerShowCase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CameraZoomAmount::kZoomAmountFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::InitAsDefaultInstance() {
}

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::SharedCtor() {
  _cached_size_ = 0;
  zoom_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CameraZoomAmount::~CDOTAClientMsg_CameraZoomAmount() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CameraZoomAmount)
  SharedDtor();
}

void CDOTAClientMsg_CameraZoomAmount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_CameraZoomAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CameraZoomAmount_descriptor_;
}

const CDOTAClientMsg_CameraZoomAmount& CDOTAClientMsg_CameraZoomAmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::default_instance_ = NULL;

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::New() const {
  return new CDOTAClientMsg_CameraZoomAmount;
}

void CDOTAClientMsg_CameraZoomAmount::Clear() {
  zoom_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_CameraZoomAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CameraZoomAmount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float zoom_amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_amount_)));
          set_has_zoom_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CameraZoomAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CameraZoomAmount)
  return false;
#undef DO_
}

void CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CameraZoomAmount)
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->zoom_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CameraZoomAmount)
}

::google::protobuf::uint8* CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CameraZoomAmount)
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->zoom_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CameraZoomAmount)
  return target;
}

int CDOTAClientMsg_CameraZoomAmount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float zoom_amount = 1;
    if (has_zoom_amount()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_CameraZoomAmount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_CameraZoomAmount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoom_amount()) {
      set_zoom_amount(from.zoom_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CameraZoomAmount::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CameraZoomAmount::Swap(CDOTAClientMsg_CameraZoomAmount* other) {
  if (other != this) {
    std::swap(zoom_amount_, other->zoom_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_CameraZoomAmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CameraZoomAmount_descriptor_;
  metadata.reflection = CDOTAClientMsg_CameraZoomAmount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BroadcasterUsingCameraman::kCameramanFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::InitAsDefaultInstance() {
}

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedCtor() {
  _cached_size_ = 0;
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BroadcasterUsingCameraman::~CDOTAClientMsg_BroadcasterUsingCameraman() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingCameraman)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_;
}

const CDOTAClientMsg_BroadcasterUsingCameraman& CDOTAClientMsg_BroadcasterUsingCameraman::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::default_instance_ = NULL;

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::New() const {
  return new CDOTAClientMsg_BroadcasterUsingCameraman;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Clear() {
  cameraman_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cameraman = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
          set_has_cameraman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BroadcasterUsingCameraman)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BroadcasterUsingCameraman)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cameraman(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BroadcasterUsingCameraman)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingCameraman)
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cameraman(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingCameraman)
  return target;
}

int CDOTAClientMsg_BroadcasterUsingCameraman::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool cameraman = 1;
    if (has_cameraman()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingCameraman* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BroadcasterUsingCameraman*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraman()) {
      set_cameraman(from.cameraman());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Swap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  if (other != this) {
    std::swap(cameraman_, other->cameraman_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingCameraman::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BroadcasterUsingCameraman_descriptor_;
  metadata.reflection = CDOTAClientMsg_BroadcasterUsingCameraman_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::kEnabledFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InitAsDefaultInstance() {
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_;
}

const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance_ = NULL;

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::New() const {
  return new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Clear() {
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  // optional bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return target;
}

int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_descriptor_;
  metadata.reflection = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAdditionalEquipSlotClientMsg::kClassIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kSlotIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kDefIndexFieldNumber;
#endif  // !_MSC_VER

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::InitAsDefaultInstance() {
}

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(const CAdditionalEquipSlotClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0u;
  slot_id_ = 0u;
  def_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAdditionalEquipSlotClientMsg::~CAdditionalEquipSlotClientMsg() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlotClientMsg)
  SharedDtor();
}

void CAdditionalEquipSlotClientMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAdditionalEquipSlotClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAdditionalEquipSlotClientMsg_descriptor_;
}

const CAdditionalEquipSlotClientMsg& CAdditionalEquipSlotClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::default_instance_ = NULL;

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::New() const {
  return new CAdditionalEquipSlotClientMsg;
}

void CAdditionalEquipSlotClientMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CAdditionalEquipSlotClientMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(class_id_, def_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAdditionalEquipSlotClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAdditionalEquipSlotClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_def_index;
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (tag == 24) {
         parse_def_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
          set_has_def_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAdditionalEquipSlotClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAdditionalEquipSlotClientMsg)
  return false;
#undef DO_
}

void CAdditionalEquipSlotClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAdditionalEquipSlotClientMsg)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAdditionalEquipSlotClientMsg)
}

::google::protobuf::uint8* CAdditionalEquipSlotClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlotClientMsg)
  // optional uint32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (has_def_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlotClientMsg)
  return target;
}

int CAdditionalEquipSlotClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAdditionalEquipSlotClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAdditionalEquipSlotClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const CAdditionalEquipSlotClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_def_index()) {
      set_def_index(from.def_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const CAdditionalEquipSlotClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlotClientMsg::IsInitialized() const {

  return true;
}

void CAdditionalEquipSlotClientMsg::Swap(CAdditionalEquipSlotClientMsg* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(def_index_, other->def_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAdditionalEquipSlotClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAdditionalEquipSlotClientMsg_descriptor_;
  metadata.reflection = CAdditionalEquipSlotClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_FreeInventory::kEquipsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::InitAsDefaultInstance() {
}

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(const CDOTAClientMsg_FreeInventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_FreeInventory::~CDOTAClientMsg_FreeInventory() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FreeInventory)
  SharedDtor();
}

void CDOTAClientMsg_FreeInventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_FreeInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_FreeInventory_descriptor_;
}

const CDOTAClientMsg_FreeInventory& CDOTAClientMsg_FreeInventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::default_instance_ = NULL;

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::New() const {
  return new CDOTAClientMsg_FreeInventory;
}

void CDOTAClientMsg_FreeInventory::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_FreeInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_FreeInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CAdditionalEquipSlotClientMsg equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_FreeInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_FreeInventory)
  return false;
#undef DO_
}

void CDOTAClientMsg_FreeInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_FreeInventory)
  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_FreeInventory)
}

::google::protobuf::uint8* CDOTAClientMsg_FreeInventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FreeInventory)
  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FreeInventory)
  return target;
}

int CDOTAClientMsg_FreeInventory::ByteSize() const {
  int total_size = 0;

  // repeated .CAdditionalEquipSlotClientMsg equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_FreeInventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_FreeInventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const CDOTAClientMsg_FreeInventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const CDOTAClientMsg_FreeInventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FreeInventory::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_FreeInventory::Swap(CDOTAClientMsg_FreeInventory* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_FreeInventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_FreeInventory_descriptor_;
  metadata.reflection = CDOTAClientMsg_FreeInventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_FillEmptySlotsWithBots::kFillwithbotsFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::InitAsDefaultInstance() {
}

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(const CDOTAClientMsg_FillEmptySlotsWithBots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedCtor() {
  _cached_size_ = 0;
  fillwithbots_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_FillEmptySlotsWithBots::~CDOTAClientMsg_FillEmptySlotsWithBots() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FillEmptySlotsWithBots)
  SharedDtor();
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FillEmptySlotsWithBots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_;
}

const CDOTAClientMsg_FillEmptySlotsWithBots& CDOTAClientMsg_FillEmptySlotsWithBots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_FillEmptySlotsWithBots* CDOTAClientMsg_FillEmptySlotsWithBots::default_instance_ = NULL;

CDOTAClientMsg_FillEmptySlotsWithBots* CDOTAClientMsg_FillEmptySlotsWithBots::New() const {
  return new CDOTAClientMsg_FillEmptySlotsWithBots;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Clear() {
  fillwithbots_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool fillwithbots = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithbots_)));
          set_has_fillwithbots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_FillEmptySlotsWithBots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_FillEmptySlotsWithBots)
  return false;
#undef DO_
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  // optional bool fillwithbots = 1;
  if (has_fillwithbots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fillwithbots(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_FillEmptySlotsWithBots)
}

::google::protobuf::uint8* CDOTAClientMsg_FillEmptySlotsWithBots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FillEmptySlotsWithBots)
  // optional bool fillwithbots = 1;
  if (has_fillwithbots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fillwithbots(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FillEmptySlotsWithBots)
  return target;
}

int CDOTAClientMsg_FillEmptySlotsWithBots::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool fillwithbots = 1;
    if (has_fillwithbots()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_FillEmptySlotsWithBots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_FillEmptySlotsWithBots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fillwithbots()) {
      set_fillwithbots(from.fillwithbots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Swap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  if (other != this) {
    std::swap(fillwithbots_, other->fillwithbots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_FillEmptySlotsWithBots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_FillEmptySlotsWithBots_descriptor_;
  metadata.reflection = CDOTAClientMsg_FillEmptySlotsWithBots_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_HeroStatueLike::kOwnerPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::InitAsDefaultInstance() {
}

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::SharedCtor() {
  _cached_size_ = 0;
  owner_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_HeroStatueLike::~CDOTAClientMsg_HeroStatueLike() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_HeroStatueLike)
  SharedDtor();
}

void CDOTAClientMsg_HeroStatueLike::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_HeroStatueLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_HeroStatueLike_descriptor_;
}

const CDOTAClientMsg_HeroStatueLike& CDOTAClientMsg_HeroStatueLike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::default_instance_ = NULL;

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::New() const {
  return new CDOTAClientMsg_HeroStatueLike;
}

void CDOTAClientMsg_HeroStatueLike::Clear() {
  owner_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_HeroStatueLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_HeroStatueLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_player_id_)));
          set_has_owner_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_HeroStatueLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_HeroStatueLike)
  return false;
#undef DO_
}

void CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_HeroStatueLike)
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_HeroStatueLike)
}

::google::protobuf::uint8* CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_HeroStatueLike)
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_HeroStatueLike)
  return target;
}

int CDOTAClientMsg_HeroStatueLike::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 owner_player_id = 1;
    if (has_owner_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_HeroStatueLike* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_HeroStatueLike*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const CDOTAClientMsg_HeroStatueLike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_player_id()) {
      set_owner_player_id(from.owner_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const CDOTAClientMsg_HeroStatueLike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HeroStatueLike::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_HeroStatueLike::Swap(CDOTAClientMsg_HeroStatueLike* other) {
  if (other != this) {
    std::swap(owner_player_id_, other->owner_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_HeroStatueLike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_HeroStatueLike_descriptor_;
  metadata.reflection = CDOTAClientMsg_HeroStatueLike_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EventCNY2015Cmd::kDataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::InitAsDefaultInstance() {
}

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EventCNY2015Cmd_descriptor_;
}

const CDOTAClientMsg_EventCNY2015Cmd& CDOTAClientMsg_EventCNY2015Cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::default_instance_ = NULL;

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::New() const {
  return new CDOTAClientMsg_EventCNY2015Cmd;
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_EventCNY2015Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EventCNY2015Cmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EventCNY2015Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EventCNY2015Cmd)
  return false;
#undef DO_
}

void CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EventCNY2015Cmd)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EventCNY2015Cmd)
}

::google::protobuf::uint8* CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventCNY2015Cmd)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

int CDOTAClientMsg_EventCNY2015Cmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_EventCNY2015Cmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_EventCNY2015Cmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EventCNY2015Cmd_descriptor_;
  metadata.reflection = CDOTAClientMsg_EventCNY2015Cmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_DemoHero::kHeroIdFieldNumber;
const int CDOTAClientMsg_DemoHero::kHeroIdToSpawnFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemDefsFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemIdsFieldNumber;
const int CDOTAClientMsg_DemoHero::kStyleIndexFieldNumber;
const int CDOTAClientMsg_DemoHero::kKeepExistingDemoheroFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::InitAsDefaultInstance() {
}

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(const CDOTAClientMsg_DemoHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0;
  hero_id_to_spawn_ = 0;
  style_index_ = 0u;
  keep_existing_demohero_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_DemoHero::~CDOTAClientMsg_DemoHero() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_DemoHero)
  SharedDtor();
}

void CDOTAClientMsg_DemoHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_DemoHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_DemoHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_DemoHero_descriptor_;
}

const CDOTAClientMsg_DemoHero& CDOTAClientMsg_DemoHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_DemoHero* CDOTAClientMsg_DemoHero::default_instance_ = NULL;

CDOTAClientMsg_DemoHero* CDOTAClientMsg_DemoHero::New() const {
  return new CDOTAClientMsg_DemoHero;
}

void CDOTAClientMsg_DemoHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_DemoHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hero_id_, hero_id_to_spawn_);
  ZR_(style_index_, keep_existing_demohero_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_defs_.Clear();
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_DemoHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_DemoHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id_to_spawn;
        break;
      }

      // optional int32 hero_id_to_spawn = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id_to_spawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_to_spawn_)));
          set_has_hero_id_to_spawn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_defs;
        break;
      }

      // repeated uint32 item_defs = 3;
      case 3: {
        if (tag == 24) {
         parse_item_defs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_item_defs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_defs;
        if (input->ExpectTag(32)) goto parse_item_ids;
        break;
      }

      // repeated uint64 item_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_item_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_ids;
        if (input->ExpectTag(40)) goto parse_style_index;
        break;
      }

      // optional uint32 style_index = 5;
      case 5: {
        if (tag == 40) {
         parse_style_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_index_)));
          set_has_style_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_keep_existing_demohero;
        break;
      }

      // optional bool keep_existing_demohero = 6;
      case 6: {
        if (tag == 48) {
         parse_keep_existing_demohero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_existing_demohero_)));
          set_has_keep_existing_demohero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_DemoHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_DemoHero)
  return false;
#undef DO_
}

void CDOTAClientMsg_DemoHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_DemoHero)
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (has_hero_id_to_spawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id_to_spawn(), output);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0; i < this->item_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->item_defs(i), output);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->item_ids(i), output);
  }

  // optional uint32 style_index = 5;
  if (has_style_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->style_index(), output);
  }

  // optional bool keep_existing_demohero = 6;
  if (has_keep_existing_demohero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keep_existing_demohero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_DemoHero)
}

::google::protobuf::uint8* CDOTAClientMsg_DemoHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_DemoHero)
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (has_hero_id_to_spawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id_to_spawn(), target);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0; i < this->item_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->item_defs(i), target);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->item_ids(i), target);
  }

  // optional uint32 style_index = 5;
  if (has_style_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->style_index(), target);
  }

  // optional bool keep_existing_demohero = 6;
  if (has_keep_existing_demohero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->keep_existing_demohero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_DemoHero)
  return target;
}

int CDOTAClientMsg_DemoHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 hero_id_to_spawn = 2;
    if (has_hero_id_to_spawn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id_to_spawn());
    }

    // optional uint32 style_index = 5;
    if (has_style_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_index());
    }

    // optional bool keep_existing_demohero = 6;
    if (has_keep_existing_demohero()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 item_defs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_defs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_defs(i));
    }
    total_size += 1 * this->item_defs_size() + data_size;
  }

  // repeated uint64 item_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_DemoHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_DemoHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_DemoHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DemoHero::MergeFrom(const CDOTAClientMsg_DemoHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_defs_.MergeFrom(from.item_defs_);
  item_ids_.MergeFrom(from.item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_id_to_spawn()) {
      set_hero_id_to_spawn(from.hero_id_to_spawn());
    }
    if (from.has_style_index()) {
      set_style_index(from.style_index());
    }
    if (from.has_keep_existing_demohero()) {
      set_keep_existing_demohero(from.keep_existing_demohero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_DemoHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DemoHero::CopyFrom(const CDOTAClientMsg_DemoHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DemoHero::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_DemoHero::Swap(CDOTAClientMsg_DemoHero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_id_to_spawn_, other->hero_id_to_spawn_);
    item_defs_.Swap(&other->item_defs_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(style_index_, other->style_index_);
    std::swap(keep_existing_demohero_, other->keep_existing_demohero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_DemoHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_DemoHero_descriptor_;
  metadata.reflection = CDOTAClientMsg_DemoHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChallengeSelect::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(const CDOTAClientMsg_ChallengeSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  slot_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChallengeSelect::~CDOTAClientMsg_ChallengeSelect() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChallengeSelect)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChallengeSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChallengeSelect_descriptor_;
}

const CDOTAClientMsg_ChallengeSelect& CDOTAClientMsg_ChallengeSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChallengeSelect* CDOTAClientMsg_ChallengeSelect::default_instance_ = NULL;

CDOTAClientMsg_ChallengeSelect* CDOTAClientMsg_ChallengeSelect::New() const {
  return new CDOTAClientMsg_ChallengeSelect;
}

void CDOTAClientMsg_ChallengeSelect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ChallengeSelect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, sequence_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ChallengeSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChallengeSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChallengeSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChallengeSelect)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChallengeSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChallengeSelect)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChallengeSelect)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChallengeSelect)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChallengeSelect)
  return target;
}

int CDOTAClientMsg_ChallengeSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ChallengeSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const CDOTAClientMsg_ChallengeSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const CDOTAClientMsg_ChallengeSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeSelect::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChallengeSelect::Swap(CDOTAClientMsg_ChallengeSelect* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChallengeSelect_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChallengeSelect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ChallengeReroll::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::InitAsDefaultInstance() {
}

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(const CDOTAClientMsg_ChallengeReroll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  slot_id_ = 0u;
  sequence_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ChallengeReroll::~CDOTAClientMsg_ChallengeReroll() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChallengeReroll)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeReroll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ChallengeReroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeReroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ChallengeReroll_descriptor_;
}

const CDOTAClientMsg_ChallengeReroll& CDOTAClientMsg_ChallengeReroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ChallengeReroll* CDOTAClientMsg_ChallengeReroll::default_instance_ = NULL;

CDOTAClientMsg_ChallengeReroll* CDOTAClientMsg_ChallengeReroll::New() const {
  return new CDOTAClientMsg_ChallengeReroll;
}

void CDOTAClientMsg_ChallengeReroll::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ChallengeReroll*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, sequence_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ChallengeReroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ChallengeReroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence_id;
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ChallengeReroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ChallengeReroll)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChallengeReroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ChallengeReroll)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ChallengeReroll)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeReroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChallengeReroll)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChallengeReroll)
  return target;
}

int CDOTAClientMsg_ChallengeReroll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeReroll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ChallengeReroll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const CDOTAClientMsg_ChallengeReroll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const CDOTAClientMsg_ChallengeReroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeReroll::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ChallengeReroll::Swap(CDOTAClientMsg_ChallengeReroll* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeReroll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ChallengeReroll_descriptor_;
  metadata.reflection = CDOTAClientMsg_ChallengeReroll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_CoinWager::kWagerAmountFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::InitAsDefaultInstance() {
}

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::SharedCtor() {
  _cached_size_ = 0;
  wager_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoinWager)
  SharedDtor();
}

void CDOTAClientMsg_CoinWager::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoinWager::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_CoinWager_descriptor_;
}

const CDOTAClientMsg_CoinWager& CDOTAClientMsg_CoinWager::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_CoinWager* CDOTAClientMsg_CoinWager::default_instance_ = NULL;

CDOTAClientMsg_CoinWager* CDOTAClientMsg_CoinWager::New() const {
  return new CDOTAClientMsg_CoinWager;
}

void CDOTAClientMsg_CoinWager::Clear() {
  wager_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_CoinWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_CoinWager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wager_amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_amount_)));
          set_has_wager_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_CoinWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_CoinWager)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoinWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_CoinWager)
  // optional uint32 wager_amount = 1;
  if (has_wager_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wager_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_CoinWager)
}

::google::protobuf::uint8* CDOTAClientMsg_CoinWager::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoinWager)
  // optional uint32 wager_amount = 1;
  if (has_wager_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wager_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoinWager)
  return target;
}

int CDOTAClientMsg_CoinWager::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wager_amount = 1;
    if (has_wager_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoinWager::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWager* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_CoinWager*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wager_amount()) {
      set_wager_amount(from.wager_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_CoinWager::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_CoinWager::Swap(CDOTAClientMsg_CoinWager* other) {
  if (other != this) {
    std::swap(wager_amount_, other->wager_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_CoinWager_descriptor_;
  metadata.reflection = CDOTAClientMsg_CoinWager_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_EventPointsTip::kRecipientPlayerIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_EventPointsTip)
}

void CDOTAClientMsg_EventPointsTip::InitAsDefaultInstance() {
}

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventPointsTip)
}

void CDOTAClientMsg_EventPointsTip::SharedCtor() {
  _cached_size_ = 0;
  recipient_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_EventPointsTip::~CDOTAClientMsg_EventPointsTip() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventPointsTip)
  SharedDtor();
}

void CDOTAClientMsg_EventPointsTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_EventPointsTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventPointsTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_EventPointsTip_descriptor_;
}

const CDOTAClientMsg_EventPointsTip& CDOTAClientMsg_EventPointsTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_EventPointsTip* CDOTAClientMsg_EventPointsTip::default_instance_ = NULL;

CDOTAClientMsg_EventPointsTip* CDOTAClientMsg_EventPointsTip::New() const {
  return new CDOTAClientMsg_EventPointsTip;
}

void CDOTAClientMsg_EventPointsTip::Clear() {
  recipient_player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_EventPointsTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_EventPointsTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_player_id_)));
          set_has_recipient_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_EventPointsTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_EventPointsTip)
  return false;
#undef DO_
}

void CDOTAClientMsg_EventPointsTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_EventPointsTip)
  // optional uint32 recipient_player_id = 1;
  if (has_recipient_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_EventPointsTip)
}

::google::protobuf::uint8* CDOTAClientMsg_EventPointsTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventPointsTip)
  // optional uint32 recipient_player_id = 1;
  if (has_recipient_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventPointsTip)
  return target;
}

int CDOTAClientMsg_EventPointsTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 recipient_player_id = 1;
    if (has_recipient_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipient_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_EventPointsTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_EventPointsTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const CDOTAClientMsg_EventPointsTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_player_id()) {
      set_recipient_player_id(from.recipient_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const CDOTAClientMsg_EventPointsTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventPointsTip::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_EventPointsTip::Swap(CDOTAClientMsg_EventPointsTip* other) {
  if (other != this) {
    std::swap(recipient_player_id_, other->recipient_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_EventPointsTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_EventPointsTip_descriptor_;
  metadata.reflection = CDOTAClientMsg_EventPointsTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ExecuteOrders::kOrdersFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ExecuteOrders)
}

void CDOTAClientMsg_ExecuteOrders::InitAsDefaultInstance() {
}

CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders(const CDOTAClientMsg_ExecuteOrders& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ExecuteOrders)
}

void CDOTAClientMsg_ExecuteOrders::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ExecuteOrders::~CDOTAClientMsg_ExecuteOrders() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ExecuteOrders)
  SharedDtor();
}

void CDOTAClientMsg_ExecuteOrders::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ExecuteOrders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ExecuteOrders::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ExecuteOrders_descriptor_;
}

const CDOTAClientMsg_ExecuteOrders& CDOTAClientMsg_ExecuteOrders::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ExecuteOrders* CDOTAClientMsg_ExecuteOrders::default_instance_ = NULL;

CDOTAClientMsg_ExecuteOrders* CDOTAClientMsg_ExecuteOrders::New() const {
  return new CDOTAClientMsg_ExecuteOrders;
}

void CDOTAClientMsg_ExecuteOrders::Clear() {
  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ExecuteOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ExecuteOrders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAMsg_UnitOrder orders = 1;
      case 1: {
        if (tag == 10) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_orders;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ExecuteOrders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ExecuteOrders)
  return false;
#undef DO_
}

void CDOTAClientMsg_ExecuteOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ExecuteOrders)
  // repeated .CDOTAMsg_UnitOrder orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ExecuteOrders)
}

::google::protobuf::uint8* CDOTAClientMsg_ExecuteOrders::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ExecuteOrders)
  // repeated .CDOTAMsg_UnitOrder orders = 1;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ExecuteOrders)
  return target;
}

int CDOTAClientMsg_ExecuteOrders::ByteSize() const {
  int total_size = 0;

  // repeated .CDOTAMsg_UnitOrder orders = 1;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ExecuteOrders* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ExecuteOrders*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const CDOTAClientMsg_ExecuteOrders& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const CDOTAClientMsg_ExecuteOrders& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ExecuteOrders::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ExecuteOrders::Swap(CDOTAClientMsg_ExecuteOrders* other) {
  if (other != this) {
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ExecuteOrders::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ExecuteOrders_descriptor_;
  metadata.reflection = CDOTAClientMsg_ExecuteOrders_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_XPAlert::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_XPAlert::kDamageTakenFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_XPAlert)
}

void CDOTAClientMsg_XPAlert::InitAsDefaultInstance() {
}

CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert(const CDOTAClientMsg_XPAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_XPAlert)
}

void CDOTAClientMsg_XPAlert::SharedCtor() {
  _cached_size_ = 0;
  target_entindex_ = 0u;
  damage_taken_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_XPAlert::~CDOTAClientMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_XPAlert)
  SharedDtor();
}

void CDOTAClientMsg_XPAlert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_XPAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_XPAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_XPAlert_descriptor_;
}

const CDOTAClientMsg_XPAlert& CDOTAClientMsg_XPAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_XPAlert* CDOTAClientMsg_XPAlert::default_instance_ = NULL;

CDOTAClientMsg_XPAlert* CDOTAClientMsg_XPAlert::New() const {
  return new CDOTAClientMsg_XPAlert;
}

void CDOTAClientMsg_XPAlert::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_XPAlert*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(target_entindex_, damage_taken_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_XPAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_XPAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage_taken;
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (tag == 16) {
         parse_damage_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
          set_has_damage_taken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_XPAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_XPAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_XPAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_XPAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional uint32 damage_taken = 2;
  if (has_damage_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_XPAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_XPAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_XPAlert)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (has_damage_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_XPAlert)
  return target;
}

int CDOTAClientMsg_XPAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_XPAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_XPAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_XPAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_XPAlert::MergeFrom(const CDOTAClientMsg_XPAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
    if (from.has_damage_taken()) {
      set_damage_taken(from.damage_taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_XPAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_XPAlert::CopyFrom(const CDOTAClientMsg_XPAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_XPAlert::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_XPAlert::Swap(CDOTAClientMsg_XPAlert* other) {
  if (other != this) {
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(damage_taken_, other->damage_taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_XPAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_XPAlert_descriptor_;
  metadata.reflection = CDOTAClientMsg_XPAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_KillcamDamageTaken::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kDamageTakenFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kItemTypeFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kItemIdFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kHeroNameFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kDamageColorFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_KillcamDamageTaken)
}

void CDOTAClientMsg_KillcamDamageTaken::InitAsDefaultInstance() {
}

CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken(const CDOTAClientMsg_KillcamDamageTaken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_KillcamDamageTaken)
}

void CDOTAClientMsg_KillcamDamageTaken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_entindex_ = 0u;
  damage_taken_ = 0u;
  item_type_ = 0u;
  item_id_ = 0u;
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_KillcamDamageTaken::~CDOTAClientMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_KillcamDamageTaken)
  SharedDtor();
}

void CDOTAClientMsg_KillcamDamageTaken::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hero_name_;
  }
  if (damage_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete damage_color_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_KillcamDamageTaken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_KillcamDamageTaken_descriptor_;
}

const CDOTAClientMsg_KillcamDamageTaken& CDOTAClientMsg_KillcamDamageTaken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_KillcamDamageTaken* CDOTAClientMsg_KillcamDamageTaken::default_instance_ = NULL;

CDOTAClientMsg_KillcamDamageTaken* CDOTAClientMsg_KillcamDamageTaken::New() const {
  return new CDOTAClientMsg_KillcamDamageTaken;
}

void CDOTAClientMsg_KillcamDamageTaken::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_KillcamDamageTaken*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(target_entindex_, item_id_);
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hero_name_->clear();
      }
    }
    if (has_damage_color()) {
      if (damage_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        damage_color_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_KillcamDamageTaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_KillcamDamageTaken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage_taken;
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (tag == 16) {
         parse_damage_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
          set_has_damage_taken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }

      // optional uint32 item_type = 3;
      case 3: {
        if (tag == 24) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 4;
      case 4: {
        if (tag == 32) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hero_name;
        break;
      }

      // optional string hero_name = 5;
      case 5: {
        if (tag == 42) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hero_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_damage_color;
        break;
      }

      // optional string damage_color = 6;
      case 6: {
        if (tag == 50) {
         parse_damage_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage_color().data(), this->damage_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "damage_color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_KillcamDamageTaken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_KillcamDamageTaken)
  return false;
#undef DO_
}

void CDOTAClientMsg_KillcamDamageTaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_KillcamDamageTaken)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional uint32 damage_taken = 2;
  if (has_damage_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  // optional uint32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_type(), output);
  }

  // optional uint32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_id(), output);
  }

  // optional string hero_name = 5;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hero_name(), output);
  }

  // optional string damage_color = 6;
  if (has_damage_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), this->damage_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "damage_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->damage_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_KillcamDamageTaken)
}

::google::protobuf::uint8* CDOTAClientMsg_KillcamDamageTaken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_KillcamDamageTaken)
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (has_damage_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_type(), target);
  }

  // optional uint32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_id(), target);
  }

  // optional string hero_name = 5;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hero_name(), target);
  }

  // optional string damage_color = 6;
  if (has_damage_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), this->damage_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "damage_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->damage_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_KillcamDamageTaken)
  return target;
}

int CDOTAClientMsg_KillcamDamageTaken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

    // optional uint32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_type());
    }

    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional string hero_name = 5;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string damage_color = 6;
    if (has_damage_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_KillcamDamageTaken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_KillcamDamageTaken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
    if (from.has_damage_taken()) {
      set_damage_taken(from.damage_taken());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_damage_color()) {
      set_damage_color(from.damage_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillcamDamageTaken::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_KillcamDamageTaken::Swap(CDOTAClientMsg_KillcamDamageTaken* other) {
  if (other != this) {
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(damage_taken_, other->damage_taken_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(damage_color_, other->damage_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_KillcamDamageTaken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_KillcamDamageTaken_descriptor_;
  metadata.reflection = CDOTAClientMsg_KillcamDamageTaken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_MatchMetadata::kMatchIdFieldNumber;
const int CDOTAClientMsg_MatchMetadata::kMetadataFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_MatchMetadata)
}

void CDOTAClientMsg_MatchMetadata::InitAsDefaultInstance() {
}

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MatchMetadata)
}

void CDOTAClientMsg_MatchMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_MatchMetadata::~CDOTAClientMsg_MatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MatchMetadata)
  SharedDtor();
}

void CDOTAClientMsg_MatchMetadata::SharedDtor() {
  if (metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete metadata_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_MatchMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MatchMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_MatchMetadata_descriptor_;
}

const CDOTAClientMsg_MatchMetadata& CDOTAClientMsg_MatchMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_MatchMetadata* CDOTAClientMsg_MatchMetadata::default_instance_ = NULL;

CDOTAClientMsg_MatchMetadata* CDOTAClientMsg_MatchMetadata::New() const {
  return new CDOTAClientMsg_MatchMetadata;
}

void CDOTAClientMsg_MatchMetadata::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    match_id_ = GOOGLE_ULONGLONG(0);
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        metadata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_MatchMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_MatchMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_MatchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_MatchMetadata)
  return false;
#undef DO_
}

void CDOTAClientMsg_MatchMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_MatchMetadata)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional bytes metadata = 2;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->metadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_MatchMetadata)
}

::google::protobuf::uint8* CDOTAClientMsg_MatchMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MatchMetadata)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional bytes metadata = 2;
  if (has_metadata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->metadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MatchMetadata)
  return target;
}

int CDOTAClientMsg_MatchMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bytes metadata = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_MatchMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_MatchMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const CDOTAClientMsg_MatchMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const CDOTAClientMsg_MatchMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MatchMetadata::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_MatchMetadata::Swap(CDOTAClientMsg_MatchMetadata* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_MatchMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_MatchMetadata_descriptor_;
  metadata.reflection = CDOTAClientMsg_MatchMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_KillMyHero)
}

void CDOTAClientMsg_KillMyHero::InitAsDefaultInstance() {
}

CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero(const CDOTAClientMsg_KillMyHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_KillMyHero)
}

void CDOTAClientMsg_KillMyHero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_KillMyHero::~CDOTAClientMsg_KillMyHero() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_KillMyHero)
  SharedDtor();
}

void CDOTAClientMsg_KillMyHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_KillMyHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_KillMyHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_KillMyHero_descriptor_;
}

const CDOTAClientMsg_KillMyHero& CDOTAClientMsg_KillMyHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_KillMyHero* CDOTAClientMsg_KillMyHero::default_instance_ = NULL;

CDOTAClientMsg_KillMyHero* CDOTAClientMsg_KillMyHero::New() const {
  return new CDOTAClientMsg_KillMyHero;
}

void CDOTAClientMsg_KillMyHero::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_KillMyHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_KillMyHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_KillMyHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_KillMyHero)
  return false;
#undef DO_
}

void CDOTAClientMsg_KillMyHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_KillMyHero)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_KillMyHero)
}

::google::protobuf::uint8* CDOTAClientMsg_KillMyHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_KillMyHero)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_KillMyHero)
  return target;
}

int CDOTAClientMsg_KillMyHero::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_KillMyHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_KillMyHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const CDOTAClientMsg_KillMyHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_KillMyHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillMyHero::CopyFrom(const CDOTAClientMsg_KillMyHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillMyHero::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_KillMyHero::Swap(CDOTAClientMsg_KillMyHero* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_KillMyHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_KillMyHero_descriptor_;
  metadata.reflection = CDOTAClientMsg_KillMyHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_QuestStatus::kQuestIdFieldNumber;
const int CDOTAClientMsg_QuestStatus::kChallengeIdFieldNumber;
const int CDOTAClientMsg_QuestStatus::kProgressFieldNumber;
const int CDOTAClientMsg_QuestStatus::kGoalFieldNumber;
const int CDOTAClientMsg_QuestStatus::kQueryFieldNumber;
const int CDOTAClientMsg_QuestStatus::kFailGametimeFieldNumber;
const int CDOTAClientMsg_QuestStatus::kItemIdFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_QuestStatus)
}

void CDOTAClientMsg_QuestStatus::InitAsDefaultInstance() {
}

CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus(const CDOTAClientMsg_QuestStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_QuestStatus)
}

void CDOTAClientMsg_QuestStatus::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0u;
  challenge_id_ = 0u;
  progress_ = 0u;
  goal_ = 0u;
  query_ = 0u;
  fail_gametime_ = 0;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_QuestStatus::~CDOTAClientMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_QuestStatus)
  SharedDtor();
}

void CDOTAClientMsg_QuestStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_QuestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuestStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_QuestStatus_descriptor_;
}

const CDOTAClientMsg_QuestStatus& CDOTAClientMsg_QuestStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_QuestStatus* CDOTAClientMsg_QuestStatus::default_instance_ = NULL;

CDOTAClientMsg_QuestStatus* CDOTAClientMsg_QuestStatus::New() const {
  return new CDOTAClientMsg_QuestStatus;
}

void CDOTAClientMsg_QuestStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_QuestStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(quest_id_, item_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_QuestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_QuestStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quest_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_challenge_id;
        break;
      }

      // optional uint32 challenge_id = 2;
      case 2: {
        if (tag == 16) {
         parse_challenge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
          set_has_challenge_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 3;
      case 3: {
        if (tag == 24) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_goal;
        break;
      }

      // optional uint32 goal = 4;
      case 4: {
        if (tag == 32) {
         parse_goal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
          set_has_goal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_query;
        break;
      }

      // optional uint32 query = 5;
      case 5: {
        if (tag == 40) {
         parse_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_)));
          set_has_query();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_fail_gametime;
        break;
      }

      // optional float fail_gametime = 6;
      case 6: {
        if (tag == 53) {
         parse_fail_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fail_gametime_)));
          set_has_fail_gametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 7;
      case 7: {
        if (tag == 56) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_QuestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_QuestStatus)
  return false;
#undef DO_
}

void CDOTAClientMsg_QuestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_QuestStatus)
  // optional uint32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // optional uint32 challenge_id = 2;
  if (has_challenge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_id(), output);
  }

  // optional uint32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->progress(), output);
  }

  // optional uint32 goal = 4;
  if (has_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goal(), output);
  }

  // optional uint32 query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->query(), output);
  }

  // optional float fail_gametime = 6;
  if (has_fail_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fail_gametime(), output);
  }

  // optional uint32 item_id = 7;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_QuestStatus)
}

::google::protobuf::uint8* CDOTAClientMsg_QuestStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_QuestStatus)
  // optional uint32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // optional uint32 challenge_id = 2;
  if (has_challenge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_id(), target);
  }

  // optional uint32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->progress(), target);
  }

  // optional uint32 goal = 4;
  if (has_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goal(), target);
  }

  // optional uint32 query = 5;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->query(), target);
  }

  // optional float fail_gametime = 6;
  if (has_fail_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fail_gametime(), target);
  }

  // optional uint32 item_id = 7;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_QuestStatus)
  return target;
}

int CDOTAClientMsg_QuestStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // optional uint32 challenge_id = 2;
    if (has_challenge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_id());
    }

    // optional uint32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 goal = 4;
    if (has_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal());
    }

    // optional uint32 query = 5;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query());
    }

    // optional float fail_gametime = 6;
    if (has_fail_gametime()) {
      total_size += 1 + 4;
    }

    // optional uint32 item_id = 7;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_QuestStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_QuestStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const CDOTAClientMsg_QuestStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_challenge_id()) {
      set_challenge_id(from.challenge_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_goal()) {
      set_goal(from.goal());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_fail_gametime()) {
      set_fail_gametime(from.fail_gametime());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const CDOTAClientMsg_QuestStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuestStatus::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_QuestStatus::Swap(CDOTAClientMsg_QuestStatus* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(challenge_id_, other->challenge_id_);
    std::swap(progress_, other->progress_);
    std::swap(goal_, other->goal_);
    std::swap(query_, other->query_);
    std::swap(fail_gametime_, other->fail_gametime_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_QuestStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_QuestStatus_descriptor_;
  metadata.reflection = CDOTAClientMsg_QuestStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_ToggleAutoattack::kModeFieldNumber;
const int CDOTAClientMsg_ToggleAutoattack::kShowMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_ToggleAutoattack)
}

void CDOTAClientMsg_ToggleAutoattack::InitAsDefaultInstance() {
}

CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack(const CDOTAClientMsg_ToggleAutoattack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ToggleAutoattack)
}

void CDOTAClientMsg_ToggleAutoattack::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  show_message_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_ToggleAutoattack::~CDOTAClientMsg_ToggleAutoattack() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ToggleAutoattack)
  SharedDtor();
}

void CDOTAClientMsg_ToggleAutoattack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_ToggleAutoattack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ToggleAutoattack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_ToggleAutoattack_descriptor_;
}

const CDOTAClientMsg_ToggleAutoattack& CDOTAClientMsg_ToggleAutoattack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_ToggleAutoattack* CDOTAClientMsg_ToggleAutoattack::default_instance_ = NULL;

CDOTAClientMsg_ToggleAutoattack* CDOTAClientMsg_ToggleAutoattack::New() const {
  return new CDOTAClientMsg_ToggleAutoattack;
}

void CDOTAClientMsg_ToggleAutoattack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_ToggleAutoattack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mode_, show_message_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_ToggleAutoattack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_ToggleAutoattack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_show_message;
        break;
      }

      // optional bool show_message = 2;
      case 2: {
        if (tag == 16) {
         parse_show_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_message_)));
          set_has_show_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_ToggleAutoattack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_ToggleAutoattack)
  return false;
#undef DO_
}

void CDOTAClientMsg_ToggleAutoattack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_ToggleAutoattack)
  // optional int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }

  // optional bool show_message = 2;
  if (has_show_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_ToggleAutoattack)
}

::google::protobuf::uint8* CDOTAClientMsg_ToggleAutoattack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ToggleAutoattack)
  // optional int32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }

  // optional bool show_message = 2;
  if (has_show_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ToggleAutoattack)
  return target;
}

int CDOTAClientMsg_ToggleAutoattack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional bool show_message = 2;
    if (has_show_message()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_ToggleAutoattack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_ToggleAutoattack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_show_message()) {
      set_show_message(from.show_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ToggleAutoattack::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_ToggleAutoattack::Swap(CDOTAClientMsg_ToggleAutoattack* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(show_message_, other->show_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_ToggleAutoattack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_ToggleAutoattack_descriptor_;
  metadata.reflection = CDOTAClientMsg_ToggleAutoattack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SpecialAbility::kAbilityIndexFieldNumber;
const int CDOTAClientMsg_SpecialAbility::kTargetEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SpecialAbility)
}

void CDOTAClientMsg_SpecialAbility::InitAsDefaultInstance() {
}

CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility(const CDOTAClientMsg_SpecialAbility& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SpecialAbility)
}

void CDOTAClientMsg_SpecialAbility::SharedCtor() {
  _cached_size_ = 0;
  ability_index_ = 0u;
  target_entindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SpecialAbility::~CDOTAClientMsg_SpecialAbility() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SpecialAbility)
  SharedDtor();
}

void CDOTAClientMsg_SpecialAbility::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SpecialAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SpecialAbility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SpecialAbility_descriptor_;
}

const CDOTAClientMsg_SpecialAbility& CDOTAClientMsg_SpecialAbility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SpecialAbility* CDOTAClientMsg_SpecialAbility::default_instance_ = NULL;

CDOTAClientMsg_SpecialAbility* CDOTAClientMsg_SpecialAbility::New() const {
  return new CDOTAClientMsg_SpecialAbility;
}

void CDOTAClientMsg_SpecialAbility::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_SpecialAbility*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ability_index_, target_entindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SpecialAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SpecialAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_index_)));
          set_has_ability_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_entindex;
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (tag == 16) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SpecialAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SpecialAbility)
  return false;
#undef DO_
}

void CDOTAClientMsg_SpecialAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SpecialAbility)
  // optional uint32 ability_index = 1;
  if (has_ability_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SpecialAbility)
}

::google::protobuf::uint8* CDOTAClientMsg_SpecialAbility::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SpecialAbility)
  // optional uint32 ability_index = 1;
  if (has_ability_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SpecialAbility)
  return target;
}

int CDOTAClientMsg_SpecialAbility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ability_index = 1;
    if (has_ability_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SpecialAbility* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SpecialAbility*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const CDOTAClientMsg_SpecialAbility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_index()) {
      set_ability_index(from.ability_index());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const CDOTAClientMsg_SpecialAbility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SpecialAbility::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SpecialAbility::Swap(CDOTAClientMsg_SpecialAbility* other) {
  if (other != this) {
    std::swap(ability_index_, other->ability_index_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SpecialAbility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SpecialAbility_descriptor_;
  metadata.reflection = CDOTAClientMsg_SpecialAbility_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SetEnemyStartingPosition::kEnemyPlayerIdFieldNumber;
const int CDOTAClientMsg_SetEnemyStartingPosition::kEnemyStartingPositionFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SetEnemyStartingPosition)
}

void CDOTAClientMsg_SetEnemyStartingPosition::InitAsDefaultInstance() {
}

CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition(const CDOTAClientMsg_SetEnemyStartingPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetEnemyStartingPosition)
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedCtor() {
  _cached_size_ = 0;
  enemy_player_id_ = 0u;
  enemy_starting_position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SetEnemyStartingPosition::~CDOTAClientMsg_SetEnemyStartingPosition() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetEnemyStartingPosition)
  SharedDtor();
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetEnemyStartingPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SetEnemyStartingPosition_descriptor_;
}

const CDOTAClientMsg_SetEnemyStartingPosition& CDOTAClientMsg_SetEnemyStartingPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SetEnemyStartingPosition* CDOTAClientMsg_SetEnemyStartingPosition::default_instance_ = NULL;

CDOTAClientMsg_SetEnemyStartingPosition* CDOTAClientMsg_SetEnemyStartingPosition::New() const {
  return new CDOTAClientMsg_SetEnemyStartingPosition;
}

void CDOTAClientMsg_SetEnemyStartingPosition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_SetEnemyStartingPosition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enemy_player_id_, enemy_starting_position_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SetEnemyStartingPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SetEnemyStartingPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemy_player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_player_id_)));
          set_has_enemy_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enemy_starting_position;
        break;
      }

      // optional uint32 enemy_starting_position = 2;
      case 2: {
        if (tag == 16) {
         parse_enemy_starting_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_starting_position_)));
          set_has_enemy_starting_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SetEnemyStartingPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SetEnemyStartingPosition)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetEnemyStartingPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SetEnemyStartingPosition)
  // optional uint32 enemy_player_id = 1;
  if (has_enemy_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemy_player_id(), output);
  }

  // optional uint32 enemy_starting_position = 2;
  if (has_enemy_starting_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enemy_starting_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SetEnemyStartingPosition)
}

::google::protobuf::uint8* CDOTAClientMsg_SetEnemyStartingPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetEnemyStartingPosition)
  // optional uint32 enemy_player_id = 1;
  if (has_enemy_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemy_player_id(), target);
  }

  // optional uint32 enemy_starting_position = 2;
  if (has_enemy_starting_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enemy_starting_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetEnemyStartingPosition)
  return target;
}

int CDOTAClientMsg_SetEnemyStartingPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 enemy_player_id = 1;
    if (has_enemy_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_player_id());
    }

    // optional uint32 enemy_starting_position = 2;
    if (has_enemy_starting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_starting_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SetEnemyStartingPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SetEnemyStartingPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_player_id()) {
      set_enemy_player_id(from.enemy_player_id());
    }
    if (from.has_enemy_starting_position()) {
      set_enemy_starting_position(from.enemy_starting_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetEnemyStartingPosition::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SetEnemyStartingPosition::Swap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
  if (other != this) {
    std::swap(enemy_player_id_, other->enemy_player_id_);
    std::swap(enemy_starting_position_, other->enemy_starting_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SetEnemyStartingPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SetEnemyStartingPosition_descriptor_;
  metadata.reflection = CDOTAClientMsg_SetEnemyStartingPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardIndexFieldNumber;
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardXFieldNumber;
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardYFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_SetDesiredWardPlacement)
}

void CDOTAClientMsg_SetDesiredWardPlacement::InitAsDefaultInstance() {
}

CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement(const CDOTAClientMsg_SetDesiredWardPlacement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_SetDesiredWardPlacement)
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedCtor() {
  _cached_size_ = 0;
  ward_index_ = 0u;
  ward_x_ = 0;
  ward_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_SetDesiredWardPlacement::~CDOTAClientMsg_SetDesiredWardPlacement() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_SetDesiredWardPlacement)
  SharedDtor();
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetDesiredWardPlacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_SetDesiredWardPlacement_descriptor_;
}

const CDOTAClientMsg_SetDesiredWardPlacement& CDOTAClientMsg_SetDesiredWardPlacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_SetDesiredWardPlacement* CDOTAClientMsg_SetDesiredWardPlacement::default_instance_ = NULL;

CDOTAClientMsg_SetDesiredWardPlacement* CDOTAClientMsg_SetDesiredWardPlacement::New() const {
  return new CDOTAClientMsg_SetDesiredWardPlacement;
}

void CDOTAClientMsg_SetDesiredWardPlacement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_SetDesiredWardPlacement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ward_index_, ward_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_SetDesiredWardPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_SetDesiredWardPlacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ward_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ward_index_)));
          set_has_ward_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ward_x;
        break;
      }

      // optional float ward_x = 2;
      case 2: {
        if (tag == 21) {
         parse_ward_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ward_x_)));
          set_has_ward_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_ward_y;
        break;
      }

      // optional float ward_y = 3;
      case 3: {
        if (tag == 29) {
         parse_ward_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ward_y_)));
          set_has_ward_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_SetDesiredWardPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_SetDesiredWardPlacement)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetDesiredWardPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_SetDesiredWardPlacement)
  // optional uint32 ward_index = 1;
  if (has_ward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ward_index(), output);
  }

  // optional float ward_x = 2;
  if (has_ward_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ward_x(), output);
  }

  // optional float ward_y = 3;
  if (has_ward_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ward_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_SetDesiredWardPlacement)
}

::google::protobuf::uint8* CDOTAClientMsg_SetDesiredWardPlacement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_SetDesiredWardPlacement)
  // optional uint32 ward_index = 1;
  if (has_ward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ward_index(), target);
  }

  // optional float ward_x = 2;
  if (has_ward_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ward_x(), target);
  }

  // optional float ward_y = 3;
  if (has_ward_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ward_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_SetDesiredWardPlacement)
  return target;
}

int CDOTAClientMsg_SetDesiredWardPlacement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ward_index = 1;
    if (has_ward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ward_index());
    }

    // optional float ward_x = 2;
    if (has_ward_x()) {
      total_size += 1 + 4;
    }

    // optional float ward_y = 3;
    if (has_ward_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_SetDesiredWardPlacement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_SetDesiredWardPlacement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ward_index()) {
      set_ward_index(from.ward_index());
    }
    if (from.has_ward_x()) {
      set_ward_x(from.ward_x());
    }
    if (from.has_ward_y()) {
      set_ward_y(from.ward_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetDesiredWardPlacement::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_SetDesiredWardPlacement::Swap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
  if (other != this) {
    std::swap(ward_index_, other->ward_index_);
    std::swap(ward_x_, other->ward_x_);
    std::swap(ward_y_, other->ward_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_SetDesiredWardPlacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_SetDesiredWardPlacement_descriptor_;
  metadata.reflection = CDOTAClientMsg_SetDesiredWardPlacement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_RollDice::kChannelTypeFieldNumber;
const int CDOTAClientMsg_RollDice::kRollMinFieldNumber;
const int CDOTAClientMsg_RollDice::kRollMaxFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_RollDice)
}

void CDOTAClientMsg_RollDice::InitAsDefaultInstance() {
}

CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice(const CDOTAClientMsg_RollDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RollDice)
}

void CDOTAClientMsg_RollDice::SharedCtor() {
  _cached_size_ = 0;
  channel_type_ = 0u;
  roll_min_ = 0u;
  roll_max_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_RollDice::~CDOTAClientMsg_RollDice() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RollDice)
  SharedDtor();
}

void CDOTAClientMsg_RollDice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_RollDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RollDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_RollDice_descriptor_;
}

const CDOTAClientMsg_RollDice& CDOTAClientMsg_RollDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_RollDice* CDOTAClientMsg_RollDice::default_instance_ = NULL;

CDOTAClientMsg_RollDice* CDOTAClientMsg_RollDice::New() const {
  return new CDOTAClientMsg_RollDice;
}

void CDOTAClientMsg_RollDice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAClientMsg_RollDice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channel_type_, roll_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_RollDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_RollDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
          set_has_channel_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roll_min;
        break;
      }

      // optional uint32 roll_min = 2;
      case 2: {
        if (tag == 16) {
         parse_roll_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_min_)));
          set_has_roll_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roll_max;
        break;
      }

      // optional uint32 roll_max = 3;
      case 3: {
        if (tag == 24) {
         parse_roll_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_max_)));
          set_has_roll_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_RollDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_RollDice)
  return false;
#undef DO_
}

void CDOTAClientMsg_RollDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_RollDice)
  // optional uint32 channel_type = 1;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_type(), output);
  }

  // optional uint32 roll_min = 2;
  if (has_roll_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roll_min(), output);
  }

  // optional uint32 roll_max = 3;
  if (has_roll_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roll_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_RollDice)
}

::google::protobuf::uint8* CDOTAClientMsg_RollDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RollDice)
  // optional uint32 channel_type = 1;
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_type(), target);
  }

  // optional uint32 roll_min = 2;
  if (has_roll_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roll_min(), target);
  }

  // optional uint32 roll_max = 3;
  if (has_roll_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roll_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RollDice)
  return target;
}

int CDOTAClientMsg_RollDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel_type = 1;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

    // optional uint32 roll_min = 2;
    if (has_roll_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_min());
    }

    // optional uint32 roll_max = 3;
    if (has_roll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RollDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_RollDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_RollDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RollDice::MergeFrom(const CDOTAClientMsg_RollDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_roll_min()) {
      set_roll_min(from.roll_min());
    }
    if (from.has_roll_max()) {
      set_roll_max(from.roll_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_RollDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RollDice::CopyFrom(const CDOTAClientMsg_RollDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RollDice::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_RollDice::Swap(CDOTAClientMsg_RollDice* other) {
  if (other != this) {
    std::swap(channel_type_, other->channel_type_);
    std::swap(roll_min_, other->roll_min_);
    std::swap(roll_max_, other->roll_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_RollDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_RollDice_descriptor_;
  metadata.reflection = CDOTAClientMsg_RollDice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAClientMsg_FlipCoin::kChannelTypeFieldNumber;
#endif  // !_MSC_VER

CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientMsg_FlipCoin)
}

void CDOTAClientMsg_FlipCoin::InitAsDefaultInstance() {
}

CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin(const CDOTAClientMsg_FlipCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_FlipCoin)
}

void CDOTAClientMsg_FlipCoin::SharedCtor() {
  _cached_size_ = 0;
  channel_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAClientMsg_FlipCoin::~CDOTAClientMsg_FlipCoin() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_FlipCoin)
  SharedDtor();
}

void CDOTAClientMsg_FlipCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAClientMsg_FlipCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FlipCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAClientMsg_FlipCoin_descriptor_;
}

const CDOTAClientMsg_FlipCoin& CDOTAClientMsg_FlipCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fclientmessages_2eproto();
  return *default_instance_;
}

CDOTAClientMsg_FlipCoin* CDOTAClientMsg_FlipCoin::default_instance_ = NULL;

CDOTAClientMsg_FlipCoin* CDOTAClientMsg_FlipCoin::New() const {
  return new CDOTAClientMsg_FlipCoin;
}

void CDOTAClientMsg_FlipCoin::Clear() {
  channel_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAClientMsg_FlipCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientMsg_FlipCoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
          set_has_channel_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientMsg_FlipCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientMsg_FlipCoin)
  return false;
#undef DO_
}

void CDOTAClientMsg_FlipCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientMsg_FlipCoin)
  // optional uint32 channel_type = 1;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientMsg_FlipCoin)
}

::google::protobuf::uint8* CDOTAClientMsg_FlipCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_FlipCoin)
  // optional uint32 channel_type = 1;
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_FlipCoin)
  return target;
}

int CDOTAClientMsg_FlipCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel_type = 1;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAClientMsg_FlipCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAClientMsg_FlipCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const CDOTAClientMsg_FlipCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const CDOTAClientMsg_FlipCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FlipCoin::IsInitialized() const {

  return true;
}

void CDOTAClientMsg_FlipCoin::Swap(CDOTAClientMsg_FlipCoin* other) {
  if (other != this) {
    std::swap(channel_type_, other->channel_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAClientMsg_FlipCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAClientMsg_FlipCoin_descriptor_;
  metadata.reflection = CDOTAClientMsg_FlipCoin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
