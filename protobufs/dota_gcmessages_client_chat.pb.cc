// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCPrivateChatInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCPrivateChatKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatPromote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCPrivateChatPromote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatDemote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCPrivateChatDemote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientPrivateChatResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCPrivateChatInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientPrivateChatInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatInfoResponse_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientPrivateChatInfoResponse_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAJoinChatChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAJoinChatChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALeaveChatChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALeaveChatChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCChatReportPublicSpam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCChatReportPublicSpam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAClientIgnoredUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAClientIgnoredUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage_DiceRoll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatMessage_DiceRoll_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAJoinChatChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAJoinChatChannelResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelFullUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatChannelFullUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAOtherJoinedChatChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAOtherJoinedChatChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAOtherLeftChatChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAOtherLeftChatChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelMemberUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatChannelMemberUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelMemberUpdate_JoinedMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatChannelMemberUpdate_JoinedMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestChatChannelList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestChatChannelListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelListResponse_ChatChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestChatChannelListResponse_ChatChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatGetUserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatGetUserListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserListResponse_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatGetUserListResponse_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatGetMemberCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatGetMemberCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatGetMemberCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatGetMemberCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatRegionsEnabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatRegionsEnabled_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChatRegionsEnabled_Region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChatRegionsEnabled_Region_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_chat.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgClientToGCPrivateChatInvite_descriptor_ = file->message_type(0);
  static const int CMsgClientToGCPrivateChatInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, private_chat_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, invited_account_id_),
  };
  CMsgClientToGCPrivateChatInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCPrivateChatInvite_descriptor_,
      CMsgClientToGCPrivateChatInvite::default_instance_,
      CMsgClientToGCPrivateChatInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCPrivateChatInvite));
  CMsgClientToGCPrivateChatKick_descriptor_ = file->message_type(1);
  static const int CMsgClientToGCPrivateChatKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, private_chat_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, kick_account_id_),
  };
  CMsgClientToGCPrivateChatKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCPrivateChatKick_descriptor_,
      CMsgClientToGCPrivateChatKick::default_instance_,
      CMsgClientToGCPrivateChatKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCPrivateChatKick));
  CMsgClientToGCPrivateChatPromote_descriptor_ = file->message_type(2);
  static const int CMsgClientToGCPrivateChatPromote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, private_chat_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, promote_account_id_),
  };
  CMsgClientToGCPrivateChatPromote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCPrivateChatPromote_descriptor_,
      CMsgClientToGCPrivateChatPromote::default_instance_,
      CMsgClientToGCPrivateChatPromote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCPrivateChatPromote));
  CMsgClientToGCPrivateChatDemote_descriptor_ = file->message_type(3);
  static const int CMsgClientToGCPrivateChatDemote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, private_chat_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, demote_account_id_),
  };
  CMsgClientToGCPrivateChatDemote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCPrivateChatDemote_descriptor_,
      CMsgClientToGCPrivateChatDemote::default_instance_,
      CMsgClientToGCPrivateChatDemote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCPrivateChatDemote));
  CMsgGCToClientPrivateChatResponse_descriptor_ = file->message_type(4);
  static const int CMsgGCToClientPrivateChatResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, private_chat_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, username_),
  };
  CMsgGCToClientPrivateChatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientPrivateChatResponse_descriptor_,
      CMsgGCToClientPrivateChatResponse::default_instance_,
      CMsgGCToClientPrivateChatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientPrivateChatResponse));
  CMsgGCToClientPrivateChatResponse_Result_descriptor_ = CMsgGCToClientPrivateChatResponse_descriptor_->enum_type(0);
  CMsgClientToGCPrivateChatInfoRequest_descriptor_ = file->message_type(5);
  static const int CMsgClientToGCPrivateChatInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInfoRequest, private_chat_channel_name_),
  };
  CMsgClientToGCPrivateChatInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCPrivateChatInfoRequest_descriptor_,
      CMsgClientToGCPrivateChatInfoRequest::default_instance_,
      CMsgClientToGCPrivateChatInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCPrivateChatInfoRequest));
  CMsgGCToClientPrivateChatInfoResponse_descriptor_ = file->message_type(6);
  static const int CMsgGCToClientPrivateChatInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, private_chat_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, creation_date_),
  };
  CMsgGCToClientPrivateChatInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientPrivateChatInfoResponse_descriptor_,
      CMsgGCToClientPrivateChatInfoResponse::default_instance_,
      CMsgGCToClientPrivateChatInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientPrivateChatInfoResponse));
  CMsgGCToClientPrivateChatInfoResponse_Member_descriptor_ = CMsgGCToClientPrivateChatInfoResponse_descriptor_->nested_type(0);
  static const int CMsgGCToClientPrivateChatInfoResponse_Member_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, status_),
  };
  CMsgGCToClientPrivateChatInfoResponse_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientPrivateChatInfoResponse_Member_descriptor_,
      CMsgGCToClientPrivateChatInfoResponse_Member::default_instance_,
      CMsgGCToClientPrivateChatInfoResponse_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientPrivateChatInfoResponse_Member));
  CMsgDOTAJoinChatChannel_descriptor_ = file->message_type(7);
  static const int CMsgDOTAJoinChatChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, channel_type_),
  };
  CMsgDOTAJoinChatChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAJoinChatChannel_descriptor_,
      CMsgDOTAJoinChatChannel::default_instance_,
      CMsgDOTAJoinChatChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAJoinChatChannel));
  CMsgDOTALeaveChatChannel_descriptor_ = file->message_type(8);
  static const int CMsgDOTALeaveChatChannel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveChatChannel, channel_id_),
  };
  CMsgDOTALeaveChatChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALeaveChatChannel_descriptor_,
      CMsgDOTALeaveChatChannel::default_instance_,
      CMsgDOTALeaveChatChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveChatChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveChatChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALeaveChatChannel));
  CMsgGCChatReportPublicSpam_descriptor_ = file->message_type(9);
  static const int CMsgGCChatReportPublicSpam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, channel_user_id_),
  };
  CMsgGCChatReportPublicSpam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCChatReportPublicSpam_descriptor_,
      CMsgGCChatReportPublicSpam::default_instance_,
      CMsgGCChatReportPublicSpam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCChatReportPublicSpam));
  CMsgDOTAClientIgnoredUser_descriptor_ = file->message_type(10);
  static const int CMsgDOTAClientIgnoredUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClientIgnoredUser, ignored_account_id_),
  };
  CMsgDOTAClientIgnoredUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAClientIgnoredUser_descriptor_,
      CMsgDOTAClientIgnoredUser::default_instance_,
      CMsgDOTAClientIgnoredUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClientIgnoredUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClientIgnoredUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAClientIgnoredUser));
  CMsgDOTAChatMessage_descriptor_ = file->message_type(11);
  static const int CMsgDOTAChatMessage_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_invite_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_invite_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, fantasy_draft_owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, fantasy_draft_player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_invite_to_lobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, event_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, coin_flip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_profile_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, dice_roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_lobby_custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_lobby_passkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, private_chat_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, battle_cup_victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, badge_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_pick_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_pick_hero_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, terse_),
  };
  CMsgDOTAChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatMessage_descriptor_,
      CMsgDOTAChatMessage::default_instance_,
      CMsgDOTAChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatMessage));
  CMsgDOTAChatMessage_DiceRoll_descriptor_ = CMsgDOTAChatMessage_descriptor_->nested_type(0);
  static const int CMsgDOTAChatMessage_DiceRoll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, roll_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, roll_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, result_),
  };
  CMsgDOTAChatMessage_DiceRoll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatMessage_DiceRoll_descriptor_,
      CMsgDOTAChatMessage_DiceRoll::default_instance_,
      CMsgDOTAChatMessage_DiceRoll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatMessage_DiceRoll));
  CMsgDOTAChatMember_descriptor_ = file->message_type(12);
  static const int CMsgDOTAChatMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, status_),
  };
  CMsgDOTAChatMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatMember_descriptor_,
      CMsgDOTAChatMember::default_instance_,
      CMsgDOTAChatMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatMember));
  CMsgDOTAJoinChatChannelResponse_descriptor_ = file->message_type(13);
  static const int CMsgDOTAJoinChatChannelResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, max_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, gc_initiated_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, welcome_message_),
  };
  CMsgDOTAJoinChatChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAJoinChatChannelResponse_descriptor_,
      CMsgDOTAJoinChatChannelResponse::default_instance_,
      CMsgDOTAJoinChatChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAJoinChatChannelResponse));
  CMsgDOTAJoinChatChannelResponse_Result_descriptor_ = CMsgDOTAJoinChatChannelResponse_descriptor_->enum_type(0);
  CMsgDOTAChatChannelFullUpdate_descriptor_ = file->message_type(14);
  static const int CMsgDOTAChatChannelFullUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, members_),
  };
  CMsgDOTAChatChannelFullUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatChannelFullUpdate_descriptor_,
      CMsgDOTAChatChannelFullUpdate::default_instance_,
      CMsgDOTAChatChannelFullUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatChannelFullUpdate));
  CMsgDOTAOtherJoinedChatChannel_descriptor_ = file->message_type(15);
  static const int CMsgDOTAOtherJoinedChatChannel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, status_),
  };
  CMsgDOTAOtherJoinedChatChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAOtherJoinedChatChannel_descriptor_,
      CMsgDOTAOtherJoinedChatChannel::default_instance_,
      CMsgDOTAOtherJoinedChatChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAOtherJoinedChatChannel));
  CMsgDOTAOtherLeftChatChannel_descriptor_ = file->message_type(16);
  static const int CMsgDOTAOtherLeftChatChannel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, channel_user_id_),
  };
  CMsgDOTAOtherLeftChatChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAOtherLeftChatChannel_descriptor_,
      CMsgDOTAOtherLeftChatChannel::default_instance_,
      CMsgDOTAOtherLeftChatChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAOtherLeftChatChannel));
  CMsgDOTAChatChannelMemberUpdate_descriptor_ = file->message_type(17);
  static const int CMsgDOTAChatChannelMemberUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, left_steam_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, joined_members_),
  };
  CMsgDOTAChatChannelMemberUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatChannelMemberUpdate_descriptor_,
      CMsgDOTAChatChannelMemberUpdate::default_instance_,
      CMsgDOTAChatChannelMemberUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatChannelMemberUpdate));
  CMsgDOTAChatChannelMemberUpdate_JoinedMember_descriptor_ = CMsgDOTAChatChannelMemberUpdate_descriptor_->nested_type(0);
  static const int CMsgDOTAChatChannelMemberUpdate_JoinedMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, status_),
  };
  CMsgDOTAChatChannelMemberUpdate_JoinedMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatChannelMemberUpdate_JoinedMember_descriptor_,
      CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance_,
      CMsgDOTAChatChannelMemberUpdate_JoinedMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatChannelMemberUpdate_JoinedMember));
  CMsgDOTARequestChatChannelList_descriptor_ = file->message_type(18);
  static const int CMsgDOTARequestChatChannelList_offsets_[1] = {
  };
  CMsgDOTARequestChatChannelList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestChatChannelList_descriptor_,
      CMsgDOTARequestChatChannelList::default_instance_,
      CMsgDOTARequestChatChannelList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestChatChannelList));
  CMsgDOTARequestChatChannelListResponse_descriptor_ = file->message_type(19);
  static const int CMsgDOTARequestChatChannelListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse, channels_),
  };
  CMsgDOTARequestChatChannelListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestChatChannelListResponse_descriptor_,
      CMsgDOTARequestChatChannelListResponse::default_instance_,
      CMsgDOTARequestChatChannelListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestChatChannelListResponse));
  CMsgDOTARequestChatChannelListResponse_ChatChannel_descriptor_ = CMsgDOTARequestChatChannelListResponse_descriptor_->nested_type(0);
  static const int CMsgDOTARequestChatChannelListResponse_ChatChannel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, num_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_type_),
  };
  CMsgDOTARequestChatChannelListResponse_ChatChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestChatChannelListResponse_ChatChannel_descriptor_,
      CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance_,
      CMsgDOTARequestChatChannelListResponse_ChatChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestChatChannelListResponse_ChatChannel));
  CMsgDOTAChatGetUserList_descriptor_ = file->message_type(20);
  static const int CMsgDOTAChatGetUserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserList, channel_id_),
  };
  CMsgDOTAChatGetUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatGetUserList_descriptor_,
      CMsgDOTAChatGetUserList::default_instance_,
      CMsgDOTAChatGetUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatGetUserList));
  CMsgDOTAChatGetUserListResponse_descriptor_ = file->message_type(21);
  static const int CMsgDOTAChatGetUserListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, members_),
  };
  CMsgDOTAChatGetUserListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatGetUserListResponse_descriptor_,
      CMsgDOTAChatGetUserListResponse::default_instance_,
      CMsgDOTAChatGetUserListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatGetUserListResponse));
  CMsgDOTAChatGetUserListResponse_Member_descriptor_ = CMsgDOTAChatGetUserListResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAChatGetUserListResponse_Member_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, status_),
  };
  CMsgDOTAChatGetUserListResponse_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatGetUserListResponse_Member_descriptor_,
      CMsgDOTAChatGetUserListResponse_Member::default_instance_,
      CMsgDOTAChatGetUserListResponse_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatGetUserListResponse_Member));
  CMsgDOTAChatGetMemberCount_descriptor_ = file->message_type(22);
  static const int CMsgDOTAChatGetMemberCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, channel_type_),
  };
  CMsgDOTAChatGetMemberCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatGetMemberCount_descriptor_,
      CMsgDOTAChatGetMemberCount::default_instance_,
      CMsgDOTAChatGetMemberCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatGetMemberCount));
  CMsgDOTAChatGetMemberCountResponse_descriptor_ = file->message_type(23);
  static const int CMsgDOTAChatGetMemberCountResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, member_count_),
  };
  CMsgDOTAChatGetMemberCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatGetMemberCountResponse_descriptor_,
      CMsgDOTAChatGetMemberCountResponse::default_instance_,
      CMsgDOTAChatGetMemberCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatGetMemberCountResponse));
  CMsgDOTAChatRegionsEnabled_descriptor_ = file->message_type(24);
  static const int CMsgDOTAChatRegionsEnabled_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, enable_all_regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, enabled_regions_),
  };
  CMsgDOTAChatRegionsEnabled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatRegionsEnabled_descriptor_,
      CMsgDOTAChatRegionsEnabled::default_instance_,
      CMsgDOTAChatRegionsEnabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatRegionsEnabled));
  CMsgDOTAChatRegionsEnabled_Region_descriptor_ = CMsgDOTAChatRegionsEnabled_descriptor_->nested_type(0);
  static const int CMsgDOTAChatRegionsEnabled_Region_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, min_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, max_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, min_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, max_longitude_),
  };
  CMsgDOTAChatRegionsEnabled_Region_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChatRegionsEnabled_Region_descriptor_,
      CMsgDOTAChatRegionsEnabled_Region::default_instance_,
      CMsgDOTAChatRegionsEnabled_Region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChatRegionsEnabled_Region));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCPrivateChatInvite_descriptor_, &CMsgClientToGCPrivateChatInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCPrivateChatKick_descriptor_, &CMsgClientToGCPrivateChatKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCPrivateChatPromote_descriptor_, &CMsgClientToGCPrivateChatPromote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCPrivateChatDemote_descriptor_, &CMsgClientToGCPrivateChatDemote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientPrivateChatResponse_descriptor_, &CMsgGCToClientPrivateChatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCPrivateChatInfoRequest_descriptor_, &CMsgClientToGCPrivateChatInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientPrivateChatInfoResponse_descriptor_, &CMsgGCToClientPrivateChatInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientPrivateChatInfoResponse_Member_descriptor_, &CMsgGCToClientPrivateChatInfoResponse_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAJoinChatChannel_descriptor_, &CMsgDOTAJoinChatChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALeaveChatChannel_descriptor_, &CMsgDOTALeaveChatChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCChatReportPublicSpam_descriptor_, &CMsgGCChatReportPublicSpam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAClientIgnoredUser_descriptor_, &CMsgDOTAClientIgnoredUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatMessage_descriptor_, &CMsgDOTAChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatMessage_DiceRoll_descriptor_, &CMsgDOTAChatMessage_DiceRoll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatMember_descriptor_, &CMsgDOTAChatMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAJoinChatChannelResponse_descriptor_, &CMsgDOTAJoinChatChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatChannelFullUpdate_descriptor_, &CMsgDOTAChatChannelFullUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAOtherJoinedChatChannel_descriptor_, &CMsgDOTAOtherJoinedChatChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAOtherLeftChatChannel_descriptor_, &CMsgDOTAOtherLeftChatChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatChannelMemberUpdate_descriptor_, &CMsgDOTAChatChannelMemberUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatChannelMemberUpdate_JoinedMember_descriptor_, &CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestChatChannelList_descriptor_, &CMsgDOTARequestChatChannelList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestChatChannelListResponse_descriptor_, &CMsgDOTARequestChatChannelListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestChatChannelListResponse_ChatChannel_descriptor_, &CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatGetUserList_descriptor_, &CMsgDOTAChatGetUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatGetUserListResponse_descriptor_, &CMsgDOTAChatGetUserListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatGetUserListResponse_Member_descriptor_, &CMsgDOTAChatGetUserListResponse_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatGetMemberCount_descriptor_, &CMsgDOTAChatGetMemberCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatGetMemberCountResponse_descriptor_, &CMsgDOTAChatGetMemberCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatRegionsEnabled_descriptor_, &CMsgDOTAChatRegionsEnabled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChatRegionsEnabled_Region_descriptor_, &CMsgDOTAChatRegionsEnabled_Region::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  delete CMsgClientToGCPrivateChatInvite::default_instance_;
  delete CMsgClientToGCPrivateChatInvite_reflection_;
  delete CMsgClientToGCPrivateChatKick::default_instance_;
  delete CMsgClientToGCPrivateChatKick_reflection_;
  delete CMsgClientToGCPrivateChatPromote::default_instance_;
  delete CMsgClientToGCPrivateChatPromote_reflection_;
  delete CMsgClientToGCPrivateChatDemote::default_instance_;
  delete CMsgClientToGCPrivateChatDemote_reflection_;
  delete CMsgGCToClientPrivateChatResponse::default_instance_;
  delete CMsgGCToClientPrivateChatResponse_reflection_;
  delete CMsgClientToGCPrivateChatInfoRequest::default_instance_;
  delete CMsgClientToGCPrivateChatInfoRequest_reflection_;
  delete CMsgGCToClientPrivateChatInfoResponse::default_instance_;
  delete CMsgGCToClientPrivateChatInfoResponse_reflection_;
  delete CMsgGCToClientPrivateChatInfoResponse_Member::default_instance_;
  delete CMsgGCToClientPrivateChatInfoResponse_Member_reflection_;
  delete CMsgDOTAJoinChatChannel::default_instance_;
  delete CMsgDOTAJoinChatChannel_reflection_;
  delete CMsgDOTALeaveChatChannel::default_instance_;
  delete CMsgDOTALeaveChatChannel_reflection_;
  delete CMsgGCChatReportPublicSpam::default_instance_;
  delete CMsgGCChatReportPublicSpam_reflection_;
  delete CMsgDOTAClientIgnoredUser::default_instance_;
  delete CMsgDOTAClientIgnoredUser_reflection_;
  delete CMsgDOTAChatMessage::default_instance_;
  delete CMsgDOTAChatMessage_reflection_;
  delete CMsgDOTAChatMessage_DiceRoll::default_instance_;
  delete CMsgDOTAChatMessage_DiceRoll_reflection_;
  delete CMsgDOTAChatMember::default_instance_;
  delete CMsgDOTAChatMember_reflection_;
  delete CMsgDOTAJoinChatChannelResponse::default_instance_;
  delete CMsgDOTAJoinChatChannelResponse_reflection_;
  delete CMsgDOTAChatChannelFullUpdate::default_instance_;
  delete CMsgDOTAChatChannelFullUpdate_reflection_;
  delete CMsgDOTAOtherJoinedChatChannel::default_instance_;
  delete CMsgDOTAOtherJoinedChatChannel_reflection_;
  delete CMsgDOTAOtherLeftChatChannel::default_instance_;
  delete CMsgDOTAOtherLeftChatChannel_reflection_;
  delete CMsgDOTAChatChannelMemberUpdate::default_instance_;
  delete CMsgDOTAChatChannelMemberUpdate_reflection_;
  delete CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance_;
  delete CMsgDOTAChatChannelMemberUpdate_JoinedMember_reflection_;
  delete CMsgDOTARequestChatChannelList::default_instance_;
  delete CMsgDOTARequestChatChannelList_reflection_;
  delete CMsgDOTARequestChatChannelListResponse::default_instance_;
  delete CMsgDOTARequestChatChannelListResponse_reflection_;
  delete CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance_;
  delete CMsgDOTARequestChatChannelListResponse_ChatChannel_reflection_;
  delete CMsgDOTAChatGetUserList::default_instance_;
  delete CMsgDOTAChatGetUserList_reflection_;
  delete CMsgDOTAChatGetUserListResponse::default_instance_;
  delete CMsgDOTAChatGetUserListResponse_reflection_;
  delete CMsgDOTAChatGetUserListResponse_Member::default_instance_;
  delete CMsgDOTAChatGetUserListResponse_Member_reflection_;
  delete CMsgDOTAChatGetMemberCount::default_instance_;
  delete CMsgDOTAChatGetMemberCount_reflection_;
  delete CMsgDOTAChatGetMemberCountResponse::default_instance_;
  delete CMsgDOTAChatGetMemberCountResponse_reflection_;
  delete CMsgDOTAChatRegionsEnabled::default_instance_;
  delete CMsgDOTAChatRegionsEnabled_reflection_;
  delete CMsgDOTAChatRegionsEnabled_Region::default_instance_;
  delete CMsgDOTAChatRegionsEnabled_Region_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!dota_gcmessages_client_chat.proto\032\027dot"
    "a_shared_enums.proto\"`\n\037CMsgClientToGCPr"
    "ivateChatInvite\022!\n\031private_chat_channel_"
    "name\030\001 \001(\t\022\032\n\022invited_account_id\030\002 \001(\r\"["
    "\n\035CMsgClientToGCPrivateChatKick\022!\n\031priva"
    "te_chat_channel_name\030\001 \001(\t\022\027\n\017kick_accou"
    "nt_id\030\002 \001(\r\"a\n CMsgClientToGCPrivateChat"
    "Promote\022!\n\031private_chat_channel_name\030\001 \001"
    "(\t\022\032\n\022promote_account_id\030\002 \001(\r\"_\n\037CMsgCl"
    "ientToGCPrivateChatDemote\022!\n\031private_cha"
    "t_channel_name\030\001 \001(\t\022\031\n\021demote_account_i"
    "d\030\002 \001(\r\"\275\004\n!CMsgGCToClientPrivateChatRes"
    "ponse\022!\n\031private_chat_channel_name\030\001 \001(\t"
    "\022B\n\006result\030\002 \001(\0162).CMsgGCToClientPrivate"
    "ChatResponse.Result:\007SUCCESS\022\020\n\010username"
    "\030\003 \001(\t\"\236\003\n\006Result\022\013\n\007SUCCESS\020\000\022\031\n\025FAILUR"
    "E_CREATION_LOCK\020\001\022\033\n\027FAILURE_SQL_TRANSAC"
    "TION\020\002\022\024\n\020FAILURE_SDO_LOAD\020\003\022\031\n\025FAILURE_"
    "NO_PERMISSION\020\004\022\032\n\026FAILURE_ALREADY_MEMBE"
    "R\020\005\022\030\n\024FAILURE_NOT_A_MEMBER\020\007\022\037\n\033FAILURE"
    "_NO_REMAINING_ADMINS\020\010\022\023\n\017FAILURE_NO_ROO"
    "M\020\t\022!\n\035FAILURE_CREATION_RATE_LIMITED\020\n\022 "
    "\n\034FAILURE_UNKNOWN_CHANNEL_NAME\020\013\022\030\n\024FAIL"
    "URE_UNKNOWN_USER\020\014\022\031\n\025FAILURE_UNKNOWN_ER"
    "ROR\020\r\022\035\n\031FAILURE_CANNOT_KICK_ADMIN\020\016\022\031\n\025"
    "FAILURE_ALREADY_ADMIN\020\017\"I\n$CMsgClientToG"
    "CPrivateChatInfoRequest\022!\n\031private_chat_"
    "channel_name\030\001 \001(\t\"\356\001\n%CMsgGCToClientPri"
    "vateChatInfoResponse\022!\n\031private_chat_cha"
    "nnel_name\030\001 \001(\t\022>\n\007members\030\002 \003(\0132-.CMsgG"
    "CToClientPrivateChatInfoResponse.Member\022"
    "\017\n\007creator\030\003 \001(\r\022\025\n\rcreation_date\030\004 \001(\r\032"
    ":\n\006Member\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 "
    "\001(\t\022\016\n\006status\030\003 \001(\r\"w\n\027CMsgDOTAJoinChatC"
    "hannel\022\024\n\014channel_name\030\002 \001(\t\022F\n\014channel_"
    "type\030\004 \001(\0162\026.DOTAChatChannelType_t:\030DOTA"
    "ChannelType_Regional\".\n\030CMsgDOTALeaveCha"
    "tChannel\022\022\n\nchannel_id\030\001 \001(\004\"I\n\032CMsgGCCh"
    "atReportPublicSpam\022\022\n\nchannel_id\030\001 \001(\004\022\027"
    "\n\017channel_user_id\030\002 \001(\r\"7\n\031CMsgDOTAClien"
    "tIgnoredUser\022\032\n\022ignored_account_id\030\001 \001(\r"
    "\"\305\006\n\023CMsgDOTAChatMessage\022\022\n\naccount_id\030\001"
    " \001(\r\022\022\n\nchannel_id\030\002 \001(\004\022\024\n\014persona_name"
    "\030\003 \001(\t\022\014\n\004text\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\r\022"
    "!\n\031suggest_invite_account_id\030\006 \001(\r\022\033\n\023su"
    "ggest_invite_name\030\007 \001(\t\022&\n\036fantasy_draft"
    "_owner_account_id\030\010 \001(\r\022\'\n\037fantasy_draft"
    "_player_account_id\030\t \001(\r\022\020\n\010event_id\030\n \001"
    "(\r\022\037\n\027suggest_invite_to_lobby\030\013 \001(\010\022\024\n\014e"
    "vent_points\030\014 \001(\r\022\021\n\tcoin_flip\030\r \001(\010\022\025\n\t"
    "player_id\030\016 \001(\005:\002-1\022 \n\030share_profile_acc"
    "ount_id\030\017 \001(\r\022\027\n\017channel_user_id\030\020 \001(\r\0220"
    "\n\tdice_roll\030\021 \001(\0132\035.CMsgDOTAChatMessage."
    "DiceRoll\022\026\n\016share_party_id\030\022 \001(\004\022\026\n\016shar"
    "e_lobby_id\030\023 \001(\004\022\"\n\032share_lobby_custom_g"
    "ame_id\030\024 \001(\004\022\033\n\023share_lobby_passkey\030\025 \001("
    "\t\022\037\n\027private_chat_channel_id\030\026 \001(\r\022\016\n\006st"
    "atus\030\027 \001(\r\022\032\n\022battle_cup_victory\030\030 \001(\010\022\023"
    "\n\013badge_level\030\031 \001(\r\022\034\n\024suggest_pick_hero"
    "_id\030\032 \001(\r\022\036\n\026suggest_pick_hero_role\030\033 \001("
    "\t\022\r\n\005terse\030\034 \001(\010\032>\n\010DiceRoll\022\020\n\010roll_min"
    "\030\001 \001(\005\022\020\n\010roll_max\030\002 \001(\005\022\016\n\006result\030\003 \001(\005"
    "\"e\n\022CMsgDOTAChatMember\022\020\n\010steam_id\030\001 \001(\006"
    "\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017channel_user_i"
    "d\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\"\352\005\n\037CMsgDOTAJoin"
    "ChatChannelResponse\022\020\n\010response\030\001 \001(\r\022\024\n"
    "\014channel_name\030\002 \001(\t\022\022\n\nchannel_id\030\003 \001(\006\022"
    "\023\n\013max_members\030\004 \001(\r\022$\n\007members\030\005 \003(\0132\023."
    "CMsgDOTAChatMember\022F\n\014channel_type\030\006 \001(\016"
    "2\026.DOTAChatChannelType_t:\030DOTAChannelTyp"
    "e_Regional\022E\n\006result\030\007 \001(\0162\'.CMsgDOTAJoi"
    "nChatChannelResponse.Result:\014JOIN_SUCCES"
    "S\022\031\n\021gc_initiated_join\030\010 \001(\010\022\027\n\017channel_"
    "user_id\030\t \001(\r\022\027\n\017welcome_message\030\n \001(\t\"\363"
    "\002\n\006Result\022\020\n\014JOIN_SUCCESS\020\000\022\030\n\024INVALID_C"
    "HANNEL_TYPE\020\001\022\025\n\021ACCOUNT_NOT_FOUND\020\002\022\016\n\n"
    "ACH_FAILED\020\003\022\035\n\031USER_IN_TOO_MANY_CHANNEL"
    "S\020\004\022\027\n\023RATE_LIMIT_EXCEEDED\020\005\022\020\n\014CHANNEL_"
    "FULL\020\006\022\033\n\027CHANNEL_FULL_OVERFLOWED\020\007\022\026\n\022F"
    "AILED_TO_ADD_USER\020\010\022\031\n\025CHANNEL_TYPE_DISA"
    "BLED\020\t\022\036\n\032PRIVATE_CHAT_CREATE_FAILED\020\n\022\036"
    "\n\032PRIVATE_CHAT_NO_PERMISSION\020\013\022#\n\037PRIVAT"
    "E_CHAT_CREATE_LOCK_FAILED\020\014\022\027\n\023PRIVATE_C"
    "HAT_KICKED\020\r\"Y\n\035CMsgDOTAChatChannelFullU"
    "pdate\022\022\n\nchannel_id\030\001 \001(\006\022$\n\007members\030\002 \003"
    "(\0132\023.CMsgDOTAChatMember\"\205\001\n\036CMsgDOTAOthe"
    "rJoinedChatChannel\022\022\n\nchannel_id\030\001 \001(\006\022\024"
    "\n\014persona_name\030\002 \001(\t\022\020\n\010steam_id\030\003 \001(\006\022\027"
    "\n\017channel_user_id\030\004 \001(\r\022\016\n\006status\030\005 \001(\r\""
    "]\n\034CMsgDOTAOtherLeftChatChannel\022\022\n\nchann"
    "el_id\030\001 \001(\006\022\020\n\010steam_id\030\002 \001(\006\022\027\n\017channel"
    "_user_id\030\003 \001(\r\"\365\001\n\037CMsgDOTAChatChannelMe"
    "mberUpdate\022\022\n\nchannel_id\030\001 \001(\006\022\026\n\016left_s"
    "team_ids\030\002 \003(\006\022E\n\016joined_members\030\003 \003(\0132-"
    ".CMsgDOTAChatChannelMemberUpdate.JoinedM"
    "ember\032_\n\014JoinedMember\022\020\n\010steam_id\030\001 \001(\006\022"
    "\024\n\014persona_name\030\002 \001(\t\022\027\n\017channel_user_id"
    "\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\" \n\036CMsgDOTAReques"
    "tChatChannelList\"\362\001\n&CMsgDOTARequestChat"
    "ChannelListResponse\022E\n\010channels\030\001 \003(\01323."
    "CMsgDOTARequestChatChannelListResponse.C"
    "hatChannel\032\200\001\n\013ChatChannel\022\024\n\014channel_na"
    "me\030\001 \001(\t\022\023\n\013num_members\030\002 \001(\r\022F\n\014channel"
    "_type\030\003 \001(\0162\026.DOTAChatChannelType_t:\030DOT"
    "AChannelType_Regional\"-\n\027CMsgDOTAChatGet"
    "UserList\022\022\n\nchannel_id\030\001 \001(\006\"\312\001\n\037CMsgDOT"
    "AChatGetUserListResponse\022\022\n\nchannel_id\030\001"
    " \001(\006\0228\n\007members\030\002 \003(\0132\'.CMsgDOTAChatGetU"
    "serListResponse.Member\032Y\n\006Member\022\020\n\010stea"
    "m_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017chan"
    "nel_user_id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\"z\n\032CMs"
    "gDOTAChatGetMemberCount\022\024\n\014channel_name\030"
    "\001 \001(\t\022F\n\014channel_type\030\002 \001(\0162\026.DOTAChatCh"
    "annelType_t:\030DOTAChannelType_Regional\"\230\001"
    "\n\"CMsgDOTAChatGetMemberCountResponse\022\024\n\014"
    "channel_name\030\001 \001(\t\022F\n\014channel_type\030\002 \001(\016"
    "2\026.DOTAChatChannelType_t:\030DOTAChannelTyp"
    "e_Regional\022\024\n\014member_count\030\003 \001(\r\"\331\001\n\032CMs"
    "gDOTAChatRegionsEnabled\022\032\n\022enable_all_re"
    "gions\030\001 \001(\010\022;\n\017enabled_regions\030\002 \003(\0132\".C"
    "MsgDOTAChatRegionsEnabled.Region\032b\n\006Regi"
    "on\022\024\n\014min_latitude\030\001 \001(\002\022\024\n\014max_latitude"
    "\030\002 \001(\002\022\025\n\rmin_longitude\030\003 \001(\002\022\025\n\rmax_lon"
    "gitude\030\004 \001(\002B\005H\001\200\001\000", 4939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_chat.proto", &protobuf_RegisterTypes);
  CMsgClientToGCPrivateChatInvite::default_instance_ = new CMsgClientToGCPrivateChatInvite();
  CMsgClientToGCPrivateChatKick::default_instance_ = new CMsgClientToGCPrivateChatKick();
  CMsgClientToGCPrivateChatPromote::default_instance_ = new CMsgClientToGCPrivateChatPromote();
  CMsgClientToGCPrivateChatDemote::default_instance_ = new CMsgClientToGCPrivateChatDemote();
  CMsgGCToClientPrivateChatResponse::default_instance_ = new CMsgGCToClientPrivateChatResponse();
  CMsgClientToGCPrivateChatInfoRequest::default_instance_ = new CMsgClientToGCPrivateChatInfoRequest();
  CMsgGCToClientPrivateChatInfoResponse::default_instance_ = new CMsgGCToClientPrivateChatInfoResponse();
  CMsgGCToClientPrivateChatInfoResponse_Member::default_instance_ = new CMsgGCToClientPrivateChatInfoResponse_Member();
  CMsgDOTAJoinChatChannel::default_instance_ = new CMsgDOTAJoinChatChannel();
  CMsgDOTALeaveChatChannel::default_instance_ = new CMsgDOTALeaveChatChannel();
  CMsgGCChatReportPublicSpam::default_instance_ = new CMsgGCChatReportPublicSpam();
  CMsgDOTAClientIgnoredUser::default_instance_ = new CMsgDOTAClientIgnoredUser();
  CMsgDOTAChatMessage::default_instance_ = new CMsgDOTAChatMessage();
  CMsgDOTAChatMessage_DiceRoll::default_instance_ = new CMsgDOTAChatMessage_DiceRoll();
  CMsgDOTAChatMember::default_instance_ = new CMsgDOTAChatMember();
  CMsgDOTAJoinChatChannelResponse::default_instance_ = new CMsgDOTAJoinChatChannelResponse();
  CMsgDOTAChatChannelFullUpdate::default_instance_ = new CMsgDOTAChatChannelFullUpdate();
  CMsgDOTAOtherJoinedChatChannel::default_instance_ = new CMsgDOTAOtherJoinedChatChannel();
  CMsgDOTAOtherLeftChatChannel::default_instance_ = new CMsgDOTAOtherLeftChatChannel();
  CMsgDOTAChatChannelMemberUpdate::default_instance_ = new CMsgDOTAChatChannelMemberUpdate();
  CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance_ = new CMsgDOTAChatChannelMemberUpdate_JoinedMember();
  CMsgDOTARequestChatChannelList::default_instance_ = new CMsgDOTARequestChatChannelList();
  CMsgDOTARequestChatChannelListResponse::default_instance_ = new CMsgDOTARequestChatChannelListResponse();
  CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance_ = new CMsgDOTARequestChatChannelListResponse_ChatChannel();
  CMsgDOTAChatGetUserList::default_instance_ = new CMsgDOTAChatGetUserList();
  CMsgDOTAChatGetUserListResponse::default_instance_ = new CMsgDOTAChatGetUserListResponse();
  CMsgDOTAChatGetUserListResponse_Member::default_instance_ = new CMsgDOTAChatGetUserListResponse_Member();
  CMsgDOTAChatGetMemberCount::default_instance_ = new CMsgDOTAChatGetMemberCount();
  CMsgDOTAChatGetMemberCountResponse::default_instance_ = new CMsgDOTAChatGetMemberCountResponse();
  CMsgDOTAChatRegionsEnabled::default_instance_ = new CMsgDOTAChatRegionsEnabled();
  CMsgDOTAChatRegionsEnabled_Region::default_instance_ = new CMsgDOTAChatRegionsEnabled_Region();
  CMsgClientToGCPrivateChatInvite::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCPrivateChatKick::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCPrivateChatPromote::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCPrivateChatDemote::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientPrivateChatResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCPrivateChatInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientPrivateChatInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientPrivateChatInfoResponse_Member::default_instance_->InitAsDefaultInstance();
  CMsgDOTAJoinChatChannel::default_instance_->InitAsDefaultInstance();
  CMsgDOTALeaveChatChannel::default_instance_->InitAsDefaultInstance();
  CMsgGCChatReportPublicSpam::default_instance_->InitAsDefaultInstance();
  CMsgDOTAClientIgnoredUser::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatMessage::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatMessage_DiceRoll::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatMember::default_instance_->InitAsDefaultInstance();
  CMsgDOTAJoinChatChannelResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatChannelFullUpdate::default_instance_->InitAsDefaultInstance();
  CMsgDOTAOtherJoinedChatChannel::default_instance_->InitAsDefaultInstance();
  CMsgDOTAOtherLeftChatChannel::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatChannelMemberUpdate::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestChatChannelList::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestChatChannelListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatGetUserList::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatGetUserListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatGetUserListResponse_Member::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatGetMemberCount::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatGetMemberCountResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatRegionsEnabled::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChatRegionsEnabled_Region::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fchat_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fchat_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5fchat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCPrivateChatInvite::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatInvite::kInvitedAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCPrivateChatInvite)
}

void CMsgClientToGCPrivateChatInvite::InitAsDefaultInstance() {
}

CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatInvite)
}

void CMsgClientToGCPrivateChatInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invited_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCPrivateChatInvite::~CMsgClientToGCPrivateChatInvite() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatInvite)
  SharedDtor();
}

void CMsgClientToGCPrivateChatInvite::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCPrivateChatInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCPrivateChatInvite_descriptor_;
}

const CMsgClientToGCPrivateChatInvite& CMsgClientToGCPrivateChatInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgClientToGCPrivateChatInvite* CMsgClientToGCPrivateChatInvite::default_instance_ = NULL;

CMsgClientToGCPrivateChatInvite* CMsgClientToGCPrivateChatInvite::New() const {
  return new CMsgClientToGCPrivateChatInvite;
}

void CMsgClientToGCPrivateChatInvite::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_private_chat_channel_name()) {
      if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_chat_channel_name_->clear();
      }
    }
    invited_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCPrivateChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCPrivateChatInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invited_account_id;
        break;
      }

      // optional uint32 invited_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_invited_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invited_account_id_)));
          set_has_invited_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCPrivateChatInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCPrivateChatInvite)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCPrivateChatInvite)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 invited_account_id = 2;
  if (has_invited_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invited_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCPrivateChatInvite)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatInvite)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 invited_account_id = 2;
  if (has_invited_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invited_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatInvite)
  return target;
}

int CMsgClientToGCPrivateChatInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 invited_account_id = 2;
    if (has_invited_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invited_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCPrivateChatInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const CMsgClientToGCPrivateChatInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
    if (from.has_invited_account_id()) {
      set_invited_account_id(from.invited_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const CMsgClientToGCPrivateChatInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInvite::IsInitialized() const {

  return true;
}

void CMsgClientToGCPrivateChatInvite::Swap(CMsgClientToGCPrivateChatInvite* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    std::swap(invited_account_id_, other->invited_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCPrivateChatInvite_descriptor_;
  metadata.reflection = CMsgClientToGCPrivateChatInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCPrivateChatKick::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatKick::kKickAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCPrivateChatKick)
}

void CMsgClientToGCPrivateChatKick::InitAsDefaultInstance() {
}

CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatKick)
}

void CMsgClientToGCPrivateChatKick::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCPrivateChatKick::~CMsgClientToGCPrivateChatKick() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatKick)
  SharedDtor();
}

void CMsgClientToGCPrivateChatKick::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCPrivateChatKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCPrivateChatKick_descriptor_;
}

const CMsgClientToGCPrivateChatKick& CMsgClientToGCPrivateChatKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgClientToGCPrivateChatKick* CMsgClientToGCPrivateChatKick::default_instance_ = NULL;

CMsgClientToGCPrivateChatKick* CMsgClientToGCPrivateChatKick::New() const {
  return new CMsgClientToGCPrivateChatKick;
}

void CMsgClientToGCPrivateChatKick::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_private_chat_channel_name()) {
      if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_chat_channel_name_->clear();
      }
    }
    kick_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCPrivateChatKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCPrivateChatKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kick_account_id;
        break;
      }

      // optional uint32 kick_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_kick_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_account_id_)));
          set_has_kick_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCPrivateChatKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCPrivateChatKick)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCPrivateChatKick)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 kick_account_id = 2;
  if (has_kick_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCPrivateChatKick)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatKick)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 kick_account_id = 2;
  if (has_kick_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatKick)
  return target;
}

int CMsgClientToGCPrivateChatKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 kick_account_id = 2;
    if (has_kick_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCPrivateChatKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const CMsgClientToGCPrivateChatKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
    if (from.has_kick_account_id()) {
      set_kick_account_id(from.kick_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const CMsgClientToGCPrivateChatKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatKick::IsInitialized() const {

  return true;
}

void CMsgClientToGCPrivateChatKick::Swap(CMsgClientToGCPrivateChatKick* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    std::swap(kick_account_id_, other->kick_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCPrivateChatKick_descriptor_;
  metadata.reflection = CMsgClientToGCPrivateChatKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCPrivateChatPromote::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatPromote::kPromoteAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCPrivateChatPromote)
}

void CMsgClientToGCPrivateChatPromote::InitAsDefaultInstance() {
}

CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatPromote)
}

void CMsgClientToGCPrivateChatPromote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  promote_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCPrivateChatPromote::~CMsgClientToGCPrivateChatPromote() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatPromote)
  SharedDtor();
}

void CMsgClientToGCPrivateChatPromote::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCPrivateChatPromote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatPromote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCPrivateChatPromote_descriptor_;
}

const CMsgClientToGCPrivateChatPromote& CMsgClientToGCPrivateChatPromote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgClientToGCPrivateChatPromote* CMsgClientToGCPrivateChatPromote::default_instance_ = NULL;

CMsgClientToGCPrivateChatPromote* CMsgClientToGCPrivateChatPromote::New() const {
  return new CMsgClientToGCPrivateChatPromote;
}

void CMsgClientToGCPrivateChatPromote::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_private_chat_channel_name()) {
      if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_chat_channel_name_->clear();
      }
    }
    promote_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCPrivateChatPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCPrivateChatPromote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_promote_account_id;
        break;
      }

      // optional uint32 promote_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_promote_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_account_id_)));
          set_has_promote_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCPrivateChatPromote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCPrivateChatPromote)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCPrivateChatPromote)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 promote_account_id = 2;
  if (has_promote_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->promote_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCPrivateChatPromote)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatPromote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatPromote)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 promote_account_id = 2;
  if (has_promote_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->promote_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatPromote)
  return target;
}

int CMsgClientToGCPrivateChatPromote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 promote_account_id = 2;
    if (has_promote_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->promote_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatPromote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCPrivateChatPromote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const CMsgClientToGCPrivateChatPromote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
    if (from.has_promote_account_id()) {
      set_promote_account_id(from.promote_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const CMsgClientToGCPrivateChatPromote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatPromote::IsInitialized() const {

  return true;
}

void CMsgClientToGCPrivateChatPromote::Swap(CMsgClientToGCPrivateChatPromote* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    std::swap(promote_account_id_, other->promote_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatPromote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCPrivateChatPromote_descriptor_;
  metadata.reflection = CMsgClientToGCPrivateChatPromote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCPrivateChatDemote::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatDemote::kDemoteAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCPrivateChatDemote)
}

void CMsgClientToGCPrivateChatDemote::InitAsDefaultInstance() {
}

CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatDemote)
}

void CMsgClientToGCPrivateChatDemote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  demote_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCPrivateChatDemote::~CMsgClientToGCPrivateChatDemote() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatDemote)
  SharedDtor();
}

void CMsgClientToGCPrivateChatDemote::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCPrivateChatDemote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatDemote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCPrivateChatDemote_descriptor_;
}

const CMsgClientToGCPrivateChatDemote& CMsgClientToGCPrivateChatDemote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgClientToGCPrivateChatDemote* CMsgClientToGCPrivateChatDemote::default_instance_ = NULL;

CMsgClientToGCPrivateChatDemote* CMsgClientToGCPrivateChatDemote::New() const {
  return new CMsgClientToGCPrivateChatDemote;
}

void CMsgClientToGCPrivateChatDemote::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_private_chat_channel_name()) {
      if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_chat_channel_name_->clear();
      }
    }
    demote_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCPrivateChatDemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCPrivateChatDemote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_demote_account_id;
        break;
      }

      // optional uint32 demote_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_demote_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &demote_account_id_)));
          set_has_demote_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCPrivateChatDemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCPrivateChatDemote)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatDemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCPrivateChatDemote)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 demote_account_id = 2;
  if (has_demote_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->demote_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCPrivateChatDemote)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatDemote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatDemote)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 demote_account_id = 2;
  if (has_demote_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->demote_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatDemote)
  return target;
}

int CMsgClientToGCPrivateChatDemote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 demote_account_id = 2;
    if (has_demote_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->demote_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatDemote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCPrivateChatDemote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const CMsgClientToGCPrivateChatDemote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
    if (from.has_demote_account_id()) {
      set_demote_account_id(from.demote_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const CMsgClientToGCPrivateChatDemote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatDemote::IsInitialized() const {

  return true;
}

void CMsgClientToGCPrivateChatDemote::Swap(CMsgClientToGCPrivateChatDemote* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    std::swap(demote_account_id_, other->demote_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatDemote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCPrivateChatDemote_descriptor_;
  metadata.reflection = CMsgClientToGCPrivateChatDemote_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientPrivateChatResponse_Result_descriptor_;
}
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::SUCCESS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_LOCK;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SQL_TRANSACTION;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SDO_LOAD;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_PERMISSION;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_MEMBER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NOT_A_MEMBER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_REMAINING_ADMINS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_ROOM;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_RATE_LIMITED;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_CHANNEL_NAME;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_USER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_ERROR;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CANNOT_KICK_ADMIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_ADMIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MAX;
const int CMsgGCToClientPrivateChatResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgGCToClientPrivateChatResponse::kPrivateChatChannelNameFieldNumber;
const int CMsgGCToClientPrivateChatResponse::kResultFieldNumber;
const int CMsgGCToClientPrivateChatResponse::kUsernameFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientPrivateChatResponse)
}

void CMsgGCToClientPrivateChatResponse::InitAsDefaultInstance() {
}

CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatResponse)
}

void CMsgGCToClientPrivateChatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientPrivateChatResponse::~CMsgGCToClientPrivateChatResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatResponse)
  SharedDtor();
}

void CMsgGCToClientPrivateChatResponse::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCToClientPrivateChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientPrivateChatResponse_descriptor_;
}

const CMsgGCToClientPrivateChatResponse& CMsgGCToClientPrivateChatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgGCToClientPrivateChatResponse* CMsgGCToClientPrivateChatResponse::default_instance_ = NULL;

CMsgGCToClientPrivateChatResponse* CMsgGCToClientPrivateChatResponse::New() const {
  return new CMsgGCToClientPrivateChatResponse;
}

void CMsgGCToClientPrivateChatResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_private_chat_channel_name()) {
      if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_chat_channel_name_->clear();
      }
    }
    result_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientPrivateChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientPrivateChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgGCToClientPrivateChatResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgGCToClientPrivateChatResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientPrivateChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientPrivateChatResponse)
  return false;
#undef DO_
}

void CMsgGCToClientPrivateChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientPrivateChatResponse)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientPrivateChatResponse)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatResponse)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatResponse)
  return target;
}

int CMsgGCToClientPrivateChatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientPrivateChatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const CMsgGCToClientPrivateChatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const CMsgGCToClientPrivateChatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatResponse::IsInitialized() const {

  return true;
}

void CMsgGCToClientPrivateChatResponse::Swap(CMsgGCToClientPrivateChatResponse* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    std::swap(result_, other->result_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientPrivateChatResponse_descriptor_;
  metadata.reflection = CMsgGCToClientPrivateChatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCPrivateChatInfoRequest::kPrivateChatChannelNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCPrivateChatInfoRequest)
}

void CMsgClientToGCPrivateChatInfoRequest::InitAsDefaultInstance() {
}

CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest(const CMsgClientToGCPrivateChatInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatInfoRequest)
}

void CMsgClientToGCPrivateChatInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCPrivateChatInfoRequest::~CMsgClientToGCPrivateChatInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatInfoRequest)
  SharedDtor();
}

void CMsgClientToGCPrivateChatInfoRequest::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCPrivateChatInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCPrivateChatInfoRequest_descriptor_;
}

const CMsgClientToGCPrivateChatInfoRequest& CMsgClientToGCPrivateChatInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgClientToGCPrivateChatInfoRequest* CMsgClientToGCPrivateChatInfoRequest::default_instance_ = NULL;

CMsgClientToGCPrivateChatInfoRequest* CMsgClientToGCPrivateChatInfoRequest::New() const {
  return new CMsgClientToGCPrivateChatInfoRequest;
}

void CMsgClientToGCPrivateChatInfoRequest::Clear() {
  if (has_private_chat_channel_name()) {
    if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      private_chat_channel_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCPrivateChatInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCPrivateChatInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCPrivateChatInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCPrivateChatInfoRequest)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCPrivateChatInfoRequest)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCPrivateChatInfoRequest)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatInfoRequest)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatInfoRequest)
  return target;
}

int CMsgClientToGCPrivateChatInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCPrivateChatInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInfoRequest::IsInitialized() const {

  return true;
}

void CMsgClientToGCPrivateChatInfoRequest::Swap(CMsgClientToGCPrivateChatInfoRequest* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCPrivateChatInfoRequest_descriptor_;
  metadata.reflection = CMsgClientToGCPrivateChatInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientPrivateChatInfoResponse_Member::kAccountIdFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse_Member::kNameFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse_Member::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientPrivateChatInfoResponse.Member)
}

void CMsgGCToClientPrivateChatInfoResponse_Member::InitAsDefaultInstance() {
}

CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member(const CMsgGCToClientPrivateChatInfoResponse_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatInfoResponse.Member)
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientPrivateChatInfoResponse_Member::~CMsgGCToClientPrivateChatInfoResponse_Member() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatInfoResponse.Member)
  SharedDtor();
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatInfoResponse_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientPrivateChatInfoResponse_Member_descriptor_;
}

const CMsgGCToClientPrivateChatInfoResponse_Member& CMsgGCToClientPrivateChatInfoResponse_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse_Member::default_instance_ = NULL;

CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse_Member::New() const {
  return new CMsgGCToClientPrivateChatInfoResponse_Member;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToClientPrivateChatInfoResponse_Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(account_id_, status_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientPrivateChatInfoResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientPrivateChatInfoResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientPrivateChatInfoResponse.Member)
  return false;
#undef DO_
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientPrivateChatInfoResponse.Member)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatInfoResponse_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatInfoResponse.Member)
  return target;
}

int CMsgGCToClientPrivateChatInfoResponse_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientPrivateChatInfoResponse_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse_Member::IsInitialized() const {

  return true;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::Swap(CMsgGCToClientPrivateChatInfoResponse_Member* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatInfoResponse_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientPrivateChatInfoResponse_Member_descriptor_;
  metadata.reflection = CMsgGCToClientPrivateChatInfoResponse_Member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCToClientPrivateChatInfoResponse::kPrivateChatChannelNameFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kMembersFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kCreatorFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kCreationDateFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientPrivateChatInfoResponse)
}

void CMsgGCToClientPrivateChatInfoResponse::InitAsDefaultInstance() {
}

CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse(const CMsgGCToClientPrivateChatInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatInfoResponse)
}

void CMsgGCToClientPrivateChatInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_ = 0u;
  creation_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientPrivateChatInfoResponse::~CMsgGCToClientPrivateChatInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatInfoResponse)
  SharedDtor();
}

void CMsgGCToClientPrivateChatInfoResponse::SharedDtor() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCToClientPrivateChatInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientPrivateChatInfoResponse_descriptor_;
}

const CMsgGCToClientPrivateChatInfoResponse& CMsgGCToClientPrivateChatInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgGCToClientPrivateChatInfoResponse* CMsgGCToClientPrivateChatInfoResponse::default_instance_ = NULL;

CMsgGCToClientPrivateChatInfoResponse* CMsgGCToClientPrivateChatInfoResponse::New() const {
  return new CMsgGCToClientPrivateChatInfoResponse;
}

void CMsgGCToClientPrivateChatInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToClientPrivateChatInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(creator_, creation_date_);
    if (has_private_chat_channel_name()) {
      if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_chat_channel_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientPrivateChatInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientPrivateChatInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(24)) goto parse_creator;
        break;
      }

      // optional uint32 creator = 3;
      case 3: {
        if (tag == 24) {
         parse_creator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_)));
          set_has_creator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creation_date;
        break;
      }

      // optional uint32 creation_date = 4;
      case 4: {
        if (tag == 32) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientPrivateChatInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientPrivateChatInfoResponse)
  return false;
#undef DO_
}

void CMsgGCToClientPrivateChatInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientPrivateChatInfoResponse)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional uint32 creator = 3;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator(), output);
  }

  // optional uint32 creation_date = 4;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creation_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientPrivateChatInfoResponse)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatInfoResponse)
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // optional uint32 creator = 3;
  if (has_creator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creator(), target);
  }

  // optional uint32 creation_date = 4;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creation_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatInfoResponse)
  return target;
}

int CMsgGCToClientPrivateChatInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 creator = 3;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator());
    }

    // optional uint32 creation_date = 4;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_date());
    }

  }
  // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientPrivateChatInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_chat_channel_name()) {
      set_private_chat_channel_name(from.private_chat_channel_name());
    }
    if (from.has_creator()) {
      set_creator(from.creator());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse::IsInitialized() const {

  return true;
}

void CMsgGCToClientPrivateChatInfoResponse::Swap(CMsgGCToClientPrivateChatInfoResponse* other) {
  if (other != this) {
    std::swap(private_chat_channel_name_, other->private_chat_channel_name_);
    members_.Swap(&other->members_);
    std::swap(creator_, other->creator_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientPrivateChatInfoResponse_descriptor_;
  metadata.reflection = CMsgGCToClientPrivateChatInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAJoinChatChannel::kChannelNameFieldNumber;
const int CMsgDOTAJoinChatChannel::kChannelTypeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAJoinChatChannel)
}

void CMsgDOTAJoinChatChannel::InitAsDefaultInstance() {
}

CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinChatChannel)
}

void CMsgDOTAJoinChatChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAJoinChatChannel::~CMsgDOTAJoinChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinChatChannel)
  SharedDtor();
}

void CMsgDOTAJoinChatChannel::SharedDtor() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAJoinChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinChatChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAJoinChatChannel_descriptor_;
}

const CMsgDOTAJoinChatChannel& CMsgDOTAJoinChatChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAJoinChatChannel* CMsgDOTAJoinChatChannel::default_instance_ = NULL;

CMsgDOTAJoinChatChannel* CMsgDOTAJoinChatChannel::New() const {
  return new CMsgDOTAJoinChatChannel;
}

void CMsgDOTAJoinChatChannel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_name_->clear();
      }
    }
    channel_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAJoinChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAJoinChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_type;
        break;
      }

      // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
      case 4: {
        if (tag == 32) {
         parse_channel_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAJoinChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAJoinChatChannel)
  return false;
#undef DO_
}

void CMsgDOTAJoinChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAJoinChatChannel)
  // optional string channel_name = 2;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAJoinChatChannel)
}

::google::protobuf::uint8* CMsgDOTAJoinChatChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinChatChannel)
  // optional string channel_name = 2;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channel_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinChatChannel)
  return target;
}

int CMsgDOTAJoinChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel_name = 2;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAJoinChatChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannel::MergeFrom(const CMsgDOTAJoinChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAJoinChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannel::CopyFrom(const CMsgDOTAJoinChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannel::IsInitialized() const {

  return true;
}

void CMsgDOTAJoinChatChannel::Swap(CMsgDOTAJoinChatChannel* other) {
  if (other != this) {
    std::swap(channel_name_, other->channel_name_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAJoinChatChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAJoinChatChannel_descriptor_;
  metadata.reflection = CMsgDOTAJoinChatChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTALeaveChatChannel::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALeaveChatChannel)
}

void CMsgDOTALeaveChatChannel::InitAsDefaultInstance() {
}

CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveChatChannel)
}

void CMsgDOTALeaveChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALeaveChatChannel::~CMsgDOTALeaveChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveChatChannel)
  SharedDtor();
}

void CMsgDOTALeaveChatChannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTALeaveChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALeaveChatChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALeaveChatChannel_descriptor_;
}

const CMsgDOTALeaveChatChannel& CMsgDOTALeaveChatChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTALeaveChatChannel* CMsgDOTALeaveChatChannel::default_instance_ = NULL;

CMsgDOTALeaveChatChannel* CMsgDOTALeaveChatChannel::New() const {
  return new CMsgDOTALeaveChatChannel;
}

void CMsgDOTALeaveChatChannel::Clear() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALeaveChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALeaveChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALeaveChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALeaveChatChannel)
  return false;
#undef DO_
}

void CMsgDOTALeaveChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALeaveChatChannel)
  // optional uint64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALeaveChatChannel)
}

::google::protobuf::uint8* CMsgDOTALeaveChatChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveChatChannel)
  // optional uint64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveChatChannel)
  return target;
}

int CMsgDOTALeaveChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALeaveChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALeaveChatChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALeaveChatChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveChatChannel::MergeFrom(const CMsgDOTALeaveChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALeaveChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveChatChannel::CopyFrom(const CMsgDOTALeaveChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveChatChannel::IsInitialized() const {

  return true;
}

void CMsgDOTALeaveChatChannel::Swap(CMsgDOTALeaveChatChannel* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALeaveChatChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALeaveChatChannel_descriptor_;
  metadata.reflection = CMsgDOTALeaveChatChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCChatReportPublicSpam::kChannelIdFieldNumber;
const int CMsgGCChatReportPublicSpam::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCChatReportPublicSpam)
}

void CMsgGCChatReportPublicSpam::InitAsDefaultInstance() {
}

CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCChatReportPublicSpam)
}

void CMsgGCChatReportPublicSpam::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  channel_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCChatReportPublicSpam::~CMsgGCChatReportPublicSpam() {
  // @@protoc_insertion_point(destructor:CMsgGCChatReportPublicSpam)
  SharedDtor();
}

void CMsgGCChatReportPublicSpam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCChatReportPublicSpam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChatReportPublicSpam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCChatReportPublicSpam_descriptor_;
}

const CMsgGCChatReportPublicSpam& CMsgGCChatReportPublicSpam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgGCChatReportPublicSpam* CMsgGCChatReportPublicSpam::default_instance_ = NULL;

CMsgGCChatReportPublicSpam* CMsgGCChatReportPublicSpam::New() const {
  return new CMsgGCChatReportPublicSpam;
}

void CMsgGCChatReportPublicSpam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCChatReportPublicSpam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channel_id_, channel_user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCChatReportPublicSpam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCChatReportPublicSpam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCChatReportPublicSpam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCChatReportPublicSpam)
  return false;
#undef DO_
}

void CMsgGCChatReportPublicSpam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCChatReportPublicSpam)
  // optional uint64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channel_id(), output);
  }

  // optional uint32 channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCChatReportPublicSpam)
}

::google::protobuf::uint8* CMsgGCChatReportPublicSpam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChatReportPublicSpam)
  // optional uint64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channel_id(), target);
  }

  // optional uint32 channel_user_id = 2;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChatReportPublicSpam)
  return target;
}

int CMsgGCChatReportPublicSpam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional uint32 channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChatReportPublicSpam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCChatReportPublicSpam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCChatReportPublicSpam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCChatReportPublicSpam::MergeFrom(const CMsgGCChatReportPublicSpam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCChatReportPublicSpam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChatReportPublicSpam::CopyFrom(const CMsgGCChatReportPublicSpam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChatReportPublicSpam::IsInitialized() const {

  return true;
}

void CMsgGCChatReportPublicSpam::Swap(CMsgGCChatReportPublicSpam* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCChatReportPublicSpam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCChatReportPublicSpam_descriptor_;
  metadata.reflection = CMsgGCChatReportPublicSpam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAClientIgnoredUser::kIgnoredAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAClientIgnoredUser)
}

void CMsgDOTAClientIgnoredUser::InitAsDefaultInstance() {
}

CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser(const CMsgDOTAClientIgnoredUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAClientIgnoredUser)
}

void CMsgDOTAClientIgnoredUser::SharedCtor() {
  _cached_size_ = 0;
  ignored_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAClientIgnoredUser::~CMsgDOTAClientIgnoredUser() {
  // @@protoc_insertion_point(destructor:CMsgDOTAClientIgnoredUser)
  SharedDtor();
}

void CMsgDOTAClientIgnoredUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAClientIgnoredUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAClientIgnoredUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAClientIgnoredUser_descriptor_;
}

const CMsgDOTAClientIgnoredUser& CMsgDOTAClientIgnoredUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAClientIgnoredUser* CMsgDOTAClientIgnoredUser::default_instance_ = NULL;

CMsgDOTAClientIgnoredUser* CMsgDOTAClientIgnoredUser::New() const {
  return new CMsgDOTAClientIgnoredUser;
}

void CMsgDOTAClientIgnoredUser::Clear() {
  ignored_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAClientIgnoredUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAClientIgnoredUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ignored_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignored_account_id_)));
          set_has_ignored_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAClientIgnoredUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAClientIgnoredUser)
  return false;
#undef DO_
}

void CMsgDOTAClientIgnoredUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAClientIgnoredUser)
  // optional uint32 ignored_account_id = 1;
  if (has_ignored_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ignored_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAClientIgnoredUser)
}

::google::protobuf::uint8* CMsgDOTAClientIgnoredUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAClientIgnoredUser)
  // optional uint32 ignored_account_id = 1;
  if (has_ignored_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ignored_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAClientIgnoredUser)
  return target;
}

int CMsgDOTAClientIgnoredUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ignored_account_id = 1;
    if (has_ignored_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignored_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAClientIgnoredUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAClientIgnoredUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const CMsgDOTAClientIgnoredUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ignored_account_id()) {
      set_ignored_account_id(from.ignored_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const CMsgDOTAClientIgnoredUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClientIgnoredUser::IsInitialized() const {

  return true;
}

void CMsgDOTAClientIgnoredUser::Swap(CMsgDOTAClientIgnoredUser* other) {
  if (other != this) {
    std::swap(ignored_account_id_, other->ignored_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAClientIgnoredUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAClientIgnoredUser_descriptor_;
  metadata.reflection = CMsgDOTAClientIgnoredUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatMessage_DiceRoll::kRollMinFieldNumber;
const int CMsgDOTAChatMessage_DiceRoll::kRollMaxFieldNumber;
const int CMsgDOTAChatMessage_DiceRoll::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatMessage.DiceRoll)
}

void CMsgDOTAChatMessage_DiceRoll::InitAsDefaultInstance() {
}

CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.DiceRoll)
}

void CMsgDOTAChatMessage_DiceRoll::SharedCtor() {
  _cached_size_ = 0;
  roll_min_ = 0;
  roll_max_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatMessage_DiceRoll::~CMsgDOTAChatMessage_DiceRoll() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.DiceRoll)
  SharedDtor();
}

void CMsgDOTAChatMessage_DiceRoll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatMessage_DiceRoll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage_DiceRoll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatMessage_DiceRoll_descriptor_;
}

const CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage_DiceRoll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage_DiceRoll::default_instance_ = NULL;

CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage_DiceRoll::New() const {
  return new CMsgDOTAChatMessage_DiceRoll;
}

void CMsgDOTAChatMessage_DiceRoll::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatMessage_DiceRoll*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roll_min_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatMessage_DiceRoll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatMessage.DiceRoll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roll_min = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_min_)));
          set_has_roll_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roll_max;
        break;
      }

      // optional int32 roll_max = 2;
      case 2: {
        if (tag == 16) {
         parse_roll_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_max_)));
          set_has_roll_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatMessage.DiceRoll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatMessage.DiceRoll)
  return false;
#undef DO_
}

void CMsgDOTAChatMessage_DiceRoll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatMessage.DiceRoll)
  // optional int32 roll_min = 1;
  if (has_roll_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roll_min(), output);
  }

  // optional int32 roll_max = 2;
  if (has_roll_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roll_max(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatMessage.DiceRoll)
}

::google::protobuf::uint8* CMsgDOTAChatMessage_DiceRoll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.DiceRoll)
  // optional int32 roll_min = 1;
  if (has_roll_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roll_min(), target);
  }

  // optional int32 roll_max = 2;
  if (has_roll_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roll_max(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.DiceRoll)
  return target;
}

int CMsgDOTAChatMessage_DiceRoll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roll_min = 1;
    if (has_roll_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_min());
    }

    // optional int32 roll_max = 2;
    if (has_roll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_max());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatMessage_DiceRoll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatMessage_DiceRoll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roll_min()) {
      set_roll_min(from.roll_min());
    }
    if (from.has_roll_max()) {
      set_roll_max(from.roll_max());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_DiceRoll::IsInitialized() const {

  return true;
}

void CMsgDOTAChatMessage_DiceRoll::Swap(CMsgDOTAChatMessage_DiceRoll* other) {
  if (other != this) {
    std::swap(roll_min_, other->roll_min_);
    std::swap(roll_max_, other->roll_max_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatMessage_DiceRoll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatMessage_DiceRoll_descriptor_;
  metadata.reflection = CMsgDOTAChatMessage_DiceRoll_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAChatMessage::kAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kChannelIdFieldNumber;
const int CMsgDOTAChatMessage::kPersonaNameFieldNumber;
const int CMsgDOTAChatMessage::kTextFieldNumber;
const int CMsgDOTAChatMessage::kTimestampFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteNameFieldNumber;
const int CMsgDOTAChatMessage::kFantasyDraftOwnerAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kFantasyDraftPlayerAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kEventIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteToLobbyFieldNumber;
const int CMsgDOTAChatMessage::kEventPointsFieldNumber;
const int CMsgDOTAChatMessage::kCoinFlipFieldNumber;
const int CMsgDOTAChatMessage::kPlayerIdFieldNumber;
const int CMsgDOTAChatMessage::kShareProfileAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kChannelUserIdFieldNumber;
const int CMsgDOTAChatMessage::kDiceRollFieldNumber;
const int CMsgDOTAChatMessage::kSharePartyIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyCustomGameIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyPasskeyFieldNumber;
const int CMsgDOTAChatMessage::kPrivateChatChannelIdFieldNumber;
const int CMsgDOTAChatMessage::kStatusFieldNumber;
const int CMsgDOTAChatMessage::kBattleCupVictoryFieldNumber;
const int CMsgDOTAChatMessage::kBadgeLevelFieldNumber;
const int CMsgDOTAChatMessage::kSuggestPickHeroIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestPickHeroRoleFieldNumber;
const int CMsgDOTAChatMessage::kTerseFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatMessage::CMsgDOTAChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatMessage)
}

void CMsgDOTAChatMessage::InitAsDefaultInstance() {
  dice_roll_ = const_cast< ::CMsgDOTAChatMessage_DiceRoll*>(&::CMsgDOTAChatMessage_DiceRoll::default_instance());
}

CMsgDOTAChatMessage::CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage)
}

void CMsgDOTAChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  channel_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  suggest_invite_account_id_ = 0u;
  suggest_invite_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_draft_owner_account_id_ = 0u;
  fantasy_draft_player_account_id_ = 0u;
  event_id_ = 0u;
  suggest_invite_to_lobby_ = false;
  event_points_ = 0u;
  coin_flip_ = false;
  player_id_ = -1;
  share_profile_account_id_ = 0u;
  channel_user_id_ = 0u;
  dice_roll_ = NULL;
  share_party_id_ = GOOGLE_ULONGLONG(0);
  share_lobby_id_ = GOOGLE_ULONGLONG(0);
  share_lobby_custom_game_id_ = GOOGLE_ULONGLONG(0);
  share_lobby_passkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_chat_channel_id_ = 0u;
  status_ = 0u;
  battle_cup_victory_ = false;
  badge_level_ = 0u;
  suggest_pick_hero_id_ = 0u;
  suggest_pick_hero_role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatMessage::~CMsgDOTAChatMessage() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage)
  SharedDtor();
}

void CMsgDOTAChatMessage::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (suggest_invite_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suggest_invite_name_;
  }
  if (share_lobby_passkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete share_lobby_passkey_;
  }
  if (suggest_pick_hero_role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suggest_pick_hero_role_;
  }
  if (this != default_instance_) {
    delete dice_roll_;
  }
}

void CMsgDOTAChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatMessage_descriptor_;
}

const CMsgDOTAChatMessage& CMsgDOTAChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatMessage* CMsgDOTAChatMessage::default_instance_ = NULL;

CMsgDOTAChatMessage* CMsgDOTAChatMessage::New() const {
  return new CMsgDOTAChatMessage;
}

void CMsgDOTAChatMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, timestamp_);
    ZR_(suggest_invite_account_id_, fantasy_draft_owner_account_id_);
    channel_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persona_name_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_suggest_invite_name()) {
      if (suggest_invite_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suggest_invite_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(fantasy_draft_player_account_id_, event_points_);
    ZR_(share_profile_account_id_, channel_user_id_);
    ZR_(suggest_invite_to_lobby_, coin_flip_);
    player_id_ = -1;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(share_party_id_, share_lobby_id_);
    ZR_(private_chat_channel_id_, share_lobby_custom_game_id_);
    if (has_dice_roll()) {
      if (dice_roll_ != NULL) dice_roll_->::CMsgDOTAChatMessage_DiceRoll::Clear();
    }
    if (has_share_lobby_passkey()) {
      if (share_lobby_passkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        share_lobby_passkey_->clear();
      }
    }
    status_ = 0u;
    battle_cup_victory_ = false;
  }
  if (_has_bits_[24 / 32] & 251658240) {
    badge_level_ = 0u;
    suggest_pick_hero_id_ = 0u;
    if (has_suggest_pick_hero_role()) {
      if (suggest_pick_hero_role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suggest_pick_hero_role_->clear();
      }
    }
    terse_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint64 channel_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (tag == 26) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persona_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_suggest_invite_account_id;
        break;
      }

      // optional uint32 suggest_invite_account_id = 6;
      case 6: {
        if (tag == 48) {
         parse_suggest_invite_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_invite_account_id_)));
          set_has_suggest_invite_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_suggest_invite_name;
        break;
      }

      // optional string suggest_invite_name = 7;
      case 7: {
        if (tag == 58) {
         parse_suggest_invite_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest_invite_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suggest_invite_name().data(), this->suggest_invite_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suggest_invite_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fantasy_draft_owner_account_id;
        break;
      }

      // optional uint32 fantasy_draft_owner_account_id = 8;
      case 8: {
        if (tag == 64) {
         parse_fantasy_draft_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_draft_owner_account_id_)));
          set_has_fantasy_draft_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fantasy_draft_player_account_id;
        break;
      }

      // optional uint32 fantasy_draft_player_account_id = 9;
      case 9: {
        if (tag == 72) {
         parse_fantasy_draft_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_draft_player_account_id_)));
          set_has_fantasy_draft_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_event_id;
        break;
      }

      // optional uint32 event_id = 10;
      case 10: {
        if (tag == 80) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_suggest_invite_to_lobby;
        break;
      }

      // optional bool suggest_invite_to_lobby = 11;
      case 11: {
        if (tag == 88) {
         parse_suggest_invite_to_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_invite_to_lobby_)));
          set_has_suggest_invite_to_lobby();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_event_points;
        break;
      }

      // optional uint32 event_points = 12;
      case 12: {
        if (tag == 96) {
         parse_event_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
          set_has_event_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_coin_flip;
        break;
      }

      // optional bool coin_flip = 13;
      case 13: {
        if (tag == 104) {
         parse_coin_flip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coin_flip_)));
          set_has_coin_flip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 14 [default = -1];
      case 14: {
        if (tag == 112) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_share_profile_account_id;
        break;
      }

      // optional uint32 share_profile_account_id = 15;
      case 15: {
        if (tag == 120) {
         parse_share_profile_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_profile_account_id_)));
          set_has_share_profile_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 16;
      case 16: {
        if (tag == 128) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_dice_roll;
        break;
      }

      // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
      case 17: {
        if (tag == 138) {
         parse_dice_roll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice_roll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_share_party_id;
        break;
      }

      // optional uint64 share_party_id = 18;
      case 18: {
        if (tag == 144) {
         parse_share_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_party_id_)));
          set_has_share_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_share_lobby_id;
        break;
      }

      // optional uint64 share_lobby_id = 19;
      case 19: {
        if (tag == 152) {
         parse_share_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_lobby_id_)));
          set_has_share_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_share_lobby_custom_game_id;
        break;
      }

      // optional uint64 share_lobby_custom_game_id = 20;
      case 20: {
        if (tag == 160) {
         parse_share_lobby_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_lobby_custom_game_id_)));
          set_has_share_lobby_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_share_lobby_passkey;
        break;
      }

      // optional string share_lobby_passkey = 21;
      case 21: {
        if (tag == 170) {
         parse_share_lobby_passkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_lobby_passkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->share_lobby_passkey().data(), this->share_lobby_passkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "share_lobby_passkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_private_chat_channel_id;
        break;
      }

      // optional uint32 private_chat_channel_id = 22;
      case 22: {
        if (tag == 176) {
         parse_private_chat_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &private_chat_channel_id_)));
          set_has_private_chat_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_status;
        break;
      }

      // optional uint32 status = 23;
      case 23: {
        if (tag == 184) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_battle_cup_victory;
        break;
      }

      // optional bool battle_cup_victory = 24;
      case 24: {
        if (tag == 192) {
         parse_battle_cup_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battle_cup_victory_)));
          set_has_battle_cup_victory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_badge_level;
        break;
      }

      // optional uint32 badge_level = 25;
      case 25: {
        if (tag == 200) {
         parse_badge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
          set_has_badge_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_suggest_pick_hero_id;
        break;
      }

      // optional uint32 suggest_pick_hero_id = 26;
      case 26: {
        if (tag == 208) {
         parse_suggest_pick_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_pick_hero_id_)));
          set_has_suggest_pick_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_suggest_pick_hero_role;
        break;
      }

      // optional string suggest_pick_hero_role = 27;
      case 27: {
        if (tag == 218) {
         parse_suggest_pick_hero_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest_pick_hero_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suggest_pick_hero_role().data(), this->suggest_pick_hero_role().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suggest_pick_hero_role");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_terse;
        break;
      }

      // optional bool terse = 28;
      case 28: {
        if (tag == 224) {
         parse_terse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terse_)));
          set_has_terse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatMessage)
  return false;
#undef DO_
}

void CMsgDOTAChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatMessage)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channel_id(), output);
  }

  // optional string persona_name = 3;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional uint32 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (has_suggest_invite_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->suggest_invite_account_id(), output);
  }

  // optional string suggest_invite_name = 7;
  if (has_suggest_invite_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_invite_name().data(), this->suggest_invite_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suggest_invite_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->suggest_invite_name(), output);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (has_fantasy_draft_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fantasy_draft_owner_account_id(), output);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (has_fantasy_draft_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fantasy_draft_player_account_id(), output);
  }

  // optional uint32 event_id = 10;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->event_id(), output);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (has_suggest_invite_to_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->suggest_invite_to_lobby(), output);
  }

  // optional uint32 event_points = 12;
  if (has_event_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->event_points(), output);
  }

  // optional bool coin_flip = 13;
  if (has_coin_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->coin_flip(), output);
  }

  // optional int32 player_id = 14 [default = -1];
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->player_id(), output);
  }

  // optional uint32 share_profile_account_id = 15;
  if (has_share_profile_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->share_profile_account_id(), output);
  }

  // optional uint32 channel_user_id = 16;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->channel_user_id(), output);
  }

  // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (has_dice_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->dice_roll(), output);
  }

  // optional uint64 share_party_id = 18;
  if (has_share_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->share_party_id(), output);
  }

  // optional uint64 share_lobby_id = 19;
  if (has_share_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->share_lobby_id(), output);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (has_share_lobby_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->share_lobby_custom_game_id(), output);
  }

  // optional string share_lobby_passkey = 21;
  if (has_share_lobby_passkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->share_lobby_passkey().data(), this->share_lobby_passkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "share_lobby_passkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->share_lobby_passkey(), output);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (has_private_chat_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->private_chat_channel_id(), output);
  }

  // optional uint32 status = 23;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->status(), output);
  }

  // optional bool battle_cup_victory = 24;
  if (has_battle_cup_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->battle_cup_victory(), output);
  }

  // optional uint32 badge_level = 25;
  if (has_badge_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->badge_level(), output);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (has_suggest_pick_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->suggest_pick_hero_id(), output);
  }

  // optional string suggest_pick_hero_role = 27;
  if (has_suggest_pick_hero_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_pick_hero_role().data(), this->suggest_pick_hero_role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suggest_pick_hero_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->suggest_pick_hero_role(), output);
  }

  // optional bool terse = 28;
  if (has_terse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->terse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatMessage)
}

::google::protobuf::uint8* CMsgDOTAChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channel_id(), target);
  }

  // optional string persona_name = 3;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional uint32 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (has_suggest_invite_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->suggest_invite_account_id(), target);
  }

  // optional string suggest_invite_name = 7;
  if (has_suggest_invite_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_invite_name().data(), this->suggest_invite_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suggest_invite_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->suggest_invite_name(), target);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (has_fantasy_draft_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fantasy_draft_owner_account_id(), target);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (has_fantasy_draft_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fantasy_draft_player_account_id(), target);
  }

  // optional uint32 event_id = 10;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->event_id(), target);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (has_suggest_invite_to_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->suggest_invite_to_lobby(), target);
  }

  // optional uint32 event_points = 12;
  if (has_event_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->event_points(), target);
  }

  // optional bool coin_flip = 13;
  if (has_coin_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->coin_flip(), target);
  }

  // optional int32 player_id = 14 [default = -1];
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->player_id(), target);
  }

  // optional uint32 share_profile_account_id = 15;
  if (has_share_profile_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->share_profile_account_id(), target);
  }

  // optional uint32 channel_user_id = 16;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->channel_user_id(), target);
  }

  // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (has_dice_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->dice_roll(), target);
  }

  // optional uint64 share_party_id = 18;
  if (has_share_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->share_party_id(), target);
  }

  // optional uint64 share_lobby_id = 19;
  if (has_share_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->share_lobby_id(), target);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (has_share_lobby_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->share_lobby_custom_game_id(), target);
  }

  // optional string share_lobby_passkey = 21;
  if (has_share_lobby_passkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->share_lobby_passkey().data(), this->share_lobby_passkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "share_lobby_passkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->share_lobby_passkey(), target);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (has_private_chat_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->private_chat_channel_id(), target);
  }

  // optional uint32 status = 23;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->status(), target);
  }

  // optional bool battle_cup_victory = 24;
  if (has_battle_cup_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->battle_cup_victory(), target);
  }

  // optional uint32 badge_level = 25;
  if (has_badge_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->badge_level(), target);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (has_suggest_pick_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->suggest_pick_hero_id(), target);
  }

  // optional string suggest_pick_hero_role = 27;
  if (has_suggest_pick_hero_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_pick_hero_role().data(), this->suggest_pick_hero_role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suggest_pick_hero_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->suggest_pick_hero_role(), target);
  }

  // optional bool terse = 28;
  if (has_terse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->terse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage)
  return target;
}

int CMsgDOTAChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint64 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional string persona_name = 3;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 suggest_invite_account_id = 6;
    if (has_suggest_invite_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_invite_account_id());
    }

    // optional string suggest_invite_name = 7;
    if (has_suggest_invite_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggest_invite_name());
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;
    if (has_fantasy_draft_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_draft_owner_account_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fantasy_draft_player_account_id = 9;
    if (has_fantasy_draft_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_draft_player_account_id());
    }

    // optional uint32 event_id = 10;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional bool suggest_invite_to_lobby = 11;
    if (has_suggest_invite_to_lobby()) {
      total_size += 1 + 1;
    }

    // optional uint32 event_points = 12;
    if (has_event_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional bool coin_flip = 13;
    if (has_coin_flip()) {
      total_size += 1 + 1;
    }

    // optional int32 player_id = 14 [default = -1];
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 share_profile_account_id = 15;
    if (has_share_profile_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_profile_account_id());
    }

    // optional uint32 channel_user_id = 16;
    if (has_channel_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
    if (has_dice_roll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dice_roll());
    }

    // optional uint64 share_party_id = 18;
    if (has_share_party_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_party_id());
    }

    // optional uint64 share_lobby_id = 19;
    if (has_share_lobby_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_lobby_id());
    }

    // optional uint64 share_lobby_custom_game_id = 20;
    if (has_share_lobby_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_lobby_custom_game_id());
    }

    // optional string share_lobby_passkey = 21;
    if (has_share_lobby_passkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share_lobby_passkey());
    }

    // optional uint32 private_chat_channel_id = 22;
    if (has_private_chat_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->private_chat_channel_id());
    }

    // optional uint32 status = 23;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional bool battle_cup_victory = 24;
    if (has_battle_cup_victory()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 badge_level = 25;
    if (has_badge_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

    // optional uint32 suggest_pick_hero_id = 26;
    if (has_suggest_pick_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_pick_hero_id());
    }

    // optional string suggest_pick_hero_role = 27;
    if (has_suggest_pick_hero_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggest_pick_hero_role());
    }

    // optional bool terse = 28;
    if (has_terse()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage::MergeFrom(const CMsgDOTAChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_suggest_invite_account_id()) {
      set_suggest_invite_account_id(from.suggest_invite_account_id());
    }
    if (from.has_suggest_invite_name()) {
      set_suggest_invite_name(from.suggest_invite_name());
    }
    if (from.has_fantasy_draft_owner_account_id()) {
      set_fantasy_draft_owner_account_id(from.fantasy_draft_owner_account_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fantasy_draft_player_account_id()) {
      set_fantasy_draft_player_account_id(from.fantasy_draft_player_account_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_suggest_invite_to_lobby()) {
      set_suggest_invite_to_lobby(from.suggest_invite_to_lobby());
    }
    if (from.has_event_points()) {
      set_event_points(from.event_points());
    }
    if (from.has_coin_flip()) {
      set_coin_flip(from.coin_flip());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_share_profile_account_id()) {
      set_share_profile_account_id(from.share_profile_account_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dice_roll()) {
      mutable_dice_roll()->::CMsgDOTAChatMessage_DiceRoll::MergeFrom(from.dice_roll());
    }
    if (from.has_share_party_id()) {
      set_share_party_id(from.share_party_id());
    }
    if (from.has_share_lobby_id()) {
      set_share_lobby_id(from.share_lobby_id());
    }
    if (from.has_share_lobby_custom_game_id()) {
      set_share_lobby_custom_game_id(from.share_lobby_custom_game_id());
    }
    if (from.has_share_lobby_passkey()) {
      set_share_lobby_passkey(from.share_lobby_passkey());
    }
    if (from.has_private_chat_channel_id()) {
      set_private_chat_channel_id(from.private_chat_channel_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_battle_cup_victory()) {
      set_battle_cup_victory(from.battle_cup_victory());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_badge_level()) {
      set_badge_level(from.badge_level());
    }
    if (from.has_suggest_pick_hero_id()) {
      set_suggest_pick_hero_id(from.suggest_pick_hero_id());
    }
    if (from.has_suggest_pick_hero_role()) {
      set_suggest_pick_hero_role(from.suggest_pick_hero_role());
    }
    if (from.has_terse()) {
      set_terse(from.terse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage::CopyFrom(const CMsgDOTAChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage::IsInitialized() const {

  return true;
}

void CMsgDOTAChatMessage::Swap(CMsgDOTAChatMessage* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(text_, other->text_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(suggest_invite_account_id_, other->suggest_invite_account_id_);
    std::swap(suggest_invite_name_, other->suggest_invite_name_);
    std::swap(fantasy_draft_owner_account_id_, other->fantasy_draft_owner_account_id_);
    std::swap(fantasy_draft_player_account_id_, other->fantasy_draft_player_account_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(suggest_invite_to_lobby_, other->suggest_invite_to_lobby_);
    std::swap(event_points_, other->event_points_);
    std::swap(coin_flip_, other->coin_flip_);
    std::swap(player_id_, other->player_id_);
    std::swap(share_profile_account_id_, other->share_profile_account_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(dice_roll_, other->dice_roll_);
    std::swap(share_party_id_, other->share_party_id_);
    std::swap(share_lobby_id_, other->share_lobby_id_);
    std::swap(share_lobby_custom_game_id_, other->share_lobby_custom_game_id_);
    std::swap(share_lobby_passkey_, other->share_lobby_passkey_);
    std::swap(private_chat_channel_id_, other->private_chat_channel_id_);
    std::swap(status_, other->status_);
    std::swap(battle_cup_victory_, other->battle_cup_victory_);
    std::swap(badge_level_, other->badge_level_);
    std::swap(suggest_pick_hero_id_, other->suggest_pick_hero_id_);
    std::swap(suggest_pick_hero_role_, other->suggest_pick_hero_role_);
    std::swap(terse_, other->terse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatMessage_descriptor_;
  metadata.reflection = CMsgDOTAChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatMember::kSteamIdFieldNumber;
const int CMsgDOTAChatMember::kPersonaNameFieldNumber;
const int CMsgDOTAChatMember::kChannelUserIdFieldNumber;
const int CMsgDOTAChatMember::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatMember::CMsgDOTAChatMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatMember)
}

void CMsgDOTAChatMember::InitAsDefaultInstance() {
}

CMsgDOTAChatMember::CMsgDOTAChatMember(const CMsgDOTAChatMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMember)
}

void CMsgDOTAChatMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_user_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatMember::~CMsgDOTAChatMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMember)
  SharedDtor();
}

void CMsgDOTAChatMember::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatMember_descriptor_;
}

const CMsgDOTAChatMember& CMsgDOTAChatMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatMember* CMsgDOTAChatMember::default_instance_ = NULL;

CMsgDOTAChatMember* CMsgDOTAChatMember::New() const {
  return new CMsgDOTAChatMember;
}

void CMsgDOTAChatMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(channel_user_id_, status_);
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persona_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (tag == 18) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persona_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatMember)
  return false;
#undef DO_
}

void CMsgDOTAChatMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatMember)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatMember)
}

::google::protobuf::uint8* CMsgDOTAChatMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMember)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMember)
  return target;
}

int CMsgDOTAChatMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMember::MergeFrom(const CMsgDOTAChatMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMember::CopyFrom(const CMsgDOTAChatMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMember::IsInitialized() const {

  return true;
}

void CMsgDOTAChatMember::Swap(CMsgDOTAChatMember* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatMember_descriptor_;
  metadata.reflection = CMsgDOTAChatMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAJoinChatChannelResponse_Result_descriptor_;
}
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::JOIN_SUCCESS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::INVALID_CHANNEL_TYPE;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACCOUNT_NOT_FOUND;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACH_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_IN_TOO_MANY_CHANNELS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::RATE_LIMIT_EXCEEDED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL_OVERFLOWED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::FAILED_TO_ADD_USER;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_TYPE_DISABLED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_NO_PERMISSION;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_LOCK_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_KICKED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MIN;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MAX;
const int CMsgDOTAJoinChatChannelResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAJoinChatChannelResponse::kResponseFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelNameFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelIdFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kMaxMembersFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kMembersFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelTypeFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kResultFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kGcInitiatedJoinFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelUserIdFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kWelcomeMessageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAJoinChatChannelResponse)
}

void CMsgDOTAJoinChatChannelResponse::InitAsDefaultInstance() {
}

CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinChatChannelResponse)
}

void CMsgDOTAJoinChatChannelResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = 0u;
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = GOOGLE_ULONGLONG(0);
  max_members_ = 0u;
  channel_type_ = 0;
  result_ = 0;
  gc_initiated_join_ = false;
  channel_user_id_ = 0u;
  welcome_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAJoinChatChannelResponse::~CMsgDOTAJoinChatChannelResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinChatChannelResponse)
  SharedDtor();
}

void CMsgDOTAJoinChatChannelResponse::SharedDtor() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (welcome_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcome_message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAJoinChatChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinChatChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAJoinChatChannelResponse_descriptor_;
}

const CMsgDOTAJoinChatChannelResponse& CMsgDOTAJoinChatChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAJoinChatChannelResponse* CMsgDOTAJoinChatChannelResponse::default_instance_ = NULL;

CMsgDOTAJoinChatChannelResponse* CMsgDOTAJoinChatChannelResponse::New() const {
  return new CMsgDOTAJoinChatChannelResponse;
}

void CMsgDOTAJoinChatChannelResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAJoinChatChannelResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(response_, channel_id_);
    ZR_(channel_type_, gc_initiated_join_);
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    channel_user_id_ = 0u;
    if (has_welcome_message()) {
      if (welcome_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        welcome_message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAJoinChatChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAJoinChatChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_name;
        break;
      }

      // optional string channel_name = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_channel_id;
        break;
      }

      // optional fixed64 channel_id = 3;
      case 3: {
        if (tag == 25) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_members;
        break;
      }

      // optional uint32 max_members = 4;
      case 4: {
        if (tag == 32) {
         parse_max_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        break;
      }

      // repeated .CMsgDOTAChatMember members = 5;
      case 5: {
        if (tag == 42) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        if (input->ExpectTag(48)) goto parse_channel_type;
        break;
      }

      // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
      case 6: {
        if (tag == 48) {
         parse_channel_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
      case 7: {
        if (tag == 56) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAJoinChatChannelResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gc_initiated_join;
        break;
      }

      // optional bool gc_initiated_join = 8;
      case 8: {
        if (tag == 64) {
         parse_gc_initiated_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gc_initiated_join_)));
          set_has_gc_initiated_join();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 9;
      case 9: {
        if (tag == 72) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_welcome_message;
        break;
      }

      // optional string welcome_message = 10;
      case 10: {
        if (tag == 82) {
         parse_welcome_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_message().data(), this->welcome_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "welcome_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAJoinChatChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAJoinChatChannelResponse)
  return false;
#undef DO_
}

void CMsgDOTAJoinChatChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAJoinChatChannelResponse)
  // optional uint32 response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  // optional string channel_name = 2;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional fixed64 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->channel_id(), output);
  }

  // optional uint32 max_members = 4;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_members(), output);
  }

  // repeated .CMsgDOTAChatMember members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->channel_type(), output);
  }

  // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // optional bool gc_initiated_join = 8;
  if (has_gc_initiated_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gc_initiated_join(), output);
  }

  // optional uint32 channel_user_id = 9;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel_user_id(), output);
  }

  // optional string welcome_message = 10;
  if (has_welcome_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_message().data(), this->welcome_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "welcome_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->welcome_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAJoinChatChannelResponse)
}

::google::protobuf::uint8* CMsgDOTAJoinChatChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinChatChannelResponse)
  // optional uint32 response = 1;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  // optional string channel_name = 2;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional fixed64 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->channel_id(), target);
  }

  // optional uint32 max_members = 4;
  if (has_max_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_members(), target);
  }

  // repeated .CMsgDOTAChatMember members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->members(i), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->channel_type(), target);
  }

  // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->result(), target);
  }

  // optional bool gc_initiated_join = 8;
  if (has_gc_initiated_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gc_initiated_join(), target);
  }

  // optional uint32 channel_user_id = 9;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel_user_id(), target);
  }

  // optional string welcome_message = 10;
  if (has_welcome_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_message().data(), this->welcome_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "welcome_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->welcome_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinChatChannelResponse)
  return target;
}

int CMsgDOTAJoinChatChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // optional string channel_name = 2;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional fixed64 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_members());
    }

    // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

    // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool gc_initiated_join = 8;
    if (has_gc_initiated_join()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 channel_user_id = 9;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional string welcome_message = 10;
    if (has_welcome_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_message());
    }

  }
  // repeated .CMsgDOTAChatMember members = 5;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAJoinChatChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const CMsgDOTAJoinChatChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gc_initiated_join()) {
      set_gc_initiated_join(from.gc_initiated_join());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_welcome_message()) {
      set_welcome_message(from.welcome_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const CMsgDOTAJoinChatChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannelResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAJoinChatChannelResponse::Swap(CMsgDOTAJoinChatChannelResponse* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(channel_name_, other->channel_name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(max_members_, other->max_members_);
    members_.Swap(&other->members_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(result_, other->result_);
    std::swap(gc_initiated_join_, other->gc_initiated_join_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(welcome_message_, other->welcome_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAJoinChatChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAJoinChatChannelResponse_descriptor_;
  metadata.reflection = CMsgDOTAJoinChatChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatChannelFullUpdate::kChannelIdFieldNumber;
const int CMsgDOTAChatChannelFullUpdate::kMembersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatChannelFullUpdate)
}

void CMsgDOTAChatChannelFullUpdate::InitAsDefaultInstance() {
}

CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatChannelFullUpdate)
}

void CMsgDOTAChatChannelFullUpdate::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatChannelFullUpdate::~CMsgDOTAChatChannelFullUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatChannelFullUpdate)
  SharedDtor();
}

void CMsgDOTAChatChannelFullUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatChannelFullUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelFullUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatChannelFullUpdate_descriptor_;
}

const CMsgDOTAChatChannelFullUpdate& CMsgDOTAChatChannelFullUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatChannelFullUpdate* CMsgDOTAChatChannelFullUpdate::default_instance_ = NULL;

CMsgDOTAChatChannelFullUpdate* CMsgDOTAChatChannelFullUpdate::New() const {
  return new CMsgDOTAChatChannelFullUpdate;
}

void CMsgDOTAChatChannelFullUpdate::Clear() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatChannelFullUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatChannelFullUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .CMsgDOTAChatMember members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatChannelFullUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatChannelFullUpdate)
  return false;
#undef DO_
}

void CMsgDOTAChatChannelFullUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatChannelFullUpdate)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated .CMsgDOTAChatMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatChannelFullUpdate)
}

::google::protobuf::uint8* CMsgDOTAChatChannelFullUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatChannelFullUpdate)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated .CMsgDOTAChatMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatChannelFullUpdate)
  return target;
}

int CMsgDOTAChatChannelFullUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgDOTAChatMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatChannelFullUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatChannelFullUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const CMsgDOTAChatChannelFullUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const CMsgDOTAChatChannelFullUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelFullUpdate::IsInitialized() const {

  return true;
}

void CMsgDOTAChatChannelFullUpdate::Swap(CMsgDOTAChatChannelFullUpdate* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatChannelFullUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatChannelFullUpdate_descriptor_;
  metadata.reflection = CMsgDOTAChatChannelFullUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAOtherJoinedChatChannel::kChannelIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kPersonaNameFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kSteamIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kChannelUserIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAOtherJoinedChatChannel)
}

void CMsgDOTAOtherJoinedChatChannel::InitAsDefaultInstance() {
}

CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAOtherJoinedChatChannel)
}

void CMsgDOTAOtherJoinedChatChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
  channel_user_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAOtherJoinedChatChannel::~CMsgDOTAOtherJoinedChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAOtherJoinedChatChannel)
  SharedDtor();
}

void CMsgDOTAOtherJoinedChatChannel::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAOtherJoinedChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAOtherJoinedChatChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAOtherJoinedChatChannel_descriptor_;
}

const CMsgDOTAOtherJoinedChatChannel& CMsgDOTAOtherJoinedChatChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAOtherJoinedChatChannel* CMsgDOTAOtherJoinedChatChannel::default_instance_ = NULL;

CMsgDOTAOtherJoinedChatChannel* CMsgDOTAOtherJoinedChatChannel::New() const {
  return new CMsgDOTAOtherJoinedChatChannel;
}

void CMsgDOTAOtherJoinedChatChannel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAOtherJoinedChatChannel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(steam_id_, status_);
    channel_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persona_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAOtherJoinedChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAOtherJoinedChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (tag == 18) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persona_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (tag == 25) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAOtherJoinedChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAOtherJoinedChatChannel)
  return false;
#undef DO_
}

void CMsgDOTAOtherJoinedChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAOtherJoinedChatChannel)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional fixed64 steam_id = 3;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  // optional uint32 channel_user_id = 4;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_user_id(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAOtherJoinedChatChannel)
}

::google::protobuf::uint8* CMsgDOTAOtherJoinedChatChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAOtherJoinedChatChannel)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional fixed64 steam_id = 3;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  // optional uint32 channel_user_id = 4;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_user_id(), target);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAOtherJoinedChatChannel)
  return target;
}

int CMsgDOTAOtherJoinedChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 4;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAOtherJoinedChatChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAOtherJoinedChatChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherJoinedChatChannel::IsInitialized() const {

  return true;
}

void CMsgDOTAOtherJoinedChatChannel::Swap(CMsgDOTAOtherJoinedChatChannel* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAOtherJoinedChatChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAOtherJoinedChatChannel_descriptor_;
  metadata.reflection = CMsgDOTAOtherJoinedChatChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAOtherLeftChatChannel::kChannelIdFieldNumber;
const int CMsgDOTAOtherLeftChatChannel::kSteamIdFieldNumber;
const int CMsgDOTAOtherLeftChatChannel::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAOtherLeftChatChannel)
}

void CMsgDOTAOtherLeftChatChannel::InitAsDefaultInstance() {
}

CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAOtherLeftChatChannel)
}

void CMsgDOTAOtherLeftChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  steam_id_ = GOOGLE_ULONGLONG(0);
  channel_user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAOtherLeftChatChannel::~CMsgDOTAOtherLeftChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAOtherLeftChatChannel)
  SharedDtor();
}

void CMsgDOTAOtherLeftChatChannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAOtherLeftChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAOtherLeftChatChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAOtherLeftChatChannel_descriptor_;
}

const CMsgDOTAOtherLeftChatChannel& CMsgDOTAOtherLeftChatChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAOtherLeftChatChannel* CMsgDOTAOtherLeftChatChannel::default_instance_ = NULL;

CMsgDOTAOtherLeftChatChannel* CMsgDOTAOtherLeftChatChannel::New() const {
  return new CMsgDOTAOtherLeftChatChannel;
}

void CMsgDOTAOtherLeftChatChannel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAOtherLeftChatChannel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channel_id_, channel_user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAOtherLeftChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAOtherLeftChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAOtherLeftChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAOtherLeftChatChannel)
  return false;
#undef DO_
}

void CMsgDOTAOtherLeftChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAOtherLeftChatChannel)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAOtherLeftChatChannel)
}

::google::protobuf::uint8* CMsgDOTAOtherLeftChatChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAOtherLeftChatChannel)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAOtherLeftChatChannel)
  return target;
}

int CMsgDOTAOtherLeftChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAOtherLeftChatChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAOtherLeftChatChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const CMsgDOTAOtherLeftChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const CMsgDOTAOtherLeftChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherLeftChatChannel::IsInitialized() const {

  return true;
}

void CMsgDOTAOtherLeftChatChannel::Swap(CMsgDOTAOtherLeftChatChannel* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAOtherLeftChatChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAOtherLeftChatChannel_descriptor_;
  metadata.reflection = CMsgDOTAOtherLeftChatChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kSteamIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kPersonaNameFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kChannelUserIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::InitAsDefaultInstance() {
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_user_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember::~CMsgDOTAChatChannelMemberUpdate_JoinedMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  SharedDtor();
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelMemberUpdate_JoinedMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatChannelMemberUpdate_JoinedMember_descriptor_;
}

const CMsgDOTAChatChannelMemberUpdate_JoinedMember& CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance_ = NULL;

CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate_JoinedMember::New() const {
  return new CMsgDOTAChatChannelMemberUpdate_JoinedMember;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatChannelMemberUpdate_JoinedMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(channel_user_id_, status_);
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persona_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (tag == 18) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persona_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return false;
#undef DO_
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

::google::protobuf::uint8* CMsgDOTAChatChannelMemberUpdate_JoinedMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return target;
}

int CMsgDOTAChatChannelMemberUpdate_JoinedMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate_JoinedMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatChannelMemberUpdate_JoinedMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::IsInitialized() const {

  return true;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Swap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatChannelMemberUpdate_JoinedMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatChannelMemberUpdate_JoinedMember_descriptor_;
  metadata.reflection = CMsgDOTAChatChannelMemberUpdate_JoinedMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAChatChannelMemberUpdate::kChannelIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate::kLeftSteamIdsFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate::kJoinedMembersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatChannelMemberUpdate)
}

void CMsgDOTAChatChannelMemberUpdate::InitAsDefaultInstance() {
}

CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate(const CMsgDOTAChatChannelMemberUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatChannelMemberUpdate)
}

void CMsgDOTAChatChannelMemberUpdate::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatChannelMemberUpdate::~CMsgDOTAChatChannelMemberUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatChannelMemberUpdate)
  SharedDtor();
}

void CMsgDOTAChatChannelMemberUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatChannelMemberUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelMemberUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatChannelMemberUpdate_descriptor_;
}

const CMsgDOTAChatChannelMemberUpdate& CMsgDOTAChatChannelMemberUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatChannelMemberUpdate* CMsgDOTAChatChannelMemberUpdate::default_instance_ = NULL;

CMsgDOTAChatChannelMemberUpdate* CMsgDOTAChatChannelMemberUpdate::New() const {
  return new CMsgDOTAChatChannelMemberUpdate;
}

void CMsgDOTAChatChannelMemberUpdate::Clear() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  left_steam_ids_.Clear();
  joined_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatChannelMemberUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatChannelMemberUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_left_steam_ids;
        break;
      }

      // repeated fixed64 left_steam_ids = 2;
      case 2: {
        if (tag == 17) {
         parse_left_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_left_steam_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_left_steam_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_left_steam_ids;
        if (input->ExpectTag(26)) goto parse_joined_members;
        break;
      }

      // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
      case 3: {
        if (tag == 26) {
         parse_joined_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joined_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_joined_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatChannelMemberUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatChannelMemberUpdate)
  return false;
#undef DO_
}

void CMsgDOTAChatChannelMemberUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatChannelMemberUpdate)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated fixed64 left_steam_ids = 2;
  for (int i = 0; i < this->left_steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->left_steam_ids(i), output);
  }

  // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (int i = 0; i < this->joined_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->joined_members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatChannelMemberUpdate)
}

::google::protobuf::uint8* CMsgDOTAChatChannelMemberUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatChannelMemberUpdate)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated fixed64 left_steam_ids = 2;
  for (int i = 0; i < this->left_steam_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->left_steam_ids(i), target);
  }

  // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (int i = 0; i < this->joined_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->joined_members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatChannelMemberUpdate)
  return target;
}

int CMsgDOTAChatChannelMemberUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

  }
  // repeated fixed64 left_steam_ids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->left_steam_ids_size();
    total_size += 1 * this->left_steam_ids_size() + data_size;
  }

  // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  total_size += 1 * this->joined_members_size();
  for (int i = 0; i < this->joined_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joined_members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatChannelMemberUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  left_steam_ids_.MergeFrom(from.left_steam_ids_);
  joined_members_.MergeFrom(from.joined_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate::IsInitialized() const {

  return true;
}

void CMsgDOTAChatChannelMemberUpdate::Swap(CMsgDOTAChatChannelMemberUpdate* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    left_steam_ids_.Swap(&other->left_steam_ids_);
    joined_members_.Swap(&other->joined_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatChannelMemberUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatChannelMemberUpdate_descriptor_;
  metadata.reflection = CMsgDOTAChatChannelMemberUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestChatChannelList)
}

void CMsgDOTARequestChatChannelList::InitAsDefaultInstance() {
}

CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelList)
}

void CMsgDOTARequestChatChannelList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestChatChannelList::~CMsgDOTARequestChatChannelList() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelList)
  SharedDtor();
}

void CMsgDOTARequestChatChannelList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestChatChannelList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestChatChannelList_descriptor_;
}

const CMsgDOTARequestChatChannelList& CMsgDOTARequestChatChannelList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTARequestChatChannelList* CMsgDOTARequestChatChannelList::default_instance_ = NULL;

CMsgDOTARequestChatChannelList* CMsgDOTARequestChatChannelList::New() const {
  return new CMsgDOTARequestChatChannelList;
}

void CMsgDOTARequestChatChannelList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestChatChannelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestChatChannelList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestChatChannelList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestChatChannelList)
  return false;
#undef DO_
}

void CMsgDOTARequestChatChannelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestChatChannelList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestChatChannelList)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelList)
  return target;
}

int CMsgDOTARequestChatChannelList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestChatChannelList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestChatChannelList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelList::MergeFrom(const CMsgDOTARequestChatChannelList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestChatChannelList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelList::CopyFrom(const CMsgDOTARequestChatChannelList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelList::IsInitialized() const {

  return true;
}

void CMsgDOTARequestChatChannelList::Swap(CMsgDOTARequestChatChannelList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestChatChannelList_descriptor_;
  metadata.reflection = CMsgDOTARequestChatChannelList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kChannelNameFieldNumber;
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kNumMembersFieldNumber;
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kChannelTypeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::InitAsDefaultInstance() {
}

CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_members_ = 0u;
  channel_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestChatChannelListResponse_ChatChannel::~CMsgDOTARequestChatChannelListResponse_ChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  SharedDtor();
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedDtor() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelListResponse_ChatChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestChatChannelListResponse_ChatChannel_descriptor_;
}

const CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance_ = NULL;

CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse_ChatChannel::New() const {
  return new CMsgDOTARequestChatChannelListResponse_ChatChannel;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTARequestChatChannelListResponse_ChatChannel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(num_members_, channel_type_);
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_members;
        break;
      }

      // optional uint32 num_members = 2;
      case 2: {
        if (tag == 16) {
         parse_num_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_members_)));
          set_has_num_members();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_type;
        break;
      }

      // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
      case 3: {
        if (tag == 24) {
         parse_channel_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return false;
#undef DO_
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  // optional string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional uint32 num_members = 2;
  if (has_num_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_members(), output);
  }

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelListResponse_ChatChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  // optional string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (has_num_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_members(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return target;
}

int CMsgDOTARequestChatChannelListResponse_ChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional uint32 num_members = 2;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_members());
    }

    // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse_ChatChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestChatChannelListResponse_ChatChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_num_members()) {
      set_num_members(from.num_members());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::IsInitialized() const {

  return true;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  if (other != this) {
    std::swap(channel_name_, other->channel_name_);
    std::swap(num_members_, other->num_members_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelListResponse_ChatChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestChatChannelListResponse_ChatChannel_descriptor_;
  metadata.reflection = CMsgDOTARequestChatChannelListResponse_ChatChannel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTARequestChatChannelListResponse::kChannelsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestChatChannelListResponse)
}

void CMsgDOTARequestChatChannelListResponse::InitAsDefaultInstance() {
}

CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelListResponse)
}

void CMsgDOTARequestChatChannelListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestChatChannelListResponse::~CMsgDOTARequestChatChannelListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelListResponse)
  SharedDtor();
}

void CMsgDOTARequestChatChannelListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestChatChannelListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestChatChannelListResponse_descriptor_;
}

const CMsgDOTARequestChatChannelListResponse& CMsgDOTARequestChatChannelListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTARequestChatChannelListResponse* CMsgDOTARequestChatChannelListResponse::default_instance_ = NULL;

CMsgDOTARequestChatChannelListResponse* CMsgDOTARequestChatChannelListResponse::New() const {
  return new CMsgDOTARequestChatChannelListResponse;
}

void CMsgDOTARequestChatChannelListResponse::Clear() {
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestChatChannelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestChatChannelListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
      case 1: {
        if (tag == 10) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestChatChannelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestChatChannelListResponse)
  return false;
#undef DO_
}

void CMsgDOTARequestChatChannelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestChatChannelListResponse)
  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestChatChannelListResponse)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelListResponse)
  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelListResponse)
  return target;
}

int CMsgDOTARequestChatChannelListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestChatChannelListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const CMsgDOTARequestChatChannelListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const CMsgDOTARequestChatChannelListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse::IsInitialized() const {

  return true;
}

void CMsgDOTARequestChatChannelListResponse::Swap(CMsgDOTARequestChatChannelListResponse* other) {
  if (other != this) {
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestChatChannelListResponse_descriptor_;
  metadata.reflection = CMsgDOTARequestChatChannelListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatGetUserList::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatGetUserList)
}

void CMsgDOTAChatGetUserList::InitAsDefaultInstance() {
}

CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList(const CMsgDOTAChatGetUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserList)
}

void CMsgDOTAChatGetUserList::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatGetUserList::~CMsgDOTAChatGetUserList() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserList)
  SharedDtor();
}

void CMsgDOTAChatGetUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatGetUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatGetUserList_descriptor_;
}

const CMsgDOTAChatGetUserList& CMsgDOTAChatGetUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatGetUserList* CMsgDOTAChatGetUserList::default_instance_ = NULL;

CMsgDOTAChatGetUserList* CMsgDOTAChatGetUserList::New() const {
  return new CMsgDOTAChatGetUserList;
}

void CMsgDOTAChatGetUserList::Clear() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatGetUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatGetUserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatGetUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatGetUserList)
  return false;
#undef DO_
}

void CMsgDOTAChatGetUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatGetUserList)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatGetUserList)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserList)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserList)
  return target;
}

int CMsgDOTAChatGetUserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatGetUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatGetUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserList::MergeFrom(const CMsgDOTAChatGetUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatGetUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserList::CopyFrom(const CMsgDOTAChatGetUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserList::IsInitialized() const {

  return true;
}

void CMsgDOTAChatGetUserList::Swap(CMsgDOTAChatGetUserList* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatGetUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatGetUserList_descriptor_;
  metadata.reflection = CMsgDOTAChatGetUserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatGetUserListResponse_Member::kSteamIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kPersonaNameFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kChannelUserIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatGetUserListResponse.Member)
}

void CMsgDOTAChatGetUserListResponse_Member::InitAsDefaultInstance() {
}

CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserListResponse.Member)
}

void CMsgDOTAChatGetUserListResponse_Member::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_user_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatGetUserListResponse_Member::~CMsgDOTAChatGetUserListResponse_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserListResponse.Member)
  SharedDtor();
}

void CMsgDOTAChatGetUserListResponse_Member::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatGetUserListResponse_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserListResponse_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatGetUserListResponse_Member_descriptor_;
}

const CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse_Member::default_instance_ = NULL;

CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse_Member::New() const {
  return new CMsgDOTAChatGetUserListResponse_Member;
}

void CMsgDOTAChatGetUserListResponse_Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatGetUserListResponse_Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(channel_user_id_, status_);
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persona_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatGetUserListResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatGetUserListResponse.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (tag == 18) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persona_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_user_id;
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
          set_has_channel_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatGetUserListResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatGetUserListResponse.Member)
  return false;
#undef DO_
}

void CMsgDOTAChatGetUserListResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatGetUserListResponse.Member)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatGetUserListResponse.Member)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserListResponse_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserListResponse.Member)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (has_channel_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserListResponse.Member)
  return target;
}

int CMsgDOTAChatGetUserListResponse_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatGetUserListResponse_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse_Member::IsInitialized() const {

  return true;
}

void CMsgDOTAChatGetUserListResponse_Member::Swap(CMsgDOTAChatGetUserListResponse_Member* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatGetUserListResponse_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatGetUserListResponse_Member_descriptor_;
  metadata.reflection = CMsgDOTAChatGetUserListResponse_Member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAChatGetUserListResponse::kChannelIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse::kMembersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatGetUserListResponse)
}

void CMsgDOTAChatGetUserListResponse::InitAsDefaultInstance() {
}

CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserListResponse)
}

void CMsgDOTAChatGetUserListResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatGetUserListResponse::~CMsgDOTAChatGetUserListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserListResponse)
  SharedDtor();
}

void CMsgDOTAChatGetUserListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatGetUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatGetUserListResponse_descriptor_;
}

const CMsgDOTAChatGetUserListResponse& CMsgDOTAChatGetUserListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatGetUserListResponse* CMsgDOTAChatGetUserListResponse::default_instance_ = NULL;

CMsgDOTAChatGetUserListResponse* CMsgDOTAChatGetUserListResponse::New() const {
  return new CMsgDOTAChatGetUserListResponse;
}

void CMsgDOTAChatGetUserListResponse::Clear() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatGetUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatGetUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatGetUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatGetUserListResponse)
  return false;
#undef DO_
}

void CMsgDOTAChatGetUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatGetUserListResponse)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatGetUserListResponse)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserListResponse)
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserListResponse)
  return target;
}

int CMsgDOTAChatGetUserListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatGetUserListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const CMsgDOTAChatGetUserListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const CMsgDOTAChatGetUserListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAChatGetUserListResponse::Swap(CMsgDOTAChatGetUserListResponse* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatGetUserListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatGetUserListResponse_descriptor_;
  metadata.reflection = CMsgDOTAChatGetUserListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatGetMemberCount::kChannelNameFieldNumber;
const int CMsgDOTAChatGetMemberCount::kChannelTypeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatGetMemberCount)
}

void CMsgDOTAChatGetMemberCount::InitAsDefaultInstance() {
}

CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetMemberCount)
}

void CMsgDOTAChatGetMemberCount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatGetMemberCount::~CMsgDOTAChatGetMemberCount() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetMemberCount)
  SharedDtor();
}

void CMsgDOTAChatGetMemberCount::SharedDtor() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatGetMemberCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetMemberCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatGetMemberCount_descriptor_;
}

const CMsgDOTAChatGetMemberCount& CMsgDOTAChatGetMemberCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatGetMemberCount* CMsgDOTAChatGetMemberCount::default_instance_ = NULL;

CMsgDOTAChatGetMemberCount* CMsgDOTAChatGetMemberCount::New() const {
  return new CMsgDOTAChatGetMemberCount;
}

void CMsgDOTAChatGetMemberCount::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_name_->clear();
      }
    }
    channel_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatGetMemberCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatGetMemberCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_type;
        break;
      }

      // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (tag == 16) {
         parse_channel_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatGetMemberCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatGetMemberCount)
  return false;
#undef DO_
}

void CMsgDOTAChatGetMemberCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatGetMemberCount)
  // optional string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatGetMemberCount)
}

::google::protobuf::uint8* CMsgDOTAChatGetMemberCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetMemberCount)
  // optional string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetMemberCount)
  return target;
}

int CMsgDOTAChatGetMemberCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatGetMemberCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const CMsgDOTAChatGetMemberCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const CMsgDOTAChatGetMemberCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCount::IsInitialized() const {

  return true;
}

void CMsgDOTAChatGetMemberCount::Swap(CMsgDOTAChatGetMemberCount* other) {
  if (other != this) {
    std::swap(channel_name_, other->channel_name_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatGetMemberCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatGetMemberCount_descriptor_;
  metadata.reflection = CMsgDOTAChatGetMemberCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatGetMemberCountResponse::kChannelNameFieldNumber;
const int CMsgDOTAChatGetMemberCountResponse::kChannelTypeFieldNumber;
const int CMsgDOTAChatGetMemberCountResponse::kMemberCountFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatGetMemberCountResponse)
}

void CMsgDOTAChatGetMemberCountResponse::InitAsDefaultInstance() {
}

CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetMemberCountResponse)
}

void CMsgDOTAChatGetMemberCountResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
  member_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatGetMemberCountResponse::~CMsgDOTAChatGetMemberCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetMemberCountResponse)
  SharedDtor();
}

void CMsgDOTAChatGetMemberCountResponse::SharedDtor() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatGetMemberCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetMemberCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatGetMemberCountResponse_descriptor_;
}

const CMsgDOTAChatGetMemberCountResponse& CMsgDOTAChatGetMemberCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatGetMemberCountResponse* CMsgDOTAChatGetMemberCountResponse::default_instance_ = NULL;

CMsgDOTAChatGetMemberCountResponse* CMsgDOTAChatGetMemberCountResponse::New() const {
  return new CMsgDOTAChatGetMemberCountResponse;
}

void CMsgDOTAChatGetMemberCountResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatGetMemberCountResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(channel_type_, member_count_);
    if (has_channel_name()) {
      if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatGetMemberCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatGetMemberCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_type;
        break;
      }

      // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (tag == 16) {
         parse_channel_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 3;
      case 3: {
        if (tag == 24) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatGetMemberCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatGetMemberCountResponse)
  return false;
#undef DO_
}

void CMsgDOTAChatGetMemberCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatGetMemberCountResponse)
  // optional string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  // optional uint32 member_count = 3;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatGetMemberCountResponse)
}

::google::protobuf::uint8* CMsgDOTAChatGetMemberCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetMemberCountResponse)
  // optional string channel_name = 1;
  if (has_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  // optional uint32 member_count = 3;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->member_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetMemberCountResponse)
  return target;
}

int CMsgDOTAChatGetMemberCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

    // optional uint32 member_count = 3;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatGetMemberCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_name()) {
      set_channel_name(from.channel_name());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCountResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAChatGetMemberCountResponse::Swap(CMsgDOTAChatGetMemberCountResponse* other) {
  if (other != this) {
    std::swap(channel_name_, other->channel_name_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(member_count_, other->member_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatGetMemberCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatGetMemberCountResponse_descriptor_;
  metadata.reflection = CMsgDOTAChatGetMemberCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChatRegionsEnabled_Region::kMinLatitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMaxLatitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMinLongitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMaxLongitudeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatRegionsEnabled.Region)
}

void CMsgDOTAChatRegionsEnabled_Region::InitAsDefaultInstance() {
}

CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatRegionsEnabled.Region)
}

void CMsgDOTAChatRegionsEnabled_Region::SharedCtor() {
  _cached_size_ = 0;
  min_latitude_ = 0;
  max_latitude_ = 0;
  min_longitude_ = 0;
  max_longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatRegionsEnabled_Region::~CMsgDOTAChatRegionsEnabled_Region() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatRegionsEnabled.Region)
  SharedDtor();
}

void CMsgDOTAChatRegionsEnabled_Region::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatRegionsEnabled_Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatRegionsEnabled_Region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatRegionsEnabled_Region_descriptor_;
}

const CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled_Region::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled_Region::default_instance_ = NULL;

CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled_Region::New() const {
  return new CMsgDOTAChatRegionsEnabled_Region;
}

void CMsgDOTAChatRegionsEnabled_Region::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChatRegionsEnabled_Region*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_latitude_, max_longitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatRegionsEnabled_Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatRegionsEnabled.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_latitude = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_latitude_)));
          set_has_min_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_latitude;
        break;
      }

      // optional float max_latitude = 2;
      case 2: {
        if (tag == 21) {
         parse_max_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_latitude_)));
          set_has_max_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min_longitude;
        break;
      }

      // optional float min_longitude = 3;
      case 3: {
        if (tag == 29) {
         parse_min_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_longitude_)));
          set_has_min_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_longitude;
        break;
      }

      // optional float max_longitude = 4;
      case 4: {
        if (tag == 37) {
         parse_max_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_longitude_)));
          set_has_max_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatRegionsEnabled.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatRegionsEnabled.Region)
  return false;
#undef DO_
}

void CMsgDOTAChatRegionsEnabled_Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatRegionsEnabled.Region)
  // optional float min_latitude = 1;
  if (has_min_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_latitude(), output);
  }

  // optional float max_latitude = 2;
  if (has_max_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_latitude(), output);
  }

  // optional float min_longitude = 3;
  if (has_min_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_longitude(), output);
  }

  // optional float max_longitude = 4;
  if (has_max_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatRegionsEnabled.Region)
}

::google::protobuf::uint8* CMsgDOTAChatRegionsEnabled_Region::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatRegionsEnabled.Region)
  // optional float min_latitude = 1;
  if (has_min_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_latitude(), target);
  }

  // optional float max_latitude = 2;
  if (has_max_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_latitude(), target);
  }

  // optional float min_longitude = 3;
  if (has_min_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_longitude(), target);
  }

  // optional float max_longitude = 4;
  if (has_max_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatRegionsEnabled.Region)
  return target;
}

int CMsgDOTAChatRegionsEnabled_Region::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float min_latitude = 1;
    if (has_min_latitude()) {
      total_size += 1 + 4;
    }

    // optional float max_latitude = 2;
    if (has_max_latitude()) {
      total_size += 1 + 4;
    }

    // optional float min_longitude = 3;
    if (has_min_longitude()) {
      total_size += 1 + 4;
    }

    // optional float max_longitude = 4;
    if (has_max_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled_Region* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatRegionsEnabled_Region*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_latitude()) {
      set_min_latitude(from.min_latitude());
    }
    if (from.has_max_latitude()) {
      set_max_latitude(from.max_latitude());
    }
    if (from.has_min_longitude()) {
      set_min_longitude(from.min_longitude());
    }
    if (from.has_max_longitude()) {
      set_max_longitude(from.max_longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled_Region::IsInitialized() const {

  return true;
}

void CMsgDOTAChatRegionsEnabled_Region::Swap(CMsgDOTAChatRegionsEnabled_Region* other) {
  if (other != this) {
    std::swap(min_latitude_, other->min_latitude_);
    std::swap(max_latitude_, other->max_latitude_);
    std::swap(min_longitude_, other->min_longitude_);
    std::swap(max_longitude_, other->max_longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatRegionsEnabled_Region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatRegionsEnabled_Region_descriptor_;
  metadata.reflection = CMsgDOTAChatRegionsEnabled_Region_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAChatRegionsEnabled::kEnableAllRegionsFieldNumber;
const int CMsgDOTAChatRegionsEnabled::kEnabledRegionsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChatRegionsEnabled)
}

void CMsgDOTAChatRegionsEnabled::InitAsDefaultInstance() {
}

CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatRegionsEnabled)
}

void CMsgDOTAChatRegionsEnabled::SharedCtor() {
  _cached_size_ = 0;
  enable_all_regions_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChatRegionsEnabled::~CMsgDOTAChatRegionsEnabled() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatRegionsEnabled)
  SharedDtor();
}

void CMsgDOTAChatRegionsEnabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChatRegionsEnabled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatRegionsEnabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChatRegionsEnabled_descriptor_;
}

const CMsgDOTAChatRegionsEnabled& CMsgDOTAChatRegionsEnabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  return *default_instance_;
}

CMsgDOTAChatRegionsEnabled* CMsgDOTAChatRegionsEnabled::default_instance_ = NULL;

CMsgDOTAChatRegionsEnabled* CMsgDOTAChatRegionsEnabled::New() const {
  return new CMsgDOTAChatRegionsEnabled;
}

void CMsgDOTAChatRegionsEnabled::Clear() {
  enable_all_regions_ = false;
  enabled_regions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChatRegionsEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChatRegionsEnabled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_all_regions = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_all_regions_)));
          set_has_enable_all_regions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enabled_regions;
        break;
      }

      // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
      case 2: {
        if (tag == 18) {
         parse_enabled_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enabled_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enabled_regions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChatRegionsEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChatRegionsEnabled)
  return false;
#undef DO_
}

void CMsgDOTAChatRegionsEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChatRegionsEnabled)
  // optional bool enable_all_regions = 1;
  if (has_enable_all_regions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_all_regions(), output);
  }

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (int i = 0; i < this->enabled_regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enabled_regions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChatRegionsEnabled)
}

::google::protobuf::uint8* CMsgDOTAChatRegionsEnabled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatRegionsEnabled)
  // optional bool enable_all_regions = 1;
  if (has_enable_all_regions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_all_regions(), target);
  }

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (int i = 0; i < this->enabled_regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enabled_regions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatRegionsEnabled)
  return target;
}

int CMsgDOTAChatRegionsEnabled::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable_all_regions = 1;
    if (has_enable_all_regions()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  total_size += 1 * this->enabled_regions_size();
  for (int i = 0; i < this->enabled_regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enabled_regions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChatRegionsEnabled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const CMsgDOTAChatRegionsEnabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  enabled_regions_.MergeFrom(from.enabled_regions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_all_regions()) {
      set_enable_all_regions(from.enable_all_regions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const CMsgDOTAChatRegionsEnabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled::IsInitialized() const {

  return true;
}

void CMsgDOTAChatRegionsEnabled::Swap(CMsgDOTAChatRegionsEnabled* other) {
  if (other != this) {
    std::swap(enable_all_regions_, other->enable_all_regions_);
    enabled_regions_.Swap(&other->enabled_regions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChatRegionsEnabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChatRegionsEnabled_descriptor_;
  metadata.reflection = CMsgDOTAChatRegionsEnabled_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
