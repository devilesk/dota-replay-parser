// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fclient_5fchat_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fclient_5fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

class CMsgClientToGCPrivateChatInvite;
class CMsgClientToGCPrivateChatKick;
class CMsgClientToGCPrivateChatPromote;
class CMsgClientToGCPrivateChatDemote;
class CMsgGCToClientPrivateChatResponse;
class CMsgClientToGCPrivateChatInfoRequest;
class CMsgGCToClientPrivateChatInfoResponse;
class CMsgGCToClientPrivateChatInfoResponse_Member;
class CMsgDOTAJoinChatChannel;
class CMsgDOTALeaveChatChannel;
class CMsgGCChatReportPublicSpam;
class CMsgDOTAClientIgnoredUser;
class CMsgDOTAChatMessage;
class CMsgDOTAChatMessage_DiceRoll;
class CMsgDOTAChatMember;
class CMsgDOTAJoinChatChannelResponse;
class CMsgDOTAChatChannelFullUpdate;
class CMsgDOTAOtherJoinedChatChannel;
class CMsgDOTAOtherLeftChatChannel;
class CMsgDOTAChatChannelMemberUpdate;
class CMsgDOTAChatChannelMemberUpdate_JoinedMember;
class CMsgDOTARequestChatChannelList;
class CMsgDOTARequestChatChannelListResponse;
class CMsgDOTARequestChatChannelListResponse_ChatChannel;
class CMsgDOTAChatGetUserList;
class CMsgDOTAChatGetUserListResponse;
class CMsgDOTAChatGetUserListResponse_Member;
class CMsgDOTAChatGetMemberCount;
class CMsgDOTAChatGetMemberCountResponse;
class CMsgDOTAChatRegionsEnabled;
class CMsgDOTAChatRegionsEnabled_Region;

enum CMsgGCToClientPrivateChatResponse_Result {
  CMsgGCToClientPrivateChatResponse_Result_SUCCESS = 0,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_LOCK = 1,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_SQL_TRANSACTION = 2,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_SDO_LOAD = 3,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_PERMISSION = 4,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_MEMBER = 5,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NOT_A_MEMBER = 7,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_REMAINING_ADMINS = 8,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_ROOM = 9,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_RATE_LIMITED = 10,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_CHANNEL_NAME = 11,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_USER = 12,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_ERROR = 13,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CANNOT_KICK_ADMIN = 14,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN = 15
};
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value);
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse_Result_Result_MIN = CMsgGCToClientPrivateChatResponse_Result_SUCCESS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse_Result_Result_MAX = CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN;
const int CMsgGCToClientPrivateChatResponse_Result_Result_ARRAYSIZE = CMsgGCToClientPrivateChatResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor();
inline const ::std::string& CMsgGCToClientPrivateChatResponse_Result_Name(CMsgGCToClientPrivateChatResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgGCToClientPrivateChatResponse_Result_descriptor(), value);
}
inline bool CMsgGCToClientPrivateChatResponse_Result_Parse(
    const ::std::string& name, CMsgGCToClientPrivateChatResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgGCToClientPrivateChatResponse_Result>(
    CMsgGCToClientPrivateChatResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAJoinChatChannelResponse_Result {
  CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS = 0,
  CMsgDOTAJoinChatChannelResponse_Result_INVALID_CHANNEL_TYPE = 1,
  CMsgDOTAJoinChatChannelResponse_Result_ACCOUNT_NOT_FOUND = 2,
  CMsgDOTAJoinChatChannelResponse_Result_ACH_FAILED = 3,
  CMsgDOTAJoinChatChannelResponse_Result_USER_IN_TOO_MANY_CHANNELS = 4,
  CMsgDOTAJoinChatChannelResponse_Result_RATE_LIMIT_EXCEEDED = 5,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL = 6,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL_OVERFLOWED = 7,
  CMsgDOTAJoinChatChannelResponse_Result_FAILED_TO_ADD_USER = 8,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_TYPE_DISABLED = 9,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_FAILED = 10,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_NO_PERMISSION = 11,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_LOCK_FAILED = 12,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED = 13
};
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value);
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse_Result_Result_MIN = CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse_Result_Result_MAX = CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED;
const int CMsgDOTAJoinChatChannelResponse_Result_Result_ARRAYSIZE = CMsgDOTAJoinChatChannelResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor();
inline const ::std::string& CMsgDOTAJoinChatChannelResponse_Result_Name(CMsgDOTAJoinChatChannelResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgDOTAJoinChatChannelResponse_Result_descriptor(), value);
}
inline bool CMsgDOTAJoinChatChannelResponse_Result_Parse(
    const ::std::string& name, CMsgDOTAJoinChatChannelResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgDOTAJoinChatChannelResponse_Result>(
    CMsgDOTAJoinChatChannelResponse_Result_descriptor(), name, value);
}
// ===================================================================

class CMsgClientToGCPrivateChatInvite : public ::google::protobuf::Message {
 public:
  CMsgClientToGCPrivateChatInvite();
  virtual ~CMsgClientToGCPrivateChatInvite();

  CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from);

  inline CMsgClientToGCPrivateChatInvite& operator=(const CMsgClientToGCPrivateChatInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCPrivateChatInvite& default_instance();

  void Swap(CMsgClientToGCPrivateChatInvite* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCPrivateChatInvite& from);
  void MergeFrom(const CMsgClientToGCPrivateChatInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 invited_account_id = 2;
  inline bool has_invited_account_id() const;
  inline void clear_invited_account_id();
  static const int kInvitedAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 invited_account_id() const;
  inline void set_invited_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatInvite)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();
  inline void set_has_invited_account_id();
  inline void clear_has_invited_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  ::google::protobuf::uint32 invited_account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCPrivateChatInvite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatKick : public ::google::protobuf::Message {
 public:
  CMsgClientToGCPrivateChatKick();
  virtual ~CMsgClientToGCPrivateChatKick();

  CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from);

  inline CMsgClientToGCPrivateChatKick& operator=(const CMsgClientToGCPrivateChatKick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCPrivateChatKick& default_instance();

  void Swap(CMsgClientToGCPrivateChatKick* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatKick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCPrivateChatKick& from);
  void MergeFrom(const CMsgClientToGCPrivateChatKick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 kick_account_id = 2;
  inline bool has_kick_account_id() const;
  inline void clear_kick_account_id();
  static const int kKickAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 kick_account_id() const;
  inline void set_kick_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatKick)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();
  inline void set_has_kick_account_id();
  inline void clear_has_kick_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  ::google::protobuf::uint32 kick_account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCPrivateChatKick* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatPromote : public ::google::protobuf::Message {
 public:
  CMsgClientToGCPrivateChatPromote();
  virtual ~CMsgClientToGCPrivateChatPromote();

  CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from);

  inline CMsgClientToGCPrivateChatPromote& operator=(const CMsgClientToGCPrivateChatPromote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCPrivateChatPromote& default_instance();

  void Swap(CMsgClientToGCPrivateChatPromote* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatPromote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCPrivateChatPromote& from);
  void MergeFrom(const CMsgClientToGCPrivateChatPromote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 promote_account_id = 2;
  inline bool has_promote_account_id() const;
  inline void clear_promote_account_id();
  static const int kPromoteAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 promote_account_id() const;
  inline void set_promote_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatPromote)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();
  inline void set_has_promote_account_id();
  inline void clear_has_promote_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  ::google::protobuf::uint32 promote_account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCPrivateChatPromote* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatDemote : public ::google::protobuf::Message {
 public:
  CMsgClientToGCPrivateChatDemote();
  virtual ~CMsgClientToGCPrivateChatDemote();

  CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from);

  inline CMsgClientToGCPrivateChatDemote& operator=(const CMsgClientToGCPrivateChatDemote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCPrivateChatDemote& default_instance();

  void Swap(CMsgClientToGCPrivateChatDemote* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatDemote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCPrivateChatDemote& from);
  void MergeFrom(const CMsgClientToGCPrivateChatDemote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional uint32 demote_account_id = 2;
  inline bool has_demote_account_id() const;
  inline void clear_demote_account_id();
  static const int kDemoteAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 demote_account_id() const;
  inline void set_demote_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatDemote)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();
  inline void set_has_demote_account_id();
  inline void clear_has_demote_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  ::google::protobuf::uint32 demote_account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCPrivateChatDemote* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToClientPrivateChatResponse();
  virtual ~CMsgGCToClientPrivateChatResponse();

  CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from);

  inline CMsgGCToClientPrivateChatResponse& operator=(const CMsgGCToClientPrivateChatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientPrivateChatResponse& default_instance();

  void Swap(CMsgGCToClientPrivateChatResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientPrivateChatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientPrivateChatResponse& from);
  void MergeFrom(const CMsgGCToClientPrivateChatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCToClientPrivateChatResponse_Result Result;
  static const Result SUCCESS = CMsgGCToClientPrivateChatResponse_Result_SUCCESS;
  static const Result FAILURE_CREATION_LOCK = CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_LOCK;
  static const Result FAILURE_SQL_TRANSACTION = CMsgGCToClientPrivateChatResponse_Result_FAILURE_SQL_TRANSACTION;
  static const Result FAILURE_SDO_LOAD = CMsgGCToClientPrivateChatResponse_Result_FAILURE_SDO_LOAD;
  static const Result FAILURE_NO_PERMISSION = CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_PERMISSION;
  static const Result FAILURE_ALREADY_MEMBER = CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_MEMBER;
  static const Result FAILURE_NOT_A_MEMBER = CMsgGCToClientPrivateChatResponse_Result_FAILURE_NOT_A_MEMBER;
  static const Result FAILURE_NO_REMAINING_ADMINS = CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_REMAINING_ADMINS;
  static const Result FAILURE_NO_ROOM = CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_ROOM;
  static const Result FAILURE_CREATION_RATE_LIMITED = CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_RATE_LIMITED;
  static const Result FAILURE_UNKNOWN_CHANNEL_NAME = CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_CHANNEL_NAME;
  static const Result FAILURE_UNKNOWN_USER = CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_USER;
  static const Result FAILURE_UNKNOWN_ERROR = CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_ERROR;
  static const Result FAILURE_CANNOT_KICK_ADMIN = CMsgGCToClientPrivateChatResponse_Result_FAILURE_CANNOT_KICK_ADMIN;
  static const Result FAILURE_ALREADY_ADMIN = CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN;
  static inline bool Result_IsValid(int value) {
    return CMsgGCToClientPrivateChatResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgGCToClientPrivateChatResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgGCToClientPrivateChatResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgGCToClientPrivateChatResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgGCToClientPrivateChatResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgGCToClientPrivateChatResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgGCToClientPrivateChatResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::CMsgGCToClientPrivateChatResponse_Result result() const;
  inline void set_result(::CMsgGCToClientPrivateChatResponse_Result value);

  // optional string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:CMsgGCToClientPrivateChatResponse)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  ::std::string* username_;
  int result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientPrivateChatResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatInfoRequest : public ::google::protobuf::Message {
 public:
  CMsgClientToGCPrivateChatInfoRequest();
  virtual ~CMsgClientToGCPrivateChatInfoRequest();

  CMsgClientToGCPrivateChatInfoRequest(const CMsgClientToGCPrivateChatInfoRequest& from);

  inline CMsgClientToGCPrivateChatInfoRequest& operator=(const CMsgClientToGCPrivateChatInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCPrivateChatInfoRequest& default_instance();

  void Swap(CMsgClientToGCPrivateChatInfoRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCPrivateChatInfoRequest& from);
  void MergeFrom(const CMsgClientToGCPrivateChatInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatInfoRequest)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCPrivateChatInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatInfoResponse_Member : public ::google::protobuf::Message {
 public:
  CMsgGCToClientPrivateChatInfoResponse_Member();
  virtual ~CMsgGCToClientPrivateChatInfoResponse_Member();

  CMsgGCToClientPrivateChatInfoResponse_Member(const CMsgGCToClientPrivateChatInfoResponse_Member& from);

  inline CMsgGCToClientPrivateChatInfoResponse_Member& operator=(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientPrivateChatInfoResponse_Member& default_instance();

  void Swap(CMsgGCToClientPrivateChatInfoResponse_Member* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientPrivateChatInfoResponse_Member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from);
  void MergeFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToClientPrivateChatInfoResponse.Member)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientPrivateChatInfoResponse_Member* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatInfoResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToClientPrivateChatInfoResponse();
  virtual ~CMsgGCToClientPrivateChatInfoResponse();

  CMsgGCToClientPrivateChatInfoResponse(const CMsgGCToClientPrivateChatInfoResponse& from);

  inline CMsgGCToClientPrivateChatInfoResponse& operator=(const CMsgGCToClientPrivateChatInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientPrivateChatInfoResponse& default_instance();

  void Swap(CMsgGCToClientPrivateChatInfoResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientPrivateChatInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientPrivateChatInfoResponse& from);
  void MergeFrom(const CMsgGCToClientPrivateChatInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgGCToClientPrivateChatInfoResponse_Member Member;

  // accessors -------------------------------------------------------

  // optional string private_chat_channel_name = 1;
  inline bool has_private_chat_channel_name() const;
  inline void clear_private_chat_channel_name();
  static const int kPrivateChatChannelNameFieldNumber = 1;
  inline const ::std::string& private_chat_channel_name() const;
  inline void set_private_chat_channel_name(const ::std::string& value);
  inline void set_private_chat_channel_name(const char* value);
  inline void set_private_chat_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_private_chat_channel_name();
  inline ::std::string* release_private_chat_channel_name();
  inline void set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name);

  // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::CMsgGCToClientPrivateChatInfoResponse_Member& members(int index) const;
  inline ::CMsgGCToClientPrivateChatInfoResponse_Member* mutable_members(int index);
  inline ::CMsgGCToClientPrivateChatInfoResponse_Member* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCToClientPrivateChatInfoResponse_Member >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgGCToClientPrivateChatInfoResponse_Member >*
      mutable_members();

  // optional uint32 creator = 3;
  inline bool has_creator() const;
  inline void clear_creator();
  static const int kCreatorFieldNumber = 3;
  inline ::google::protobuf::uint32 creator() const;
  inline void set_creator(::google::protobuf::uint32 value);

  // optional uint32 creation_date = 4;
  inline bool has_creation_date() const;
  inline void clear_creation_date();
  static const int kCreationDateFieldNumber = 4;
  inline ::google::protobuf::uint32 creation_date() const;
  inline void set_creation_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCToClientPrivateChatInfoResponse)
 private:
  inline void set_has_private_chat_channel_name();
  inline void clear_has_private_chat_channel_name();
  inline void set_has_creator();
  inline void clear_has_creator();
  inline void set_has_creation_date();
  inline void clear_has_creation_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* private_chat_channel_name_;
  ::google::protobuf::RepeatedPtrField< ::CMsgGCToClientPrivateChatInfoResponse_Member > members_;
  ::google::protobuf::uint32 creator_;
  ::google::protobuf::uint32 creation_date_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientPrivateChatInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannel : public ::google::protobuf::Message {
 public:
  CMsgDOTAJoinChatChannel();
  virtual ~CMsgDOTAJoinChatChannel();

  CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from);

  inline CMsgDOTAJoinChatChannel& operator=(const CMsgDOTAJoinChatChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAJoinChatChannel& default_instance();

  void Swap(CMsgDOTAJoinChatChannel* other);

  // implements Message ----------------------------------------------

  CMsgDOTAJoinChatChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAJoinChatChannel& from);
  void MergeFrom(const CMsgDOTAJoinChatChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 2;
  inline bool has_channel_name() const;
  inline void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  inline const ::std::string& channel_name() const;
  inline void set_channel_name(const ::std::string& value);
  inline void set_channel_name(const char* value);
  inline void set_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_channel_name();
  inline ::std::string* release_channel_name();
  inline void set_allocated_channel_name(::std::string* channel_name);

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 4;
  inline ::DOTAChatChannelType_t channel_type() const;
  inline void set_channel_type(::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinChatChannel)
 private:
  inline void set_has_channel_name();
  inline void clear_has_channel_name();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_name_;
  int channel_type_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAJoinChatChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTALeaveChatChannel : public ::google::protobuf::Message {
 public:
  CMsgDOTALeaveChatChannel();
  virtual ~CMsgDOTALeaveChatChannel();

  CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from);

  inline CMsgDOTALeaveChatChannel& operator=(const CMsgDOTALeaveChatChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTALeaveChatChannel& default_instance();

  void Swap(CMsgDOTALeaveChatChannel* other);

  // implements Message ----------------------------------------------

  CMsgDOTALeaveChatChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTALeaveChatChannel& from);
  void MergeFrom(const CMsgDOTALeaveChatChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaveChatChannel)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTALeaveChatChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCChatReportPublicSpam : public ::google::protobuf::Message {
 public:
  CMsgGCChatReportPublicSpam();
  virtual ~CMsgGCChatReportPublicSpam();

  CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from);

  inline CMsgGCChatReportPublicSpam& operator=(const CMsgGCChatReportPublicSpam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCChatReportPublicSpam& default_instance();

  void Swap(CMsgGCChatReportPublicSpam* other);

  // implements Message ----------------------------------------------

  CMsgGCChatReportPublicSpam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCChatReportPublicSpam& from);
  void MergeFrom(const CMsgGCChatReportPublicSpam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 2;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGCChatReportPublicSpam)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint32 channel_user_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCChatReportPublicSpam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAClientIgnoredUser : public ::google::protobuf::Message {
 public:
  CMsgDOTAClientIgnoredUser();
  virtual ~CMsgDOTAClientIgnoredUser();

  CMsgDOTAClientIgnoredUser(const CMsgDOTAClientIgnoredUser& from);

  inline CMsgDOTAClientIgnoredUser& operator=(const CMsgDOTAClientIgnoredUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAClientIgnoredUser& default_instance();

  void Swap(CMsgDOTAClientIgnoredUser* other);

  // implements Message ----------------------------------------------

  CMsgDOTAClientIgnoredUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAClientIgnoredUser& from);
  void MergeFrom(const CMsgDOTAClientIgnoredUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ignored_account_id = 1;
  inline bool has_ignored_account_id() const;
  inline void clear_ignored_account_id();
  static const int kIgnoredAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 ignored_account_id() const;
  inline void set_ignored_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAClientIgnoredUser)
 private:
  inline void set_has_ignored_account_id();
  inline void clear_has_ignored_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ignored_account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAClientIgnoredUser* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_DiceRoll : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatMessage_DiceRoll();
  virtual ~CMsgDOTAChatMessage_DiceRoll();

  CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from);

  inline CMsgDOTAChatMessage_DiceRoll& operator=(const CMsgDOTAChatMessage_DiceRoll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatMessage_DiceRoll& default_instance();

  void Swap(CMsgDOTAChatMessage_DiceRoll* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage_DiceRoll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from);
  void MergeFrom(const CMsgDOTAChatMessage_DiceRoll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roll_min = 1;
  inline bool has_roll_min() const;
  inline void clear_roll_min();
  static const int kRollMinFieldNumber = 1;
  inline ::google::protobuf::int32 roll_min() const;
  inline void set_roll_min(::google::protobuf::int32 value);

  // optional int32 roll_max = 2;
  inline bool has_roll_max() const;
  inline void clear_roll_max();
  static const int kRollMaxFieldNumber = 2;
  inline ::google::protobuf::int32 roll_max() const;
  inline void set_roll_max(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage.DiceRoll)
 private:
  inline void set_has_roll_min();
  inline void clear_has_roll_min();
  inline void set_has_roll_max();
  inline void clear_has_roll_max();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 roll_min_;
  ::google::protobuf::int32 roll_max_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatMessage_DiceRoll* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatMessage();
  virtual ~CMsgDOTAChatMessage();

  CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from);

  inline CMsgDOTAChatMessage& operator=(const CMsgDOTAChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatMessage& default_instance();

  void Swap(CMsgDOTAChatMessage* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatMessage& from);
  void MergeFrom(const CMsgDOTAChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatMessage_DiceRoll DiceRoll;

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint64 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // optional string persona_name = 3;
  inline bool has_persona_name() const;
  inline void clear_persona_name();
  static const int kPersonaNameFieldNumber = 3;
  inline const ::std::string& persona_name() const;
  inline void set_persona_name(const ::std::string& value);
  inline void set_persona_name(const char* value);
  inline void set_persona_name(const char* value, size_t size);
  inline ::std::string* mutable_persona_name();
  inline ::std::string* release_persona_name();
  inline void set_allocated_persona_name(::std::string* persona_name);

  // optional string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional uint32 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional uint32 suggest_invite_account_id = 6;
  inline bool has_suggest_invite_account_id() const;
  inline void clear_suggest_invite_account_id();
  static const int kSuggestInviteAccountIdFieldNumber = 6;
  inline ::google::protobuf::uint32 suggest_invite_account_id() const;
  inline void set_suggest_invite_account_id(::google::protobuf::uint32 value);

  // optional string suggest_invite_name = 7;
  inline bool has_suggest_invite_name() const;
  inline void clear_suggest_invite_name();
  static const int kSuggestInviteNameFieldNumber = 7;
  inline const ::std::string& suggest_invite_name() const;
  inline void set_suggest_invite_name(const ::std::string& value);
  inline void set_suggest_invite_name(const char* value);
  inline void set_suggest_invite_name(const char* value, size_t size);
  inline ::std::string* mutable_suggest_invite_name();
  inline ::std::string* release_suggest_invite_name();
  inline void set_allocated_suggest_invite_name(::std::string* suggest_invite_name);

  // optional uint32 fantasy_draft_owner_account_id = 8;
  inline bool has_fantasy_draft_owner_account_id() const;
  inline void clear_fantasy_draft_owner_account_id();
  static const int kFantasyDraftOwnerAccountIdFieldNumber = 8;
  inline ::google::protobuf::uint32 fantasy_draft_owner_account_id() const;
  inline void set_fantasy_draft_owner_account_id(::google::protobuf::uint32 value);

  // optional uint32 fantasy_draft_player_account_id = 9;
  inline bool has_fantasy_draft_player_account_id() const;
  inline void clear_fantasy_draft_player_account_id();
  static const int kFantasyDraftPlayerAccountIdFieldNumber = 9;
  inline ::google::protobuf::uint32 fantasy_draft_player_account_id() const;
  inline void set_fantasy_draft_player_account_id(::google::protobuf::uint32 value);

  // optional uint32 event_id = 10;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 10;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional bool suggest_invite_to_lobby = 11;
  inline bool has_suggest_invite_to_lobby() const;
  inline void clear_suggest_invite_to_lobby();
  static const int kSuggestInviteToLobbyFieldNumber = 11;
  inline bool suggest_invite_to_lobby() const;
  inline void set_suggest_invite_to_lobby(bool value);

  // optional uint32 event_points = 12;
  inline bool has_event_points() const;
  inline void clear_event_points();
  static const int kEventPointsFieldNumber = 12;
  inline ::google::protobuf::uint32 event_points() const;
  inline void set_event_points(::google::protobuf::uint32 value);

  // optional bool coin_flip = 13;
  inline bool has_coin_flip() const;
  inline void clear_coin_flip();
  static const int kCoinFlipFieldNumber = 13;
  inline bool coin_flip() const;
  inline void set_coin_flip(bool value);

  // optional int32 player_id = 14 [default = -1];
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 14;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional uint32 share_profile_account_id = 15;
  inline bool has_share_profile_account_id() const;
  inline void clear_share_profile_account_id();
  static const int kShareProfileAccountIdFieldNumber = 15;
  inline ::google::protobuf::uint32 share_profile_account_id() const;
  inline void set_share_profile_account_id(::google::protobuf::uint32 value);

  // optional uint32 channel_user_id = 16;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 16;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  inline bool has_dice_roll() const;
  inline void clear_dice_roll();
  static const int kDiceRollFieldNumber = 17;
  inline const ::CMsgDOTAChatMessage_DiceRoll& dice_roll() const;
  inline ::CMsgDOTAChatMessage_DiceRoll* mutable_dice_roll();
  inline ::CMsgDOTAChatMessage_DiceRoll* release_dice_roll();
  inline void set_allocated_dice_roll(::CMsgDOTAChatMessage_DiceRoll* dice_roll);

  // optional uint64 share_party_id = 18;
  inline bool has_share_party_id() const;
  inline void clear_share_party_id();
  static const int kSharePartyIdFieldNumber = 18;
  inline ::google::protobuf::uint64 share_party_id() const;
  inline void set_share_party_id(::google::protobuf::uint64 value);

  // optional uint64 share_lobby_id = 19;
  inline bool has_share_lobby_id() const;
  inline void clear_share_lobby_id();
  static const int kShareLobbyIdFieldNumber = 19;
  inline ::google::protobuf::uint64 share_lobby_id() const;
  inline void set_share_lobby_id(::google::protobuf::uint64 value);

  // optional uint64 share_lobby_custom_game_id = 20;
  inline bool has_share_lobby_custom_game_id() const;
  inline void clear_share_lobby_custom_game_id();
  static const int kShareLobbyCustomGameIdFieldNumber = 20;
  inline ::google::protobuf::uint64 share_lobby_custom_game_id() const;
  inline void set_share_lobby_custom_game_id(::google::protobuf::uint64 value);

  // optional string share_lobby_passkey = 21;
  inline bool has_share_lobby_passkey() const;
  inline void clear_share_lobby_passkey();
  static const int kShareLobbyPasskeyFieldNumber = 21;
  inline const ::std::string& share_lobby_passkey() const;
  inline void set_share_lobby_passkey(const ::std::string& value);
  inline void set_share_lobby_passkey(const char* value);
  inline void set_share_lobby_passkey(const char* value, size_t size);
  inline ::std::string* mutable_share_lobby_passkey();
  inline ::std::string* release_share_lobby_passkey();
  inline void set_allocated_share_lobby_passkey(::std::string* share_lobby_passkey);

  // optional uint32 private_chat_channel_id = 22;
  inline bool has_private_chat_channel_id() const;
  inline void clear_private_chat_channel_id();
  static const int kPrivateChatChannelIdFieldNumber = 22;
  inline ::google::protobuf::uint32 private_chat_channel_id() const;
  inline void set_private_chat_channel_id(::google::protobuf::uint32 value);

  // optional uint32 status = 23;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 23;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional bool battle_cup_victory = 24;
  inline bool has_battle_cup_victory() const;
  inline void clear_battle_cup_victory();
  static const int kBattleCupVictoryFieldNumber = 24;
  inline bool battle_cup_victory() const;
  inline void set_battle_cup_victory(bool value);

  // optional uint32 badge_level = 25;
  inline bool has_badge_level() const;
  inline void clear_badge_level();
  static const int kBadgeLevelFieldNumber = 25;
  inline ::google::protobuf::uint32 badge_level() const;
  inline void set_badge_level(::google::protobuf::uint32 value);

  // optional uint32 suggest_pick_hero_id = 26;
  inline bool has_suggest_pick_hero_id() const;
  inline void clear_suggest_pick_hero_id();
  static const int kSuggestPickHeroIdFieldNumber = 26;
  inline ::google::protobuf::uint32 suggest_pick_hero_id() const;
  inline void set_suggest_pick_hero_id(::google::protobuf::uint32 value);

  // optional string suggest_pick_hero_role = 27;
  inline bool has_suggest_pick_hero_role() const;
  inline void clear_suggest_pick_hero_role();
  static const int kSuggestPickHeroRoleFieldNumber = 27;
  inline const ::std::string& suggest_pick_hero_role() const;
  inline void set_suggest_pick_hero_role(const ::std::string& value);
  inline void set_suggest_pick_hero_role(const char* value);
  inline void set_suggest_pick_hero_role(const char* value, size_t size);
  inline ::std::string* mutable_suggest_pick_hero_role();
  inline ::std::string* release_suggest_pick_hero_role();
  inline void set_allocated_suggest_pick_hero_role(::std::string* suggest_pick_hero_role);

  // optional bool terse = 28;
  inline bool has_terse() const;
  inline void clear_terse();
  static const int kTerseFieldNumber = 28;
  inline bool terse() const;
  inline void set_terse(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_persona_name();
  inline void clear_has_persona_name();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_suggest_invite_account_id();
  inline void clear_has_suggest_invite_account_id();
  inline void set_has_suggest_invite_name();
  inline void clear_has_suggest_invite_name();
  inline void set_has_fantasy_draft_owner_account_id();
  inline void clear_has_fantasy_draft_owner_account_id();
  inline void set_has_fantasy_draft_player_account_id();
  inline void clear_has_fantasy_draft_player_account_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_suggest_invite_to_lobby();
  inline void clear_has_suggest_invite_to_lobby();
  inline void set_has_event_points();
  inline void clear_has_event_points();
  inline void set_has_coin_flip();
  inline void clear_has_coin_flip();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_share_profile_account_id();
  inline void clear_has_share_profile_account_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_dice_roll();
  inline void clear_has_dice_roll();
  inline void set_has_share_party_id();
  inline void clear_has_share_party_id();
  inline void set_has_share_lobby_id();
  inline void clear_has_share_lobby_id();
  inline void set_has_share_lobby_custom_game_id();
  inline void clear_has_share_lobby_custom_game_id();
  inline void set_has_share_lobby_passkey();
  inline void clear_has_share_lobby_passkey();
  inline void set_has_private_chat_channel_id();
  inline void clear_has_private_chat_channel_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_battle_cup_victory();
  inline void clear_has_battle_cup_victory();
  inline void set_has_badge_level();
  inline void clear_has_badge_level();
  inline void set_has_suggest_pick_hero_id();
  inline void clear_has_suggest_pick_hero_id();
  inline void set_has_suggest_pick_hero_role();
  inline void clear_has_suggest_pick_hero_role();
  inline void set_has_terse();
  inline void clear_has_terse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::std::string* persona_name_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 timestamp_;
  ::std::string* text_;
  ::std::string* suggest_invite_name_;
  ::google::protobuf::uint32 suggest_invite_account_id_;
  ::google::protobuf::uint32 fantasy_draft_owner_account_id_;
  ::google::protobuf::uint32 fantasy_draft_player_account_id_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 event_points_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::uint32 share_profile_account_id_;
  ::google::protobuf::uint32 channel_user_id_;
  ::CMsgDOTAChatMessage_DiceRoll* dice_roll_;
  ::google::protobuf::uint64 share_party_id_;
  ::google::protobuf::uint64 share_lobby_id_;
  bool suggest_invite_to_lobby_;
  bool coin_flip_;
  bool battle_cup_victory_;
  bool terse_;
  ::google::protobuf::uint32 private_chat_channel_id_;
  ::google::protobuf::uint64 share_lobby_custom_game_id_;
  ::std::string* share_lobby_passkey_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 badge_level_;
  ::std::string* suggest_pick_hero_role_;
  ::google::protobuf::uint32 suggest_pick_hero_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMember : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatMember();
  virtual ~CMsgDOTAChatMember();

  CMsgDOTAChatMember(const CMsgDOTAChatMember& from);

  inline CMsgDOTAChatMember& operator=(const CMsgDOTAChatMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatMember& default_instance();

  void Swap(CMsgDOTAChatMember* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatMember& from);
  void MergeFrom(const CMsgDOTAChatMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional string persona_name = 2;
  inline bool has_persona_name() const;
  inline void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  inline const ::std::string& persona_name() const;
  inline void set_persona_name(const ::std::string& value);
  inline void set_persona_name(const char* value);
  inline void set_persona_name(const char* value, size_t size);
  inline ::std::string* mutable_persona_name();
  inline ::std::string* release_persona_name();
  inline void set_allocated_persona_name(::std::string* persona_name);

  // optional uint32 channel_user_id = 3;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMember)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_persona_name();
  inline void clear_has_persona_name();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::std::string* persona_name_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatMember* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannelResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAJoinChatChannelResponse();
  virtual ~CMsgDOTAJoinChatChannelResponse();

  CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from);

  inline CMsgDOTAJoinChatChannelResponse& operator=(const CMsgDOTAJoinChatChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAJoinChatChannelResponse& default_instance();

  void Swap(CMsgDOTAJoinChatChannelResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAJoinChatChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAJoinChatChannelResponse& from);
  void MergeFrom(const CMsgDOTAJoinChatChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAJoinChatChannelResponse_Result Result;
  static const Result JOIN_SUCCESS = CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS;
  static const Result INVALID_CHANNEL_TYPE = CMsgDOTAJoinChatChannelResponse_Result_INVALID_CHANNEL_TYPE;
  static const Result ACCOUNT_NOT_FOUND = CMsgDOTAJoinChatChannelResponse_Result_ACCOUNT_NOT_FOUND;
  static const Result ACH_FAILED = CMsgDOTAJoinChatChannelResponse_Result_ACH_FAILED;
  static const Result USER_IN_TOO_MANY_CHANNELS = CMsgDOTAJoinChatChannelResponse_Result_USER_IN_TOO_MANY_CHANNELS;
  static const Result RATE_LIMIT_EXCEEDED = CMsgDOTAJoinChatChannelResponse_Result_RATE_LIMIT_EXCEEDED;
  static const Result CHANNEL_FULL = CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL;
  static const Result CHANNEL_FULL_OVERFLOWED = CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL_OVERFLOWED;
  static const Result FAILED_TO_ADD_USER = CMsgDOTAJoinChatChannelResponse_Result_FAILED_TO_ADD_USER;
  static const Result CHANNEL_TYPE_DISABLED = CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_TYPE_DISABLED;
  static const Result PRIVATE_CHAT_CREATE_FAILED = CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_FAILED;
  static const Result PRIVATE_CHAT_NO_PERMISSION = CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_NO_PERMISSION;
  static const Result PRIVATE_CHAT_CREATE_LOCK_FAILED = CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_LOCK_FAILED;
  static const Result PRIVATE_CHAT_KICKED = CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAJoinChatChannelResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CMsgDOTAJoinChatChannelResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CMsgDOTAJoinChatChannelResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CMsgDOTAJoinChatChannelResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAJoinChatChannelResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CMsgDOTAJoinChatChannelResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CMsgDOTAJoinChatChannelResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline ::google::protobuf::uint32 response() const;
  inline void set_response(::google::protobuf::uint32 value);

  // optional string channel_name = 2;
  inline bool has_channel_name() const;
  inline void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  inline const ::std::string& channel_name() const;
  inline void set_channel_name(const ::std::string& value);
  inline void set_channel_name(const char* value);
  inline void set_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_channel_name();
  inline ::std::string* release_channel_name();
  inline void set_allocated_channel_name(::std::string* channel_name);

  // optional fixed64 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // optional uint32 max_members = 4;
  inline bool has_max_members() const;
  inline void clear_max_members();
  static const int kMaxMembersFieldNumber = 4;
  inline ::google::protobuf::uint32 max_members() const;
  inline void set_max_members(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAChatMember members = 5;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 5;
  inline const ::CMsgDOTAChatMember& members(int index) const;
  inline ::CMsgDOTAChatMember* mutable_members(int index);
  inline ::CMsgDOTAChatMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
      mutable_members();

  // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 6;
  inline ::DOTAChatChannelType_t channel_type() const;
  inline void set_channel_type(::DOTAChatChannelType_t value);

  // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::CMsgDOTAJoinChatChannelResponse_Result result() const;
  inline void set_result(::CMsgDOTAJoinChatChannelResponse_Result value);

  // optional bool gc_initiated_join = 8;
  inline bool has_gc_initiated_join() const;
  inline void clear_gc_initiated_join();
  static const int kGcInitiatedJoinFieldNumber = 8;
  inline bool gc_initiated_join() const;
  inline void set_gc_initiated_join(bool value);

  // optional uint32 channel_user_id = 9;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 9;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // optional string welcome_message = 10;
  inline bool has_welcome_message() const;
  inline void clear_welcome_message();
  static const int kWelcomeMessageFieldNumber = 10;
  inline const ::std::string& welcome_message() const;
  inline void set_welcome_message(const ::std::string& value);
  inline void set_welcome_message(const char* value);
  inline void set_welcome_message(const char* value, size_t size);
  inline ::std::string* mutable_welcome_message();
  inline ::std::string* release_welcome_message();
  inline void set_allocated_welcome_message(::std::string* welcome_message);

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinChatChannelResponse)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_channel_name();
  inline void clear_has_channel_name();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_max_members();
  inline void clear_has_max_members();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gc_initiated_join();
  inline void clear_has_gc_initiated_join();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_welcome_message();
  inline void clear_has_welcome_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_name_;
  ::google::protobuf::uint32 response_;
  ::google::protobuf::uint32 max_members_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember > members_;
  int channel_type_;
  int result_;
  bool gc_initiated_join_;
  ::google::protobuf::uint32 channel_user_id_;
  ::std::string* welcome_message_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAJoinChatChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelFullUpdate : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatChannelFullUpdate();
  virtual ~CMsgDOTAChatChannelFullUpdate();

  CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from);

  inline CMsgDOTAChatChannelFullUpdate& operator=(const CMsgDOTAChatChannelFullUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatChannelFullUpdate& default_instance();

  void Swap(CMsgDOTAChatChannelFullUpdate* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatChannelFullUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatChannelFullUpdate& from);
  void MergeFrom(const CMsgDOTAChatChannelFullUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // repeated .CMsgDOTAChatMember members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::CMsgDOTAChatMember& members(int index) const;
  inline ::CMsgDOTAChatMember* mutable_members(int index);
  inline ::CMsgDOTAChatMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatChannelFullUpdate)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember > members_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatChannelFullUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAOtherJoinedChatChannel : public ::google::protobuf::Message {
 public:
  CMsgDOTAOtherJoinedChatChannel();
  virtual ~CMsgDOTAOtherJoinedChatChannel();

  CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from);

  inline CMsgDOTAOtherJoinedChatChannel& operator=(const CMsgDOTAOtherJoinedChatChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAOtherJoinedChatChannel& default_instance();

  void Swap(CMsgDOTAOtherJoinedChatChannel* other);

  // implements Message ----------------------------------------------

  CMsgDOTAOtherJoinedChatChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  void MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // optional string persona_name = 2;
  inline bool has_persona_name() const;
  inline void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  inline const ::std::string& persona_name() const;
  inline void set_persona_name(const ::std::string& value);
  inline void set_persona_name(const char* value);
  inline void set_persona_name(const char* value, size_t size);
  inline ::std::string* mutable_persona_name();
  inline ::std::string* release_persona_name();
  inline void set_allocated_persona_name(::std::string* persona_name);

  // optional fixed64 steam_id = 3;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 4;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAOtherJoinedChatChannel)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_persona_name();
  inline void clear_has_persona_name();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::std::string* persona_name_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAOtherJoinedChatChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAOtherLeftChatChannel : public ::google::protobuf::Message {
 public:
  CMsgDOTAOtherLeftChatChannel();
  virtual ~CMsgDOTAOtherLeftChatChannel();

  CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from);

  inline CMsgDOTAOtherLeftChatChannel& operator=(const CMsgDOTAOtherLeftChatChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAOtherLeftChatChannel& default_instance();

  void Swap(CMsgDOTAOtherLeftChatChannel* other);

  // implements Message ----------------------------------------------

  CMsgDOTAOtherLeftChatChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAOtherLeftChatChannel& from);
  void MergeFrom(const CMsgDOTAOtherLeftChatChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // optional fixed64 steam_id = 2;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional uint32 channel_user_id = 3;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAOtherLeftChatChannel)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint32 channel_user_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAOtherLeftChatChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelMemberUpdate_JoinedMember : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatChannelMemberUpdate_JoinedMember();
  virtual ~CMsgDOTAChatChannelMemberUpdate_JoinedMember();

  CMsgDOTAChatChannelMemberUpdate_JoinedMember(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from);

  inline CMsgDOTAChatChannelMemberUpdate_JoinedMember& operator=(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatChannelMemberUpdate_JoinedMember& default_instance();

  void Swap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatChannelMemberUpdate_JoinedMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from);
  void MergeFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional string persona_name = 2;
  inline bool has_persona_name() const;
  inline void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  inline const ::std::string& persona_name() const;
  inline void set_persona_name(const ::std::string& value);
  inline void set_persona_name(const char* value);
  inline void set_persona_name(const char* value, size_t size);
  inline ::std::string* mutable_persona_name();
  inline ::std::string* release_persona_name();
  inline void set_allocated_persona_name(::std::string* persona_name);

  // optional uint32 channel_user_id = 3;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_persona_name();
  inline void clear_has_persona_name();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::std::string* persona_name_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatChannelMemberUpdate_JoinedMember* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatChannelMemberUpdate : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatChannelMemberUpdate();
  virtual ~CMsgDOTAChatChannelMemberUpdate();

  CMsgDOTAChatChannelMemberUpdate(const CMsgDOTAChatChannelMemberUpdate& from);

  inline CMsgDOTAChatChannelMemberUpdate& operator=(const CMsgDOTAChatChannelMemberUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatChannelMemberUpdate& default_instance();

  void Swap(CMsgDOTAChatChannelMemberUpdate* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatChannelMemberUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatChannelMemberUpdate& from);
  void MergeFrom(const CMsgDOTAChatChannelMemberUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatChannelMemberUpdate_JoinedMember JoinedMember;

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // repeated fixed64 left_steam_ids = 2;
  inline int left_steam_ids_size() const;
  inline void clear_left_steam_ids();
  static const int kLeftSteamIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 left_steam_ids(int index) const;
  inline void set_left_steam_ids(int index, ::google::protobuf::uint64 value);
  inline void add_left_steam_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      left_steam_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_left_steam_ids();

  // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  inline int joined_members_size() const;
  inline void clear_joined_members();
  static const int kJoinedMembersFieldNumber = 3;
  inline const ::CMsgDOTAChatChannelMemberUpdate_JoinedMember& joined_members(int index) const;
  inline ::CMsgDOTAChatChannelMemberUpdate_JoinedMember* mutable_joined_members(int index);
  inline ::CMsgDOTAChatChannelMemberUpdate_JoinedMember* add_joined_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember >&
      joined_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember >*
      mutable_joined_members();

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatChannelMemberUpdate)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > left_steam_ids_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember > joined_members_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatChannelMemberUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelList : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestChatChannelList();
  virtual ~CMsgDOTARequestChatChannelList();

  CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from);

  inline CMsgDOTARequestChatChannelList& operator=(const CMsgDOTARequestChatChannelList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestChatChannelList& default_instance();

  void Swap(CMsgDOTARequestChatChannelList* other);

  // implements Message ----------------------------------------------

  CMsgDOTARequestChatChannelList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestChatChannelList& from);
  void MergeFrom(const CMsgDOTARequestChatChannelList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARequestChatChannelList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse_ChatChannel : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestChatChannelListResponse_ChatChannel();
  virtual ~CMsgDOTARequestChatChannelListResponse_ChatChannel();

  CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestChatChannelListResponse_ChatChannel& default_instance();

  void Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other);

  // implements Message ----------------------------------------------

  CMsgDOTARequestChatChannelListResponse_ChatChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  void MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  inline bool has_channel_name() const;
  inline void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  inline const ::std::string& channel_name() const;
  inline void set_channel_name(const ::std::string& value);
  inline void set_channel_name(const char* value);
  inline void set_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_channel_name();
  inline ::std::string* release_channel_name();
  inline void set_allocated_channel_name(::std::string* channel_name);

  // optional uint32 num_members = 2;
  inline bool has_num_members() const;
  inline void clear_num_members();
  static const int kNumMembersFieldNumber = 2;
  inline ::google::protobuf::uint32 num_members() const;
  inline void set_num_members(::google::protobuf::uint32 value);

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 3;
  inline ::DOTAChatChannelType_t channel_type() const;
  inline void set_channel_type(::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelListResponse.ChatChannel)
 private:
  inline void set_has_channel_name();
  inline void clear_has_channel_name();
  inline void set_has_num_members();
  inline void clear_has_num_members();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_name_;
  ::google::protobuf::uint32 num_members_;
  int channel_type_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARequestChatChannelListResponse_ChatChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTARequestChatChannelListResponse();
  virtual ~CMsgDOTARequestChatChannelListResponse();

  CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from);

  inline CMsgDOTARequestChatChannelListResponse& operator=(const CMsgDOTARequestChatChannelListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTARequestChatChannelListResponse& default_instance();

  void Swap(CMsgDOTARequestChatChannelListResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTARequestChatChannelListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse& from);
  void MergeFrom(const CMsgDOTARequestChatChannelListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestChatChannelListResponse_ChatChannel ChatChannel;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& channels(int index) const;
  inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* mutable_channels(int index);
  inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* add_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
      channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel > channels_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTARequestChatChannelListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserList : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatGetUserList();
  virtual ~CMsgDOTAChatGetUserList();

  CMsgDOTAChatGetUserList(const CMsgDOTAChatGetUserList& from);

  inline CMsgDOTAChatGetUserList& operator=(const CMsgDOTAChatGetUserList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatGetUserList& default_instance();

  void Swap(CMsgDOTAChatGetUserList* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetUserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatGetUserList& from);
  void MergeFrom(const CMsgDOTAChatGetUserList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetUserList)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatGetUserList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserListResponse_Member : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatGetUserListResponse_Member();
  virtual ~CMsgDOTAChatGetUserListResponse_Member();

  CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from);

  inline CMsgDOTAChatGetUserListResponse_Member& operator=(const CMsgDOTAChatGetUserListResponse_Member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatGetUserListResponse_Member& default_instance();

  void Swap(CMsgDOTAChatGetUserListResponse_Member* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetUserListResponse_Member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from);
  void MergeFrom(const CMsgDOTAChatGetUserListResponse_Member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional string persona_name = 2;
  inline bool has_persona_name() const;
  inline void clear_persona_name();
  static const int kPersonaNameFieldNumber = 2;
  inline const ::std::string& persona_name() const;
  inline void set_persona_name(const ::std::string& value);
  inline void set_persona_name(const char* value);
  inline void set_persona_name(const char* value, size_t size);
  inline ::std::string* mutable_persona_name();
  inline ::std::string* release_persona_name();
  inline void set_allocated_persona_name(::std::string* persona_name);

  // optional uint32 channel_user_id = 3;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_user_id() const;
  inline void set_channel_user_id(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetUserListResponse.Member)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_persona_name();
  inline void clear_has_persona_name();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  ::std::string* persona_name_;
  ::google::protobuf::uint32 channel_user_id_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatGetUserListResponse_Member* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserListResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatGetUserListResponse();
  virtual ~CMsgDOTAChatGetUserListResponse();

  CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from);

  inline CMsgDOTAChatGetUserListResponse& operator=(const CMsgDOTAChatGetUserListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatGetUserListResponse& default_instance();

  void Swap(CMsgDOTAChatGetUserListResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetUserListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatGetUserListResponse& from);
  void MergeFrom(const CMsgDOTAChatGetUserListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatGetUserListResponse_Member Member;

  // accessors -------------------------------------------------------

  // optional fixed64 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint64 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint64 value);

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::CMsgDOTAChatGetUserListResponse_Member& members(int index) const;
  inline ::CMsgDOTAChatGetUserListResponse_Member* mutable_members(int index);
  inline ::CMsgDOTAChatGetUserListResponse_Member* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetUserListResponse)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member > members_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatGetUserListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetMemberCount : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatGetMemberCount();
  virtual ~CMsgDOTAChatGetMemberCount();

  CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from);

  inline CMsgDOTAChatGetMemberCount& operator=(const CMsgDOTAChatGetMemberCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatGetMemberCount& default_instance();

  void Swap(CMsgDOTAChatGetMemberCount* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetMemberCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatGetMemberCount& from);
  void MergeFrom(const CMsgDOTAChatGetMemberCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  inline bool has_channel_name() const;
  inline void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  inline const ::std::string& channel_name() const;
  inline void set_channel_name(const ::std::string& value);
  inline void set_channel_name(const char* value);
  inline void set_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_channel_name();
  inline ::std::string* release_channel_name();
  inline void set_allocated_channel_name(::std::string* channel_name);

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  inline ::DOTAChatChannelType_t channel_type() const;
  inline void set_channel_type(::DOTAChatChannelType_t value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetMemberCount)
 private:
  inline void set_has_channel_name();
  inline void clear_has_channel_name();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_name_;
  int channel_type_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatGetMemberCount* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetMemberCountResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatGetMemberCountResponse();
  virtual ~CMsgDOTAChatGetMemberCountResponse();

  CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from);

  inline CMsgDOTAChatGetMemberCountResponse& operator=(const CMsgDOTAChatGetMemberCountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatGetMemberCountResponse& default_instance();

  void Swap(CMsgDOTAChatGetMemberCountResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetMemberCountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from);
  void MergeFrom(const CMsgDOTAChatGetMemberCountResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  inline bool has_channel_name() const;
  inline void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  inline const ::std::string& channel_name() const;
  inline void set_channel_name(const ::std::string& value);
  inline void set_channel_name(const char* value);
  inline void set_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_channel_name();
  inline ::std::string* release_channel_name();
  inline void set_allocated_channel_name(::std::string* channel_name);

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  inline ::DOTAChatChannelType_t channel_type() const;
  inline void set_channel_type(::DOTAChatChannelType_t value);

  // optional uint32 member_count = 3;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 3;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetMemberCountResponse)
 private:
  inline void set_has_channel_name();
  inline void clear_has_channel_name();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();
  inline void set_has_member_count();
  inline void clear_has_member_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_name_;
  int channel_type_;
  ::google::protobuf::uint32 member_count_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatGetMemberCountResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatRegionsEnabled_Region : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatRegionsEnabled_Region();
  virtual ~CMsgDOTAChatRegionsEnabled_Region();

  CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from);

  inline CMsgDOTAChatRegionsEnabled_Region& operator=(const CMsgDOTAChatRegionsEnabled_Region& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatRegionsEnabled_Region& default_instance();

  void Swap(CMsgDOTAChatRegionsEnabled_Region* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatRegionsEnabled_Region* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from);
  void MergeFrom(const CMsgDOTAChatRegionsEnabled_Region& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_latitude = 1;
  inline bool has_min_latitude() const;
  inline void clear_min_latitude();
  static const int kMinLatitudeFieldNumber = 1;
  inline float min_latitude() const;
  inline void set_min_latitude(float value);

  // optional float max_latitude = 2;
  inline bool has_max_latitude() const;
  inline void clear_max_latitude();
  static const int kMaxLatitudeFieldNumber = 2;
  inline float max_latitude() const;
  inline void set_max_latitude(float value);

  // optional float min_longitude = 3;
  inline bool has_min_longitude() const;
  inline void clear_min_longitude();
  static const int kMinLongitudeFieldNumber = 3;
  inline float min_longitude() const;
  inline void set_min_longitude(float value);

  // optional float max_longitude = 4;
  inline bool has_max_longitude() const;
  inline void clear_max_longitude();
  static const int kMaxLongitudeFieldNumber = 4;
  inline float max_longitude() const;
  inline void set_max_longitude(float value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatRegionsEnabled.Region)
 private:
  inline void set_has_min_latitude();
  inline void clear_has_min_latitude();
  inline void set_has_max_latitude();
  inline void clear_has_max_latitude();
  inline void set_has_min_longitude();
  inline void clear_has_min_longitude();
  inline void set_has_max_longitude();
  inline void clear_has_max_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_latitude_;
  float max_latitude_;
  float min_longitude_;
  float max_longitude_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatRegionsEnabled_Region* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAChatRegionsEnabled : public ::google::protobuf::Message {
 public:
  CMsgDOTAChatRegionsEnabled();
  virtual ~CMsgDOTAChatRegionsEnabled();

  CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from);

  inline CMsgDOTAChatRegionsEnabled& operator=(const CMsgDOTAChatRegionsEnabled& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAChatRegionsEnabled& default_instance();

  void Swap(CMsgDOTAChatRegionsEnabled* other);

  // implements Message ----------------------------------------------

  CMsgDOTAChatRegionsEnabled* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAChatRegionsEnabled& from);
  void MergeFrom(const CMsgDOTAChatRegionsEnabled& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatRegionsEnabled_Region Region;

  // accessors -------------------------------------------------------

  // optional bool enable_all_regions = 1;
  inline bool has_enable_all_regions() const;
  inline void clear_enable_all_regions();
  static const int kEnableAllRegionsFieldNumber = 1;
  inline bool enable_all_regions() const;
  inline void set_enable_all_regions(bool value);

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  inline int enabled_regions_size() const;
  inline void clear_enabled_regions();
  static const int kEnabledRegionsFieldNumber = 2;
  inline const ::CMsgDOTAChatRegionsEnabled_Region& enabled_regions(int index) const;
  inline ::CMsgDOTAChatRegionsEnabled_Region* mutable_enabled_regions(int index);
  inline ::CMsgDOTAChatRegionsEnabled_Region* add_enabled_regions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >&
      enabled_regions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >*
      mutable_enabled_regions();

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatRegionsEnabled)
 private:
  inline void set_has_enable_all_regions();
  inline void clear_has_enable_all_regions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region > enabled_regions_;
  bool enable_all_regions_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fchat_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fchat_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAChatRegionsEnabled* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgClientToGCPrivateChatInvite

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatInvite::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatInvite::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCPrivateChatInvite::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCPrivateChatInvite::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgClientToGCPrivateChatInvite::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatInvite::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgClientToGCPrivateChatInvite::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCPrivateChatInvite::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}

// optional uint32 invited_account_id = 2;
inline bool CMsgClientToGCPrivateChatInvite::has_invited_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatInvite::set_has_invited_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCPrivateChatInvite::clear_has_invited_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCPrivateChatInvite::clear_invited_account_id() {
  invited_account_id_ = 0u;
  clear_has_invited_account_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatInvite::invited_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatInvite.invited_account_id)
  return invited_account_id_;
}
inline void CMsgClientToGCPrivateChatInvite::set_invited_account_id(::google::protobuf::uint32 value) {
  set_has_invited_account_id();
  invited_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatInvite.invited_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatKick

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatKick::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatKick::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCPrivateChatKick::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCPrivateChatKick::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgClientToGCPrivateChatKick::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatKick::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgClientToGCPrivateChatKick::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCPrivateChatKick::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}

// optional uint32 kick_account_id = 2;
inline bool CMsgClientToGCPrivateChatKick::has_kick_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatKick::set_has_kick_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCPrivateChatKick::clear_has_kick_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCPrivateChatKick::clear_kick_account_id() {
  kick_account_id_ = 0u;
  clear_has_kick_account_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatKick::kick_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatKick.kick_account_id)
  return kick_account_id_;
}
inline void CMsgClientToGCPrivateChatKick::set_kick_account_id(::google::protobuf::uint32 value) {
  set_has_kick_account_id();
  kick_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatKick.kick_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatPromote

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatPromote::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatPromote::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCPrivateChatPromote::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCPrivateChatPromote::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgClientToGCPrivateChatPromote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatPromote::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgClientToGCPrivateChatPromote::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCPrivateChatPromote::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}

// optional uint32 promote_account_id = 2;
inline bool CMsgClientToGCPrivateChatPromote::has_promote_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatPromote::set_has_promote_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCPrivateChatPromote::clear_has_promote_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCPrivateChatPromote::clear_promote_account_id() {
  promote_account_id_ = 0u;
  clear_has_promote_account_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatPromote::promote_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatPromote.promote_account_id)
  return promote_account_id_;
}
inline void CMsgClientToGCPrivateChatPromote::set_promote_account_id(::google::protobuf::uint32 value) {
  set_has_promote_account_id();
  promote_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatPromote.promote_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatDemote

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatDemote::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatDemote::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCPrivateChatDemote::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCPrivateChatDemote::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgClientToGCPrivateChatDemote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatDemote::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgClientToGCPrivateChatDemote::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCPrivateChatDemote::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}

// optional uint32 demote_account_id = 2;
inline bool CMsgClientToGCPrivateChatDemote::has_demote_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCPrivateChatDemote::set_has_demote_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCPrivateChatDemote::clear_has_demote_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCPrivateChatDemote::clear_demote_account_id() {
  demote_account_id_ = 0u;
  clear_has_demote_account_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCPrivateChatDemote::demote_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatDemote.demote_account_id)
  return demote_account_id_;
}
inline void CMsgClientToGCPrivateChatDemote::set_demote_account_id(::google::protobuf::uint32 value) {
  set_has_demote_account_id();
  demote_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatDemote.demote_account_id)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatResponse

// optional string private_chat_channel_name = 1;
inline bool CMsgGCToClientPrivateChatResponse::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientPrivateChatResponse::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientPrivateChatResponse::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientPrivateChatResponse::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgGCToClientPrivateChatResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
inline void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgGCToClientPrivateChatResponse::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}

// optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
inline bool CMsgGCToClientPrivateChatResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientPrivateChatResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientPrivateChatResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientPrivateChatResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatResponse.result)
  return static_cast< ::CMsgGCToClientPrivateChatResponse_Result >(result_);
}
inline void CMsgGCToClientPrivateChatResponse::set_result(::CMsgGCToClientPrivateChatResponse_Result value) {
  assert(::CMsgGCToClientPrivateChatResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatResponse.result)
}

// optional string username = 3;
inline bool CMsgGCToClientPrivateChatResponse::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientPrivateChatResponse::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientPrivateChatResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientPrivateChatResponse::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& CMsgGCToClientPrivateChatResponse::username() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatResponse.username)
  return *username_;
}
inline void CMsgGCToClientPrivateChatResponse::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatResponse.username)
}
inline void CMsgGCToClientPrivateChatResponse::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientPrivateChatResponse.username)
}
inline void CMsgGCToClientPrivateChatResponse::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientPrivateChatResponse.username)
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatResponse.username)
  return username_;
}
inline ::std::string* CMsgGCToClientPrivateChatResponse::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgGCToClientPrivateChatResponse::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientPrivateChatResponse.username)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatInfoRequest

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatInfoRequest::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCPrivateChatInfoRequest::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCPrivateChatInfoRequest::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgClientToGCPrivateChatInfoRequest::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
inline ::std::string* CMsgClientToGCPrivateChatInfoRequest::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgClientToGCPrivateChatInfoRequest::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCPrivateChatInfoRequest::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatInfoResponse_Member

// optional uint32 account_id = 1;
inline bool CMsgGCToClientPrivateChatInfoResponse_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse_Member::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.Member.account_id)
  return account_id_;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatInfoResponse.Member.account_id)
}

// optional string name = 2;
inline bool CMsgGCToClientPrivateChatInfoResponse_Member::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgGCToClientPrivateChatInfoResponse_Member::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.Member.name)
  return *name_;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse_Member::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatInfoResponse.Member.name)
  return name_;
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse_Member::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientPrivateChatInfoResponse.Member.name)
}

// optional uint32 status = 3;
inline bool CMsgGCToClientPrivateChatInfoResponse_Member::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.Member.status)
  return status_;
}
inline void CMsgGCToClientPrivateChatInfoResponse_Member::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatInfoResponse.Member.status)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatInfoResponse

// optional string private_chat_channel_name = 1;
inline bool CMsgGCToClientPrivateChatInfoResponse::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_private_chat_channel_name() {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_->clear();
  }
  clear_has_private_chat_channel_name();
}
inline const ::std::string& CMsgGCToClientPrivateChatInfoResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  return *private_chat_channel_name_;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const char* value) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  private_chat_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_chat_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  return private_chat_channel_name_;
}
inline ::std::string* CMsgGCToClientPrivateChatInfoResponse::release_private_chat_channel_name() {
  clear_has_private_chat_channel_name();
  if (private_chat_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_chat_channel_name_;
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_chat_channel_name_;
  }
  if (private_chat_channel_name) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_ = private_chat_channel_name;
  } else {
    clear_has_private_chat_channel_name();
    private_chat_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}

// repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
inline int CMsgGCToClientPrivateChatInfoResponse::members_size() const {
  return members_.size();
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_members() {
  members_.Clear();
}
inline const ::CMsgGCToClientPrivateChatInfoResponse_Member& CMsgGCToClientPrivateChatInfoResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Get(index);
}
inline ::CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Mutable(index);
}
inline ::CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse::add_members() {
  // @@protoc_insertion_point(field_add:CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgGCToClientPrivateChatInfoResponse_Member >&
CMsgGCToClientPrivateChatInfoResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientPrivateChatInfoResponse.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgGCToClientPrivateChatInfoResponse_Member >*
CMsgGCToClientPrivateChatInfoResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientPrivateChatInfoResponse.members)
  return &members_;
}

// optional uint32 creator = 3;
inline bool CMsgGCToClientPrivateChatInfoResponse::has_creator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_has_creator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_has_creator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_creator() {
  creator_ = 0u;
  clear_has_creator();
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse::creator() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.creator)
  return creator_;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_creator(::google::protobuf::uint32 value) {
  set_has_creator();
  creator_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatInfoResponse.creator)
}

// optional uint32 creation_date = 4;
inline bool CMsgGCToClientPrivateChatInfoResponse::has_creation_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_has_creation_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToClientPrivateChatInfoResponse::clear_creation_date() {
  creation_date_ = 0u;
  clear_has_creation_date();
}
inline ::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse::creation_date() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatInfoResponse.creation_date)
  return creation_date_;
}
inline void CMsgGCToClientPrivateChatInfoResponse::set_creation_date(::google::protobuf::uint32 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatInfoResponse.creation_date)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannel

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinChatChannel::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAJoinChatChannel::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAJoinChatChannel::clear_channel_name() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_->clear();
  }
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTAJoinChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.channel_name)
  return *channel_name_;
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.channel_name)
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const char* value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAJoinChatChannel.channel_name)
}
inline void CMsgDOTAJoinChatChannel::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAJoinChatChannel.channel_name)
}
inline ::std::string* CMsgDOTAJoinChatChannel::mutable_channel_name() {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_;
}
inline ::std::string* CMsgDOTAJoinChatChannel::release_channel_name() {
  clear_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_name_;
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAJoinChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (channel_name) {
    set_has_channel_name();
    channel_name_ = channel_name;
  } else {
    clear_has_channel_name();
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannel.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAJoinChatChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAJoinChatChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAJoinChatChannel::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAJoinChatChannel::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveChatChannel

// optional uint64 channel_id = 1;
inline bool CMsgDOTALeaveChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTALeaveChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTALeaveChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTALeaveChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTALeaveChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaveChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTALeaveChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTALeaveChatChannel.channel_id)
}

// -------------------------------------------------------------------

// CMsgGCChatReportPublicSpam

// optional uint64 channel_id = 1;
inline bool CMsgGCChatReportPublicSpam::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCChatReportPublicSpam::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCChatReportPublicSpam::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCChatReportPublicSpam::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgGCChatReportPublicSpam::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChatReportPublicSpam.channel_id)
  return channel_id_;
}
inline void CMsgGCChatReportPublicSpam::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCChatReportPublicSpam.channel_id)
}

// optional uint32 channel_user_id = 2;
inline bool CMsgGCChatReportPublicSpam::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCChatReportPublicSpam::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCChatReportPublicSpam::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCChatReportPublicSpam::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgGCChatReportPublicSpam::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChatReportPublicSpam.channel_user_id)
  return channel_user_id_;
}
inline void CMsgGCChatReportPublicSpam::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCChatReportPublicSpam.channel_user_id)
}

// -------------------------------------------------------------------

// CMsgDOTAClientIgnoredUser

// optional uint32 ignored_account_id = 1;
inline bool CMsgDOTAClientIgnoredUser::has_ignored_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAClientIgnoredUser::set_has_ignored_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAClientIgnoredUser::clear_has_ignored_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAClientIgnoredUser::clear_ignored_account_id() {
  ignored_account_id_ = 0u;
  clear_has_ignored_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAClientIgnoredUser::ignored_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClientIgnoredUser.ignored_account_id)
  return ignored_account_id_;
}
inline void CMsgDOTAClientIgnoredUser::set_ignored_account_id(::google::protobuf::uint32 value) {
  set_has_ignored_account_id();
  ignored_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClientIgnoredUser.ignored_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_DiceRoll

// optional int32 roll_min = 1;
inline bool CMsgDOTAChatMessage_DiceRoll::has_roll_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_has_roll_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_has_roll_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_roll_min() {
  roll_min_ = 0;
  clear_has_roll_min();
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::roll_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.DiceRoll.roll_min)
  return roll_min_;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_roll_min(::google::protobuf::int32 value) {
  set_has_roll_min();
  roll_min_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.DiceRoll.roll_min)
}

// optional int32 roll_max = 2;
inline bool CMsgDOTAChatMessage_DiceRoll::has_roll_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_has_roll_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_has_roll_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_roll_max() {
  roll_max_ = 0;
  clear_has_roll_max();
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::roll_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.DiceRoll.roll_max)
  return roll_max_;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_roll_max(::google::protobuf::int32 value) {
  set_has_roll_max();
  roll_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.DiceRoll.roll_max)
}

// optional int32 result = 3;
inline bool CMsgDOTAChatMessage_DiceRoll::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.DiceRoll.result)
  return result_;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.DiceRoll.result)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage

// optional uint32 account_id = 1;
inline bool CMsgDOTAChatMessage::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatMessage::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatMessage::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.account_id)
  return account_id_;
}
inline void CMsgDOTAChatMessage::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.account_id)
}

// optional uint64 channel_id = 2;
inline bool CMsgDOTAChatMessage::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatMessage::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatMessage::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatMessage::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.channel_id)
}

// optional string persona_name = 3;
inline bool CMsgDOTAChatMessage::has_persona_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_persona_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatMessage::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatMessage::clear_persona_name() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_->clear();
  }
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAChatMessage::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.persona_name)
  return *persona_name_;
}
inline void CMsgDOTAChatMessage::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.persona_name)
}
inline void CMsgDOTAChatMessage::set_persona_name(const char* value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.persona_name)
}
inline void CMsgDOTAChatMessage::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.persona_name)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_persona_name() {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.persona_name)
  return persona_name_;
}
inline ::std::string* CMsgDOTAChatMessage::release_persona_name() {
  clear_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = persona_name_;
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatMessage::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (persona_name) {
    set_has_persona_name();
    persona_name_ = persona_name;
  } else {
    clear_has_persona_name();
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.persona_name)
}

// optional string text = 4;
inline bool CMsgDOTAChatMessage::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAChatMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAChatMessage::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgDOTAChatMessage::text() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.text)
  return *text_;
}
inline void CMsgDOTAChatMessage::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.text)
}
inline void CMsgDOTAChatMessage::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.text)
}
inline void CMsgDOTAChatMessage::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.text)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.text)
  return text_;
}
inline ::std::string* CMsgDOTAChatMessage::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatMessage::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.text)
}

// optional uint32 timestamp = 5;
inline bool CMsgDOTAChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAChatMessage::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.timestamp)
  return timestamp_;
}
inline void CMsgDOTAChatMessage::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.timestamp)
}

// optional uint32 suggest_invite_account_id = 6;
inline bool CMsgDOTAChatMessage::has_suggest_invite_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_invite_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_invite_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_account_id() {
  suggest_invite_account_id_ = 0u;
  clear_has_suggest_invite_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_invite_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_account_id)
  return suggest_invite_account_id_;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_account_id(::google::protobuf::uint32 value) {
  set_has_suggest_invite_account_id();
  suggest_invite_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_account_id)
}

// optional string suggest_invite_name = 7;
inline bool CMsgDOTAChatMessage::has_suggest_invite_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_invite_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_invite_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_name() {
  if (suggest_invite_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_invite_name_->clear();
  }
  clear_has_suggest_invite_name();
}
inline const ::std::string& CMsgDOTAChatMessage::suggest_invite_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_name)
  return *suggest_invite_name_;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const ::std::string& value) {
  set_has_suggest_invite_name();
  if (suggest_invite_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_invite_name_ = new ::std::string;
  }
  suggest_invite_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_name)
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value) {
  set_has_suggest_invite_name();
  if (suggest_invite_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_invite_name_ = new ::std::string;
  }
  suggest_invite_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.suggest_invite_name)
}
inline void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value, size_t size) {
  set_has_suggest_invite_name();
  if (suggest_invite_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_invite_name_ = new ::std::string;
  }
  suggest_invite_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.suggest_invite_name)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_suggest_invite_name() {
  set_has_suggest_invite_name();
  if (suggest_invite_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_invite_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_;
}
inline ::std::string* CMsgDOTAChatMessage::release_suggest_invite_name() {
  clear_has_suggest_invite_name();
  if (suggest_invite_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suggest_invite_name_;
    suggest_invite_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_invite_name(::std::string* suggest_invite_name) {
  if (suggest_invite_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suggest_invite_name_;
  }
  if (suggest_invite_name) {
    set_has_suggest_invite_name();
    suggest_invite_name_ = suggest_invite_name;
  } else {
    clear_has_suggest_invite_name();
    suggest_invite_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.suggest_invite_name)
}

// optional uint32 fantasy_draft_owner_account_id = 8;
inline bool CMsgDOTAChatMessage::has_fantasy_draft_owner_account_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_fantasy_draft_owner_account_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAChatMessage::clear_has_fantasy_draft_owner_account_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAChatMessage::clear_fantasy_draft_owner_account_id() {
  fantasy_draft_owner_account_id_ = 0u;
  clear_has_fantasy_draft_owner_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::fantasy_draft_owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
  return fantasy_draft_owner_account_id_;
}
inline void CMsgDOTAChatMessage::set_fantasy_draft_owner_account_id(::google::protobuf::uint32 value) {
  set_has_fantasy_draft_owner_account_id();
  fantasy_draft_owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
}

// optional uint32 fantasy_draft_player_account_id = 9;
inline bool CMsgDOTAChatMessage::has_fantasy_draft_player_account_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_fantasy_draft_player_account_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAChatMessage::clear_has_fantasy_draft_player_account_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAChatMessage::clear_fantasy_draft_player_account_id() {
  fantasy_draft_player_account_id_ = 0u;
  clear_has_fantasy_draft_player_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::fantasy_draft_player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.fantasy_draft_player_account_id)
  return fantasy_draft_player_account_id_;
}
inline void CMsgDOTAChatMessage::set_fantasy_draft_player_account_id(::google::protobuf::uint32 value) {
  set_has_fantasy_draft_player_account_id();
  fantasy_draft_player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.fantasy_draft_player_account_id)
}

// optional uint32 event_id = 10;
inline bool CMsgDOTAChatMessage::has_event_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_event_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAChatMessage::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAChatMessage::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.event_id)
  return event_id_;
}
inline void CMsgDOTAChatMessage::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.event_id)
}

// optional bool suggest_invite_to_lobby = 11;
inline bool CMsgDOTAChatMessage::has_suggest_invite_to_lobby() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_invite_to_lobby() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_invite_to_lobby() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_to_lobby() {
  suggest_invite_to_lobby_ = false;
  clear_has_suggest_invite_to_lobby();
}
inline bool CMsgDOTAChatMessage::suggest_invite_to_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_to_lobby)
  return suggest_invite_to_lobby_;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_to_lobby(bool value) {
  set_has_suggest_invite_to_lobby();
  suggest_invite_to_lobby_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_to_lobby)
}

// optional uint32 event_points = 12;
inline bool CMsgDOTAChatMessage::has_event_points() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_event_points() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAChatMessage::clear_has_event_points() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAChatMessage::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.event_points)
  return event_points_;
}
inline void CMsgDOTAChatMessage::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.event_points)
}

// optional bool coin_flip = 13;
inline bool CMsgDOTAChatMessage::has_coin_flip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_coin_flip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAChatMessage::clear_has_coin_flip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAChatMessage::clear_coin_flip() {
  coin_flip_ = false;
  clear_has_coin_flip();
}
inline bool CMsgDOTAChatMessage::coin_flip() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.coin_flip)
  return coin_flip_;
}
inline void CMsgDOTAChatMessage::set_coin_flip(bool value) {
  set_has_coin_flip();
  coin_flip_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.coin_flip)
}

// optional int32 player_id = 14 [default = -1];
inline bool CMsgDOTAChatMessage::has_player_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_player_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTAChatMessage::clear_has_player_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTAChatMessage::clear_player_id() {
  player_id_ = -1;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CMsgDOTAChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.player_id)
  return player_id_;
}
inline void CMsgDOTAChatMessage::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.player_id)
}

// optional uint32 share_profile_account_id = 15;
inline bool CMsgDOTAChatMessage::has_share_profile_account_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_share_profile_account_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTAChatMessage::clear_has_share_profile_account_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTAChatMessage::clear_share_profile_account_id() {
  share_profile_account_id_ = 0u;
  clear_has_share_profile_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::share_profile_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_profile_account_id)
  return share_profile_account_id_;
}
inline void CMsgDOTAChatMessage::set_share_profile_account_id(::google::protobuf::uint32 value) {
  set_has_share_profile_account_id();
  share_profile_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_profile_account_id)
}

// optional uint32 channel_user_id = 16;
inline bool CMsgDOTAChatMessage::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTAChatMessage::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTAChatMessage::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatMessage::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.channel_user_id)
}

// optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
inline bool CMsgDOTAChatMessage::has_dice_roll() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_dice_roll() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTAChatMessage::clear_has_dice_roll() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTAChatMessage::clear_dice_roll() {
  if (dice_roll_ != NULL) dice_roll_->::CMsgDOTAChatMessage_DiceRoll::Clear();
  clear_has_dice_roll();
}
inline const ::CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage::dice_roll() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.dice_roll)
  return dice_roll_ != NULL ? *dice_roll_ : *default_instance_->dice_roll_;
}
inline ::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::mutable_dice_roll() {
  set_has_dice_roll();
  if (dice_roll_ == NULL) dice_roll_ = new ::CMsgDOTAChatMessage_DiceRoll;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.dice_roll)
  return dice_roll_;
}
inline ::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::release_dice_roll() {
  clear_has_dice_roll();
  ::CMsgDOTAChatMessage_DiceRoll* temp = dice_roll_;
  dice_roll_ = NULL;
  return temp;
}
inline void CMsgDOTAChatMessage::set_allocated_dice_roll(::CMsgDOTAChatMessage_DiceRoll* dice_roll) {
  delete dice_roll_;
  dice_roll_ = dice_roll;
  if (dice_roll) {
    set_has_dice_roll();
  } else {
    clear_has_dice_roll();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.dice_roll)
}

// optional uint64 share_party_id = 18;
inline bool CMsgDOTAChatMessage::has_share_party_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_share_party_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTAChatMessage::clear_has_share_party_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTAChatMessage::clear_share_party_id() {
  share_party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_party_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::share_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_party_id)
  return share_party_id_;
}
inline void CMsgDOTAChatMessage::set_share_party_id(::google::protobuf::uint64 value) {
  set_has_share_party_id();
  share_party_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_party_id)
}

// optional uint64 share_lobby_id = 19;
inline bool CMsgDOTAChatMessage::has_share_lobby_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_share_lobby_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTAChatMessage::clear_has_share_lobby_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTAChatMessage::clear_share_lobby_id() {
  share_lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_lobby_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::share_lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_lobby_id)
  return share_lobby_id_;
}
inline void CMsgDOTAChatMessage::set_share_lobby_id(::google::protobuf::uint64 value) {
  set_has_share_lobby_id();
  share_lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_lobby_id)
}

// optional uint64 share_lobby_custom_game_id = 20;
inline bool CMsgDOTAChatMessage::has_share_lobby_custom_game_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_share_lobby_custom_game_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTAChatMessage::clear_has_share_lobby_custom_game_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTAChatMessage::clear_share_lobby_custom_game_id() {
  share_lobby_custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_lobby_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMessage::share_lobby_custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_lobby_custom_game_id)
  return share_lobby_custom_game_id_;
}
inline void CMsgDOTAChatMessage::set_share_lobby_custom_game_id(::google::protobuf::uint64 value) {
  set_has_share_lobby_custom_game_id();
  share_lobby_custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_lobby_custom_game_id)
}

// optional string share_lobby_passkey = 21;
inline bool CMsgDOTAChatMessage::has_share_lobby_passkey() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_share_lobby_passkey() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTAChatMessage::clear_has_share_lobby_passkey() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTAChatMessage::clear_share_lobby_passkey() {
  if (share_lobby_passkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    share_lobby_passkey_->clear();
  }
  clear_has_share_lobby_passkey();
}
inline const ::std::string& CMsgDOTAChatMessage::share_lobby_passkey() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_lobby_passkey)
  return *share_lobby_passkey_;
}
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(const ::std::string& value) {
  set_has_share_lobby_passkey();
  if (share_lobby_passkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    share_lobby_passkey_ = new ::std::string;
  }
  share_lobby_passkey_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_lobby_passkey)
}
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(const char* value) {
  set_has_share_lobby_passkey();
  if (share_lobby_passkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    share_lobby_passkey_ = new ::std::string;
  }
  share_lobby_passkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.share_lobby_passkey)
}
inline void CMsgDOTAChatMessage::set_share_lobby_passkey(const char* value, size_t size) {
  set_has_share_lobby_passkey();
  if (share_lobby_passkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    share_lobby_passkey_ = new ::std::string;
  }
  share_lobby_passkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.share_lobby_passkey)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_share_lobby_passkey() {
  set_has_share_lobby_passkey();
  if (share_lobby_passkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    share_lobby_passkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.share_lobby_passkey)
  return share_lobby_passkey_;
}
inline ::std::string* CMsgDOTAChatMessage::release_share_lobby_passkey() {
  clear_has_share_lobby_passkey();
  if (share_lobby_passkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = share_lobby_passkey_;
    share_lobby_passkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatMessage::set_allocated_share_lobby_passkey(::std::string* share_lobby_passkey) {
  if (share_lobby_passkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete share_lobby_passkey_;
  }
  if (share_lobby_passkey) {
    set_has_share_lobby_passkey();
    share_lobby_passkey_ = share_lobby_passkey;
  } else {
    clear_has_share_lobby_passkey();
    share_lobby_passkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.share_lobby_passkey)
}

// optional uint32 private_chat_channel_id = 22;
inline bool CMsgDOTAChatMessage::has_private_chat_channel_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_private_chat_channel_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTAChatMessage::clear_has_private_chat_channel_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTAChatMessage::clear_private_chat_channel_id() {
  private_chat_channel_id_ = 0u;
  clear_has_private_chat_channel_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::private_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.private_chat_channel_id)
  return private_chat_channel_id_;
}
inline void CMsgDOTAChatMessage::set_private_chat_channel_id(::google::protobuf::uint32 value) {
  set_has_private_chat_channel_id();
  private_chat_channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.private_chat_channel_id)
}

// optional uint32 status = 23;
inline bool CMsgDOTAChatMessage::has_status() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_status() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTAChatMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTAChatMessage::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.status)
  return status_;
}
inline void CMsgDOTAChatMessage::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.status)
}

// optional bool battle_cup_victory = 24;
inline bool CMsgDOTAChatMessage::has_battle_cup_victory() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_battle_cup_victory() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTAChatMessage::clear_has_battle_cup_victory() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTAChatMessage::clear_battle_cup_victory() {
  battle_cup_victory_ = false;
  clear_has_battle_cup_victory();
}
inline bool CMsgDOTAChatMessage::battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.battle_cup_victory)
  return battle_cup_victory_;
}
inline void CMsgDOTAChatMessage::set_battle_cup_victory(bool value) {
  set_has_battle_cup_victory();
  battle_cup_victory_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.battle_cup_victory)
}

// optional uint32 badge_level = 25;
inline bool CMsgDOTAChatMessage::has_badge_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_badge_level() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTAChatMessage::clear_has_badge_level() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTAChatMessage::clear_badge_level() {
  badge_level_ = 0u;
  clear_has_badge_level();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::badge_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.badge_level)
  return badge_level_;
}
inline void CMsgDOTAChatMessage::set_badge_level(::google::protobuf::uint32 value) {
  set_has_badge_level();
  badge_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.badge_level)
}

// optional uint32 suggest_pick_hero_id = 26;
inline bool CMsgDOTAChatMessage::has_suggest_pick_hero_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_pick_hero_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_pick_hero_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTAChatMessage::clear_suggest_pick_hero_id() {
  suggest_pick_hero_id_ = 0u;
  clear_has_suggest_pick_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_pick_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_pick_hero_id)
  return suggest_pick_hero_id_;
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_id(::google::protobuf::uint32 value) {
  set_has_suggest_pick_hero_id();
  suggest_pick_hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_pick_hero_id)
}

// optional string suggest_pick_hero_role = 27;
inline bool CMsgDOTAChatMessage::has_suggest_pick_hero_role() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_suggest_pick_hero_role() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgDOTAChatMessage::clear_has_suggest_pick_hero_role() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgDOTAChatMessage::clear_suggest_pick_hero_role() {
  if (suggest_pick_hero_role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_pick_hero_role_->clear();
  }
  clear_has_suggest_pick_hero_role();
}
inline const ::std::string& CMsgDOTAChatMessage::suggest_pick_hero_role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_pick_hero_role)
  return *suggest_pick_hero_role_;
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const ::std::string& value) {
  set_has_suggest_pick_hero_role();
  if (suggest_pick_hero_role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_pick_hero_role_ = new ::std::string;
  }
  suggest_pick_hero_role_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_pick_hero_role)
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const char* value) {
  set_has_suggest_pick_hero_role();
  if (suggest_pick_hero_role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_pick_hero_role_ = new ::std::string;
  }
  suggest_pick_hero_role_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMessage.suggest_pick_hero_role)
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const char* value, size_t size) {
  set_has_suggest_pick_hero_role();
  if (suggest_pick_hero_role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_pick_hero_role_ = new ::std::string;
  }
  suggest_pick_hero_role_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMessage.suggest_pick_hero_role)
}
inline ::std::string* CMsgDOTAChatMessage::mutable_suggest_pick_hero_role() {
  set_has_suggest_pick_hero_role();
  if (suggest_pick_hero_role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    suggest_pick_hero_role_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.suggest_pick_hero_role)
  return suggest_pick_hero_role_;
}
inline ::std::string* CMsgDOTAChatMessage::release_suggest_pick_hero_role() {
  clear_has_suggest_pick_hero_role();
  if (suggest_pick_hero_role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = suggest_pick_hero_role_;
    suggest_pick_hero_role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_pick_hero_role(::std::string* suggest_pick_hero_role) {
  if (suggest_pick_hero_role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suggest_pick_hero_role_;
  }
  if (suggest_pick_hero_role) {
    set_has_suggest_pick_hero_role();
    suggest_pick_hero_role_ = suggest_pick_hero_role;
  } else {
    clear_has_suggest_pick_hero_role();
    suggest_pick_hero_role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.suggest_pick_hero_role)
}

// optional bool terse = 28;
inline bool CMsgDOTAChatMessage::has_terse() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTAChatMessage::set_has_terse() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgDOTAChatMessage::clear_has_terse() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgDOTAChatMessage::clear_terse() {
  terse_ = false;
  clear_has_terse();
}
inline bool CMsgDOTAChatMessage::terse() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.terse)
  return terse_;
}
inline void CMsgDOTAChatMessage::set_terse(bool value) {
  set_has_terse();
  terse_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.terse)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMember

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatMember::set_has_persona_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatMember::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatMember::clear_persona_name() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_->clear();
  }
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAChatMember::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.persona_name)
  return *persona_name_;
}
inline void CMsgDOTAChatMember::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.persona_name)
}
inline void CMsgDOTAChatMember::set_persona_name(const char* value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatMember.persona_name)
}
inline void CMsgDOTAChatMember::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatMember.persona_name)
}
inline ::std::string* CMsgDOTAChatMember::mutable_persona_name() {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMember.persona_name)
  return persona_name_;
}
inline ::std::string* CMsgDOTAChatMember::release_persona_name() {
  clear_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = persona_name_;
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (persona_name) {
    set_has_persona_name();
    persona_name_ = persona_name;
  } else {
    clear_has_persona_name();
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMember.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatMember::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatMember::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatMember::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatMember::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatMember::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatMember::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatMember::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAChatMember::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAChatMember::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgDOTAChatMember::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.status)
  return status_;
}
inline void CMsgDOTAChatMember::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.status)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannelResponse

// optional uint32 response = 1;
inline bool CMsgDOTAJoinChatChannelResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_response() {
  response_ = 0u;
  clear_has_response();
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.response)
  return response_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_response(::google::protobuf::uint32 value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.response)
}

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_channel_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_name() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_->clear();
  }
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTAJoinChatChannelResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_name)
  return *channel_name_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::mutable_channel_name() {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_;
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::release_channel_name() {
  clear_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_name_;
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (channel_name) {
    set_has_channel_name();
    channel_name_ = channel_name;
  } else {
    clear_has_channel_name();
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannelResponse.channel_name)
}

// optional fixed64 channel_id = 3;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAJoinChatChannelResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_id)
  return channel_id_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_id)
}

// optional uint32 max_members = 4;
inline bool CMsgDOTAJoinChatChannelResponse::has_max_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_max_members() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_max_members() {
  max_members_ = 0u;
  clear_has_max_members();
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.max_members)
  return max_members_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_max_members(::google::protobuf::uint32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.max_members)
}

// repeated .CMsgDOTAChatMember members = 5;
inline int CMsgDOTAJoinChatChannelResponse::members_size() const {
  return members_.size();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTAChatMember& CMsgDOTAJoinChatChannelResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.members)
  return members_.Get(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAJoinChatChannelResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
CMsgDOTAJoinChatChannelResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAJoinChatChannelResponse.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
CMsgDOTAJoinChatChannelResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAJoinChatChannelResponse.members)
  return &members_;
}

// optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_channel_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannelResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_type)
}

// optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
inline bool CMsgDOTAJoinChatChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.result)
  return static_cast< ::CMsgDOTAJoinChatChannelResponse_Result >(result_);
}
inline void CMsgDOTAJoinChatChannelResponse::set_result(::CMsgDOTAJoinChatChannelResponse_Result value) {
  assert(::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.result)
}

// optional bool gc_initiated_join = 8;
inline bool CMsgDOTAJoinChatChannelResponse::has_gc_initiated_join() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_gc_initiated_join() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_gc_initiated_join() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_gc_initiated_join() {
  gc_initiated_join_ = false;
  clear_has_gc_initiated_join();
}
inline bool CMsgDOTAJoinChatChannelResponse::gc_initiated_join() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
  return gc_initiated_join_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_gc_initiated_join(bool value) {
  set_has_gc_initiated_join();
  gc_initiated_join_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
}

// optional uint32 channel_user_id = 9;
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_user_id)
}

// optional string welcome_message = 10;
inline bool CMsgDOTAJoinChatChannelResponse::has_welcome_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAJoinChatChannelResponse::set_has_welcome_message() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_has_welcome_message() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAJoinChatChannelResponse::clear_welcome_message() {
  if (welcome_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_message_->clear();
  }
  clear_has_welcome_message();
}
inline const ::std::string& CMsgDOTAJoinChatChannelResponse::welcome_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.welcome_message)
  return *welcome_message_;
}
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const ::std::string& value) {
  set_has_welcome_message();
  if (welcome_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_message_ = new ::std::string;
  }
  welcome_message_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.welcome_message)
}
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const char* value) {
  set_has_welcome_message();
  if (welcome_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_message_ = new ::std::string;
  }
  welcome_message_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAJoinChatChannelResponse.welcome_message)
}
inline void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const char* value, size_t size) {
  set_has_welcome_message();
  if (welcome_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_message_ = new ::std::string;
  }
  welcome_message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAJoinChatChannelResponse.welcome_message)
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::mutable_welcome_message() {
  set_has_welcome_message();
  if (welcome_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.welcome_message)
  return welcome_message_;
}
inline ::std::string* CMsgDOTAJoinChatChannelResponse::release_welcome_message() {
  clear_has_welcome_message();
  if (welcome_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = welcome_message_;
    welcome_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_welcome_message(::std::string* welcome_message) {
  if (welcome_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcome_message_;
  }
  if (welcome_message) {
    set_has_welcome_message();
    welcome_message_ = welcome_message;
  } else {
    clear_has_welcome_message();
    welcome_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannelResponse.welcome_message)
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelFullUpdate

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatChannelFullUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelFullUpdate::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatChannelFullUpdate::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatChannelFullUpdate::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelFullUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelFullUpdate.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatChannelFullUpdate::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelFullUpdate.channel_id)
}

// repeated .CMsgDOTAChatMember members = 2;
inline int CMsgDOTAChatChannelFullUpdate::members_size() const {
  return members_.size();
}
inline void CMsgDOTAChatChannelFullUpdate::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTAChatMember& CMsgDOTAChatChannelFullUpdate::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelFullUpdate.members)
  return members_.Get(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatChannelFullUpdate.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAChatChannelFullUpdate.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >&
CMsgDOTAChatChannelFullUpdate::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatChannelFullUpdate.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatMember >*
CMsgDOTAChatChannelFullUpdate::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatChannelFullUpdate.members)
  return &members_;
}

// -------------------------------------------------------------------

// CMsgDOTAOtherJoinedChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.channel_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAOtherJoinedChatChannel::has_persona_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_persona_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_persona_name() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_->clear();
  }
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAOtherJoinedChatChannel::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.persona_name)
  return *persona_name_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline ::std::string* CMsgDOTAOtherJoinedChatChannel::mutable_persona_name() {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_;
}
inline ::std::string* CMsgDOTAOtherJoinedChatChannel::release_persona_name() {
  clear_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = persona_name_;
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAOtherJoinedChatChannel::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (persona_name) {
    set_has_persona_name();
    persona_name_ = persona_name;
  } else {
    clear_has_persona_name();
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAOtherJoinedChatChannel.persona_name)
}

// optional fixed64 steam_id = 3;
inline bool CMsgDOTAOtherJoinedChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.steam_id)
  return steam_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.steam_id)
}

// optional uint32 channel_user_id = 4;
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAOtherJoinedChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.channel_user_id)
}

// optional uint32 status = 5;
inline bool CMsgDOTAOtherJoinedChatChannel::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgDOTAOtherJoinedChatChannel::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.status)
  return status_;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.status)
}

// -------------------------------------------------------------------

// CMsgDOTAOtherLeftChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.channel_id)
  return channel_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.channel_id)
}

// optional fixed64 steam_id = 2;
inline bool CMsgDOTAOtherLeftChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.steam_id)
  return steam_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.steam_id)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAOtherLeftChatChannel::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAOtherLeftChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.channel_user_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelMemberUpdate_JoinedMember

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate_JoinedMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.JoinedMember.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelMemberUpdate.JoinedMember.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_persona_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_persona_name() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_->clear();
  }
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAChatChannelMemberUpdate_JoinedMember::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  return *persona_name_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const char* value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
inline ::std::string* CMsgDOTAChatChannelMemberUpdate_JoinedMember::mutable_persona_name() {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  return persona_name_;
}
inline ::std::string* CMsgDOTAChatChannelMemberUpdate_JoinedMember::release_persona_name() {
  clear_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = persona_name_;
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (persona_name) {
    set_has_persona_name();
    persona_name_ = persona_name;
  } else {
    clear_has_persona_name();
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatChannelMemberUpdate_JoinedMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.JoinedMember.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelMemberUpdate.JoinedMember.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgDOTAChatChannelMemberUpdate_JoinedMember::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.JoinedMember.status)
  return status_;
}
inline void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelMemberUpdate.JoinedMember.status)
}

// -------------------------------------------------------------------

// CMsgDOTAChatChannelMemberUpdate

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatChannelMemberUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatChannelMemberUpdate::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatChannelMemberUpdate::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelMemberUpdate.channel_id)
}

// repeated fixed64 left_steam_ids = 2;
inline int CMsgDOTAChatChannelMemberUpdate::left_steam_ids_size() const {
  return left_steam_ids_.size();
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_left_steam_ids() {
  left_steam_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate::left_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return left_steam_ids_.Get(index);
}
inline void CMsgDOTAChatChannelMemberUpdate::set_left_steam_ids(int index, ::google::protobuf::uint64 value) {
  left_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
}
inline void CMsgDOTAChatChannelMemberUpdate::add_left_steam_ids(::google::protobuf::uint64 value) {
  left_steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAChatChannelMemberUpdate::left_steam_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return left_steam_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAChatChannelMemberUpdate::mutable_left_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return &left_steam_ids_;
}

// repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
inline int CMsgDOTAChatChannelMemberUpdate::joined_members_size() const {
  return joined_members_.size();
}
inline void CMsgDOTAChatChannelMemberUpdate::clear_joined_members() {
  joined_members_.Clear();
}
inline const ::CMsgDOTAChatChannelMemberUpdate_JoinedMember& CMsgDOTAChatChannelMemberUpdate::joined_members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Get(index);
}
inline ::CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate::mutable_joined_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Mutable(index);
}
inline ::CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate::add_joined_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember >&
CMsgDOTAChatChannelMemberUpdate::joined_members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember >*
CMsgDOTAChatChannelMemberUpdate::mutable_joined_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatChannelMemberUpdate.joined_members)
  return &joined_members_;
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelList

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse_ChatChannel

// optional string channel_name = 1;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_name() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_->clear();
  }
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return *channel_name_;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline ::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::mutable_channel_name() {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_;
}
inline ::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::release_channel_name() {
  clear_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_name_;
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (channel_name) {
    set_has_channel_name();
    channel_name_ = channel_name;
  } else {
    clear_has_channel_name();
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}

// optional uint32 num_members = 2;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_num_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_num_members() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_num_members() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_num_members() {
  num_members_ = 0u;
  clear_has_num_members();
}
inline ::google::protobuf::uint32 CMsgDOTARequestChatChannelListResponse_ChatChannel::num_members() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
  return num_members_;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_num_members(::google::protobuf::uint32 value) {
  set_has_num_members();
  num_members_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
}

// optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse

// repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
inline int CMsgDOTARequestChatChannelListResponse::channels_size() const {
  return channels_.size();
}
inline void CMsgDOTARequestChatChannelListResponse::clear_channels() {
  channels_.Clear();
}
inline const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Get(index);
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Mutable(index);
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::add_channels() {
  // @@protoc_insertion_point(field_add:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
CMsgDOTARequestChatChannelListResponse::channels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestChatChannelListResponse.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
CMsgDOTARequestChatChannelListResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestChatChannelListResponse.channels)
  return &channels_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserList

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatGetUserList::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetUserList::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatGetUserList::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatGetUserList::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatGetUserList::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserList.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatGetUserList::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserList.channel_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserListResponse_Member

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatGetUserListResponse_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.steam_id)
  return steam_id_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_persona_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_has_persona_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_persona_name() {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_->clear();
  }
  clear_has_persona_name();
}
inline const ::std::string& CMsgDOTAChatGetUserListResponse_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return *persona_name_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const char* value) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  persona_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
inline ::std::string* CMsgDOTAChatGetUserListResponse_Member::mutable_persona_name() {
  set_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persona_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return persona_name_;
}
inline ::std::string* CMsgDOTAChatGetUserListResponse_Member::release_persona_name() {
  clear_has_persona_name();
  if (persona_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = persona_name_;
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persona_name_;
  }
  if (persona_name) {
    set_has_persona_name();
    persona_name_ = persona_name;
  } else {
    clear_has_persona_name();
    persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatGetUserListResponse.Member.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
inline ::google::protobuf::uint32 CMsgDOTAChatGetUserListResponse_Member::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
  return channel_user_id_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatGetUserListResponse_Member::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgDOTAChatGetUserListResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.status)
  return status_;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.status)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserListResponse

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatGetUserListResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetUserListResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatGetUserListResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatGetUserListResponse::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 CMsgDOTAChatGetUserListResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.channel_id)
  return channel_id_;
}
inline void CMsgDOTAChatGetUserListResponse::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.channel_id)
}

// repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
inline int CMsgDOTAChatGetUserListResponse::members_size() const {
  return members_.size();
}
inline void CMsgDOTAChatGetUserListResponse::clear_members() {
  members_.Clear();
}
inline const ::CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.members)
  return members_.Get(index);
}
inline ::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetUserListResponse.members)
  return members_.Mutable(index);
}
inline ::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::add_members() {
  // @@protoc_insertion_point(field_add:CMsgDOTAChatGetUserListResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >&
CMsgDOTAChatGetUserListResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatGetUserListResponse.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >*
CMsgDOTAChatGetUserListResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatGetUserListResponse.members)
  return &members_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetMemberCount

// optional string channel_name = 1;
inline bool CMsgDOTAChatGetMemberCount::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetMemberCount::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatGetMemberCount::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatGetMemberCount::clear_channel_name() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_->clear();
  }
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTAChatGetMemberCount::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCount.channel_name)
  return *channel_name_;
}
inline void CMsgDOTAChatGetMemberCount::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCount.channel_name)
}
inline void CMsgDOTAChatGetMemberCount::set_channel_name(const char* value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatGetMemberCount.channel_name)
}
inline void CMsgDOTAChatGetMemberCount::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatGetMemberCount.channel_name)
}
inline ::std::string* CMsgDOTAChatGetMemberCount::mutable_channel_name() {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetMemberCount.channel_name)
  return channel_name_;
}
inline ::std::string* CMsgDOTAChatGetMemberCount::release_channel_name() {
  clear_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_name_;
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatGetMemberCount::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (channel_name) {
    set_has_channel_name();
    channel_name_ = channel_name;
  } else {
    clear_has_channel_name();
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatGetMemberCount.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAChatGetMemberCount::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatGetMemberCount::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatGetMemberCount::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatGetMemberCount::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTAChatGetMemberCount::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCount.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAChatGetMemberCount::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCount.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetMemberCountResponse

// optional string channel_name = 1;
inline bool CMsgDOTAChatGetMemberCountResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_channel_name() {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_->clear();
  }
  clear_has_channel_name();
}
inline const ::std::string& CMsgDOTAChatGetMemberCountResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCountResponse.channel_name)
  return *channel_name_;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCountResponse.channel_name)
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const char* value) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAChatGetMemberCountResponse.channel_name)
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAChatGetMemberCountResponse.channel_name)
}
inline ::std::string* CMsgDOTAChatGetMemberCountResponse::mutable_channel_name() {
  set_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetMemberCountResponse.channel_name)
  return channel_name_;
}
inline ::std::string* CMsgDOTAChatGetMemberCountResponse::release_channel_name() {
  clear_has_channel_name();
  if (channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_name_;
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAChatGetMemberCountResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_name_;
  }
  if (channel_name) {
    set_has_channel_name();
    channel_name_ = channel_name;
  } else {
    clear_has_channel_name();
    channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatGetMemberCountResponse.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAChatGetMemberCountResponse::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::DOTAChatChannelType_t CMsgDOTAChatGetMemberCountResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCountResponse.channel_type)
  return static_cast< ::DOTAChatChannelType_t >(channel_type_);
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCountResponse.channel_type)
}

// optional uint32 member_count = 3;
inline bool CMsgDOTAChatGetMemberCountResponse::has_member_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_has_member_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 CMsgDOTAChatGetMemberCountResponse::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCountResponse.member_count)
  return member_count_;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCountResponse.member_count)
}

// -------------------------------------------------------------------

// CMsgDOTAChatRegionsEnabled_Region

// optional float min_latitude = 1;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_min_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_has_min_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_has_min_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_min_latitude() {
  min_latitude_ = 0;
  clear_has_min_latitude();
}
inline float CMsgDOTAChatRegionsEnabled_Region::min_latitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.min_latitude)
  return min_latitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_min_latitude(float value) {
  set_has_min_latitude();
  min_latitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.min_latitude)
}

// optional float max_latitude = 2;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_max_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_has_max_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_has_max_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_max_latitude() {
  max_latitude_ = 0;
  clear_has_max_latitude();
}
inline float CMsgDOTAChatRegionsEnabled_Region::max_latitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.max_latitude)
  return max_latitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_max_latitude(float value) {
  set_has_max_latitude();
  max_latitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.max_latitude)
}

// optional float min_longitude = 3;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_min_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_has_min_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_has_min_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_min_longitude() {
  min_longitude_ = 0;
  clear_has_min_longitude();
}
inline float CMsgDOTAChatRegionsEnabled_Region::min_longitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.min_longitude)
  return min_longitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_min_longitude(float value) {
  set_has_min_longitude();
  min_longitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.min_longitude)
}

// optional float max_longitude = 4;
inline bool CMsgDOTAChatRegionsEnabled_Region::has_max_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_has_max_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_has_max_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_max_longitude() {
  max_longitude_ = 0;
  clear_has_max_longitude();
}
inline float CMsgDOTAChatRegionsEnabled_Region::max_longitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.max_longitude)
  return max_longitude_;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_max_longitude(float value) {
  set_has_max_longitude();
  max_longitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.max_longitude)
}

// -------------------------------------------------------------------

// CMsgDOTAChatRegionsEnabled

// optional bool enable_all_regions = 1;
inline bool CMsgDOTAChatRegionsEnabled::has_enable_all_regions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAChatRegionsEnabled::set_has_enable_all_regions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAChatRegionsEnabled::clear_has_enable_all_regions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAChatRegionsEnabled::clear_enable_all_regions() {
  enable_all_regions_ = false;
  clear_has_enable_all_regions();
}
inline bool CMsgDOTAChatRegionsEnabled::enable_all_regions() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.enable_all_regions)
  return enable_all_regions_;
}
inline void CMsgDOTAChatRegionsEnabled::set_enable_all_regions(bool value) {
  set_has_enable_all_regions();
  enable_all_regions_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.enable_all_regions)
}

// repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
inline int CMsgDOTAChatRegionsEnabled::enabled_regions_size() const {
  return enabled_regions_.size();
}
inline void CMsgDOTAChatRegionsEnabled::clear_enabled_regions() {
  enabled_regions_.Clear();
}
inline const ::CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled::enabled_regions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Get(index);
}
inline ::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::mutable_enabled_regions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Mutable(index);
}
inline ::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::add_enabled_regions() {
  // @@protoc_insertion_point(field_add:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >&
CMsgDOTAChatRegionsEnabled::enabled_regions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >*
CMsgDOTAChatRegionsEnabled::mutable_enabled_regions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return &enabled_regions_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CMsgGCToClientPrivateChatResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCToClientPrivateChatResponse_Result>() {
  return ::CMsgGCToClientPrivateChatResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAJoinChatChannelResponse_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAJoinChatChannelResponse_Result>() {
  return ::CMsgDOTAJoinChatChannelResponse_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fclient_5fchat_2eproto__INCLUDED
