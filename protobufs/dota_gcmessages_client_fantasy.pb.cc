// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_fantasy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgGCPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCPlayerInfo_PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCPlayerInfo_PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACreateFantasyLeagueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACreateFantasyLeagueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACreateFantasyLeagueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACreateFantasyLeagueResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgFantasyLeagueScoring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFantasyLeagueScoring_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfo_OwnerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueInfo_OwnerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueEditInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueEditInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueFindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueFindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueFindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueFindResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueMatchupsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueMatchupsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAEditFantasyTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAEditFantasyTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAEditFantasyTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAEditFantasyTeamResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAEditFantasyTeamResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamScoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamScoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamStandingsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamStandingsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerScoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerScoreResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerStandingsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerStandingsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueCreateResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamCreateResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueEditInvitesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueEditInvitesResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueDraftStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueDraftStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueDraftPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeagueDraftPlayerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterSwapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamRosterSwapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamRosterSwapResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterAddDropRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamRosterAddDropRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamRosterAddDropResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamTradesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamTradesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesResponse_Trade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamTradesResponse_Trade_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradeCancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamTradeCancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamTradeCancelResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamRosterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyTeamRosterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerHisoricalStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessageAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyMessageAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyMessagesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyMessagesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesResponse_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyMessagesResponse_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyMessagesResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyRemoveOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyRemoveOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyRemoveOwnerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyRemoveOwnerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyScheduledMatchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyScheduledMatchesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeaveLeagueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeaveLeagueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeaveLeagueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyLeaveLeagueResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerScoreDetailsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerScoreDetailsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_Game_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAClearTournamentGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAClearTournamentGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPassportVoteTeamGuess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPassportVoteTeamGuess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPassportVoteGenericSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPassportVoteGenericSelection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPassportStampedPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPassportStampedPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPassportPlayerCardChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPassportPlayerCardChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPassportVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPassportVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPassportDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPassportDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPassportDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPassportDataResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentTeamState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentNodeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_fantasy.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgGCPlayerInfo_descriptor_ = file->message_type(0);
  static const int CMsgGCPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, player_infos_),
  };
  CMsgGCPlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCPlayerInfo_descriptor_,
      CMsgGCPlayerInfo::default_instance_,
      CMsgGCPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCPlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, _internal_metadata_),
      -1);
  CMsgGCPlayerInfo_PlayerInfo_descriptor_ = CMsgGCPlayerInfo_descriptor_->nested_type(0);
  static const int CMsgGCPlayerInfo_PlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, fantasy_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, is_locked_),
  };
  CMsgGCPlayerInfo_PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCPlayerInfo_PlayerInfo_descriptor_,
      CMsgGCPlayerInfo_PlayerInfo::default_instance_,
      CMsgGCPlayerInfo_PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCPlayerInfo_PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, _internal_metadata_),
      -1);
  CMsgDOTACreateFantasyLeagueRequest_descriptor_ = file->message_type(1);
  static const int CMsgDOTACreateFantasyLeagueRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, league_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, selection_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, team_count_),
  };
  CMsgDOTACreateFantasyLeagueRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTACreateFantasyLeagueRequest_descriptor_,
      CMsgDOTACreateFantasyLeagueRequest::default_instance_,
      CMsgDOTACreateFantasyLeagueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTACreateFantasyLeagueRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, _internal_metadata_),
      -1);
  CMsgDOTACreateFantasyLeagueResponse_descriptor_ = file->message_type(2);
  static const int CMsgDOTACreateFantasyLeagueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueResponse, result_),
  };
  CMsgDOTACreateFantasyLeagueResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTACreateFantasyLeagueResponse_descriptor_,
      CMsgDOTACreateFantasyLeagueResponse::default_instance_,
      CMsgDOTACreateFantasyLeagueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTACreateFantasyLeagueResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueResponse, _internal_metadata_),
      -1);
  CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor_ = CMsgDOTACreateFantasyLeagueResponse_descriptor_->enum_type(0);
  CMsgFantasyLeagueScoring_descriptor_ = file->message_type(3);
  static const int CMsgFantasyLeagueScoring_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, xppm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, stuns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, tower_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, roshan_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, multiplier_premium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, multiplier_professional_),
  };
  CMsgFantasyLeagueScoring_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgFantasyLeagueScoring_descriptor_,
      CMsgFantasyLeagueScoring::default_instance_,
      CMsgFantasyLeagueScoring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgFantasyLeagueScoring),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueInfo_descriptor_ = file->message_type(4);
  static const int CMsgDOTAFantasyLeagueInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, commissioner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, fantasy_league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, selection_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, team_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, scoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, draft_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, draft_pick_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, veto_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, acquisitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, bench_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, owner_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, time_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, password_),
  };
  CMsgDOTAFantasyLeagueInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueInfo_descriptor_,
      CMsgDOTAFantasyLeagueInfo::default_instance_,
      CMsgDOTAFantasyLeagueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueInfo_OwnerInfo_descriptor_ = CMsgDOTAFantasyLeagueInfo_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyLeagueInfo_OwnerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, left_league_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, player_account_id_),
  };
  CMsgDOTAFantasyLeagueInfo_OwnerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueInfo_OwnerInfo_descriptor_,
      CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance_,
      CMsgDOTAFantasyLeagueInfo_OwnerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueInfo_OwnerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueEditInfoRequest_descriptor_ = file->message_type(5);
  static const int CMsgDOTAFantasyLeagueEditInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, edit_info_),
  };
  CMsgDOTAFantasyLeagueEditInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueEditInfoRequest_descriptor_,
      CMsgDOTAFantasyLeagueEditInfoRequest::default_instance_,
      CMsgDOTAFantasyLeagueEditInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueEditInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_ = file->message_type(6);
  static const int CMsgDOTAFantasyLeagueEditInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoResponse, result_),
  };
  CMsgDOTAFantasyLeagueEditInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_,
      CMsgDOTAFantasyLeagueEditInfoResponse::default_instance_,
      CMsgDOTAFantasyLeagueEditInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueEditInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyLeagueFindRequest_descriptor_ = file->message_type(7);
  static const int CMsgDOTAFantasyLeagueFindRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, password_),
  };
  CMsgDOTAFantasyLeagueFindRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueFindRequest_descriptor_,
      CMsgDOTAFantasyLeagueFindRequest::default_instance_,
      CMsgDOTAFantasyLeagueFindRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueFindRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueFindResponse_descriptor_ = file->message_type(8);
  static const int CMsgDOTAFantasyLeagueFindResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, fantasy_league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, commissioner_name_),
  };
  CMsgDOTAFantasyLeagueFindResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueFindResponse_descriptor_,
      CMsgDOTAFantasyLeagueFindResponse::default_instance_,
      CMsgDOTAFantasyLeagueFindResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueFindResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueFindResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyLeagueInfoRequest_descriptor_ = file->message_type(9);
  static const int CMsgDOTAFantasyLeagueInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoRequest, fantasy_league_id_),
  };
  CMsgDOTAFantasyLeagueInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueInfoRequest_descriptor_,
      CMsgDOTAFantasyLeagueInfoRequest::default_instance_,
      CMsgDOTAFantasyLeagueInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueInfoResponse_descriptor_ = file->message_type(10);
  static const int CMsgDOTAFantasyLeagueInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoResponse, result_),
  };
  CMsgDOTAFantasyLeagueInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueInfoResponse_descriptor_,
      CMsgDOTAFantasyLeagueInfoResponse::default_instance_,
      CMsgDOTAFantasyLeagueInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueInfoResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyLeagueMatchupsRequest_descriptor_ = file->message_type(11);
  static const int CMsgDOTAFantasyLeagueMatchupsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsRequest, fantasy_league_id_),
  };
  CMsgDOTAFantasyLeagueMatchupsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueMatchupsRequest_descriptor_,
      CMsgDOTAFantasyLeagueMatchupsRequest::default_instance_,
      CMsgDOTAFantasyLeagueMatchupsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueMatchupsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_ = file->message_type(12);
  static const int CMsgDOTAFantasyLeagueMatchupsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, weekly_matchups_),
  };
  CMsgDOTAFantasyLeagueMatchupsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_,
      CMsgDOTAFantasyLeagueMatchupsResponse::default_instance_,
      CMsgDOTAFantasyLeagueMatchupsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueMatchupsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_descriptor_ = CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_2_),
  };
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_descriptor_,
      CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance_,
      CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_descriptor_ = CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_->nested_type(1);
  static const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, matchup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, end_time_),
  };
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_descriptor_,
      CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance_,
      CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_->enum_type(0);
  CMsgDOTAEditFantasyTeamRequest_descriptor_ = file->message_type(13);
  static const int CMsgDOTAEditFantasyTeamRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_logo_),
  };
  CMsgDOTAEditFantasyTeamRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAEditFantasyTeamRequest_descriptor_,
      CMsgDOTAEditFantasyTeamRequest::default_instance_,
      CMsgDOTAEditFantasyTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAEditFantasyTeamRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, _internal_metadata_),
      -1);
  CMsgDOTAEditFantasyTeamResponse_descriptor_ = file->message_type(14);
  static const int CMsgDOTAEditFantasyTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamResponse, result_),
  };
  CMsgDOTAEditFantasyTeamResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAEditFantasyTeamResponse_descriptor_,
      CMsgDOTAEditFantasyTeamResponse::default_instance_,
      CMsgDOTAEditFantasyTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAEditFantasyTeamResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamResponse, _internal_metadata_),
      -1);
  CMsgDOTAEditFantasyTeamResponse_EResult_descriptor_ = CMsgDOTAEditFantasyTeamResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_descriptor_ = file->message_type(15);
  static const int CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, fantasy_league_id_),
  };
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_descriptor_,
      CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance_,
      CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_descriptor_ = file->message_type(16);
  static const int CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, owner_account_id_),
  };
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_descriptor_,
      CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance_,
      CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamInfoResponse_descriptor_ = file->message_type(17);
  static const int CMsgDOTAFantasyTeamInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoResponse, results_),
  };
  CMsgDOTAFantasyTeamInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamInfoResponse_descriptor_,
      CMsgDOTAFantasyTeamInfoResponse::default_instance_,
      CMsgDOTAFantasyTeamInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamInfo_descriptor_ = file->message_type(18);
  static const int CMsgDOTAFantasyTeamInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, fantasy_team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, current_roster_),
  };
  CMsgDOTAFantasyTeamInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamInfo_descriptor_,
      CMsgDOTAFantasyTeamInfo::default_instance_,
      CMsgDOTAFantasyTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamScoreRequest_descriptor_ = file->message_type(19);
  static const int CMsgDOTAFantasyTeamScoreRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, fantasy_team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, filter_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, filter_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, filter_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, include_bench_),
  };
  CMsgDOTAFantasyTeamScoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamScoreRequest_descriptor_,
      CMsgDOTAFantasyTeamScoreRequest::default_instance_,
      CMsgDOTAFantasyTeamScoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamScoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamScoreResponse_descriptor_ = file->message_type(20);
  static const int CMsgDOTAFantasyTeamScoreResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, fantasy_team_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, fantasy_player_score_),
  };
  CMsgDOTAFantasyTeamScoreResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamScoreResponse_descriptor_,
      CMsgDOTAFantasyTeamScoreResponse::default_instance_,
      CMsgDOTAFantasyTeamScoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamScoreResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_descriptor_ = CMsgDOTAFantasyTeamScoreResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, score_),
  };
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_descriptor_,
      CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance_,
      CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamScoreResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamStandingsRequest_descriptor_ = file->message_type(21);
  static const int CMsgDOTAFantasyTeamStandingsRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_last_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_in_hall_),
  };
  CMsgDOTAFantasyTeamStandingsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamStandingsRequest_descriptor_,
      CMsgDOTAFantasyTeamStandingsRequest::default_instance_,
      CMsgDOTAFantasyTeamStandingsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamStandingsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamStandingsResponse_descriptor_ = file->message_type(22);
  static const int CMsgDOTAFantasyTeamStandingsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, team_scores_),
  };
  CMsgDOTAFantasyTeamStandingsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamStandingsResponse_descriptor_,
      CMsgDOTAFantasyTeamStandingsResponse::default_instance_,
      CMsgDOTAFantasyTeamStandingsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamStandingsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_descriptor_ = CMsgDOTAFantasyTeamStandingsResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_against_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, streak_),
  };
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_descriptor_,
      CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance_,
      CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamStandingsResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyPlayerScoreRequest_descriptor_ = file->message_type(23);
  static const int CMsgDOTAFantasyPlayerScoreRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_last_match_),
  };
  CMsgDOTAFantasyPlayerScoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerScoreRequest_descriptor_,
      CMsgDOTAFantasyPlayerScoreRequest::default_instance_,
      CMsgDOTAFantasyPlayerScoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerScoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerScoreResponse_descriptor_ = file->message_type(24);
  static const int CMsgDOTAFantasyPlayerScoreResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, score_),
  };
  CMsgDOTAFantasyPlayerScoreResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerScoreResponse_descriptor_,
      CMsgDOTAFantasyPlayerScoreResponse::default_instance_,
      CMsgDOTAFantasyPlayerScoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerScoreResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor_ = CMsgDOTAFantasyPlayerScoreResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyPlayerStandingsRequest_descriptor_ = file->message_type(25);
  static const int CMsgDOTAFantasyPlayerStandingsRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_last_match_),
  };
  CMsgDOTAFantasyPlayerStandingsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerStandingsRequest_descriptor_,
      CMsgDOTAFantasyPlayerStandingsRequest::default_instance_,
      CMsgDOTAFantasyPlayerStandingsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerStandingsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerStandingsResponse_descriptor_ = file->message_type(26);
  static const int CMsgDOTAFantasyPlayerStandingsResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, player_scores_),
  };
  CMsgDOTAFantasyPlayerStandingsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerStandingsResponse_descriptor_,
      CMsgDOTAFantasyPlayerStandingsResponse::default_instance_,
      CMsgDOTAFantasyPlayerStandingsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerStandingsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_descriptor_ = CMsgDOTAFantasyPlayerStandingsResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, score_),
  };
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_descriptor_,
      CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance_,
      CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor_ = CMsgDOTAFantasyPlayerStandingsResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyPlayerInfoRequest_descriptor_ = file->message_type(27);
  static const int CMsgDOTAFantasyPlayerInfoRequest_offsets_[1] = {
  };
  CMsgDOTAFantasyPlayerInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerInfoRequest_descriptor_,
      CMsgDOTAFantasyPlayerInfoRequest::default_instance_,
      CMsgDOTAFantasyPlayerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerInfoResponse_descriptor_ = file->message_type(28);
  static const int CMsgDOTAFantasyPlayerInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoResponse, msg_),
  };
  CMsgDOTAFantasyPlayerInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerInfoResponse_descriptor_,
      CMsgDOTAFantasyPlayerInfoResponse::default_instance_,
      CMsgDOTAFantasyPlayerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueCreateRequest_descriptor_ = file->message_type(29);
  static const int CMsgDOTAFantasyLeagueCreateRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, season_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, fantasy_league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, ticket_item_id_),
  };
  CMsgDOTAFantasyLeagueCreateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueCreateRequest_descriptor_,
      CMsgDOTAFantasyLeagueCreateRequest::default_instance_,
      CMsgDOTAFantasyLeagueCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueCreateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueCreateResponse_descriptor_ = file->message_type(30);
  static const int CMsgDOTAFantasyLeagueCreateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, fantasy_league_id_),
  };
  CMsgDOTAFantasyLeagueCreateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueCreateResponse_descriptor_,
      CMsgDOTAFantasyLeagueCreateResponse::default_instance_,
      CMsgDOTAFantasyLeagueCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueCreateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueCreateResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamCreateRequest_descriptor_ = file->message_type(31);
  static const int CMsgDOTAFantasyTeamCreateRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, ticket_item_id_),
  };
  CMsgDOTAFantasyTeamCreateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamCreateRequest_descriptor_,
      CMsgDOTAFantasyTeamCreateRequest::default_instance_,
      CMsgDOTAFantasyTeamCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamCreateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamCreateResponse_descriptor_ = file->message_type(32);
  static const int CMsgDOTAFantasyTeamCreateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, fantasy_team_index_),
  };
  CMsgDOTAFantasyTeamCreateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamCreateResponse_descriptor_,
      CMsgDOTAFantasyTeamCreateResponse::default_instance_,
      CMsgDOTAFantasyTeamCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamCreateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamCreateResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_ = file->message_type(33);
  static const int CMsgDOTAFantasyLeagueEditInvitesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, invite_change_),
  };
  CMsgDOTAFantasyLeagueEditInvitesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_,
      CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance_,
      CMsgDOTAFantasyLeagueEditInvitesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueEditInvitesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_descriptor_ = CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, invited_),
  };
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_descriptor_,
      CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance_,
      CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_ = file->message_type(34);
  static const int CMsgDOTAFantasyLeagueEditInvitesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesResponse, result_),
  };
  CMsgDOTAFantasyLeagueEditInvitesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_,
      CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance_,
      CMsgDOTAFantasyLeagueEditInvitesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueEditInvitesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyLeagueDraftStatusRequest_descriptor_ = file->message_type(35);
  static const int CMsgDOTAFantasyLeagueDraftStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatusRequest, fantasy_league_id_),
  };
  CMsgDOTAFantasyLeagueDraftStatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueDraftStatusRequest_descriptor_,
      CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance_,
      CMsgDOTAFantasyLeagueDraftStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatusRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueDraftStatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatusRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueDraftStatus_descriptor_ = file->message_type(36);
  static const int CMsgDOTAFantasyLeagueDraftStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, draft_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, current_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, time_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, pending_resume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, available_players_),
  };
  CMsgDOTAFantasyLeagueDraftStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueDraftStatus_descriptor_,
      CMsgDOTAFantasyLeagueDraftStatus::default_instance_,
      CMsgDOTAFantasyLeagueDraftStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueDraftStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueDraftPlayerRequest_descriptor_ = file->message_type(37);
  static const int CMsgDOTAFantasyLeagueDraftPlayerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, player_account_id_),
  };
  CMsgDOTAFantasyLeagueDraftPlayerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueDraftPlayerRequest_descriptor_,
      CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance_,
      CMsgDOTAFantasyLeagueDraftPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueDraftPlayerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_ = file->message_type(38);
  static const int CMsgDOTAFantasyLeagueDraftPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerResponse, result_),
  };
  CMsgDOTAFantasyLeagueDraftPlayerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_,
      CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance_,
      CMsgDOTAFantasyLeagueDraftPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeagueDraftPlayerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor_ = CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamRosterSwapRequest_descriptor_ = file->message_type(39);
  static const int CMsgDOTAFantasyTeamRosterSwapRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, slot_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, slot_2_),
  };
  CMsgDOTAFantasyTeamRosterSwapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamRosterSwapRequest_descriptor_,
      CMsgDOTAFantasyTeamRosterSwapRequest::default_instance_,
      CMsgDOTAFantasyTeamRosterSwapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamRosterSwapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_ = file->message_type(40);
  static const int CMsgDOTAFantasyTeamRosterSwapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapResponse, result_),
  };
  CMsgDOTAFantasyTeamRosterSwapResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_,
      CMsgDOTAFantasyTeamRosterSwapResponse::default_instance_,
      CMsgDOTAFantasyTeamRosterSwapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamRosterSwapResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamRosterAddDropRequest_descriptor_ = file->message_type(41);
  static const int CMsgDOTAFantasyTeamRosterAddDropRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, add_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, drop_account_id_),
  };
  CMsgDOTAFantasyTeamRosterAddDropRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamRosterAddDropRequest_descriptor_,
      CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance_,
      CMsgDOTAFantasyTeamRosterAddDropRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamRosterAddDropRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_ = file->message_type(42);
  static const int CMsgDOTAFantasyTeamRosterAddDropResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropResponse, result_),
  };
  CMsgDOTAFantasyTeamRosterAddDropResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_,
      CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance_,
      CMsgDOTAFantasyTeamRosterAddDropResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamRosterAddDropResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamTradesRequest_descriptor_ = file->message_type(43);
  static const int CMsgDOTAFantasyTeamTradesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesRequest, fantasy_league_id_),
  };
  CMsgDOTAFantasyTeamTradesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamTradesRequest_descriptor_,
      CMsgDOTAFantasyTeamTradesRequest::default_instance_,
      CMsgDOTAFantasyTeamTradesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamTradesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamTradesResponse_descriptor_ = file->message_type(44);
  static const int CMsgDOTAFantasyTeamTradesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, trades_),
  };
  CMsgDOTAFantasyTeamTradesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamTradesResponse_descriptor_,
      CMsgDOTAFantasyTeamTradesResponse::default_instance_,
      CMsgDOTAFantasyTeamTradesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamTradesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamTradesResponse_Trade_descriptor_ = CMsgDOTAFantasyTeamTradesResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyTeamTradesResponse_Trade_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, status_),
  };
  CMsgDOTAFantasyTeamTradesResponse_Trade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamTradesResponse_Trade_descriptor_,
      CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance_,
      CMsgDOTAFantasyTeamTradesResponse_Trade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamTradesResponse_Trade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamTradesResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamTradeCancelRequest_descriptor_ = file->message_type(45);
  static const int CMsgDOTAFantasyTeamTradeCancelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, team_index_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, owner_account_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, team_index_2_),
  };
  CMsgDOTAFantasyTeamTradeCancelRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamTradeCancelRequest_descriptor_,
      CMsgDOTAFantasyTeamTradeCancelRequest::default_instance_,
      CMsgDOTAFantasyTeamTradeCancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamTradeCancelRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_ = file->message_type(46);
  static const int CMsgDOTAFantasyTeamTradeCancelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelResponse, result_),
  };
  CMsgDOTAFantasyTeamTradeCancelResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_,
      CMsgDOTAFantasyTeamTradeCancelResponse::default_instance_,
      CMsgDOTAFantasyTeamTradeCancelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamTradeCancelResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyTeamRosterRequest_descriptor_ = file->message_type(47);
  static const int CMsgDOTAFantasyTeamRosterRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, timestamp_),
  };
  CMsgDOTAFantasyTeamRosterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamRosterRequest_descriptor_,
      CMsgDOTAFantasyTeamRosterRequest::default_instance_,
      CMsgDOTAFantasyTeamRosterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamRosterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamRosterResponse_descriptor_ = file->message_type(48);
  static const int CMsgDOTAFantasyTeamRosterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, player_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, player_locked_),
  };
  CMsgDOTAFantasyTeamRosterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyTeamRosterResponse_descriptor_,
      CMsgDOTAFantasyTeamRosterResponse::default_instance_,
      CMsgDOTAFantasyTeamRosterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyTeamRosterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor_ = CMsgDOTAFantasyTeamRosterResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyPlayerHisoricalStatsRequest_descriptor_ = file->message_type(49);
  static const int CMsgDOTAFantasyPlayerHisoricalStatsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsRequest, fantasy_league_id_),
  };
  CMsgDOTAFantasyPlayerHisoricalStatsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerHisoricalStatsRequest_descriptor_,
      CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance_,
      CMsgDOTAFantasyPlayerHisoricalStatsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerHisoricalStatsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_ = file->message_type(50);
  static const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, stats_),
  };
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_,
      CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance_,
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_descriptor_ = CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, last_hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, denies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, gpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, xppm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, stuns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, healing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, tower_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, roshan_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, score_),
  };
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_descriptor_,
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance_,
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_descriptor_ = CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_->nested_type(1);
  static const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, weeks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_premium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_professional_),
  };
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_descriptor_,
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance_,
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor_ = CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyMessageAdd_descriptor_ = file->message_type(51);
  static const int CMsgDOTAFantasyMessageAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, message_),
  };
  CMsgDOTAFantasyMessageAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyMessageAdd_descriptor_,
      CMsgDOTAFantasyMessageAdd::default_instance_,
      CMsgDOTAFantasyMessageAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyMessageAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, _internal_metadata_),
      -1);
  CMsgDOTAFantasyMessagesRequest_descriptor_ = file->message_type(52);
  static const int CMsgDOTAFantasyMessagesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, start_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, end_message_),
  };
  CMsgDOTAFantasyMessagesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyMessagesRequest_descriptor_,
      CMsgDOTAFantasyMessagesRequest::default_instance_,
      CMsgDOTAFantasyMessagesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyMessagesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyMessagesResponse_descriptor_ = file->message_type(53);
  static const int CMsgDOTAFantasyMessagesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, num_total_messages_),
  };
  CMsgDOTAFantasyMessagesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyMessagesResponse_descriptor_,
      CMsgDOTAFantasyMessagesResponse::default_instance_,
      CMsgDOTAFantasyMessagesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyMessagesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyMessagesResponse_Message_descriptor_ = CMsgDOTAFantasyMessagesResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyMessagesResponse_Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, author_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, time_),
  };
  CMsgDOTAFantasyMessagesResponse_Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyMessagesResponse_Message_descriptor_,
      CMsgDOTAFantasyMessagesResponse_Message::default_instance_,
      CMsgDOTAFantasyMessagesResponse_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyMessagesResponse_Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, _internal_metadata_),
      -1);
  CMsgDOTAFantasyMessagesResponse_EResult_descriptor_ = CMsgDOTAFantasyMessagesResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyRemoveOwner_descriptor_ = file->message_type(54);
  static const int CMsgDOTAFantasyRemoveOwner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, team_index_),
  };
  CMsgDOTAFantasyRemoveOwner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyRemoveOwner_descriptor_,
      CMsgDOTAFantasyRemoveOwner::default_instance_,
      CMsgDOTAFantasyRemoveOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyRemoveOwner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, _internal_metadata_),
      -1);
  CMsgDOTAFantasyRemoveOwnerResponse_descriptor_ = file->message_type(55);
  static const int CMsgDOTAFantasyRemoveOwnerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwnerResponse, result_),
  };
  CMsgDOTAFantasyRemoveOwnerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyRemoveOwnerResponse_descriptor_,
      CMsgDOTAFantasyRemoveOwnerResponse::default_instance_,
      CMsgDOTAFantasyRemoveOwnerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwnerResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyRemoveOwnerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwnerResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor_ = CMsgDOTAFantasyRemoveOwnerResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyScheduledMatchesRequest_descriptor_ = file->message_type(56);
  static const int CMsgDOTAFantasyScheduledMatchesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesRequest, fantasy_league_id_),
  };
  CMsgDOTAFantasyScheduledMatchesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyScheduledMatchesRequest_descriptor_,
      CMsgDOTAFantasyScheduledMatchesRequest::default_instance_,
      CMsgDOTAFantasyScheduledMatchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyScheduledMatchesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyScheduledMatchesResponse_descriptor_ = file->message_type(57);
  static const int CMsgDOTAFantasyScheduledMatchesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, scheduled_match_days_),
  };
  CMsgDOTAFantasyScheduledMatchesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyScheduledMatchesResponse_descriptor_,
      CMsgDOTAFantasyScheduledMatchesResponse::default_instance_,
      CMsgDOTAFantasyScheduledMatchesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyScheduledMatchesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_descriptor_ = CMsgDOTAFantasyScheduledMatchesResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, team_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, league_ids_),
  };
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_descriptor_,
      CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance_,
      CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _internal_metadata_),
      -1);
  CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor_ = CMsgDOTAFantasyScheduledMatchesResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyLeaveLeagueRequest_descriptor_ = file->message_type(58);
  static const int CMsgDOTAFantasyLeaveLeagueRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, fantasy_team_index_),
  };
  CMsgDOTAFantasyLeaveLeagueRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeaveLeagueRequest_descriptor_,
      CMsgDOTAFantasyLeaveLeagueRequest::default_instance_,
      CMsgDOTAFantasyLeaveLeagueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeaveLeagueRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeaveLeagueResponse_descriptor_ = file->message_type(59);
  static const int CMsgDOTAFantasyLeaveLeagueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueResponse, result_),
  };
  CMsgDOTAFantasyLeaveLeagueResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyLeaveLeagueResponse_descriptor_,
      CMsgDOTAFantasyLeaveLeagueResponse::default_instance_,
      CMsgDOTAFantasyLeaveLeagueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyLeaveLeagueResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor_ = CMsgDOTAFantasyLeaveLeagueResponse_descriptor_->enum_type(0);
  CMsgDOTAFantasyPlayerScoreDetailsRequest_descriptor_ = file->message_type(60);
  static const int CMsgDOTAFantasyPlayerScoreDetailsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, fantasy_league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, end_time_),
  };
  CMsgDOTAFantasyPlayerScoreDetailsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerScoreDetailsRequest_descriptor_,
      CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance_,
      CMsgDOTAFantasyPlayerScoreDetailsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerScoreDetailsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_ = file->message_type(61);
  static const int CMsgDOTAFantasyPlayerScoreDetailsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, data_),
  };
  CMsgDOTAFantasyPlayerScoreDetailsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_,
      CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance_,
      CMsgDOTAFantasyPlayerScoreDetailsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerScoreDetailsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_descriptor_ = CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, owned_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, benched_),
  };
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_descriptor_,
      CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance_,
      CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _internal_metadata_),
      -1);
  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor_ = CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_->enum_type(0);
  CMsgDOTATournament_descriptor_ = file->message_type(62);
  static const int CMsgDOTATournament_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, nodes_),
  };
  CMsgDOTATournament_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTATournament_descriptor_,
      CMsgDOTATournament::default_instance_,
      CMsgDOTATournament_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTATournament),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, _internal_metadata_),
      -1);
  CMsgDOTATournament_Team_descriptor_ = CMsgDOTATournament_descriptor_->nested_type(0);
  static const int CMsgDOTATournament_Team_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_abbrev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, node_or_state_),
  };
  CMsgDOTATournament_Team_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTATournament_Team_descriptor_,
      CMsgDOTATournament_Team::default_instance_,
      CMsgDOTATournament_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTATournament_Team),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, _internal_metadata_),
      -1);
  CMsgDOTATournament_Game_descriptor_ = CMsgDOTATournament_descriptor_->nested_type(1);
  static const int CMsgDOTATournament_Game_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, good_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, bad_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, good_team_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, bad_team_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, live_stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, results_final_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, start_time_),
  };
  CMsgDOTATournament_Game_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTATournament_Game_descriptor_,
      CMsgDOTATournament_Game::default_instance_,
      CMsgDOTATournament_Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTATournament_Game),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, _internal_metadata_),
      -1);
  CMsgDOTATournament_Node_descriptor_ = CMsgDOTATournament_descriptor_->nested_type(2);
  static const int CMsgDOTATournament_Node_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, team_seed_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, team_seed_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, winner_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, loser_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, node_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, start_time_),
  };
  CMsgDOTATournament_Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTATournament_Node_descriptor_,
      CMsgDOTATournament_Node::default_instance_,
      CMsgDOTATournament_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTATournament_Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, _internal_metadata_),
      -1);
  CMsgDOTATournamentRequest_descriptor_ = file->message_type(63);
  static const int CMsgDOTATournamentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, client_tournament_gid_),
  };
  CMsgDOTATournamentRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTATournamentRequest_descriptor_,
      CMsgDOTATournamentRequest::default_instance_,
      CMsgDOTATournamentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTATournamentRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, _internal_metadata_),
      -1);
  CMsgDOTATournamentResponse_descriptor_ = file->message_type(64);
  static const int CMsgDOTATournamentResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, tournament_),
  };
  CMsgDOTATournamentResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTATournamentResponse_descriptor_,
      CMsgDOTATournamentResponse::default_instance_,
      CMsgDOTATournamentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTATournamentResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, _internal_metadata_),
      -1);
  CMsgDOTAClearTournamentGame_descriptor_ = file->message_type(65);
  static const int CMsgDOTAClearTournamentGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, game_id_),
  };
  CMsgDOTAClearTournamentGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAClearTournamentGame_descriptor_,
      CMsgDOTAClearTournamentGame::default_instance_,
      CMsgDOTAClearTournamentGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAClearTournamentGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, _internal_metadata_),
      -1);
  CMsgDOTAPassportVoteTeamGuess_descriptor_ = file->message_type(66);
  static const int CMsgDOTAPassportVoteTeamGuess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, runnerup_id_),
  };
  CMsgDOTAPassportVoteTeamGuess_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAPassportVoteTeamGuess_descriptor_,
      CMsgDOTAPassportVoteTeamGuess::default_instance_,
      CMsgDOTAPassportVoteTeamGuess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAPassportVoteTeamGuess),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, _internal_metadata_),
      -1);
  CMsgDOTAPassportVoteGenericSelection_descriptor_ = file->message_type(67);
  static const int CMsgDOTAPassportVoteGenericSelection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, selection_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, selection_),
  };
  CMsgDOTAPassportVoteGenericSelection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAPassportVoteGenericSelection_descriptor_,
      CMsgDOTAPassportVoteGenericSelection::default_instance_,
      CMsgDOTAPassportVoteGenericSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAPassportVoteGenericSelection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, _internal_metadata_),
      -1);
  CMsgDOTAPassportStampedPlayer_descriptor_ = file->message_type(68);
  static const int CMsgDOTAPassportStampedPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, stamp_level_),
  };
  CMsgDOTAPassportStampedPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAPassportStampedPlayer_descriptor_,
      CMsgDOTAPassportStampedPlayer::default_instance_,
      CMsgDOTAPassportStampedPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAPassportStampedPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, _internal_metadata_),
      -1);
  CMsgDOTAPassportPlayerCardChallenge_descriptor_ = file->message_type(69);
  static const int CMsgDOTAPassportPlayerCardChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportPlayerCardChallenge, challenge_id_),
  };
  CMsgDOTAPassportPlayerCardChallenge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAPassportPlayerCardChallenge_descriptor_,
      CMsgDOTAPassportPlayerCardChallenge::default_instance_,
      CMsgDOTAPassportPlayerCardChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportPlayerCardChallenge, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAPassportPlayerCardChallenge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportPlayerCardChallenge, _internal_metadata_),
      -1);
  CMsgDOTAPassportVote_descriptor_ = file->message_type(70);
  static const int CMsgDOTAPassportVote_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, team_votes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, generic_selections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, stamped_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, player_card_challenges_),
  };
  CMsgDOTAPassportVote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgDOTAPassportVote_descriptor_,
      CMsgDOTAPassportVote::default_instance_,
      CMsgDOTAPassportVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgDOTAPassportVote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, _internal_metadata_),
      -1);
  CMsgPassportDataRequest_descriptor_ = file->message_type(71);
  static const int CMsgPassportDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataRequest, account_id_),
  };
  CMsgPassportDataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgPassportDataRequest_descriptor_,
      CMsgPassportDataRequest::default_instance_,
      CMsgPassportDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgPassportDataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataRequest, _internal_metadata_),
      -1);
  CMsgPassportDataResponse_descriptor_ = file->message_type(72);
  static const int CMsgPassportDataResponse_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, international_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, east_qualifiers_predict_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, west_qualifiers_predict_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, allstar_match_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, league_guesses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, east_qualifiers_winner_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, east_qualifiers_runner_up_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, west_qualifiers_winner_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, west_qualifiers_runner_up_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, passports_bought_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, original_purchaser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, fantasy_team_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, fantasy_teamexpiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, fantasy_teams_will_lock_at_),
  };
  CMsgPassportDataResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgPassportDataResponse_descriptor_,
      CMsgPassportDataResponse::default_instance_,
      CMsgPassportDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgPassportDataResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPassportDataResponse, _internal_metadata_),
      -1);
  ETournamentGameState_descriptor_ = file->enum_type(0);
  ETournamentTeamState_descriptor_ = file->enum_type(1);
  ETournamentState_descriptor_ = file->enum_type(2);
  ETournamentNodeState_descriptor_ = file->enum_type(3);
  DOTA_2013PassportSelectionIndices_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCPlayerInfo_descriptor_, &CMsgGCPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCPlayerInfo_PlayerInfo_descriptor_, &CMsgGCPlayerInfo_PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTACreateFantasyLeagueRequest_descriptor_, &CMsgDOTACreateFantasyLeagueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTACreateFantasyLeagueResponse_descriptor_, &CMsgDOTACreateFantasyLeagueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgFantasyLeagueScoring_descriptor_, &CMsgFantasyLeagueScoring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueInfo_descriptor_, &CMsgDOTAFantasyLeagueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueInfo_OwnerInfo_descriptor_, &CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueEditInfoRequest_descriptor_, &CMsgDOTAFantasyLeagueEditInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_, &CMsgDOTAFantasyLeagueEditInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueFindRequest_descriptor_, &CMsgDOTAFantasyLeagueFindRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueFindResponse_descriptor_, &CMsgDOTAFantasyLeagueFindResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueInfoRequest_descriptor_, &CMsgDOTAFantasyLeagueInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueInfoResponse_descriptor_, &CMsgDOTAFantasyLeagueInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueMatchupsRequest_descriptor_, &CMsgDOTAFantasyLeagueMatchupsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_, &CMsgDOTAFantasyLeagueMatchupsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_descriptor_, &CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_descriptor_, &CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAEditFantasyTeamRequest_descriptor_, &CMsgDOTAEditFantasyTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAEditFantasyTeamResponse_descriptor_, &CMsgDOTAEditFantasyTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_descriptor_, &CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_descriptor_, &CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamInfoResponse_descriptor_, &CMsgDOTAFantasyTeamInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamInfo_descriptor_, &CMsgDOTAFantasyTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamScoreRequest_descriptor_, &CMsgDOTAFantasyTeamScoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamScoreResponse_descriptor_, &CMsgDOTAFantasyTeamScoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_descriptor_, &CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamStandingsRequest_descriptor_, &CMsgDOTAFantasyTeamStandingsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamStandingsResponse_descriptor_, &CMsgDOTAFantasyTeamStandingsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_descriptor_, &CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerScoreRequest_descriptor_, &CMsgDOTAFantasyPlayerScoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerScoreResponse_descriptor_, &CMsgDOTAFantasyPlayerScoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerStandingsRequest_descriptor_, &CMsgDOTAFantasyPlayerStandingsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerStandingsResponse_descriptor_, &CMsgDOTAFantasyPlayerStandingsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_descriptor_, &CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerInfoRequest_descriptor_, &CMsgDOTAFantasyPlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerInfoResponse_descriptor_, &CMsgDOTAFantasyPlayerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueCreateRequest_descriptor_, &CMsgDOTAFantasyLeagueCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueCreateResponse_descriptor_, &CMsgDOTAFantasyLeagueCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamCreateRequest_descriptor_, &CMsgDOTAFantasyTeamCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamCreateResponse_descriptor_, &CMsgDOTAFantasyTeamCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_, &CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_descriptor_, &CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_, &CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueDraftStatusRequest_descriptor_, &CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueDraftStatus_descriptor_, &CMsgDOTAFantasyLeagueDraftStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueDraftPlayerRequest_descriptor_, &CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_, &CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamRosterSwapRequest_descriptor_, &CMsgDOTAFantasyTeamRosterSwapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_, &CMsgDOTAFantasyTeamRosterSwapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamRosterAddDropRequest_descriptor_, &CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_, &CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamTradesRequest_descriptor_, &CMsgDOTAFantasyTeamTradesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamTradesResponse_descriptor_, &CMsgDOTAFantasyTeamTradesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamTradesResponse_Trade_descriptor_, &CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamTradeCancelRequest_descriptor_, &CMsgDOTAFantasyTeamTradeCancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_, &CMsgDOTAFantasyTeamTradeCancelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamRosterRequest_descriptor_, &CMsgDOTAFantasyTeamRosterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyTeamRosterResponse_descriptor_, &CMsgDOTAFantasyTeamRosterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerHisoricalStatsRequest_descriptor_, &CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_, &CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_descriptor_, &CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_descriptor_, &CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyMessageAdd_descriptor_, &CMsgDOTAFantasyMessageAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyMessagesRequest_descriptor_, &CMsgDOTAFantasyMessagesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyMessagesResponse_descriptor_, &CMsgDOTAFantasyMessagesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyMessagesResponse_Message_descriptor_, &CMsgDOTAFantasyMessagesResponse_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyRemoveOwner_descriptor_, &CMsgDOTAFantasyRemoveOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyRemoveOwnerResponse_descriptor_, &CMsgDOTAFantasyRemoveOwnerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyScheduledMatchesRequest_descriptor_, &CMsgDOTAFantasyScheduledMatchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyScheduledMatchesResponse_descriptor_, &CMsgDOTAFantasyScheduledMatchesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_descriptor_, &CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeaveLeagueRequest_descriptor_, &CMsgDOTAFantasyLeaveLeagueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyLeaveLeagueResponse_descriptor_, &CMsgDOTAFantasyLeaveLeagueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerScoreDetailsRequest_descriptor_, &CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_, &CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_descriptor_, &CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTATournament_descriptor_, &CMsgDOTATournament::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTATournament_Team_descriptor_, &CMsgDOTATournament_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTATournament_Game_descriptor_, &CMsgDOTATournament_Game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTATournament_Node_descriptor_, &CMsgDOTATournament_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTATournamentRequest_descriptor_, &CMsgDOTATournamentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTATournamentResponse_descriptor_, &CMsgDOTATournamentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAClearTournamentGame_descriptor_, &CMsgDOTAClearTournamentGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAPassportVoteTeamGuess_descriptor_, &CMsgDOTAPassportVoteTeamGuess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAPassportVoteGenericSelection_descriptor_, &CMsgDOTAPassportVoteGenericSelection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAPassportStampedPlayer_descriptor_, &CMsgDOTAPassportStampedPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAPassportPlayerCardChallenge_descriptor_, &CMsgDOTAPassportPlayerCardChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgDOTAPassportVote_descriptor_, &CMsgDOTAPassportVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgPassportDataRequest_descriptor_, &CMsgPassportDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgPassportDataResponse_descriptor_, &CMsgPassportDataResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  delete CMsgGCPlayerInfo::default_instance_;
  delete CMsgGCPlayerInfo_reflection_;
  delete CMsgGCPlayerInfo_PlayerInfo::default_instance_;
  delete CMsgGCPlayerInfo_PlayerInfo_reflection_;
  delete CMsgDOTACreateFantasyLeagueRequest::default_instance_;
  delete CMsgDOTACreateFantasyLeagueRequest_reflection_;
  delete CMsgDOTACreateFantasyLeagueResponse::default_instance_;
  delete CMsgDOTACreateFantasyLeagueResponse_reflection_;
  delete CMsgFantasyLeagueScoring::default_instance_;
  delete CMsgFantasyLeagueScoring_reflection_;
  delete CMsgDOTAFantasyLeagueInfo::default_instance_;
  delete CMsgDOTAFantasyLeagueInfo_reflection_;
  delete CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance_;
  delete CMsgDOTAFantasyLeagueInfo_OwnerInfo_reflection_;
  delete CMsgDOTAFantasyLeagueEditInfoRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueEditInfoRequest_reflection_;
  delete CMsgDOTAFantasyLeagueEditInfoResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueEditInfoResponse_reflection_;
  delete CMsgDOTAFantasyLeagueFindRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueFindRequest_reflection_;
  delete CMsgDOTAFantasyLeagueFindResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueFindResponse_reflection_;
  delete CMsgDOTAFantasyLeagueInfoRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueInfoRequest_reflection_;
  delete CMsgDOTAFantasyLeagueInfoResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueInfoResponse_reflection_;
  delete CMsgDOTAFantasyLeagueMatchupsRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueMatchupsRequest_reflection_;
  delete CMsgDOTAFantasyLeagueMatchupsResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueMatchupsResponse_reflection_;
  delete CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance_;
  delete CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_reflection_;
  delete CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance_;
  delete CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_reflection_;
  delete CMsgDOTAEditFantasyTeamRequest::default_instance_;
  delete CMsgDOTAEditFantasyTeamRequest_reflection_;
  delete CMsgDOTAEditFantasyTeamResponse::default_instance_;
  delete CMsgDOTAEditFantasyTeamResponse_reflection_;
  delete CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance_;
  delete CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_reflection_;
  delete CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance_;
  delete CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_reflection_;
  delete CMsgDOTAFantasyTeamInfoResponse::default_instance_;
  delete CMsgDOTAFantasyTeamInfoResponse_reflection_;
  delete CMsgDOTAFantasyTeamInfo::default_instance_;
  delete CMsgDOTAFantasyTeamInfo_reflection_;
  delete CMsgDOTAFantasyTeamScoreRequest::default_instance_;
  delete CMsgDOTAFantasyTeamScoreRequest_reflection_;
  delete CMsgDOTAFantasyTeamScoreResponse::default_instance_;
  delete CMsgDOTAFantasyTeamScoreResponse_reflection_;
  delete CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance_;
  delete CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_reflection_;
  delete CMsgDOTAFantasyTeamStandingsRequest::default_instance_;
  delete CMsgDOTAFantasyTeamStandingsRequest_reflection_;
  delete CMsgDOTAFantasyTeamStandingsResponse::default_instance_;
  delete CMsgDOTAFantasyTeamStandingsResponse_reflection_;
  delete CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance_;
  delete CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_reflection_;
  delete CMsgDOTAFantasyPlayerScoreRequest::default_instance_;
  delete CMsgDOTAFantasyPlayerScoreRequest_reflection_;
  delete CMsgDOTAFantasyPlayerScoreResponse::default_instance_;
  delete CMsgDOTAFantasyPlayerScoreResponse_reflection_;
  delete CMsgDOTAFantasyPlayerStandingsRequest::default_instance_;
  delete CMsgDOTAFantasyPlayerStandingsRequest_reflection_;
  delete CMsgDOTAFantasyPlayerStandingsResponse::default_instance_;
  delete CMsgDOTAFantasyPlayerStandingsResponse_reflection_;
  delete CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance_;
  delete CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_reflection_;
  delete CMsgDOTAFantasyPlayerInfoRequest::default_instance_;
  delete CMsgDOTAFantasyPlayerInfoRequest_reflection_;
  delete CMsgDOTAFantasyPlayerInfoResponse::default_instance_;
  delete CMsgDOTAFantasyPlayerInfoResponse_reflection_;
  delete CMsgDOTAFantasyLeagueCreateRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueCreateRequest_reflection_;
  delete CMsgDOTAFantasyLeagueCreateResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueCreateResponse_reflection_;
  delete CMsgDOTAFantasyTeamCreateRequest::default_instance_;
  delete CMsgDOTAFantasyTeamCreateRequest_reflection_;
  delete CMsgDOTAFantasyTeamCreateResponse::default_instance_;
  delete CMsgDOTAFantasyTeamCreateResponse_reflection_;
  delete CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueEditInvitesRequest_reflection_;
  delete CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance_;
  delete CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_reflection_;
  delete CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueEditInvitesResponse_reflection_;
  delete CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueDraftStatusRequest_reflection_;
  delete CMsgDOTAFantasyLeagueDraftStatus::default_instance_;
  delete CMsgDOTAFantasyLeagueDraftStatus_reflection_;
  delete CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance_;
  delete CMsgDOTAFantasyLeagueDraftPlayerRequest_reflection_;
  delete CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance_;
  delete CMsgDOTAFantasyLeagueDraftPlayerResponse_reflection_;
  delete CMsgDOTAFantasyTeamRosterSwapRequest::default_instance_;
  delete CMsgDOTAFantasyTeamRosterSwapRequest_reflection_;
  delete CMsgDOTAFantasyTeamRosterSwapResponse::default_instance_;
  delete CMsgDOTAFantasyTeamRosterSwapResponse_reflection_;
  delete CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance_;
  delete CMsgDOTAFantasyTeamRosterAddDropRequest_reflection_;
  delete CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance_;
  delete CMsgDOTAFantasyTeamRosterAddDropResponse_reflection_;
  delete CMsgDOTAFantasyTeamTradesRequest::default_instance_;
  delete CMsgDOTAFantasyTeamTradesRequest_reflection_;
  delete CMsgDOTAFantasyTeamTradesResponse::default_instance_;
  delete CMsgDOTAFantasyTeamTradesResponse_reflection_;
  delete CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance_;
  delete CMsgDOTAFantasyTeamTradesResponse_Trade_reflection_;
  delete CMsgDOTAFantasyTeamTradeCancelRequest::default_instance_;
  delete CMsgDOTAFantasyTeamTradeCancelRequest_reflection_;
  delete CMsgDOTAFantasyTeamTradeCancelResponse::default_instance_;
  delete CMsgDOTAFantasyTeamTradeCancelResponse_reflection_;
  delete CMsgDOTAFantasyTeamRosterRequest::default_instance_;
  delete CMsgDOTAFantasyTeamRosterRequest_reflection_;
  delete CMsgDOTAFantasyTeamRosterResponse::default_instance_;
  delete CMsgDOTAFantasyTeamRosterResponse_reflection_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsRequest_reflection_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsResponse_reflection_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_reflection_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance_;
  delete CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_reflection_;
  delete CMsgDOTAFantasyMessageAdd::default_instance_;
  delete CMsgDOTAFantasyMessageAdd_reflection_;
  delete CMsgDOTAFantasyMessagesRequest::default_instance_;
  delete CMsgDOTAFantasyMessagesRequest_reflection_;
  delete CMsgDOTAFantasyMessagesResponse::default_instance_;
  delete CMsgDOTAFantasyMessagesResponse_reflection_;
  delete CMsgDOTAFantasyMessagesResponse_Message::default_instance_;
  delete CMsgDOTAFantasyMessagesResponse_Message_reflection_;
  delete CMsgDOTAFantasyRemoveOwner::default_instance_;
  delete CMsgDOTAFantasyRemoveOwner_reflection_;
  delete CMsgDOTAFantasyRemoveOwnerResponse::default_instance_;
  delete CMsgDOTAFantasyRemoveOwnerResponse_reflection_;
  delete CMsgDOTAFantasyScheduledMatchesRequest::default_instance_;
  delete CMsgDOTAFantasyScheduledMatchesRequest_reflection_;
  delete CMsgDOTAFantasyScheduledMatchesResponse::default_instance_;
  delete CMsgDOTAFantasyScheduledMatchesResponse_reflection_;
  delete CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance_;
  delete CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_reflection_;
  delete CMsgDOTAFantasyLeaveLeagueRequest::default_instance_;
  delete CMsgDOTAFantasyLeaveLeagueRequest_reflection_;
  delete CMsgDOTAFantasyLeaveLeagueResponse::default_instance_;
  delete CMsgDOTAFantasyLeaveLeagueResponse_reflection_;
  delete CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance_;
  delete CMsgDOTAFantasyPlayerScoreDetailsRequest_reflection_;
  delete CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance_;
  delete CMsgDOTAFantasyPlayerScoreDetailsResponse_reflection_;
  delete CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance_;
  delete CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_reflection_;
  delete CMsgDOTATournament::default_instance_;
  delete CMsgDOTATournament_reflection_;
  delete CMsgDOTATournament_Team::default_instance_;
  delete CMsgDOTATournament_Team_reflection_;
  delete CMsgDOTATournament_Game::default_instance_;
  delete CMsgDOTATournament_Game_reflection_;
  delete CMsgDOTATournament_Node::default_instance_;
  delete CMsgDOTATournament_Node_reflection_;
  delete CMsgDOTATournamentRequest::default_instance_;
  delete CMsgDOTATournamentRequest_reflection_;
  delete CMsgDOTATournamentResponse::default_instance_;
  delete CMsgDOTATournamentResponse_reflection_;
  delete CMsgDOTAClearTournamentGame::default_instance_;
  delete CMsgDOTAClearTournamentGame_reflection_;
  delete CMsgDOTAPassportVoteTeamGuess::default_instance_;
  delete CMsgDOTAPassportVoteTeamGuess_reflection_;
  delete CMsgDOTAPassportVoteGenericSelection::default_instance_;
  delete CMsgDOTAPassportVoteGenericSelection_reflection_;
  delete CMsgDOTAPassportStampedPlayer::default_instance_;
  delete CMsgDOTAPassportStampedPlayer_reflection_;
  delete CMsgDOTAPassportPlayerCardChallenge::default_instance_;
  delete CMsgDOTAPassportPlayerCardChallenge_reflection_;
  delete CMsgDOTAPassportVote::default_instance_;
  delete CMsgDOTAPassportVote_reflection_;
  delete CMsgPassportDataRequest::default_instance_;
  delete CMsgPassportDataRequest_reflection_;
  delete CMsgPassportDataResponse::default_instance_;
  delete CMsgPassportDataResponse_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$dota_gcmessages_client_fantasy.proto\032\034"
    "dota_gcmessages_common.proto\"\375\001\n\020CMsgGCP"
    "layerInfo\0222\n\014player_infos\030\001 \003(\0132\034.CMsgGC"
    "PlayerInfo.PlayerInfo\032\264\001\n\nPlayerInfo\022\022\n\n"
    "account_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\024\n\014countr"
    "y_code\030\003 \001(\t\022\024\n\014fantasy_role\030\004 \001(\r\022\017\n\007te"
    "am_id\030\005 \001(\r\022\021\n\tteam_name\030\006 \001(\t\022\020\n\010team_t"
    "ag\030\007 \001(\t\022\017\n\007sponsor\030\010 \001(\t\022\021\n\tis_locked\030\t"
    " \001(\010\"\256\001\n\"CMsgDOTACreateFantasyLeagueRequ"
    "est\022\023\n\013league_name\030\001 \001(\t\022\023\n\013league_logo\030"
    "\002 \001(\004\022J\n\016selection_mode\030\003 \001(\0162\027.Fantasy_"
    "Selection_Mode:\031FANTASY_SELECTION_INVALI"
    "D\022\022\n\nteam_count\030\004 \001(\r\"\363\001\n#CMsgDOTACreate"
    "FantasyLeagueResponse\022E\n\006result\030\001 \001(\0162,."
    "CMsgDOTACreateFantasyLeagueResponse.ERes"
    "ult:\007SUCCESS\"\204\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n"
    "\021ERROR_UNSPECIFIED\020\001\022\032\n\026ERROR_TOO_MANY_L"
    "EAGUES\020\002\022\034\n\030ERROR_INVALID_TEAM_COUNT\020\003\022\033"
    "\n\027ERROR_CREATION_DISABLED\020\004\"\237\002\n\030CMsgFant"
    "asyLeagueScoring\022\r\n\005level\030\001 \001(\002\022\r\n\005kills"
    "\030\002 \001(\002\022\016\n\006deaths\030\003 \001(\002\022\017\n\007assists\030\004 \001(\002\022"
    "\021\n\tlast_hits\030\005 \001(\002\022\016\n\006denies\030\006 \001(\002\022\013\n\003gp"
    "m\030\007 \001(\002\022\014\n\004xppm\030\010 \001(\002\022\r\n\005stuns\030\t \001(\002\022\017\n\007"
    "healing\030\n \001(\002\022\023\n\013tower_kills\030\013 \001(\002\022\024\n\014ro"
    "shan_kills\030\014 \001(\002\022\032\n\022multiplier_premium\030\r"
    " \001(\002\022\037\n\027multiplier_professional\030\016 \001(\002\"\316\005"
    "\n\031CMsgDOTAFantasyLeagueInfo\022\031\n\021fantasy_l"
    "eague_id\030\001 \001(\r\022\037\n\027commissioner_account_i"
    "d\030\002 \001(\r\022\033\n\023fantasy_league_name\030\003 \001(\t\022J\n\016"
    "selection_mode\030\004 \001(\0162\027.Fantasy_Selection"
    "_Mode:\031FANTASY_SELECTION_INVALID\022\022\n\nteam"
    "_count\030\005 \001(\r\022\014\n\004logo\030\006 \001(\004\022*\n\007scoring\030\007 "
    "\001(\0132\031.CMsgFantasyLeagueScoring\022\022\n\ndraft_"
    "time\030\014 \001(\r\022\027\n\017draft_pick_time\030\r \001(\r\022\024\n\014s"
    "eason_start\030\017 \001(\r\022\025\n\rseason_length\030\020 \001(\r"
    "\022\022\n\nveto_votes\030\021 \001(\r\022\024\n\014acquisitions\030\022 \001"
    "(\r\022\016\n\006slot_1\030\023 \001(\r\022\016\n\006slot_2\030\024 \001(\r\022\016\n\006sl"
    "ot_3\030\025 \001(\r\022\016\n\006slot_4\030\026 \001(\r\022\016\n\006slot_5\030\027 \001"
    "(\r\022\023\n\013bench_slots\030\030 \001(\r\0228\n\nowner_info\030\031 "
    "\003(\0132$.CMsgDOTAFantasyLeagueInfo.OwnerInf"
    "o\022\017\n\007players\030\032 \003(\r\022\021\n\ttime_zone\030\033 \001(\r\022\016\n"
    "\006season\030\034 \001(\r\022\020\n\010password\030\035 \001(\t\032U\n\tOwner"
    "Info\022\030\n\020owner_account_id\030\001 \001(\r\022\023\n\013left_l"
    "eague\030\002 \001(\010\022\031\n\021player_account_id\030\003 \003(\r\"p"
    "\n$CMsgDOTAFantasyLeagueEditInfoRequest\022\031"
    "\n\021fantasy_league_id\030\001 \001(\r\022-\n\tedit_info\030\002"
    " \001(\0132\032.CMsgDOTAFantasyLeagueInfo\"\270\001\n%CMs"
    "gDOTAFantasyLeagueEditInfoResponse\022G\n\006re"
    "sult\030\001 \001(\0162..CMsgDOTAFantasyLeagueEditIn"
    "foResponse.EResult:\007SUCCESS\"F\n\007EResult\022\013"
    "\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ER"
    "ROR_NO_PERMISSION\020\002\"O\n CMsgDOTAFantasyLe"
    "agueFindRequest\022\031\n\021fantasy_league_id\030\001 \001"
    "(\r\022\020\n\010password\030\002 \001(\t\"\307\002\n!CMsgDOTAFantasy"
    "LeagueFindResponse\022C\n\006result\030\001 \001(\0162*.CMs"
    "gDOTAFantasyLeagueFindResponse.EResult:\007"
    "SUCCESS\022\033\n\023fantasy_league_name\030\002 \001(\t\022\031\n\021"
    "commissioner_name\030\003 \001(\t\"\244\001\n\007EResult\022\013\n\007S"
    "UCCESS\020\000\022\032\n\026ERROR_LEAGUE_NOT_FOUND\020\001\022\026\n\022"
    "ERROR_BAD_PASSWORD\020\002\022\025\n\021ERROR_UNSPECIFIE"
    "D\020\003\022\016\n\nERROR_FULL\020\004\022\030\n\024ERROR_ALREADY_MEM"
    "BER\020\005\022\027\n\023ERROR_LEAGUE_LOCKED\020\006\"=\n CMsgDO"
    "TAFantasyLeagueInfoRequest\022\031\n\021fantasy_le"
    "ague_id\030\001 \001(\r\"\260\001\n!CMsgDOTAFantasyLeagueI"
    "nfoResponse\022C\n\006result\030\001 \001(\0162*.CMsgDOTAFa"
    "ntasyLeagueInfoResponse.EResult:\007SUCCESS"
    "\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPEC"
    "IFIED\020\001\022\027\n\023ERROR_BAD_LEAGUE_ID\020\002\"A\n$CMsg"
    "DOTAFantasyLeagueMatchupsRequest\022\031\n\021fant"
    "asy_league_id\030\001 \001(\r\"\232\004\n%CMsgDOTAFantasyL"
    "eagueMatchupsResponse\022G\n\006result\030\001 \001(\0162.."
    "CMsgDOTAFantasyLeagueMatchupsResponse.ER"
    "esult:\007SUCCESS\022\031\n\021fantasy_league_id\030\002 \001("
    "\r\022N\n\017weekly_matchups\030\003 \003(\01325.CMsgDOTAFan"
    "tasyLeagueMatchupsResponse.WeeklyMatchup"
    "s\032c\n\007Matchup\022\032\n\022owner_account_id_1\030\001 \001(\r"
    "\022\032\n\022owner_account_id_2\030\002 \001(\r\022\017\n\007score_1\030"
    "\003 \001(\002\022\017\n\007score_2\030\004 \001(\002\032w\n\016WeeklyMatchups"
    "\022\?\n\007matchup\030\001 \003(\0132..CMsgDOTAFantasyLeagu"
    "eMatchupsResponse.Matchup\022\022\n\nstart_time\030"
    "\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\"_\n\007EResult\022\013\n\007SU"
    "CCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_"
    "BAD_LEAGUE_ID\020\002\022\027\n\023ERROR_NO_PERMISSION\020\003"
    "\"u\n\036CMsgDOTAEditFantasyTeamRequest\022\031\n\021fa"
    "ntasy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 \001("
    "\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\004\""
    "\350\001\n\037CMsgDOTAEditFantasyTeamResponse\022A\n\006r"
    "esult\030\001 \001(\0162(.CMsgDOTAEditFantasyTeamRes"
    "ponse.EResult:\007SUCCESS\"\201\001\n\007EResult\022\013\n\007SU"
    "CCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERROR_"
    "INVALID_TEAM_INFO\020\002\022\034\n\030ERROR_NAME_ALREAD"
    "Y_TAKEN\020\003\022\027\n\023ERROR_NO_PERMISSION\020\004\"L\n/CM"
    "sgDOTAFantasyTeamInfoRequestByFantasyLea"
    "gueID\022\031\n\021fantasy_league_id\030\001 \001(\r\"J\n.CMsg"
    "DOTAFantasyTeamInfoRequestByOwnerAccount"
    "ID\022\030\n\020owner_account_id\030\001 \001(\r\"L\n\037CMsgDOTA"
    "FantasyTeamInfoResponse\022)\n\007results\030\001 \003(\013"
    "2\030.CMsgDOTAFantasyTeamInfo\"\306\001\n\027CMsgDOTAF"
    "antasyTeamInfo\022\031\n\021fantasy_league_id\030\001 \001("
    "\r\022\030\n\020owner_account_id\030\002 \001(\r\022\032\n\022fantasy_t"
    "eam_index\030\003 \001(\r\022\021\n\tteam_name\030\004 \001(\t\022\021\n\tte"
    "am_logo\030\005 \001(\004\022\014\n\004wins\030\006 \001(\r\022\016\n\006losses\030\007 "
    "\001(\r\022\026\n\016current_roster\030\010 \003(\r\"\326\001\n\037CMsgDOTA"
    "FantasyTeamScoreRequest\022\031\n\021fantasy_leagu"
    "e_id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 \001(\r\022\032\n\022"
    "fantasy_team_index\030\003 \001(\r\022\027\n\017filter_match"
    "_id\030\004 \001(\004\022\031\n\021filter_start_time\030\005 \001(\r\022\027\n\017"
    "filter_end_time\030\006 \001(\r\022\025\n\rinclude_bench\030\007"
    " \001(\010\"\360\002\n CMsgDOTAFantasyTeamScoreRespons"
    "e\022B\n\006result\030\001 \001(\0162).CMsgDOTAFantasyTeamS"
    "coreResponse.EResult:\007SUCCESS\022\032\n\022fantasy"
    "_team_score\030\002 \001(\002\022O\n\024fantasy_player_scor"
    "e\030\003 \003(\01321.CMsgDOTAFantasyTeamScoreRespon"
    "se.CMsgPlayerScore\0324\n\017CMsgPlayerScore\022\022\n"
    "\naccount_id\030\001 \001(\r\022\r\n\005score\030\002 \001(\002\"e\n\007ERes"
    "ult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022"
    "\027\n\023ERROR_NO_PERMISSION\020\002\022\035\n\031ERROR_OWNER_"
    "NOT_IN_LEAGUE\020\003\"\317\001\n#CMsgDOTAFantasyTeamS"
    "tandingsRequest\022\031\n\021fantasy_league_id\030\001 \001"
    "(\r\022\r\n\005count\030\002 \001(\r\022\031\n\021filter_start_time\030\003"
    " \001(\r\022\027\n\017filter_end_time\030\004 \001(\r\022\027\n\017filter_"
    "match_id\030\005 \001(\004\022\031\n\021filter_last_match\030\006 \001("
    "\010\022\026\n\016filter_in_hall\030\007 \001(\010\"\201\004\n$CMsgDOTAFa"
    "ntasyTeamStandingsResponse\022F\n\006result\030\001 \001"
    "(\0162-.CMsgDOTAFantasyTeamStandingsRespons"
    "e.EResult:\007SUCCESS\022H\n\013team_scores\030\003 \003(\0132"
    "3.CMsgDOTAFantasyTeamStandingsResponse.C"
    "MsgTeamScore\032\376\001\n\rCMsgTeamScore\022\031\n\021fantas"
    "y_league_id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 "
    "\001(\r\022\032\n\022fantasy_team_index\030\003 \001(\r\022\031\n\021fanta"
    "sy_team_logo\030\004 \001(\004\022\022\n\nowner_name\030\005 \001(\t\022\031"
    "\n\021fantasy_team_name\030\006 \001(\t\022\r\n\005score\030\007 \001(\002"
    "\022\025\n\rscore_against\030\010 \001(\002\022\014\n\004wins\030\t \001(\r\022\016\n"
    "\006losses\030\n \001(\r\022\016\n\006streak\030\013 \001(\005\"F\n\007EResult"
    "\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023"
    "ERROR_NO_PERMISSION\020\002\"\301\001\n!CMsgDOTAFantas"
    "yPlayerScoreRequest\022\031\n\021fantasy_league_id"
    "\030\001 \001(\r\022\031\n\021player_account_id\030\002 \001(\r\022\031\n\021fil"
    "ter_start_time\030\003 \001(\r\022\027\n\017filter_end_time\030"
    "\004 \001(\r\022\027\n\017filter_match_id\030\005 \001(\004\022\031\n\021filter"
    "_last_match\030\006 \001(\010\"\214\002\n\"CMsgDOTAFantasyPla"
    "yerScoreResponse\022D\n\006result\030\001 \001(\0162+.CMsgD"
    "OTAFantasyPlayerScoreResponse.EResult:\007S"
    "UCCESS\022\031\n\021fantasy_league_id\030\002 \001(\r\022\031\n\021pla"
    "yer_account_id\030\003 \001(\r\022\023\n\013player_name\030\004 \001("
    "\t\022\r\n\005score\030\005 \001(\002\"F\n\007EResult\022\013\n\007SUCCESS\020\000"
    "\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERM"
    "ISSION\020\002\"\307\001\n%CMsgDOTAFantasyPlayerStandi"
    "ngsRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\r\n"
    "\005count\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\022\031\n\021filter_sta"
    "rt_time\030\004 \001(\r\022\027\n\017filter_end_time\030\005 \001(\r\022\027"
    "\n\017filter_match_id\030\006 \001(\004\022\031\n\021filter_last_m"
    "atch\030\007 \001(\010\"\205\003\n&CMsgDOTAFantasyPlayerStan"
    "dingsResponse\022H\n\006result\030\001 \001(\0162/.CMsgDOTA"
    "FantasyPlayerStandingsResponse.EResult:\007"
    "SUCCESS\022\031\n\021fantasy_league_id\030\002 \001(\r\022\014\n\004ro"
    "le\030\003 \001(\r\022N\n\rplayer_scores\030\004 \003(\01327.CMsgDO"
    "TAFantasyPlayerStandingsResponse.CMsgPla"
    "yerScore\032P\n\017CMsgPlayerScore\022\031\n\021player_ac"
    "count_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\022\r\n\005s"
    "core\030\003 \001(\002\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ER"
    "ROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION"
    "\020\002\"\"\n CMsgDOTAFantasyPlayerInfoRequest\"C"
    "\n!CMsgDOTAFantasyPlayerInfoResponse\022\036\n\003m"
    "sg\030\001 \001(\0132\021.CMsgGCPlayerInfo\"\237\001\n\"CMsgDOTA"
    "FantasyLeagueCreateRequest\022\021\n\tseason_id\030"
    "\001 \001(\r\022\033\n\023fantasy_league_name\030\002 \001(\t\022\020\n\010pa"
    "ssword\030\003 \001(\t\022\021\n\tteam_name\030\004 \001(\t\022\014\n\004logo\030"
    "\005 \001(\004\022\026\n\016ticket_item_id\030\006 \001(\004\"\320\002\n#CMsgDO"
    "TAFantasyLeagueCreateResponse\022E\n\006result\030"
    "\001 \001(\0162,.CMsgDOTAFantasyLeagueCreateRespo"
    "nse.EResult:\007SUCCESS\022\031\n\021fantasy_league_i"
    "d\030\002 \001(\r\"\306\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\027\n\023ERRO"
    "R_NO_PERMISSION\020\001\022\027\n\023ERROR_BAD_SEASON_ID"
    "\020\002\022\031\n\025ERROR_BAD_LEAGUE_NAME\020\003\022\027\n\023ERROR_B"
    "AD_TEAM_NAME\020\004\022\025\n\021ERROR_UNSPECIFIED\020\005\022\034\n"
    "\030ERROR_FAILED_LOGO_UPLOAD\020\006\022\023\n\017ERROR_NO_"
    "TICKET\020\007\"\210\001\n CMsgDOTAFantasyTeamCreateRe"
    "quest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\020\n\010pass"
    "word\030\002 \001(\t\022\021\n\tteam_name\030\003 \001(\t\022\014\n\004logo\030\004 "
    "\001(\004\022\026\n\016ticket_item_id\030\005 \001(\004\"\220\003\n!CMsgDOTA"
    "FantasyTeamCreateResponse\022C\n\006result\030\001 \001("
    "\0162*.CMsgDOTAFantasyTeamCreateResponse.ER"
    "esult:\007SUCCESS\022\032\n\022fantasy_team_index\030\002 \001"
    "(\r\"\211\002\n\007EResult\022\013\n\007SUCCESS\020\000\022\027\n\023ERROR_NO_"
    "PERMISSION\020\001\022\034\n\030ERROR_FAILED_LOGO_UPLOAD"
    "\020\002\022\037\n\033ERROR_BAD_FANTASY_LEAGUE_ID\020\003\022\022\n\016E"
    "RROR_BAD_NAME\020\004\022\016\n\nERROR_FULL\020\005\022\030\n\024ERROR"
    "_ALREADY_MEMBER\020\006\022\026\n\022ERROR_BAD_PASSWORD\020"
    "\007\022\025\n\021ERROR_UNSPECIFIED\020\010\022\023\n\017ERROR_NO_TIC"
    "KET\020\t\022\027\n\023ERROR_LEAGUE_LOCKED\020\n\"\331\001\n\'CMsgD"
    "OTAFantasyLeagueEditInvitesRequest\022\031\n\021fa"
    "ntasy_league_id\030\001 \001(\r\022\020\n\010password\030\002 \001(\t\022"
    "L\n\rinvite_change\030\003 \003(\01325.CMsgDOTAFantasy"
    "LeagueEditInvitesRequest.InviteChange\0323\n"
    "\014InviteChange\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007inv"
    "ited\030\002 \001(\010\"\245\001\n(CMsgDOTAFantasyLeagueEdit"
    "InvitesResponse\022J\n\006result\030\001 \001(\01621.CMsgDO"
    "TAFantasyLeagueEditInvitesResponse.EResu"
    "lt:\007SUCCESS\"-\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021E"
    "RROR_UNSPECIFIED\020\001\"D\n\'CMsgDOTAFantasyLea"
    "gueDraftStatusRequest\022\031\n\021fantasy_league_"
    "id\030\001 \001(\r\"\306\001\n CMsgDOTAFantasyLeagueDraftS"
    "tatus\022\031\n\021fantasy_league_id\030\001 \001(\r\022\023\n\013draf"
    "t_order\030\002 \003(\r\022\024\n\014current_pick\030\003 \001(\r\022\026\n\016t"
    "ime_remaining\030\004 \001(\r\022\026\n\016pending_resume\030\005 "
    "\001(\010\022\021\n\tcompleted\030\006 \001(\010\022\031\n\021available_play"
    "ers\030\007 \003(\r\"s\n\'CMsgDOTAFantasyLeagueDraftP"
    "layerRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022"
    "\022\n\nteam_index\030\002 \001(\r\022\031\n\021player_account_id"
    "\030\003 \001(\r\"\202\003\n(CMsgDOTAFantasyLeagueDraftPla"
    "yerResponse\022J\n\006result\030\001 \001(\01621.CMsgDOTAFa"
    "ntasyLeagueDraftPlayerResponse.EResult:\007"
    "SUCCESS\"\211\002\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERRO"
    "R_UNSPECIFIED\020\001\022 \n\034ERROR_INVALID_FANTASY"
    "_LEAGUE\020\002\022%\n!ERROR_FANTASY_LEAGUE_NOT_DR"
    "AFTING\020\003\022\035\n\031ERROR_OWNER_NOT_IN_LEAGUE\020\004\022"
    "\031\n\025ERROR_NOT_OWNERS_TURN\020\005\022\030\n\024ERROR_PLAY"
    "ER_INVALID\020\006\022\034\n\030ERROR_PLAYER_UNAVAILABLE"
    "\020\007\022\037\n\033ERROR_PLAYER_NO_VALID_SLOTS\020\010\"\210\001\n$"
    "CMsgDOTAFantasyTeamRosterSwapRequest\022\031\n\021"
    "fantasy_league_id\030\001 \001(\r\022\022\n\nteam_index\030\002 "
    "\001(\r\022\021\n\ttimestamp\030\003 \001(\r\022\016\n\006slot_1\030\004 \001(\r\022\016"
    "\n\006slot_2\030\005 \001(\r\"\356\001\n%CMsgDOTAFantasyTeamRo"
    "sterSwapResponse\022G\n\006result\030\001 \001(\0162..CMsgD"
    "OTAFantasyTeamRosterSwapResponse.EResult"
    ":\007SUCCESS\"|\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERR"
    "OR_UNSPECIFIED\020\001\022\035\n\031ERROR_OWNER_NOT_IN_L"
    "EAGUE\020\002\022\027\n\023ERROR_SLOTS_INVALID\020\003\022\025\n\021ERRO"
    "R_SLOT_LOCKED\020\004\"\211\001\n\'CMsgDOTAFantasyTeamR"
    "osterAddDropRequest\022\031\n\021fantasy_league_id"
    "\030\001 \001(\r\022\022\n\nteam_index\030\002 \001(\r\022\026\n\016add_accoun"
    "t_id\030\005 \001(\r\022\027\n\017drop_account_id\030\006 \001(\r\"\244\002\n("
    "CMsgDOTAFantasyTeamRosterAddDropResponse"
    "\022J\n\006result\030\001 \001(\01621.CMsgDOTAFantasyTeamRo"
    "sterAddDropResponse.EResult:\007SUCCESS\"\253\001\n"
    "\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFI"
    "ED\020\001\022\035\n\031ERROR_OWNER_NOT_IN_LEAGUE\020\002\022\036\n\032E"
    "RROR_PLAYER_NOT_AVAILABLE\020\003\022\034\n\030ERROR_PLA"
    "YER_NOT_ON_TEAM\020\004\022\037\n\033ERROR_TRADE_ALREADY"
    "_PENDING\020\005\"=\n CMsgDOTAFantasyTeamTradesR"
    "equest\022\031\n\021fantasy_league_id\030\001 \001(\r\"\211\003\n!CM"
    "sgDOTAFantasyTeamTradesResponse\022C\n\006resul"
    "t\030\001 \001(\0162*.CMsgDOTAFantasyTeamTradesRespo"
    "nse.EResult:\007SUCCESS\0228\n\006trades\030\002 \003(\0132(.C"
    "MsgDOTAFantasyTeamTradesResponse.Trade\032\234"
    "\001\n\005Trade\022\021\n\ttimestamp\030\001 \001(\r\022\032\n\022owner_acc"
    "ount_id_1\030\002 \001(\r\022\032\n\022owner_account_id_2\030\003 "
    "\001(\r\022\033\n\023player_account_id_1\030\004 \001(\r\022\033\n\023play"
    "er_account_id_2\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\"F\n"
    "\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFI"
    "ED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\212\001\n%CMsgDO"
    "TAFantasyTeamTradeCancelRequest\022\031\n\021fanta"
    "sy_league_id\030\001 \001(\r\022\024\n\014team_index_1\030\003 \001(\r"
    "\022\032\n\022owner_account_id_2\030\004 \001(\r\022\024\n\014team_ind"
    "ex_2\030\005 \001(\r\"\316\001\n&CMsgDOTAFantasyTeamTradeC"
    "ancelResponse\022H\n\006result\030\001 \001(\0162/.CMsgDOTA"
    "FantasyTeamTradeCancelResponse.EResult:\007"
    "SUCCESS\"Z\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR"
    "_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022"
    "\022\n\016ERROR_NO_TRADE\020\003\"~\n CMsgDOTAFantasyTe"
    "amRosterRequest\022\031\n\021fantasy_league_id\030\001 \001"
    "(\r\022\022\n\nteam_index\030\002 \001(\r\022\030\n\020owner_account_"
    "id\030\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\r\"\202\002\n!CMsgDOTA"
    "FantasyTeamRosterResponse\022C\n\006result\030\001 \001("
    "\0162*.CMsgDOTAFantasyTeamRosterResponse.ER"
    "esult:\007SUCCESS\022\032\n\022player_account_ids\030\002 \003"
    "(\r\022\025\n\rplayer_locked\030\003 \003(\010\"e\n\007EResult\022\013\n\007"
    "SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERRO"
    "R_NO_PERMISSION\020\002\022\035\n\031ERROR_OWNER_NOT_IN_"
    "LEAGUE\020\003\"G\n*CMsgDOTAFantasyPlayerHisoric"
    "alStatsRequest\022\031\n\021fantasy_league_id\030\001 \001("
    "\r\"\201\006\n+CMsgDOTAFantasyPlayerHisoricalStat"
    "sResponse\022M\n\006result\030\001 \001(\01624.CMsgDOTAFant"
    "asyPlayerHisoricalStatsResponse.EResult:"
    "\007SUCCESS\022G\n\005stats\030\002 \003(\01328.CMsgDOTAFantas"
    "yPlayerHisoricalStatsResponse.PlayerStat"
    "s\032\201\002\n\026PlayerScoreAccumulator\022\017\n\007matches\030"
    "\001 \001(\r\022\016\n\006levels\030\002 \001(\002\022\r\n\005kills\030\003 \001(\002\022\016\n\006"
    "deaths\030\004 \001(\002\022\017\n\007assists\030\005 \001(\002\022\021\n\tlast_hi"
    "ts\030\006 \001(\002\022\016\n\006denies\030\007 \001(\002\022\013\n\003gpm\030\010 \001(\002\022\014\n"
    "\004xppm\030\t \001(\002\022\r\n\005stuns\030\n \001(\002\022\017\n\007healing\030\013 "
    "\001(\002\022\023\n\013tower_kills\030\014 \001(\002\022\024\n\014roshan_kills"
    "\030\r \001(\002\022\r\n\005score\030\016 \001(\002\032\355\001\n\013PlayerStats\022\022\n"
    "\naccount_id\030\001 \001(\r\022\r\n\005weeks\030\002 \001(\r\022Z\n\rstat"
    "s_premium\030\004 \001(\0132C.CMsgDOTAFantasyPlayerH"
    "isoricalStatsResponse.PlayerScoreAccumul"
    "ator\022_\n\022stats_professional\030\005 \001(\0132C.CMsgD"
    "OTAFantasyPlayerHisoricalStatsResponse.P"
    "layerScoreAccumulator\"F\n\007EResult\022\013\n\007SUCC"
    "ESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO"
    "_PERMISSION\020\002\"G\n\031CMsgDOTAFantasyMessageA"
    "dd\022\031\n\021fantasy_league_id\030\001 \001(\r\022\017\n\007message"
    "\030\002 \001(\t\"g\n\036CMsgDOTAFantasyMessagesRequest"
    "\022\031\n\021fantasy_league_id\030\001 \001(\r\022\025\n\rstart_mes"
    "sage\030\002 \001(\r\022\023\n\013end_message\030\003 \001(\r\"\335\002\n\037CMsg"
    "DOTAFantasyMessagesResponse\022A\n\006result\030\001 "
    "\001(\0162(.CMsgDOTAFantasyMessagesResponse.ER"
    "esult:\007SUCCESS\022:\n\010messages\030\002 \003(\0132(.CMsgD"
    "OTAFantasyMessagesResponse.Message\022\032\n\022nu"
    "m_total_messages\030\003 \001(\r\032W\n\007Message\022\022\n\nmes"
    "sage_id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\031\n\021author"
    "_account_id\030\003 \001(\r\022\014\n\004time\030\004 \001(\r\"F\n\007EResu"
    "lt\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027"
    "\n\023ERROR_NO_PERMISSION\020\002\"e\n\032CMsgDOTAFanta"
    "syRemoveOwner\022\031\n\021fantasy_league_id\030\001 \001(\r"
    "\022\030\n\020owner_account_id\030\002 \001(\r\022\022\n\nteam_index"
    "\030\003 \001(\r\"\343\001\n\"CMsgDOTAFantasyRemoveOwnerRes"
    "ponse\022D\n\006result\030\001 \001(\0162+.CMsgDOTAFantasyR"
    "emoveOwnerResponse.EResult:\007SUCCESS\"w\n\007E"
    "Result\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED"
    "\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022\027\n\023ERROR_LEA"
    "GUE_LOCKED\020\003\022\026\n\022ERROR_NOT_A_MEMBER\020\004\"C\n&"
    "CMsgDOTAFantasyScheduledMatchesRequest\022\031"
    "\n\021fantasy_league_id\030\001 \001(\r\"\315\002\n\'CMsgDOTAFa"
    "ntasyScheduledMatchesResponse\022I\n\006result\030"
    "\001 \001(\01620.CMsgDOTAFantasyScheduledMatchesR"
    "esponse.EResult:\007SUCCESS\022Y\n\024scheduled_ma"
    "tch_days\030\002 \003(\0132;.CMsgDOTAFantasySchedule"
    "dMatchesResponse.ScheduledMatchDays\032M\n\022S"
    "cheduledMatchDays\022\021\n\ttimestamp\030\001 \001(\r\022\020\n\010"
    "team_ids\030\002 \003(\r\022\022\n\nleague_ids\030\003 \003(\r\"-\n\007ER"
    "esult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020"
    "\001\"Z\n!CMsgDOTAFantasyLeaveLeagueRequest\022\031"
    "\n\021fantasy_league_id\030\001 \001(\r\022\032\n\022fantasy_tea"
    "m_index\030\002 \001(\r\"\343\001\n\"CMsgDOTAFantasyLeaveLe"
    "agueResponse\022D\n\006result\030\001 \001(\0162+.CMsgDOTAF"
    "antasyLeaveLeagueResponse.EResult:\007SUCCE"
    "SS\"w\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSP"
    "ECIFIED\020\001\022\024\n\020ERROR_NOT_MEMBER\020\002\022\032\n\026ERROR"
    "_LEAGUE_NOT_FOUND\020\003\022\026\n\022ERROR_DRAFT_ACTIV"
    "E\020\004\"\206\001\n(CMsgDOTAFantasyPlayerScoreDetail"
    "sRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\031\n\021p"
    "layer_account_id\030\002 \001(\r\022\022\n\nstart_time\030\003 \001"
    "(\r\022\020\n\010end_time\030\004 \001(\r\"\260\004\n)CMsgDOTAFantasy"
    "PlayerScoreDetailsResponse\022K\n\006result\030\001 \001"
    "(\01622.CMsgDOTAFantasyPlayerScoreDetailsRe"
    "sponse.EResult:\007SUCCESS\022H\n\004data\030\002 \003(\0132:."
    "CMsgDOTAFantasyPlayerScoreDetailsRespons"
    "e.PlayerMatchData\032\246\002\n\017PlayerMatchData\022\020\n"
    "\010match_id\030\001 \001(\004\022\021\n\tseries_id\030\002 \001(\r\022\022\n\nse"
    "ries_num\030\003 \001(\r\022\023\n\013series_type\030\004 \001(\r\022\023\n\013l"
    "eague_tier\030\005 \001(\r\022\021\n\tleague_id\030\006 \001(\r\022\030\n\020o"
    "pposing_team_id\030\007 \001(\r\022\032\n\022opposing_team_l"
    "ogo\030\010 \001(\004\022\032\n\022opposing_team_name\030\t \001(\t\022(\n"
    "\005stats\030\n \001(\0132\031.CMsgFantasyLeagueScoring\022"
    "\020\n\010owned_by\030\013 \001(\r\022\017\n\007benched\030\014 \001(\010\"C\n\007ER"
    "esult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020"
    "\001\022\024\n\020ERROR_NOT_MEMBER\020\002\"\231\t\n\022CMsgDOTATour"
    "nament\022\'\n\005teams\030\001 \003(\0132\030.CMsgDOTATourname"
    "nt.Team\022\'\n\005games\030\002 \003(\0132\030.CMsgDOTATournam"
    "ent.Game\022\013\n\003gid\030\003 \001(\004\022\025\n\rtournament_id\030\004"
    " \001(\r\022D\n\017tournament_type\030\005 \001(\0162\020.ETournam"
    "entType:\031k_ETournamentType_Unknown\022M\n\023to"
    "urnament_template\030\006 \001(\0162\024.ETournamentTem"
    "plate:\032k_ETournamentTemplate_None\022\021\n\tlea"
    "gue_id\030\007 \001(\r\022\022\n\nstart_time\030\010 \001(\r\022<\n\005stat"
    "e\030\t \001(\0162\021.ETournamentState:\032k_ETournamen"
    "tState_Unknown\022\'\n\005nodes\030\n \003(\0132\030.CMsgDOTA"
    "Tournament.Node\032\242\001\n\004Team\022\017\n\007team_id\030\001 \001("
    "\r\022\021\n\tteam_name\030\002 \001(\t\022\023\n\013team_abbrev\030\003 \001("
    "\t\022\023\n\007players\030\004 \003(\rB\002\020\001\022\014\n\004seed\030\005 \001(\r\022\021\n\t"
    "team_logo\030\006 \001(\004\022\024\n\014country_code\030\007 \001(\t\022\025\n"
    "\rnode_or_state\030\010 \001(\r\032\320\002\n\004Game\022\017\n\007game_id"
    "\030\001 \001(\r\022\024\n\014good_team_id\030\002 \001(\r\022\023\n\013bad_team"
    "_id\030\003 \001(\r\022\026\n\016good_team_seed\030\014 \001(\r\022\025\n\rbad"
    "_team_seed\030\r \001(\r\022\020\n\010lobby_id\030\004 \001(\006\022\020\n\010ma"
    "tch_id\030\005 \001(\004\022\021\n\tgame_name\030\006 \001(\t\022\023\n\013live_"
    "stream\030\007 \001(\010\022\017\n\007message\030\t \001(\t\022\025\n\rresults"
    "_final\030\n \001(\010\022D\n\005state\030\016 \001(\0162\025.ETournamen"
    "tGameState:\036k_ETournamentGameState_Unkno"
    "wn\022\017\n\007node_id\030\017 \001(\r\022\022\n\nstart_time\030\020 \001(\r\032"
    "\361\001\n\004Node\022\017\n\007node_id\030\001 \001(\r\022\023\n\013team_seed_a"
    "\030\002 \001(\r\022\023\n\013team_seed_b\030\003 \001(\r\022\023\n\013winner_no"
    "de\030\004 \001(\r\022\022\n\nloser_node\030\005 \001(\r\022\023\n\013series_t"
    "ype\030\007 \001(\r\022I\n\nnode_state\030\010 \001(\0162\025.ETournam"
    "entNodeState:\036k_ETournamentNodeState_Unk"
    "nown\022\021\n\tseries_id\030\t \001(\r\022\022\n\nstart_time\030\020 "
    "\001(\r\"Q\n\031CMsgDOTATournamentRequest\022\025\n\rtour"
    "nament_id\030\001 \001(\r\022\035\n\025client_tournament_gid"
    "\030\002 \001(\004\"X\n\032CMsgDOTATournamentResponse\022\021\n\006"
    "result\030\001 \001(\r:\0012\022\'\n\ntournament\030\002 \001(\0132\023.CM"
    "sgDOTATournament\"E\n\033CMsgDOTAClearTournam"
    "entGame\022\025\n\rtournament_id\030\001 \001(\r\022\017\n\007game_i"
    "d\030\002 \001(\r\"Z\n\035CMsgDOTAPassportVoteTeamGuess"
    "\022\021\n\tleague_id\030\001 \001(\r\022\021\n\twinner_id\030\002 \001(\r\022\023"
    "\n\013runnerup_id\030\003 \001(\r\"\221\001\n$CMsgDOTAPassport"
    "VoteGenericSelection\022V\n\017selection_index\030"
    "\001 \001(\0162\".DOTA_2013PassportSelectionIndice"
    "s:\031PP13_SEL_ALLSTAR_PLAYER_0\022\021\n\tselectio"
    "n\030\002 \001(\r\"F\n\035CMsgDOTAPassportStampedPlayer"
    "\022\020\n\010steam_id\030\001 \001(\004\022\023\n\013stamp_level\030\002 \001(\r\""
    ";\n#CMsgDOTAPassportPlayerCardChallenge\022\024"
    "\n\014challenge_id\030\001 \001(\r\"\214\002\n\024CMsgDOTAPasspor"
    "tVote\0222\n\nteam_votes\030\001 \003(\0132\036.CMsgDOTAPass"
    "portVoteTeamGuess\022A\n\022generic_selections\030"
    "\002 \003(\0132%.CMsgDOTAPassportVoteGenericSelec"
    "tion\0227\n\017stamped_players\030\003 \003(\0132\036.CMsgDOTA"
    "PassportStampedPlayer\022D\n\026player_card_cha"
    "llenges\030\004 \003(\0132$.CMsgDOTAPassportPlayerCa"
    "rdChallenge\"-\n\027CMsgPassportDataRequest\022\022"
    "\n\naccount_id\030\001 \001(\r\"\317\004\n\030CMsgPassportDataR"
    "esponse\022\022\n\naccount_id\030\001 \001(\r\022\021\n\006result\030\002 "
    "\001(\r:\0012\022*\n\rinternational\030\005 \001(\0132\023.CMsgDOTA"
    "Tournament\022(\n east_qualifiers_predict_en"
    "d_time\030\007 \001(\r\022(\n west_qualifiers_predict_"
    "end_time\030\010 \001(\r\022\036\n\026allstar_match_end_time"
    "\030\t \001(\r\022-\n\016league_guesses\030\006 \001(\0132\025.CMsgDOT"
    "APassportVote\022&\n\036east_qualifiers_winner_"
    "team_id\030\n \001(\r\022)\n!east_qualifiers_runner_"
    "up_team_id\030\013 \001(\r\022&\n\036west_qualifiers_winn"
    "er_team_id\030\014 \001(\r\022)\n!west_qualifiers_runn"
    "er_up_team_id\030\r \001(\r\022\030\n\020passports_bought\030"
    "\016 \001(\r\022\035\n\025original_purchaser_id\030\017 \001(\r\022\032\n\022"
    "fantasy_team_count\030\020 \001(\r\022\036\n\026fantasy_team"
    "expiration\030\021 \001(\r\022\"\n\032fantasy_teams_will_l"
    "ock_at\030\022 \001(\r*\320\002\n\024ETournamentGameState\022\"\n"
    "\036k_ETournamentGameState_Unknown\020\000\022$\n k_E"
    "TournamentGameState_Scheduled\020\001\0221\n-k_ETo"
    "urnamentGameState_WaitingForLobbyToStart"
    "\020\002\022!\n\035k_ETournamentGameState_Active\020\003\022&\n"
    "\"k_ETournamentGameState_DireVictory\020\004\022%\n"
    "!k_ETournamentGameState_RadVictory\020\005\022#\n\037"
    "k_ETournamentGameState_Canceled\020\006\022$\n k_E"
    "TournamentTeamState_NotNeeded\020\007*\347\006\n\024ETou"
    "rnamentTeamState\022\"\n\036k_ETournamentTeamSta"
    "te_Unknown\020\000\022 \n\034k_ETournamentTeamState_N"
    "ode1\020\001\022#\n\036k_ETournamentTeamState_NodeMax"
    "\020\200\010\022&\n!k_ETournamentTeamState_Eliminated"
    "\020\263m\022%\n k_ETournamentTeamState_Forfeited\020"
    "\264m\022\'\n\"k_ETournamentTeamState_Finished1st"
    "\020\231u\022\'\n\"k_ETournamentTeamState_Finished2n"
    "d\020\232u\022\'\n\"k_ETournamentTeamState_Finished3"
    "rd\020\233u\022\'\n\"k_ETournamentTeamState_Finished"
    "4th\020\234u\022\'\n\"k_ETournamentTeamState_Finishe"
    "d5th\020\235u\022\'\n\"k_ETournamentTeamState_Finish"
    "ed6th\020\236u\022\'\n\"k_ETournamentTeamState_Finis"
    "hed7th\020\237u\022\'\n\"k_ETournamentTeamState_Fini"
    "shed8th\020\240u\022\'\n\"k_ETournamentTeamState_Fin"
    "ished9th\020\241u\022(\n#k_ETournamentTeamState_Fi"
    "nished10th\020\242u\022(\n#k_ETournamentTeamState_"
    "Finished11th\020\243u\022(\n#k_ETournamentTeamStat"
    "e_Finished12th\020\244u\022(\n#k_ETournamentTeamSt"
    "ate_Finished13th\020\245u\022(\n#k_ETournamentTeam"
    "State_Finished14th\020\246u\022(\n#k_ETournamentTe"
    "amState_Finished15th\020\247u\022(\n#k_ETournament"
    "TeamState_Finished16th\020\250u*\330\001\n\020ETournamen"
    "tState\022\036\n\032k_ETournamentState_Unknown\020\000\022\034"
    "\n\030k_ETournamentState_Setup\020\001\022 \n\034k_ETourn"
    "amentState_Scheduled\020\002\022!\n\035k_ETournamentS"
    "tate_InProgress\020\003\022 \n\034k_ETournamentState_"
    "Completed\020\004\022\037\n\033k_ETournamentState_Cancel"
    "ed\020\005*\251\002\n\024ETournamentNodeState\022\"\n\036k_ETour"
    "namentNodeState_Unknown\020\000\022.\n*k_ETourname"
    "ntNodeState_TeamsNotYetAssigned\020\001\022)\n%k_E"
    "TournamentNodeState_InBetweenGames\020\002\022)\n%"
    "k_ETournamentNodeState_GameInProgress\020\003\022"
    " \n\034k_ETournamentNodeState_A_Won\020\004\022 \n\034k_E"
    "TournamentNodeState_B_Won\020\005\022#\n\037k_ETourna"
    "mentNodeState_Canceled\020\006*\243\025\n!DOTA_2013Pa"
    "ssportSelectionIndices\022\035\n\031PP13_SEL_ALLST"
    "AR_PLAYER_0\020\000\022\035\n\031PP13_SEL_ALLSTAR_PLAYER"
    "_1\020\001\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_2\020\002\022\035\n\031P"
    "P13_SEL_ALLSTAR_PLAYER_3\020\003\022\035\n\031PP13_SEL_A"
    "LLSTAR_PLAYER_4\020\004\022\035\n\031PP13_SEL_ALLSTAR_PL"
    "AYER_5\020\005\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_6\020\006\022"
    "\035\n\031PP13_SEL_ALLSTAR_PLAYER_7\020\007\022\035\n\031PP13_S"
    "EL_ALLSTAR_PLAYER_8\020\010\022\035\n\031PP13_SEL_ALLSTA"
    "R_PLAYER_9\020\t\022\034\n\030PP13_SEL_QUALPRED_WEST_0"
    "\020\n\022\034\n\030PP13_SEL_QUALPRED_WEST_1\020\013\022\034\n\030PP13"
    "_SEL_QUALPRED_WEST_2\020\014\022\034\n\030PP13_SEL_QUALP"
    "RED_WEST_3\020\r\022\034\n\030PP13_SEL_QUALPRED_WEST_4"
    "\020\016\022\034\n\030PP13_SEL_QUALPRED_WEST_5\020\017\022\034\n\030PP13"
    "_SEL_QUALPRED_WEST_6\020\020\022\034\n\030PP13_SEL_QUALP"
    "RED_WEST_7\020\021\022\034\n\030PP13_SEL_QUALPRED_WEST_8"
    "\020\022\022\034\n\030PP13_SEL_QUALPRED_WEST_9\020\023\022\035\n\031PP13"
    "_SEL_QUALPRED_WEST_10\020\024\022\035\n\031PP13_SEL_QUAL"
    "PRED_WEST_11\020\025\022\035\n\031PP13_SEL_QUALPRED_WEST"
    "_12\020\026\022\035\n\031PP13_SEL_QUALPRED_WEST_13\020\027\022\035\n\031"
    "PP13_SEL_QUALPRED_WEST_14\020\030\022\034\n\030PP13_SEL_"
    "QUALPRED_EAST_0\020\031\022\034\n\030PP13_SEL_QUALPRED_E"
    "AST_1\020\032\022\034\n\030PP13_SEL_QUALPRED_EAST_2\020\033\022\034\n"
    "\030PP13_SEL_QUALPRED_EAST_3\020\034\022\034\n\030PP13_SEL_"
    "QUALPRED_EAST_4\020\035\022\034\n\030PP13_SEL_QUALPRED_E"
    "AST_5\020\036\022\034\n\030PP13_SEL_QUALPRED_EAST_6\020\037\022\034\n"
    "\030PP13_SEL_QUALPRED_EAST_7\020 \022\034\n\030PP13_SEL_"
    "QUALPRED_EAST_8\020!\022\034\n\030PP13_SEL_QUALPRED_E"
    "AST_9\020\"\022\035\n\031PP13_SEL_QUALPRED_EAST_10\020#\022\035"
    "\n\031PP13_SEL_QUALPRED_EAST_11\020$\022\035\n\031PP13_SE"
    "L_QUALPRED_EAST_12\020%\022\035\n\031PP13_SEL_QUALPRE"
    "D_EAST_13\020&\022\035\n\031PP13_SEL_QUALPRED_EAST_14"
    "\020\'\022\031\n\025PP13_SEL_TEAMCUP_TEAM\020(\022\033\n\027PP13_SE"
    "L_TEAMCUP_PLAYER\020)\022\036\n\032PP13_SEL_TEAMCUP_T"
    "EAM_LOCK\020*\022 \n\034PP13_SEL_TEAMCUP_PLAYER_LO"
    "CK\020+\022\030\n\024PP13_SEL_EVENTPRED_0\020,\022\030\n\024PP13_S"
    "EL_EVENTPRED_1\020-\022\030\n\024PP13_SEL_EVENTPRED_2"
    "\020.\022\030\n\024PP13_SEL_EVENTPRED_3\020/\022\030\n\024PP13_SEL"
    "_EVENTPRED_4\0200\022\030\n\024PP13_SEL_EVENTPRED_5\0201"
    "\022\030\n\024PP13_SEL_EVENTPRED_6\0202\022\030\n\024PP13_SEL_E"
    "VENTPRED_7\0203\022\030\n\024PP13_SEL_EVENTPRED_8\0204\022\030"
    "\n\024PP13_SEL_EVENTPRED_9\0205\022\031\n\025PP13_SEL_EVE"
    "NTPRED_10\0206\022\031\n\025PP13_SEL_EVENTPRED_11\0207\022\031"
    "\n\025PP13_SEL_EVENTPRED_12\0208\022\031\n\025PP13_SEL_EV"
    "ENTPRED_13\0209\022\031\n\025PP13_SEL_EVENTPRED_14\020:\022"
    "\031\n\025PP13_SEL_EVENTPRED_15\020;\022\031\n\025PP13_SEL_E"
    "VENTPRED_16\020<\022\031\n\025PP13_SEL_EVENTPRED_17\020="
    "\022\031\n\025PP13_SEL_EVENTPRED_18\020>\022\031\n\025PP13_SEL_"
    "EVENTPRED_19\020\?\022\031\n\025PP13_SEL_EVENTPRED_20\020"
    "@\022\031\n\025PP13_SEL_EVENTPRED_21\020A\022\031\n\025PP13_SEL"
    "_EVENTPRED_22\020B\022\031\n\025PP13_SEL_EVENTPRED_23"
    "\020C\022\031\n\025PP13_SEL_EVENTPRED_24\020D\022\031\n\025PP13_SE"
    "L_EVENTPRED_25\020E\022\031\n\025PP13_SEL_EVENTPRED_2"
    "6\020F\022\031\n\025PP13_SEL_EVENTPRED_27\020G\022\031\n\025PP13_S"
    "EL_EVENTPRED_28\020H\022\031\n\025PP13_SEL_EVENTPRED_"
    "29\020I\022\031\n\025PP13_SEL_EVENTPRED_30\020J\022\031\n\025PP13_"
    "SEL_EVENTPRED_31\020K\022\031\n\025PP13_SEL_EVENTPRED"
    "_32\020L\022\031\n\025PP13_SEL_EVENTPRED_33\020M\022\031\n\025PP13"
    "_SEL_EVENTPRED_34\020N\022\031\n\025PP13_SEL_EVENTPRE"
    "D_35\020O\022\031\n\025PP13_SEL_EVENTPRED_36\020P\022\031\n\025PP1"
    "3_SEL_EVENTPRED_37\020Q\022\031\n\025PP13_SEL_EVENTPR"
    "ED_38\020R\022\031\n\025PP13_SEL_EVENTPRED_39\020S\022\031\n\025PP"
    "13_SEL_EVENTPRED_40\020T\022\031\n\025PP13_SEL_EVENTP"
    "RED_41\020U\022\031\n\025PP13_SEL_EVENTPRED_42\020V\022\031\n\025P"
    "P13_SEL_EVENTPRED_43\020W\022\023\n\017PP13_SEL_SOLO_"
    "0\020X\022\023\n\017PP13_SEL_SOLO_1\020Y\022\023\n\017PP13_SEL_SOL"
    "O_2\020Z\022\023\n\017PP13_SEL_SOLO_3\020[\022\023\n\017PP13_SEL_S"
    "OLO_4\020\\\022\023\n\017PP13_SEL_SOLO_5\020]\022\023\n\017PP13_SEL"
    "_SOLO_6\020^\022\023\n\017PP13_SEL_SOLO_7\020_B\005H\001\200\001\000", 21117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_fantasy.proto", &protobuf_RegisterTypes);
  CMsgGCPlayerInfo::default_instance_ = new CMsgGCPlayerInfo();
  CMsgGCPlayerInfo_PlayerInfo::default_instance_ = new CMsgGCPlayerInfo_PlayerInfo();
  CMsgDOTACreateFantasyLeagueRequest::default_instance_ = new CMsgDOTACreateFantasyLeagueRequest();
  CMsgDOTACreateFantasyLeagueResponse::default_instance_ = new CMsgDOTACreateFantasyLeagueResponse();
  CMsgFantasyLeagueScoring::default_instance_ = new CMsgFantasyLeagueScoring();
  CMsgDOTAFantasyLeagueInfo::default_instance_ = new CMsgDOTAFantasyLeagueInfo();
  CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance_ = new CMsgDOTAFantasyLeagueInfo_OwnerInfo();
  CMsgDOTAFantasyLeagueEditInfoRequest::default_instance_ = new CMsgDOTAFantasyLeagueEditInfoRequest();
  CMsgDOTAFantasyLeagueEditInfoResponse::default_instance_ = new CMsgDOTAFantasyLeagueEditInfoResponse();
  CMsgDOTAFantasyLeagueFindRequest::default_instance_ = new CMsgDOTAFantasyLeagueFindRequest();
  CMsgDOTAFantasyLeagueFindResponse::default_instance_ = new CMsgDOTAFantasyLeagueFindResponse();
  CMsgDOTAFantasyLeagueInfoRequest::default_instance_ = new CMsgDOTAFantasyLeagueInfoRequest();
  CMsgDOTAFantasyLeagueInfoResponse::default_instance_ = new CMsgDOTAFantasyLeagueInfoResponse();
  CMsgDOTAFantasyLeagueMatchupsRequest::default_instance_ = new CMsgDOTAFantasyLeagueMatchupsRequest();
  CMsgDOTAFantasyLeagueMatchupsResponse::default_instance_ = new CMsgDOTAFantasyLeagueMatchupsResponse();
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance_ = new CMsgDOTAFantasyLeagueMatchupsResponse_Matchup();
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance_ = new CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups();
  CMsgDOTAEditFantasyTeamRequest::default_instance_ = new CMsgDOTAEditFantasyTeamRequest();
  CMsgDOTAEditFantasyTeamResponse::default_instance_ = new CMsgDOTAEditFantasyTeamResponse();
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance_ = new CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID();
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance_ = new CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID();
  CMsgDOTAFantasyTeamInfoResponse::default_instance_ = new CMsgDOTAFantasyTeamInfoResponse();
  CMsgDOTAFantasyTeamInfo::default_instance_ = new CMsgDOTAFantasyTeamInfo();
  CMsgDOTAFantasyTeamScoreRequest::default_instance_ = new CMsgDOTAFantasyTeamScoreRequest();
  CMsgDOTAFantasyTeamScoreResponse::default_instance_ = new CMsgDOTAFantasyTeamScoreResponse();
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance_ = new CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore();
  CMsgDOTAFantasyTeamStandingsRequest::default_instance_ = new CMsgDOTAFantasyTeamStandingsRequest();
  CMsgDOTAFantasyTeamStandingsResponse::default_instance_ = new CMsgDOTAFantasyTeamStandingsResponse();
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance_ = new CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore();
  CMsgDOTAFantasyPlayerScoreRequest::default_instance_ = new CMsgDOTAFantasyPlayerScoreRequest();
  CMsgDOTAFantasyPlayerScoreResponse::default_instance_ = new CMsgDOTAFantasyPlayerScoreResponse();
  CMsgDOTAFantasyPlayerStandingsRequest::default_instance_ = new CMsgDOTAFantasyPlayerStandingsRequest();
  CMsgDOTAFantasyPlayerStandingsResponse::default_instance_ = new CMsgDOTAFantasyPlayerStandingsResponse();
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance_ = new CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore();
  CMsgDOTAFantasyPlayerInfoRequest::default_instance_ = new CMsgDOTAFantasyPlayerInfoRequest();
  CMsgDOTAFantasyPlayerInfoResponse::default_instance_ = new CMsgDOTAFantasyPlayerInfoResponse();
  CMsgDOTAFantasyLeagueCreateRequest::default_instance_ = new CMsgDOTAFantasyLeagueCreateRequest();
  CMsgDOTAFantasyLeagueCreateResponse::default_instance_ = new CMsgDOTAFantasyLeagueCreateResponse();
  CMsgDOTAFantasyTeamCreateRequest::default_instance_ = new CMsgDOTAFantasyTeamCreateRequest();
  CMsgDOTAFantasyTeamCreateResponse::default_instance_ = new CMsgDOTAFantasyTeamCreateResponse();
  CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance_ = new CMsgDOTAFantasyLeagueEditInvitesRequest();
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance_ = new CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange();
  CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance_ = new CMsgDOTAFantasyLeagueEditInvitesResponse();
  CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance_ = new CMsgDOTAFantasyLeagueDraftStatusRequest();
  CMsgDOTAFantasyLeagueDraftStatus::default_instance_ = new CMsgDOTAFantasyLeagueDraftStatus();
  CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance_ = new CMsgDOTAFantasyLeagueDraftPlayerRequest();
  CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance_ = new CMsgDOTAFantasyLeagueDraftPlayerResponse();
  CMsgDOTAFantasyTeamRosterSwapRequest::default_instance_ = new CMsgDOTAFantasyTeamRosterSwapRequest();
  CMsgDOTAFantasyTeamRosterSwapResponse::default_instance_ = new CMsgDOTAFantasyTeamRosterSwapResponse();
  CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance_ = new CMsgDOTAFantasyTeamRosterAddDropRequest();
  CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance_ = new CMsgDOTAFantasyTeamRosterAddDropResponse();
  CMsgDOTAFantasyTeamTradesRequest::default_instance_ = new CMsgDOTAFantasyTeamTradesRequest();
  CMsgDOTAFantasyTeamTradesResponse::default_instance_ = new CMsgDOTAFantasyTeamTradesResponse();
  CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance_ = new CMsgDOTAFantasyTeamTradesResponse_Trade();
  CMsgDOTAFantasyTeamTradeCancelRequest::default_instance_ = new CMsgDOTAFantasyTeamTradeCancelRequest();
  CMsgDOTAFantasyTeamTradeCancelResponse::default_instance_ = new CMsgDOTAFantasyTeamTradeCancelResponse();
  CMsgDOTAFantasyTeamRosterRequest::default_instance_ = new CMsgDOTAFantasyTeamRosterRequest();
  CMsgDOTAFantasyTeamRosterResponse::default_instance_ = new CMsgDOTAFantasyTeamRosterResponse();
  CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance_ = new CMsgDOTAFantasyPlayerHisoricalStatsRequest();
  CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance_ = new CMsgDOTAFantasyPlayerHisoricalStatsResponse();
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance_ = new CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator();
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance_ = new CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats();
  CMsgDOTAFantasyMessageAdd::default_instance_ = new CMsgDOTAFantasyMessageAdd();
  CMsgDOTAFantasyMessagesRequest::default_instance_ = new CMsgDOTAFantasyMessagesRequest();
  CMsgDOTAFantasyMessagesResponse::default_instance_ = new CMsgDOTAFantasyMessagesResponse();
  CMsgDOTAFantasyMessagesResponse_Message::default_instance_ = new CMsgDOTAFantasyMessagesResponse_Message();
  CMsgDOTAFantasyRemoveOwner::default_instance_ = new CMsgDOTAFantasyRemoveOwner();
  CMsgDOTAFantasyRemoveOwnerResponse::default_instance_ = new CMsgDOTAFantasyRemoveOwnerResponse();
  CMsgDOTAFantasyScheduledMatchesRequest::default_instance_ = new CMsgDOTAFantasyScheduledMatchesRequest();
  CMsgDOTAFantasyScheduledMatchesResponse::default_instance_ = new CMsgDOTAFantasyScheduledMatchesResponse();
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance_ = new CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays();
  CMsgDOTAFantasyLeaveLeagueRequest::default_instance_ = new CMsgDOTAFantasyLeaveLeagueRequest();
  CMsgDOTAFantasyLeaveLeagueResponse::default_instance_ = new CMsgDOTAFantasyLeaveLeagueResponse();
  CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance_ = new CMsgDOTAFantasyPlayerScoreDetailsRequest();
  CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance_ = new CMsgDOTAFantasyPlayerScoreDetailsResponse();
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance_ = new CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData();
  CMsgDOTATournament::default_instance_ = new CMsgDOTATournament();
  CMsgDOTATournament_Team::default_instance_ = new CMsgDOTATournament_Team();
  CMsgDOTATournament_Game::default_instance_ = new CMsgDOTATournament_Game();
  CMsgDOTATournament_Node::default_instance_ = new CMsgDOTATournament_Node();
  CMsgDOTATournamentRequest::default_instance_ = new CMsgDOTATournamentRequest();
  CMsgDOTATournamentResponse::default_instance_ = new CMsgDOTATournamentResponse();
  CMsgDOTAClearTournamentGame::default_instance_ = new CMsgDOTAClearTournamentGame();
  CMsgDOTAPassportVoteTeamGuess::default_instance_ = new CMsgDOTAPassportVoteTeamGuess();
  CMsgDOTAPassportVoteGenericSelection::default_instance_ = new CMsgDOTAPassportVoteGenericSelection();
  CMsgDOTAPassportStampedPlayer::default_instance_ = new CMsgDOTAPassportStampedPlayer();
  CMsgDOTAPassportPlayerCardChallenge::default_instance_ = new CMsgDOTAPassportPlayerCardChallenge();
  CMsgDOTAPassportVote::default_instance_ = new CMsgDOTAPassportVote();
  CMsgPassportDataRequest::default_instance_ = new CMsgPassportDataRequest();
  CMsgPassportDataResponse::default_instance_ = new CMsgPassportDataResponse();
  CMsgGCPlayerInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCPlayerInfo_PlayerInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTACreateFantasyLeagueRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTACreateFantasyLeagueResponse::default_instance_->InitAsDefaultInstance();
  CMsgFantasyLeagueScoring::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueEditInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueEditInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueFindRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueFindResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueMatchupsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueMatchupsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance_->InitAsDefaultInstance();
  CMsgDOTAEditFantasyTeamRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAEditFantasyTeamResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamScoreRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamScoreResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamStandingsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamStandingsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerScoreRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerScoreResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerStandingsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerStandingsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueCreateRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueCreateResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamCreateRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamCreateResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueDraftStatus::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamRosterSwapRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamRosterSwapResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamTradesRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamTradesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamTradeCancelRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamTradeCancelResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamRosterRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyTeamRosterResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyMessageAdd::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyMessagesRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyMessagesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyMessagesResponse_Message::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyRemoveOwner::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyRemoveOwnerResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyScheduledMatchesRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyScheduledMatchesResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeaveLeagueRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyLeaveLeagueResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament_Team::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament_Game::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament_Node::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAClearTournamentGame::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPassportVoteTeamGuess::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPassportVoteGenericSelection::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPassportStampedPlayer::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPassportPlayerCardChallenge::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPassportVote::default_instance_->InitAsDefaultInstance();
  CMsgPassportDataRequest::default_instance_->InitAsDefaultInstance();
  CMsgPassportDataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ffantasy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5ffantasy_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5ffantasy_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5ffantasy_2eproto_;
const ::google::protobuf::EnumDescriptor* ETournamentGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentGameState_descriptor_;
}
bool ETournamentGameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentTeamState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentTeamState_descriptor_;
}
bool ETournamentTeamState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 1024:
    case 14003:
    case 14004:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentState_descriptor_;
}
bool ETournamentState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentNodeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentNodeState_descriptor_;
}
bool ETournamentNodeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_2013PassportSelectionIndices_descriptor_;
}
bool DOTA_2013PassportSelectionIndices_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCPlayerInfo_PlayerInfo::kAccountIdFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kNameFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kCountryCodeFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kFantasyRoleFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTeamIdFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTeamNameFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTeamTagFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kSponsorFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kIsLockedFieldNumber;
#endif  // !_MSC_VER

CMsgGCPlayerInfo_PlayerInfo::CMsgGCPlayerInfo_PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCPlayerInfo.PlayerInfo)
}

void CMsgGCPlayerInfo_PlayerInfo::InitAsDefaultInstance() {
}

CMsgGCPlayerInfo_PlayerInfo::CMsgGCPlayerInfo_PlayerInfo(const CMsgGCPlayerInfo_PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCPlayerInfo.PlayerInfo)
}

void CMsgGCPlayerInfo_PlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_role_ = 0u;
  team_id_ = 0u;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCPlayerInfo_PlayerInfo::~CMsgGCPlayerInfo_PlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCPlayerInfo.PlayerInfo)
  SharedDtor();
}

void CMsgGCPlayerInfo_PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgGCPlayerInfo_PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCPlayerInfo_PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCPlayerInfo_PlayerInfo_descriptor_;
}

const CMsgGCPlayerInfo_PlayerInfo& CMsgGCPlayerInfo_PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo_PlayerInfo::default_instance_ = NULL;

CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo_PlayerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCPlayerInfo_PlayerInfo* n = new CMsgGCPlayerInfo_PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCPlayerInfo_PlayerInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCPlayerInfo_PlayerInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(account_id_, fantasy_role_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country_code()) {
      country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    team_id_ = 0u;
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_team_tag()) {
      team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sponsor()) {
      sponsor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  is_locked_ = false;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCPlayerInfo_PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCPlayerInfo.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCPlayerInfo.PlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_country_code;
        break;
      }

      // optional string country_code = 3;
      case 3: {
        if (tag == 26) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCPlayerInfo.PlayerInfo.country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fantasy_role;
        break;
      }

      // optional uint32 fantasy_role = 4;
      case 4: {
        if (tag == 32) {
         parse_fantasy_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_role_)));
          set_has_fantasy_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (tag == 40) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_team_name;
        break;
      }

      // optional string team_name = 6;
      case 6: {
        if (tag == 50) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCPlayerInfo.PlayerInfo.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_team_tag;
        break;
      }

      // optional string team_tag = 7;
      case 7: {
        if (tag == 58) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCPlayerInfo.PlayerInfo.team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sponsor;
        break;
      }

      // optional string sponsor = 8;
      case 8: {
        if (tag == 66) {
         parse_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsor().data(), this->sponsor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgGCPlayerInfo.PlayerInfo.sponsor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_locked;
        break;
      }

      // optional bool is_locked = 9;
      case 9: {
        if (tag == 72) {
         parse_is_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locked_)));
          set_has_is_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCPlayerInfo.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCPlayerInfo.PlayerInfo)
  return false;
#undef DO_
}

void CMsgGCPlayerInfo_PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCPlayerInfo.PlayerInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string country_code = 3;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country_code(), output);
  }

  // optional uint32 fantasy_role = 4;
  if (has_fantasy_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fantasy_role(), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional string team_name = 6;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->team_name(), output);
  }

  // optional string team_tag = 7;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->team_tag(), output);
  }

  // optional string sponsor = 8;
  if (has_sponsor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsor().data(), this->sponsor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.sponsor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sponsor(), output);
  }

  // optional bool is_locked = 9;
  if (has_is_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_locked(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCPlayerInfo.PlayerInfo)
}

::google::protobuf::uint8* CMsgGCPlayerInfo_PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCPlayerInfo.PlayerInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string country_code = 3;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country_code(), target);
  }

  // optional uint32 fantasy_role = 4;
  if (has_fantasy_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fantasy_role(), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional string team_name = 6;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_name(), target);
  }

  // optional string team_tag = 7;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->team_tag(), target);
  }

  // optional string sponsor = 8;
  if (has_sponsor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsor().data(), this->sponsor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgGCPlayerInfo.PlayerInfo.sponsor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sponsor(), target);
  }

  // optional bool is_locked = 9;
  if (has_is_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_locked(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCPlayerInfo.PlayerInfo)
  return target;
}

int CMsgGCPlayerInfo_PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string country_code = 3;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional uint32 fantasy_role = 4;
    if (has_fantasy_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_role());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 6;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 7;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string sponsor = 8;
    if (has_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sponsor());
    }

  }
  // optional bool is_locked = 9;
  if (has_is_locked()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCPlayerInfo_PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCPlayerInfo_PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCPlayerInfo_PlayerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCPlayerInfo_PlayerInfo::MergeFrom(const CMsgGCPlayerInfo_PlayerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_country_code()) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (from.has_fantasy_role()) {
      set_fantasy_role(from.fantasy_role());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_tag()) {
      set_has_team_tag();
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (from.has_sponsor()) {
      set_has_sponsor();
      sponsor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_locked()) {
      set_is_locked(from.is_locked());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCPlayerInfo_PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPlayerInfo_PlayerInfo::CopyFrom(const CMsgGCPlayerInfo_PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPlayerInfo_PlayerInfo::IsInitialized() const {

  return true;
}

void CMsgGCPlayerInfo_PlayerInfo::Swap(CMsgGCPlayerInfo_PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCPlayerInfo_PlayerInfo::InternalSwap(CMsgGCPlayerInfo_PlayerInfo* other) {
  std::swap(account_id_, other->account_id_);
  name_.Swap(&other->name_);
  country_code_.Swap(&other->country_code_);
  std::swap(fantasy_role_, other->fantasy_role_);
  std::swap(team_id_, other->team_id_);
  team_name_.Swap(&other->team_name_);
  team_tag_.Swap(&other->team_tag_);
  sponsor_.Swap(&other->sponsor_);
  std::swap(is_locked_, other->is_locked_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCPlayerInfo_PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCPlayerInfo_PlayerInfo_descriptor_;
  metadata.reflection = CMsgGCPlayerInfo_PlayerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCPlayerInfo::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

CMsgGCPlayerInfo::CMsgGCPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCPlayerInfo)
}

void CMsgGCPlayerInfo::InitAsDefaultInstance() {
}

CMsgGCPlayerInfo::CMsgGCPlayerInfo(const CMsgGCPlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCPlayerInfo)
}

void CMsgGCPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCPlayerInfo::~CMsgGCPlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCPlayerInfo)
  SharedDtor();
}

void CMsgGCPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCPlayerInfo_descriptor_;
}

const CMsgGCPlayerInfo& CMsgGCPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgGCPlayerInfo* CMsgGCPlayerInfo::default_instance_ = NULL;

CMsgGCPlayerInfo* CMsgGCPlayerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCPlayerInfo* n = new CMsgGCPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCPlayerInfo::Clear() {
  player_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_player_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCPlayerInfo)
  return false;
#undef DO_
}

void CMsgGCPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCPlayerInfo)
  // repeated .CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCPlayerInfo)
}

::google::protobuf::uint8* CMsgGCPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCPlayerInfo)
  // repeated .CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_infos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCPlayerInfo)
  return target;
}

int CMsgGCPlayerInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCPlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCPlayerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCPlayerInfo::MergeFrom(const CMsgGCPlayerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_infos_.MergeFrom(from.player_infos_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPlayerInfo::CopyFrom(const CMsgGCPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPlayerInfo::IsInitialized() const {

  return true;
}

void CMsgGCPlayerInfo::Swap(CMsgGCPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCPlayerInfo::InternalSwap(CMsgGCPlayerInfo* other) {
  player_infos_.UnsafeArenaSwap(&other->player_infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCPlayerInfo_descriptor_;
  metadata.reflection = CMsgGCPlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCPlayerInfo_PlayerInfo

// optional uint32 account_id = 1;
bool CMsgGCPlayerInfo_PlayerInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.account_id)
  return account_id_;
}
 void CMsgGCPlayerInfo_PlayerInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.account_id)
}

// optional string name = 2;
bool CMsgGCPlayerInfo_PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CMsgGCPlayerInfo_PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.name)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCPlayerInfo.PlayerInfo.name)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCPlayerInfo.PlayerInfo.name)
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCPlayerInfo.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCPlayerInfo.PlayerInfo.name)
}

// optional string country_code = 3;
bool CMsgGCPlayerInfo_PlayerInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
 const ::std::string& CMsgGCPlayerInfo_PlayerInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.country_code)
  return country_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.country_code)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_country_code(const char* value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCPlayerInfo.PlayerInfo.country_code)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCPlayerInfo.PlayerInfo.country_code)
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgGCPlayerInfo.PlayerInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::release_country_code() {
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCPlayerInfo.PlayerInfo.country_code)
}

// optional uint32 fantasy_role = 4;
bool CMsgGCPlayerInfo_PlayerInfo::has_fantasy_role() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_fantasy_role() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_fantasy_role() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_fantasy_role() {
  fantasy_role_ = 0u;
  clear_has_fantasy_role();
}
 ::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::fantasy_role() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.fantasy_role)
  return fantasy_role_;
}
 void CMsgGCPlayerInfo_PlayerInfo::set_fantasy_role(::google::protobuf::uint32 value) {
  set_has_fantasy_role();
  fantasy_role_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.fantasy_role)
}

// optional uint32 team_id = 5;
bool CMsgGCPlayerInfo_PlayerInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.team_id)
  return team_id_;
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.team_id)
}

// optional string team_name = 6;
bool CMsgGCPlayerInfo_PlayerInfo::has_team_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_team_name() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgGCPlayerInfo_PlayerInfo::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.team_name)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCPlayerInfo.PlayerInfo.team_name)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCPlayerInfo.PlayerInfo.team_name)
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCPlayerInfo.PlayerInfo.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCPlayerInfo.PlayerInfo.team_name)
}

// optional string team_tag = 7;
bool CMsgGCPlayerInfo_PlayerInfo::has_team_tag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_team_tag() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
 const ::std::string& CMsgGCPlayerInfo_PlayerInfo::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.team_tag)
  return team_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(const char* value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgGCPlayerInfo.PlayerInfo.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::release_team_tag() {
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCPlayerInfo.PlayerInfo.team_tag)
}

// optional string sponsor = 8;
bool CMsgGCPlayerInfo_PlayerInfo::has_sponsor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_sponsor() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_sponsor() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_sponsor() {
  sponsor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sponsor();
}
 const ::std::string& CMsgGCPlayerInfo_PlayerInfo::sponsor() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.sponsor)
  return sponsor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(const ::std::string& value) {
  set_has_sponsor();
  sponsor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(const char* value) {
  set_has_sponsor();
  sponsor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
 void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(const char* value, size_t size) {
  set_has_sponsor();
  sponsor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_sponsor() {
  set_has_sponsor();
  // @@protoc_insertion_point(field_mutable:CMsgGCPlayerInfo.PlayerInfo.sponsor)
  return sponsor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgGCPlayerInfo_PlayerInfo::release_sponsor() {
  clear_has_sponsor();
  return sponsor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCPlayerInfo_PlayerInfo::set_allocated_sponsor(::std::string* sponsor) {
  if (sponsor != NULL) {
    set_has_sponsor();
  } else {
    clear_has_sponsor();
  }
  sponsor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sponsor);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCPlayerInfo.PlayerInfo.sponsor)
}

// optional bool is_locked = 9;
bool CMsgGCPlayerInfo_PlayerInfo::has_is_locked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_is_locked() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_is_locked() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_is_locked() {
  is_locked_ = false;
  clear_has_is_locked();
}
 bool CMsgGCPlayerInfo_PlayerInfo::is_locked() const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.PlayerInfo.is_locked)
  return is_locked_;
}
 void CMsgGCPlayerInfo_PlayerInfo::set_is_locked(bool value) {
  set_has_is_locked();
  is_locked_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCPlayerInfo.PlayerInfo.is_locked)
}

// -------------------------------------------------------------------

// CMsgGCPlayerInfo

// repeated .CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
int CMsgGCPlayerInfo::player_infos_size() const {
  return player_infos_.size();
}
void CMsgGCPlayerInfo::clear_player_infos() {
  player_infos_.Clear();
}
const ::CMsgGCPlayerInfo_PlayerInfo& CMsgGCPlayerInfo::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCPlayerInfo.player_infos)
  return player_infos_.Get(index);
}
::CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCPlayerInfo.player_infos)
  return player_infos_.Mutable(index);
}
::CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo::add_player_infos() {
  // @@protoc_insertion_point(field_add:CMsgGCPlayerInfo.player_infos)
  return player_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgGCPlayerInfo_PlayerInfo >*
CMsgGCPlayerInfo::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCPlayerInfo.player_infos)
  return &player_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgGCPlayerInfo_PlayerInfo >&
CMsgGCPlayerInfo::player_infos() const {
  // @@protoc_insertion_point(field_list:CMsgGCPlayerInfo.player_infos)
  return player_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTACreateFantasyLeagueRequest::kLeagueNameFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kLeagueLogoFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kSelectionModeFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kTeamCountFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACreateFantasyLeagueRequest)
}

void CMsgDOTACreateFantasyLeagueRequest::InitAsDefaultInstance() {
}

CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest(const CMsgDOTACreateFantasyLeagueRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateFantasyLeagueRequest)
}

void CMsgDOTACreateFantasyLeagueRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  league_logo_ = GOOGLE_ULONGLONG(0);
  selection_mode_ = 0;
  team_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACreateFantasyLeagueRequest::~CMsgDOTACreateFantasyLeagueRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateFantasyLeagueRequest)
  SharedDtor();
}

void CMsgDOTACreateFantasyLeagueRequest::SharedDtor() {
  league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTACreateFantasyLeagueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateFantasyLeagueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACreateFantasyLeagueRequest_descriptor_;
}

const CMsgDOTACreateFantasyLeagueRequest& CMsgDOTACreateFantasyLeagueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTACreateFantasyLeagueRequest* CMsgDOTACreateFantasyLeagueRequest::default_instance_ = NULL;

CMsgDOTACreateFantasyLeagueRequest* CMsgDOTACreateFantasyLeagueRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACreateFantasyLeagueRequest* n = new CMsgDOTACreateFantasyLeagueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACreateFantasyLeagueRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTACreateFantasyLeagueRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(league_logo_, team_count_);
    if (has_league_name()) {
      league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTACreateFantasyLeagueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACreateFantasyLeagueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string league_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTACreateFantasyLeagueRequest.league_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_logo;
        break;
      }

      // optional uint64 league_logo = 2;
      case 2: {
        if (tag == 16) {
         parse_league_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &league_logo_)));
          set_has_league_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selection_mode;
        break;
      }

      // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
      case 3: {
        if (tag == 24) {
         parse_selection_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Fantasy_Selection_Mode_IsValid(value)) {
            set_selection_mode(static_cast< ::Fantasy_Selection_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_count;
        break;
      }

      // optional uint32 team_count = 4;
      case 4: {
        if (tag == 32) {
         parse_team_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
          set_has_team_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACreateFantasyLeagueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACreateFantasyLeagueRequest)
  return false;
#undef DO_
}

void CMsgDOTACreateFantasyLeagueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACreateFantasyLeagueRequest)
  // optional string league_name = 1;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateFantasyLeagueRequest.league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->league_name(), output);
  }

  // optional uint64 league_logo = 2;
  if (has_league_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->league_logo(), output);
  }

  // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (has_selection_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->selection_mode(), output);
  }

  // optional uint32 team_count = 4;
  if (has_team_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACreateFantasyLeagueRequest)
}

::google::protobuf::uint8* CMsgDOTACreateFantasyLeagueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateFantasyLeagueRequest)
  // optional string league_name = 1;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateFantasyLeagueRequest.league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->league_name(), target);
  }

  // optional uint64 league_logo = 2;
  if (has_league_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->league_logo(), target);
  }

  // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (has_selection_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->selection_mode(), target);
  }

  // optional uint32 team_count = 4;
  if (has_team_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateFantasyLeagueRequest)
  return target;
}

int CMsgDOTACreateFantasyLeagueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string league_name = 1;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }

    // optional uint64 league_logo = 2;
    if (has_league_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->league_logo());
    }

    // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
    if (has_selection_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional uint32 team_count = 4;
    if (has_team_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTACreateFantasyLeagueRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACreateFantasyLeagueRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_name()) {
      set_has_league_name();
      league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
    }
    if (from.has_league_logo()) {
      set_league_logo(from.league_logo());
    }
    if (from.has_selection_mode()) {
      set_selection_mode(from.selection_mode());
    }
    if (from.has_team_count()) {
      set_team_count(from.team_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueRequest::IsInitialized() const {

  return true;
}

void CMsgDOTACreateFantasyLeagueRequest::Swap(CMsgDOTACreateFantasyLeagueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateFantasyLeagueRequest::InternalSwap(CMsgDOTACreateFantasyLeagueRequest* other) {
  league_name_.Swap(&other->league_name_);
  std::swap(league_logo_, other->league_logo_);
  std::swap(selection_mode_, other->selection_mode_);
  std::swap(team_count_, other->team_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACreateFantasyLeagueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACreateFantasyLeagueRequest_descriptor_;
  metadata.reflection = CMsgDOTACreateFantasyLeagueRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACreateFantasyLeagueRequest

// optional string league_name = 1;
bool CMsgDOTACreateFantasyLeagueRequest::has_league_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_league_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_league_name() {
  league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_league_name();
}
 const ::std::string& CMsgDOTACreateFantasyLeagueRequest::league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.league_name)
  return league_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const ::std::string& value) {
  set_has_league_name();
  league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
 void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const char* value) {
  set_has_league_name();
  league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
 void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
 ::std::string* CMsgDOTACreateFantasyLeagueRequest::mutable_league_name() {
  set_has_league_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTACreateFantasyLeagueRequest.league_name)
  return league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTACreateFantasyLeagueRequest::release_league_name() {
  clear_has_league_name();
  return league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTACreateFantasyLeagueRequest::set_allocated_league_name(::std::string* league_name) {
  if (league_name != NULL) {
    set_has_league_name();
  } else {
    clear_has_league_name();
  }
  league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), league_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTACreateFantasyLeagueRequest.league_name)
}

// optional uint64 league_logo = 2;
bool CMsgDOTACreateFantasyLeagueRequest::has_league_logo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_league_logo() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_league_logo() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_league_logo() {
  league_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_league_logo();
}
 ::google::protobuf::uint64 CMsgDOTACreateFantasyLeagueRequest::league_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.league_logo)
  return league_logo_;
}
 void CMsgDOTACreateFantasyLeagueRequest::set_league_logo(::google::protobuf::uint64 value) {
  set_has_league_logo();
  league_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.league_logo)
}

// optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
bool CMsgDOTACreateFantasyLeagueRequest::has_selection_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_selection_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_selection_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_selection_mode() {
  selection_mode_ = 0;
  clear_has_selection_mode();
}
 ::Fantasy_Selection_Mode CMsgDOTACreateFantasyLeagueRequest::selection_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.selection_mode)
  return static_cast< ::Fantasy_Selection_Mode >(selection_mode_);
}
 void CMsgDOTACreateFantasyLeagueRequest::set_selection_mode(::Fantasy_Selection_Mode value) {
  assert(::Fantasy_Selection_Mode_IsValid(value));
  set_has_selection_mode();
  selection_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.selection_mode)
}

// optional uint32 team_count = 4;
bool CMsgDOTACreateFantasyLeagueRequest::has_team_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_team_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_team_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_team_count() {
  team_count_ = 0u;
  clear_has_team_count();
}
 ::google::protobuf::uint32 CMsgDOTACreateFantasyLeagueRequest::team_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.team_count)
  return team_count_;
}
 void CMsgDOTACreateFantasyLeagueRequest::set_team_count(::google::protobuf::uint32 value) {
  set_has_team_count();
  team_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.team_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor_;
}
bool CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::SUCCESS;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_UNSPECIFIED;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_TOO_MANY_LEAGUES;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_INVALID_TEAM_COUNT;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_CREATION_DISABLED;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MIN;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MAX;
const int CMsgDOTACreateFantasyLeagueResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTACreateFantasyLeagueResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACreateFantasyLeagueResponse)
}

void CMsgDOTACreateFantasyLeagueResponse::InitAsDefaultInstance() {
}

CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse(const CMsgDOTACreateFantasyLeagueResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateFantasyLeagueResponse)
}

void CMsgDOTACreateFantasyLeagueResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACreateFantasyLeagueResponse::~CMsgDOTACreateFantasyLeagueResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateFantasyLeagueResponse)
  SharedDtor();
}

void CMsgDOTACreateFantasyLeagueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTACreateFantasyLeagueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateFantasyLeagueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACreateFantasyLeagueResponse_descriptor_;
}

const CMsgDOTACreateFantasyLeagueResponse& CMsgDOTACreateFantasyLeagueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTACreateFantasyLeagueResponse* CMsgDOTACreateFantasyLeagueResponse::default_instance_ = NULL;

CMsgDOTACreateFantasyLeagueResponse* CMsgDOTACreateFantasyLeagueResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACreateFantasyLeagueResponse* n = new CMsgDOTACreateFantasyLeagueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACreateFantasyLeagueResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTACreateFantasyLeagueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACreateFantasyLeagueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTACreateFantasyLeagueResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACreateFantasyLeagueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACreateFantasyLeagueResponse)
  return false;
#undef DO_
}

void CMsgDOTACreateFantasyLeagueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACreateFantasyLeagueResponse)
  // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACreateFantasyLeagueResponse)
}

::google::protobuf::uint8* CMsgDOTACreateFantasyLeagueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateFantasyLeagueResponse)
  // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateFantasyLeagueResponse)
  return target;
}

int CMsgDOTACreateFantasyLeagueResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTACreateFantasyLeagueResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACreateFantasyLeagueResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueResponse::IsInitialized() const {

  return true;
}

void CMsgDOTACreateFantasyLeagueResponse::Swap(CMsgDOTACreateFantasyLeagueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateFantasyLeagueResponse::InternalSwap(CMsgDOTACreateFantasyLeagueResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACreateFantasyLeagueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACreateFantasyLeagueResponse_descriptor_;
  metadata.reflection = CMsgDOTACreateFantasyLeagueResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACreateFantasyLeagueResponse

// optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTACreateFantasyLeagueResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACreateFantasyLeagueResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACreateFantasyLeagueResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACreateFantasyLeagueResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueResponse.result)
  return static_cast< ::CMsgDOTACreateFantasyLeagueResponse_EResult >(result_);
}
 void CMsgDOTACreateFantasyLeagueResponse::set_result(::CMsgDOTACreateFantasyLeagueResponse_EResult value) {
  assert(::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgFantasyLeagueScoring::kLevelFieldNumber;
const int CMsgFantasyLeagueScoring::kKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kDeathsFieldNumber;
const int CMsgFantasyLeagueScoring::kAssistsFieldNumber;
const int CMsgFantasyLeagueScoring::kLastHitsFieldNumber;
const int CMsgFantasyLeagueScoring::kDeniesFieldNumber;
const int CMsgFantasyLeagueScoring::kGpmFieldNumber;
const int CMsgFantasyLeagueScoring::kXppmFieldNumber;
const int CMsgFantasyLeagueScoring::kStunsFieldNumber;
const int CMsgFantasyLeagueScoring::kHealingFieldNumber;
const int CMsgFantasyLeagueScoring::kTowerKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kRoshanKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kMultiplierPremiumFieldNumber;
const int CMsgFantasyLeagueScoring::kMultiplierProfessionalFieldNumber;
#endif  // !_MSC_VER

CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFantasyLeagueScoring)
}

void CMsgFantasyLeagueScoring::InitAsDefaultInstance() {
}

CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring(const CMsgFantasyLeagueScoring& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFantasyLeagueScoring)
}

void CMsgFantasyLeagueScoring::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  kills_ = 0;
  deaths_ = 0;
  assists_ = 0;
  last_hits_ = 0;
  denies_ = 0;
  gpm_ = 0;
  xppm_ = 0;
  stuns_ = 0;
  healing_ = 0;
  tower_kills_ = 0;
  roshan_kills_ = 0;
  multiplier_premium_ = 0;
  multiplier_professional_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFantasyLeagueScoring::~CMsgFantasyLeagueScoring() {
  // @@protoc_insertion_point(destructor:CMsgFantasyLeagueScoring)
  SharedDtor();
}

void CMsgFantasyLeagueScoring::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFantasyLeagueScoring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFantasyLeagueScoring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFantasyLeagueScoring_descriptor_;
}

const CMsgFantasyLeagueScoring& CMsgFantasyLeagueScoring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgFantasyLeagueScoring* CMsgFantasyLeagueScoring::default_instance_ = NULL;

CMsgFantasyLeagueScoring* CMsgFantasyLeagueScoring::New(::google::protobuf::Arena* arena) const {
  CMsgFantasyLeagueScoring* n = new CMsgFantasyLeagueScoring;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFantasyLeagueScoring::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgFantasyLeagueScoring*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(level_, xppm_);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(stuns_, multiplier_professional_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgFantasyLeagueScoring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFantasyLeagueScoring)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float level = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_kills;
        break;
      }

      // optional float kills = 2;
      case 2: {
        if (tag == 21) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_deaths;
        break;
      }

      // optional float deaths = 3;
      case 3: {
        if (tag == 29) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_assists;
        break;
      }

      // optional float assists = 4;
      case 4: {
        if (tag == 37) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_last_hits;
        break;
      }

      // optional float last_hits = 5;
      case 5: {
        if (tag == 45) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_denies;
        break;
      }

      // optional float denies = 6;
      case 6: {
        if (tag == 53) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_gpm;
        break;
      }

      // optional float gpm = 7;
      case 7: {
        if (tag == 61) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_xppm;
        break;
      }

      // optional float xppm = 8;
      case 8: {
        if (tag == 69) {
         parse_xppm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
          set_has_xppm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_stuns;
        break;
      }

      // optional float stuns = 9;
      case 9: {
        if (tag == 77) {
         parse_stuns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
          set_has_stuns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_healing;
        break;
      }

      // optional float healing = 10;
      case 10: {
        if (tag == 85) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
          set_has_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_tower_kills;
        break;
      }

      // optional float tower_kills = 11;
      case 11: {
        if (tag == 93) {
         parse_tower_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tower_kills_)));
          set_has_tower_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_roshan_kills;
        break;
      }

      // optional float roshan_kills = 12;
      case 12: {
        if (tag == 101) {
         parse_roshan_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roshan_kills_)));
          set_has_roshan_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_multiplier_premium;
        break;
      }

      // optional float multiplier_premium = 13;
      case 13: {
        if (tag == 109) {
         parse_multiplier_premium:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_premium_)));
          set_has_multiplier_premium();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_multiplier_professional;
        break;
      }

      // optional float multiplier_professional = 14;
      case 14: {
        if (tag == 117) {
         parse_multiplier_professional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_professional_)));
          set_has_multiplier_professional();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFantasyLeagueScoring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFantasyLeagueScoring)
  return false;
#undef DO_
}

void CMsgFantasyLeagueScoring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFantasyLeagueScoring)
  // optional float level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->level(), output);
  }

  // optional float kills = 2;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kills(), output);
  }

  // optional float deaths = 3;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->deaths(), output);
  }

  // optional float assists = 4;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->assists(), output);
  }

  // optional float last_hits = 5;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->last_hits(), output);
  }

  // optional float denies = 6;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->denies(), output);
  }

  // optional float gpm = 7;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->gpm(), output);
  }

  // optional float xppm = 8;
  if (has_xppm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xppm(), output);
  }

  // optional float stuns = 9;
  if (has_stuns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->stuns(), output);
  }

  // optional float healing = 10;
  if (has_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->healing(), output);
  }

  // optional float tower_kills = 11;
  if (has_tower_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tower_kills(), output);
  }

  // optional float roshan_kills = 12;
  if (has_roshan_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->roshan_kills(), output);
  }

  // optional float multiplier_premium = 13;
  if (has_multiplier_premium()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->multiplier_premium(), output);
  }

  // optional float multiplier_professional = 14;
  if (has_multiplier_professional()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->multiplier_professional(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFantasyLeagueScoring)
}

::google::protobuf::uint8* CMsgFantasyLeagueScoring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFantasyLeagueScoring)
  // optional float level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->level(), target);
  }

  // optional float kills = 2;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kills(), target);
  }

  // optional float deaths = 3;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->deaths(), target);
  }

  // optional float assists = 4;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->assists(), target);
  }

  // optional float last_hits = 5;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->last_hits(), target);
  }

  // optional float denies = 6;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->denies(), target);
  }

  // optional float gpm = 7;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->gpm(), target);
  }

  // optional float xppm = 8;
  if (has_xppm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xppm(), target);
  }

  // optional float stuns = 9;
  if (has_stuns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->stuns(), target);
  }

  // optional float healing = 10;
  if (has_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->healing(), target);
  }

  // optional float tower_kills = 11;
  if (has_tower_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tower_kills(), target);
  }

  // optional float roshan_kills = 12;
  if (has_roshan_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->roshan_kills(), target);
  }

  // optional float multiplier_premium = 13;
  if (has_multiplier_premium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->multiplier_premium(), target);
  }

  // optional float multiplier_professional = 14;
  if (has_multiplier_professional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->multiplier_professional(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFantasyLeagueScoring)
  return target;
}

int CMsgFantasyLeagueScoring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float level = 1;
    if (has_level()) {
      total_size += 1 + 4;
    }

    // optional float kills = 2;
    if (has_kills()) {
      total_size += 1 + 4;
    }

    // optional float deaths = 3;
    if (has_deaths()) {
      total_size += 1 + 4;
    }

    // optional float assists = 4;
    if (has_assists()) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 5;
    if (has_last_hits()) {
      total_size += 1 + 4;
    }

    // optional float denies = 6;
    if (has_denies()) {
      total_size += 1 + 4;
    }

    // optional float gpm = 7;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

    // optional float xppm = 8;
    if (has_xppm()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float stuns = 9;
    if (has_stuns()) {
      total_size += 1 + 4;
    }

    // optional float healing = 10;
    if (has_healing()) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 11;
    if (has_tower_kills()) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 12;
    if (has_roshan_kills()) {
      total_size += 1 + 4;
    }

    // optional float multiplier_premium = 13;
    if (has_multiplier_premium()) {
      total_size += 1 + 4;
    }

    // optional float multiplier_professional = 14;
    if (has_multiplier_professional()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFantasyLeagueScoring::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgFantasyLeagueScoring* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFantasyLeagueScoring>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFantasyLeagueScoring::MergeFrom(const CMsgFantasyLeagueScoring& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
    if (from.has_xppm()) {
      set_xppm(from.xppm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stuns()) {
      set_stuns(from.stuns());
    }
    if (from.has_healing()) {
      set_healing(from.healing());
    }
    if (from.has_tower_kills()) {
      set_tower_kills(from.tower_kills());
    }
    if (from.has_roshan_kills()) {
      set_roshan_kills(from.roshan_kills());
    }
    if (from.has_multiplier_premium()) {
      set_multiplier_premium(from.multiplier_premium());
    }
    if (from.has_multiplier_professional()) {
      set_multiplier_professional(from.multiplier_professional());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgFantasyLeagueScoring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFantasyLeagueScoring::CopyFrom(const CMsgFantasyLeagueScoring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFantasyLeagueScoring::IsInitialized() const {

  return true;
}

void CMsgFantasyLeagueScoring::Swap(CMsgFantasyLeagueScoring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFantasyLeagueScoring::InternalSwap(CMsgFantasyLeagueScoring* other) {
  std::swap(level_, other->level_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gpm_, other->gpm_);
  std::swap(xppm_, other->xppm_);
  std::swap(stuns_, other->stuns_);
  std::swap(healing_, other->healing_);
  std::swap(tower_kills_, other->tower_kills_);
  std::swap(roshan_kills_, other->roshan_kills_);
  std::swap(multiplier_premium_, other->multiplier_premium_);
  std::swap(multiplier_professional_, other->multiplier_professional_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFantasyLeagueScoring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFantasyLeagueScoring_descriptor_;
  metadata.reflection = CMsgFantasyLeagueScoring_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFantasyLeagueScoring

// optional float level = 1;
bool CMsgFantasyLeagueScoring::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFantasyLeagueScoring::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFantasyLeagueScoring::clear_level() {
  level_ = 0;
  clear_has_level();
}
 float CMsgFantasyLeagueScoring::level() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.level)
  return level_;
}
 void CMsgFantasyLeagueScoring::set_level(float value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.level)
}

// optional float kills = 2;
bool CMsgFantasyLeagueScoring::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgFantasyLeagueScoring::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgFantasyLeagueScoring::clear_kills() {
  kills_ = 0;
  clear_has_kills();
}
 float CMsgFantasyLeagueScoring::kills() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.kills)
  return kills_;
}
 void CMsgFantasyLeagueScoring::set_kills(float value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.kills)
}

// optional float deaths = 3;
bool CMsgFantasyLeagueScoring::has_deaths() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_deaths() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgFantasyLeagueScoring::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgFantasyLeagueScoring::clear_deaths() {
  deaths_ = 0;
  clear_has_deaths();
}
 float CMsgFantasyLeagueScoring::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.deaths)
  return deaths_;
}
 void CMsgFantasyLeagueScoring::set_deaths(float value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.deaths)
}

// optional float assists = 4;
bool CMsgFantasyLeagueScoring::has_assists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_assists() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgFantasyLeagueScoring::clear_has_assists() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgFantasyLeagueScoring::clear_assists() {
  assists_ = 0;
  clear_has_assists();
}
 float CMsgFantasyLeagueScoring::assists() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.assists)
  return assists_;
}
 void CMsgFantasyLeagueScoring::set_assists(float value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.assists)
}

// optional float last_hits = 5;
bool CMsgFantasyLeagueScoring::has_last_hits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_last_hits() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgFantasyLeagueScoring::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgFantasyLeagueScoring::clear_last_hits() {
  last_hits_ = 0;
  clear_has_last_hits();
}
 float CMsgFantasyLeagueScoring::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.last_hits)
  return last_hits_;
}
 void CMsgFantasyLeagueScoring::set_last_hits(float value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.last_hits)
}

// optional float denies = 6;
bool CMsgFantasyLeagueScoring::has_denies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_denies() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgFantasyLeagueScoring::clear_has_denies() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgFantasyLeagueScoring::clear_denies() {
  denies_ = 0;
  clear_has_denies();
}
 float CMsgFantasyLeagueScoring::denies() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.denies)
  return denies_;
}
 void CMsgFantasyLeagueScoring::set_denies(float value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.denies)
}

// optional float gpm = 7;
bool CMsgFantasyLeagueScoring::has_gpm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_gpm() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgFantasyLeagueScoring::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgFantasyLeagueScoring::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
 float CMsgFantasyLeagueScoring::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.gpm)
  return gpm_;
}
 void CMsgFantasyLeagueScoring::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.gpm)
}

// optional float xppm = 8;
bool CMsgFantasyLeagueScoring::has_xppm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_xppm() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgFantasyLeagueScoring::clear_has_xppm() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgFantasyLeagueScoring::clear_xppm() {
  xppm_ = 0;
  clear_has_xppm();
}
 float CMsgFantasyLeagueScoring::xppm() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.xppm)
  return xppm_;
}
 void CMsgFantasyLeagueScoring::set_xppm(float value) {
  set_has_xppm();
  xppm_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.xppm)
}

// optional float stuns = 9;
bool CMsgFantasyLeagueScoring::has_stuns() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_stuns() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgFantasyLeagueScoring::clear_has_stuns() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgFantasyLeagueScoring::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
 float CMsgFantasyLeagueScoring::stuns() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.stuns)
  return stuns_;
}
 void CMsgFantasyLeagueScoring::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.stuns)
}

// optional float healing = 10;
bool CMsgFantasyLeagueScoring::has_healing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_healing() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgFantasyLeagueScoring::clear_has_healing() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgFantasyLeagueScoring::clear_healing() {
  healing_ = 0;
  clear_has_healing();
}
 float CMsgFantasyLeagueScoring::healing() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.healing)
  return healing_;
}
 void CMsgFantasyLeagueScoring::set_healing(float value) {
  set_has_healing();
  healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.healing)
}

// optional float tower_kills = 11;
bool CMsgFantasyLeagueScoring::has_tower_kills() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_tower_kills() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgFantasyLeagueScoring::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgFantasyLeagueScoring::clear_tower_kills() {
  tower_kills_ = 0;
  clear_has_tower_kills();
}
 float CMsgFantasyLeagueScoring::tower_kills() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.tower_kills)
  return tower_kills_;
}
 void CMsgFantasyLeagueScoring::set_tower_kills(float value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.tower_kills)
}

// optional float roshan_kills = 12;
bool CMsgFantasyLeagueScoring::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgFantasyLeagueScoring::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgFantasyLeagueScoring::clear_roshan_kills() {
  roshan_kills_ = 0;
  clear_has_roshan_kills();
}
 float CMsgFantasyLeagueScoring::roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.roshan_kills)
  return roshan_kills_;
}
 void CMsgFantasyLeagueScoring::set_roshan_kills(float value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.roshan_kills)
}

// optional float multiplier_premium = 13;
bool CMsgFantasyLeagueScoring::has_multiplier_premium() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_multiplier_premium() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgFantasyLeagueScoring::clear_has_multiplier_premium() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgFantasyLeagueScoring::clear_multiplier_premium() {
  multiplier_premium_ = 0;
  clear_has_multiplier_premium();
}
 float CMsgFantasyLeagueScoring::multiplier_premium() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.multiplier_premium)
  return multiplier_premium_;
}
 void CMsgFantasyLeagueScoring::set_multiplier_premium(float value) {
  set_has_multiplier_premium();
  multiplier_premium_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.multiplier_premium)
}

// optional float multiplier_professional = 14;
bool CMsgFantasyLeagueScoring::has_multiplier_professional() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_multiplier_professional() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgFantasyLeagueScoring::clear_has_multiplier_professional() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgFantasyLeagueScoring::clear_multiplier_professional() {
  multiplier_professional_ = 0;
  clear_has_multiplier_professional();
}
 float CMsgFantasyLeagueScoring::multiplier_professional() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.multiplier_professional)
  return multiplier_professional_;
}
 void CMsgFantasyLeagueScoring::set_multiplier_professional(float value) {
  set_has_multiplier_professional();
  multiplier_professional_ = value;
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.multiplier_professional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kLeftLeagueFieldNumber;
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kPlayerAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedCtor() {
  _cached_size_ = 0;
  owner_account_id_ = 0u;
  left_league_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo::~CMsgDOTAFantasyLeagueInfo_OwnerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfo_OwnerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueInfo_OwnerInfo_descriptor_;
}

const CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance_ = NULL;

CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo_OwnerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfo_OwnerInfo* n = new CMsgDOTAFantasyLeagueInfo_OwnerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueInfo_OwnerInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(owner_account_id_, left_league_);

#undef ZR_HELPER_
#undef ZR_

  player_account_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left_league;
        break;
      }

      // optional bool left_league = 2;
      case 2: {
        if (tag == 16) {
         parse_left_league:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_league_)));
          set_has_left_league();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_account_id;
        break;
      }

      // repeated uint32 player_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_player_account_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_account_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  // optional bool left_league = 2;
  if (has_left_league()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->left_league(), output);
  }

  // repeated uint32 player_account_id = 3;
  for (int i = 0; i < this->player_account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->player_account_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfo_OwnerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  // optional bool left_league = 2;
  if (has_left_league()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->left_league(), target);
  }

  // repeated uint32 player_account_id = 3;
  for (int i = 0; i < this->player_account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->player_account_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return target;
}

int CMsgDOTAFantasyLeagueInfo_OwnerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 owner_account_id = 1;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional bool left_league = 2;
    if (has_left_league()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 player_account_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_account_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_account_id(i));
    }
    total_size += 1 * this->player_account_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueInfo_OwnerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfo_OwnerInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_account_id_.MergeFrom(from.player_account_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_left_league()) {
      set_left_league(from.left_league());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Swap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(left_league_, other->left_league_);
  player_account_id_.UnsafeArenaSwap(&other->player_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfo_OwnerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueInfo_OwnerInfo_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueInfo_OwnerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueInfo::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kCommissionerAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSelectionModeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kTeamCountFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kLogoFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kScoringFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kDraftTimeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kDraftPickTimeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonStartFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonLengthFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kVetoVotesFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kAcquisitionsFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot1FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot2FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot3FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot4FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot5FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kBenchSlotsFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kOwnerInfoFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kPlayersFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kTimeZoneFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kPasswordFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueInfo)
}

void CMsgDOTAFantasyLeagueInfo::InitAsDefaultInstance() {
  scoring_ = const_cast< ::CMsgFantasyLeagueScoring*>(&::CMsgFantasyLeagueScoring::default_instance());
}

CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo(const CMsgDOTAFantasyLeagueInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfo)
}

void CMsgDOTAFantasyLeagueInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  commissioner_account_id_ = 0u;
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selection_mode_ = 0;
  team_count_ = 0u;
  logo_ = GOOGLE_ULONGLONG(0);
  scoring_ = NULL;
  draft_time_ = 0u;
  draft_pick_time_ = 0u;
  season_start_ = 0u;
  season_length_ = 0u;
  veto_votes_ = 0u;
  acquisitions_ = 0u;
  slot_1_ = 0u;
  slot_2_ = 0u;
  slot_3_ = 0u;
  slot_4_ = 0u;
  slot_5_ = 0u;
  bench_slots_ = 0u;
  time_zone_ = 0u;
  season_ = 0u;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueInfo::~CMsgDOTAFantasyLeagueInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfo)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfo::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete scoring_;
  }
}

void CMsgDOTAFantasyLeagueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueInfo_descriptor_;
}

const CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueInfo::default_instance_ = NULL;

CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfo* n = new CMsgDOTAFantasyLeagueInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(fantasy_league_id_, commissioner_account_id_);
    ZR_(selection_mode_, logo_);
    if (has_fantasy_league_name()) {
      fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_scoring()) {
      if (scoring_ != NULL) scoring_->::CMsgFantasyLeagueScoring::Clear();
    }
    draft_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(draft_pick_time_, slot_3_);
  }
  if (_has_bits_[16 / 32] & 15138816u) {
    ZR_(slot_4_, bench_slots_);
    ZR_(time_zone_, season_);
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  owner_info_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commissioner_account_id;
        break;
      }

      // optional uint32 commissioner_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_commissioner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commissioner_account_id_)));
          set_has_commissioner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fantasy_league_name;
        break;
      }

      // optional string fantasy_league_name = 3;
      case 3: {
        if (tag == 26) {
         parse_fantasy_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), this->fantasy_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_selection_mode;
        break;
      }

      // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
      case 4: {
        if (tag == 32) {
         parse_selection_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Fantasy_Selection_Mode_IsValid(value)) {
            set_selection_mode(static_cast< ::Fantasy_Selection_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_count;
        break;
      }

      // optional uint32 team_count = 5;
      case 5: {
        if (tag == 40) {
         parse_team_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
          set_has_team_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 6;
      case 6: {
        if (tag == 48) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scoring;
        break;
      }

      // optional .CMsgFantasyLeagueScoring scoring = 7;
      case 7: {
        if (tag == 58) {
         parse_scoring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scoring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_draft_time;
        break;
      }

      // optional uint32 draft_time = 12;
      case 12: {
        if (tag == 96) {
         parse_draft_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_time_)));
          set_has_draft_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_draft_pick_time;
        break;
      }

      // optional uint32 draft_pick_time = 13;
      case 13: {
        if (tag == 104) {
         parse_draft_pick_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_pick_time_)));
          set_has_draft_pick_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_season_start;
        break;
      }

      // optional uint32 season_start = 15;
      case 15: {
        if (tag == 120) {
         parse_season_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_start_)));
          set_has_season_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_season_length;
        break;
      }

      // optional uint32 season_length = 16;
      case 16: {
        if (tag == 128) {
         parse_season_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_length_)));
          set_has_season_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_veto_votes;
        break;
      }

      // optional uint32 veto_votes = 17;
      case 17: {
        if (tag == 136) {
         parse_veto_votes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &veto_votes_)));
          set_has_veto_votes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_acquisitions;
        break;
      }

      // optional uint32 acquisitions = 18;
      case 18: {
        if (tag == 144) {
         parse_acquisitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acquisitions_)));
          set_has_acquisitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_slot_1;
        break;
      }

      // optional uint32 slot_1 = 19;
      case 19: {
        if (tag == 152) {
         parse_slot_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_1_)));
          set_has_slot_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_slot_2;
        break;
      }

      // optional uint32 slot_2 = 20;
      case 20: {
        if (tag == 160) {
         parse_slot_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_2_)));
          set_has_slot_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_slot_3;
        break;
      }

      // optional uint32 slot_3 = 21;
      case 21: {
        if (tag == 168) {
         parse_slot_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_3_)));
          set_has_slot_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_slot_4;
        break;
      }

      // optional uint32 slot_4 = 22;
      case 22: {
        if (tag == 176) {
         parse_slot_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_4_)));
          set_has_slot_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_slot_5;
        break;
      }

      // optional uint32 slot_5 = 23;
      case 23: {
        if (tag == 184) {
         parse_slot_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_5_)));
          set_has_slot_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_bench_slots;
        break;
      }

      // optional uint32 bench_slots = 24;
      case 24: {
        if (tag == 192) {
         parse_bench_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bench_slots_)));
          set_has_bench_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_owner_info;
        break;
      }

      // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
      case 25: {
        if (tag == 202) {
         parse_owner_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_owner_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_owner_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_loop_owner_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(208)) goto parse_players;
        break;
      }

      // repeated uint32 players = 26;
      case 26: {
        if (tag == 208) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_players())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_players;
        if (input->ExpectTag(216)) goto parse_time_zone;
        break;
      }

      // optional uint32 time_zone = 27;
      case 27: {
        if (tag == 216) {
         parse_time_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_zone_)));
          set_has_time_zone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_season;
        break;
      }

      // optional uint32 season = 28;
      case 28: {
        if (tag == 224) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_password;
        break;
      }

      // optional string password = 29;
      case 29: {
        if (tag == 234) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueInfo.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueInfo)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueInfo)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 commissioner_account_id = 2;
  if (has_commissioner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commissioner_account_id(), output);
  }

  // optional string fantasy_league_name = 3;
  if (has_fantasy_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fantasy_league_name(), output);
  }

  // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (has_selection_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->selection_mode(), output);
  }

  // optional uint32 team_count = 5;
  if (has_team_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_count(), output);
  }

  // optional uint64 logo = 6;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logo(), output);
  }

  // optional .CMsgFantasyLeagueScoring scoring = 7;
  if (has_scoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scoring_, output);
  }

  // optional uint32 draft_time = 12;
  if (has_draft_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->draft_time(), output);
  }

  // optional uint32 draft_pick_time = 13;
  if (has_draft_pick_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->draft_pick_time(), output);
  }

  // optional uint32 season_start = 15;
  if (has_season_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->season_start(), output);
  }

  // optional uint32 season_length = 16;
  if (has_season_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->season_length(), output);
  }

  // optional uint32 veto_votes = 17;
  if (has_veto_votes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->veto_votes(), output);
  }

  // optional uint32 acquisitions = 18;
  if (has_acquisitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->acquisitions(), output);
  }

  // optional uint32 slot_1 = 19;
  if (has_slot_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->slot_1(), output);
  }

  // optional uint32 slot_2 = 20;
  if (has_slot_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->slot_2(), output);
  }

  // optional uint32 slot_3 = 21;
  if (has_slot_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->slot_3(), output);
  }

  // optional uint32 slot_4 = 22;
  if (has_slot_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->slot_4(), output);
  }

  // optional uint32 slot_5 = 23;
  if (has_slot_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->slot_5(), output);
  }

  // optional uint32 bench_slots = 24;
  if (has_bench_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->bench_slots(), output);
  }

  // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0, n = this->owner_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->owner_info(i), output);
  }

  // repeated uint32 players = 26;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->players(i), output);
  }

  // optional uint32 time_zone = 27;
  if (has_time_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->time_zone(), output);
  }

  // optional uint32 season = 28;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->season(), output);
  }

  // optional string password = 29;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfo)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 commissioner_account_id = 2;
  if (has_commissioner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->commissioner_account_id(), target);
  }

  // optional string fantasy_league_name = 3;
  if (has_fantasy_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fantasy_league_name(), target);
  }

  // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (has_selection_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->selection_mode(), target);
  }

  // optional uint32 team_count = 5;
  if (has_team_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_count(), target);
  }

  // optional uint64 logo = 6;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logo(), target);
  }

  // optional .CMsgFantasyLeagueScoring scoring = 7;
  if (has_scoring()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->scoring_, target);
  }

  // optional uint32 draft_time = 12;
  if (has_draft_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->draft_time(), target);
  }

  // optional uint32 draft_pick_time = 13;
  if (has_draft_pick_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->draft_pick_time(), target);
  }

  // optional uint32 season_start = 15;
  if (has_season_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->season_start(), target);
  }

  // optional uint32 season_length = 16;
  if (has_season_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->season_length(), target);
  }

  // optional uint32 veto_votes = 17;
  if (has_veto_votes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->veto_votes(), target);
  }

  // optional uint32 acquisitions = 18;
  if (has_acquisitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->acquisitions(), target);
  }

  // optional uint32 slot_1 = 19;
  if (has_slot_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->slot_1(), target);
  }

  // optional uint32 slot_2 = 20;
  if (has_slot_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->slot_2(), target);
  }

  // optional uint32 slot_3 = 21;
  if (has_slot_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->slot_3(), target);
  }

  // optional uint32 slot_4 = 22;
  if (has_slot_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->slot_4(), target);
  }

  // optional uint32 slot_5 = 23;
  if (has_slot_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->slot_5(), target);
  }

  // optional uint32 bench_slots = 24;
  if (has_bench_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->bench_slots(), target);
  }

  // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0, n = this->owner_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->owner_info(i), target);
  }

  // repeated uint32 players = 26;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->players(i), target);
  }

  // optional uint32 time_zone = 27;
  if (has_time_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->time_zone(), target);
  }

  // optional uint32 season = 28;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->season(), target);
  }

  // optional string password = 29;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfo)
  return target;
}

int CMsgDOTAFantasyLeagueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 commissioner_account_id = 2;
    if (has_commissioner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commissioner_account_id());
    }

    // optional string fantasy_league_name = 3;
    if (has_fantasy_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
    if (has_selection_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional uint32 team_count = 5;
    if (has_team_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

    // optional uint64 logo = 6;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional .CMsgFantasyLeagueScoring scoring = 7;
    if (has_scoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scoring_);
    }

    // optional uint32 draft_time = 12;
    if (has_draft_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draft_time());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 draft_pick_time = 13;
    if (has_draft_pick_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draft_pick_time());
    }

    // optional uint32 season_start = 15;
    if (has_season_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_start());
    }

    // optional uint32 season_length = 16;
    if (has_season_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_length());
    }

    // optional uint32 veto_votes = 17;
    if (has_veto_votes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->veto_votes());
    }

    // optional uint32 acquisitions = 18;
    if (has_acquisitions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acquisitions());
    }

    // optional uint32 slot_1 = 19;
    if (has_slot_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_1());
    }

    // optional uint32 slot_2 = 20;
    if (has_slot_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_2());
    }

    // optional uint32 slot_3 = 21;
    if (has_slot_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_3());
    }

  }
  if (_has_bits_[16 / 32] & 15138816u) {
    // optional uint32 slot_4 = 22;
    if (has_slot_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_4());
    }

    // optional uint32 slot_5 = 23;
    if (has_slot_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_5());
    }

    // optional uint32 bench_slots = 24;
    if (has_bench_slots()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bench_slots());
    }

    // optional uint32 time_zone = 27;
    if (has_time_zone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_zone());
    }

    // optional uint32 season = 28;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional string password = 29;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  total_size += 2 * this->owner_info_size();
  for (int i = 0; i < this->owner_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->owner_info(i));
  }

  // repeated uint32 players = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->players(i));
    }
    total_size += 2 * this->players_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  owner_info_.MergeFrom(from.owner_info_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_commissioner_account_id()) {
      set_commissioner_account_id(from.commissioner_account_id());
    }
    if (from.has_fantasy_league_name()) {
      set_has_fantasy_league_name();
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (from.has_selection_mode()) {
      set_selection_mode(from.selection_mode());
    }
    if (from.has_team_count()) {
      set_team_count(from.team_count());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_scoring()) {
      mutable_scoring()->::CMsgFantasyLeagueScoring::MergeFrom(from.scoring());
    }
    if (from.has_draft_time()) {
      set_draft_time(from.draft_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_draft_pick_time()) {
      set_draft_pick_time(from.draft_pick_time());
    }
    if (from.has_season_start()) {
      set_season_start(from.season_start());
    }
    if (from.has_season_length()) {
      set_season_length(from.season_length());
    }
    if (from.has_veto_votes()) {
      set_veto_votes(from.veto_votes());
    }
    if (from.has_acquisitions()) {
      set_acquisitions(from.acquisitions());
    }
    if (from.has_slot_1()) {
      set_slot_1(from.slot_1());
    }
    if (from.has_slot_2()) {
      set_slot_2(from.slot_2());
    }
    if (from.has_slot_3()) {
      set_slot_3(from.slot_3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_slot_4()) {
      set_slot_4(from.slot_4());
    }
    if (from.has_slot_5()) {
      set_slot_5(from.slot_5());
    }
    if (from.has_bench_slots()) {
      set_bench_slots(from.bench_slots());
    }
    if (from.has_time_zone()) {
      set_time_zone(from.time_zone());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueInfo::Swap(CMsgDOTAFantasyLeagueInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(commissioner_account_id_, other->commissioner_account_id_);
  fantasy_league_name_.Swap(&other->fantasy_league_name_);
  std::swap(selection_mode_, other->selection_mode_);
  std::swap(team_count_, other->team_count_);
  std::swap(logo_, other->logo_);
  std::swap(scoring_, other->scoring_);
  std::swap(draft_time_, other->draft_time_);
  std::swap(draft_pick_time_, other->draft_pick_time_);
  std::swap(season_start_, other->season_start_);
  std::swap(season_length_, other->season_length_);
  std::swap(veto_votes_, other->veto_votes_);
  std::swap(acquisitions_, other->acquisitions_);
  std::swap(slot_1_, other->slot_1_);
  std::swap(slot_2_, other->slot_2_);
  std::swap(slot_3_, other->slot_3_);
  std::swap(slot_4_, other->slot_4_);
  std::swap(slot_5_, other->slot_5_);
  std::swap(bench_slots_, other->bench_slots_);
  owner_info_.UnsafeArenaSwap(&other->owner_info_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(time_zone_, other->time_zone_);
  std::swap(season_, other->season_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueInfo_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfo_OwnerInfo

// optional uint32 owner_account_id = 1;
bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.OwnerInfo.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.OwnerInfo.owner_account_id)
}

// optional bool left_league = 2;
bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::has_left_league() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_has_left_league() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_has_left_league() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_left_league() {
  left_league_ = false;
  clear_has_left_league();
}
 bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::left_league() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.OwnerInfo.left_league)
  return left_league_;
}
 void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_left_league(bool value) {
  set_has_left_league();
  left_league_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.OwnerInfo.left_league)
}

// repeated uint32 player_account_id = 3;
int CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id_size() const {
  return player_account_id_.size();
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_player_account_id() {
  player_account_id_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return player_account_id_.Get(index);
}
 void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_player_account_id(int index, ::google::protobuf::uint32 value) {
  player_account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
}
 void CMsgDOTAFantasyLeagueInfo_OwnerInfo::add_player_account_id(::google::protobuf::uint32 value) {
  player_account_id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return player_account_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueInfo_OwnerInfo::mutable_player_account_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return &player_account_id_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueInfo

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueInfo::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.fantasy_league_id)
}

// optional uint32 commissioner_account_id = 2;
bool CMsgDOTAFantasyLeagueInfo::has_commissioner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_commissioner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_commissioner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo::clear_commissioner_account_id() {
  commissioner_account_id_ = 0u;
  clear_has_commissioner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::commissioner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.commissioner_account_id)
  return commissioner_account_id_;
}
 void CMsgDOTAFantasyLeagueInfo::set_commissioner_account_id(::google::protobuf::uint32 value) {
  set_has_commissioner_account_id();
  commissioner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.commissioner_account_id)
}

// optional string fantasy_league_name = 3;
bool CMsgDOTAFantasyLeagueInfo::has_fantasy_league_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_fantasy_league_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_fantasy_league_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueInfo::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_league_name();
}
 const ::std::string& CMsgDOTAFantasyLeagueInfo::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  return fantasy_league_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const ::std::string& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
 void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const char* value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
 void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const char* value, size_t size) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
 ::std::string* CMsgDOTAFantasyLeagueInfo::mutable_fantasy_league_name() {
  set_has_fantasy_league_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  return fantasy_league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueInfo::release_fantasy_league_name() {
  clear_has_fantasy_league_name();
  return fantasy_league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueInfo::set_allocated_fantasy_league_name(::std::string* fantasy_league_name) {
  if (fantasy_league_name != NULL) {
    set_has_fantasy_league_name();
  } else {
    clear_has_fantasy_league_name();
  }
  fantasy_league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_league_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}

// optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
bool CMsgDOTAFantasyLeagueInfo::has_selection_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_selection_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_selection_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueInfo::clear_selection_mode() {
  selection_mode_ = 0;
  clear_has_selection_mode();
}
 ::Fantasy_Selection_Mode CMsgDOTAFantasyLeagueInfo::selection_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.selection_mode)
  return static_cast< ::Fantasy_Selection_Mode >(selection_mode_);
}
 void CMsgDOTAFantasyLeagueInfo::set_selection_mode(::Fantasy_Selection_Mode value) {
  assert(::Fantasy_Selection_Mode_IsValid(value));
  set_has_selection_mode();
  selection_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.selection_mode)
}

// optional uint32 team_count = 5;
bool CMsgDOTAFantasyLeagueInfo::has_team_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_team_count() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_team_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyLeagueInfo::clear_team_count() {
  team_count_ = 0u;
  clear_has_team_count();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::team_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.team_count)
  return team_count_;
}
 void CMsgDOTAFantasyLeagueInfo::set_team_count(::google::protobuf::uint32 value) {
  set_has_team_count();
  team_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.team_count)
}

// optional uint64 logo = 6;
bool CMsgDOTAFantasyLeagueInfo::has_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyLeagueInfo::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyLeagueInfo::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.logo)
  return logo_;
}
 void CMsgDOTAFantasyLeagueInfo::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.logo)
}

// optional .CMsgFantasyLeagueScoring scoring = 7;
bool CMsgDOTAFantasyLeagueInfo::has_scoring() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_scoring() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_scoring() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyLeagueInfo::clear_scoring() {
  if (scoring_ != NULL) scoring_->::CMsgFantasyLeagueScoring::Clear();
  clear_has_scoring();
}
const ::CMsgFantasyLeagueScoring& CMsgDOTAFantasyLeagueInfo::scoring() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.scoring)
  return scoring_ != NULL ? *scoring_ : *default_instance_->scoring_;
}
::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::mutable_scoring() {
  set_has_scoring();
  if (scoring_ == NULL) {
    scoring_ = new ::CMsgFantasyLeagueScoring;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.scoring)
  return scoring_;
}
::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::release_scoring() {
  clear_has_scoring();
  ::CMsgFantasyLeagueScoring* temp = scoring_;
  scoring_ = NULL;
  return temp;
}
void CMsgDOTAFantasyLeagueInfo::set_allocated_scoring(::CMsgFantasyLeagueScoring* scoring) {
  delete scoring_;
  scoring_ = scoring;
  if (scoring) {
    set_has_scoring();
  } else {
    clear_has_scoring();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueInfo.scoring)
}

// optional uint32 draft_time = 12;
bool CMsgDOTAFantasyLeagueInfo::has_draft_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_draft_time() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_draft_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyLeagueInfo::clear_draft_time() {
  draft_time_ = 0u;
  clear_has_draft_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::draft_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.draft_time)
  return draft_time_;
}
 void CMsgDOTAFantasyLeagueInfo::set_draft_time(::google::protobuf::uint32 value) {
  set_has_draft_time();
  draft_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.draft_time)
}

// optional uint32 draft_pick_time = 13;
bool CMsgDOTAFantasyLeagueInfo::has_draft_pick_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_draft_pick_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_draft_pick_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyLeagueInfo::clear_draft_pick_time() {
  draft_pick_time_ = 0u;
  clear_has_draft_pick_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::draft_pick_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.draft_pick_time)
  return draft_pick_time_;
}
 void CMsgDOTAFantasyLeagueInfo::set_draft_pick_time(::google::protobuf::uint32 value) {
  set_has_draft_pick_time();
  draft_pick_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.draft_pick_time)
}

// optional uint32 season_start = 15;
bool CMsgDOTAFantasyLeagueInfo::has_season_start() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_season_start() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_season_start() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyLeagueInfo::clear_season_start() {
  season_start_ = 0u;
  clear_has_season_start();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::season_start() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.season_start)
  return season_start_;
}
 void CMsgDOTAFantasyLeagueInfo::set_season_start(::google::protobuf::uint32 value) {
  set_has_season_start();
  season_start_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.season_start)
}

// optional uint32 season_length = 16;
bool CMsgDOTAFantasyLeagueInfo::has_season_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_season_length() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_season_length() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyLeagueInfo::clear_season_length() {
  season_length_ = 0u;
  clear_has_season_length();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::season_length() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.season_length)
  return season_length_;
}
 void CMsgDOTAFantasyLeagueInfo::set_season_length(::google::protobuf::uint32 value) {
  set_has_season_length();
  season_length_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.season_length)
}

// optional uint32 veto_votes = 17;
bool CMsgDOTAFantasyLeagueInfo::has_veto_votes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_veto_votes() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_veto_votes() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAFantasyLeagueInfo::clear_veto_votes() {
  veto_votes_ = 0u;
  clear_has_veto_votes();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::veto_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.veto_votes)
  return veto_votes_;
}
 void CMsgDOTAFantasyLeagueInfo::set_veto_votes(::google::protobuf::uint32 value) {
  set_has_veto_votes();
  veto_votes_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.veto_votes)
}

// optional uint32 acquisitions = 18;
bool CMsgDOTAFantasyLeagueInfo::has_acquisitions() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_acquisitions() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_acquisitions() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_acquisitions() {
  acquisitions_ = 0u;
  clear_has_acquisitions();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::acquisitions() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.acquisitions)
  return acquisitions_;
}
 void CMsgDOTAFantasyLeagueInfo::set_acquisitions(::google::protobuf::uint32 value) {
  set_has_acquisitions();
  acquisitions_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.acquisitions)
}

// optional uint32 slot_1 = 19;
bool CMsgDOTAFantasyLeagueInfo::has_slot_1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_1() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_1() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_1() {
  slot_1_ = 0u;
  clear_has_slot_1();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_1)
  return slot_1_;
}
 void CMsgDOTAFantasyLeagueInfo::set_slot_1(::google::protobuf::uint32 value) {
  set_has_slot_1();
  slot_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_1)
}

// optional uint32 slot_2 = 20;
bool CMsgDOTAFantasyLeagueInfo::has_slot_2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_2() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_2() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_2() {
  slot_2_ = 0u;
  clear_has_slot_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_2)
  return slot_2_;
}
 void CMsgDOTAFantasyLeagueInfo::set_slot_2(::google::protobuf::uint32 value) {
  set_has_slot_2();
  slot_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_2)
}

// optional uint32 slot_3 = 21;
bool CMsgDOTAFantasyLeagueInfo::has_slot_3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_3() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_3() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_3() {
  slot_3_ = 0u;
  clear_has_slot_3();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_3)
  return slot_3_;
}
 void CMsgDOTAFantasyLeagueInfo::set_slot_3(::google::protobuf::uint32 value) {
  set_has_slot_3();
  slot_3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_3)
}

// optional uint32 slot_4 = 22;
bool CMsgDOTAFantasyLeagueInfo::has_slot_4() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_4() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_4() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_4() {
  slot_4_ = 0u;
  clear_has_slot_4();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_4)
  return slot_4_;
}
 void CMsgDOTAFantasyLeagueInfo::set_slot_4(::google::protobuf::uint32 value) {
  set_has_slot_4();
  slot_4_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_4)
}

// optional uint32 slot_5 = 23;
bool CMsgDOTAFantasyLeagueInfo::has_slot_5() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_5() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_5() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_5() {
  slot_5_ = 0u;
  clear_has_slot_5();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_5)
  return slot_5_;
}
 void CMsgDOTAFantasyLeagueInfo::set_slot_5(::google::protobuf::uint32 value) {
  set_has_slot_5();
  slot_5_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_5)
}

// optional uint32 bench_slots = 24;
bool CMsgDOTAFantasyLeagueInfo::has_bench_slots() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_bench_slots() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_bench_slots() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_bench_slots() {
  bench_slots_ = 0u;
  clear_has_bench_slots();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::bench_slots() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.bench_slots)
  return bench_slots_;
}
 void CMsgDOTAFantasyLeagueInfo::set_bench_slots(::google::protobuf::uint32 value) {
  set_has_bench_slots();
  bench_slots_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.bench_slots)
}

// repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
int CMsgDOTAFantasyLeagueInfo::owner_info_size() const {
  return owner_info_.size();
}
void CMsgDOTAFantasyLeagueInfo::clear_owner_info() {
  owner_info_.Clear();
}
const ::CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo::owner_info(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Get(index);
}
::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::mutable_owner_info(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Mutable(index);
}
::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::add_owner_info() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >*
CMsgDOTAFantasyLeagueInfo::mutable_owner_info() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueInfo.owner_info)
  return &owner_info_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >&
CMsgDOTAFantasyLeagueInfo::owner_info() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_;
}

// repeated uint32 players = 26;
int CMsgDOTAFantasyLeagueInfo::players_size() const {
  return players_.size();
}
void CMsgDOTAFantasyLeagueInfo::clear_players() {
  players_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.players)
  return players_.Get(index);
}
 void CMsgDOTAFantasyLeagueInfo::set_players(int index, ::google::protobuf::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.players)
}
 void CMsgDOTAFantasyLeagueInfo::add_players(::google::protobuf::uint32 value) {
  players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueInfo.players)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueInfo::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueInfo.players)
  return players_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueInfo.players)
  return &players_;
}

// optional uint32 time_zone = 27;
bool CMsgDOTAFantasyLeagueInfo::has_time_zone() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_time_zone() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_time_zone() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_time_zone() {
  time_zone_ = 0u;
  clear_has_time_zone();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::time_zone() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.time_zone)
  return time_zone_;
}
 void CMsgDOTAFantasyLeagueInfo::set_time_zone(::google::protobuf::uint32 value) {
  set_has_time_zone();
  time_zone_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.time_zone)
}

// optional uint32 season = 28;
bool CMsgDOTAFantasyLeagueInfo::has_season() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_season() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_season() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_season() {
  season_ = 0u;
  clear_has_season();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::season() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.season)
  return season_;
}
 void CMsgDOTAFantasyLeagueInfo::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.season)
}

// optional string password = 29;
bool CMsgDOTAFantasyLeagueInfo::has_password() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_password() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CMsgDOTAFantasyLeagueInfo::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueInfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.password)
}
 void CMsgDOTAFantasyLeagueInfo::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueInfo.password)
}
 void CMsgDOTAFantasyLeagueInfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueInfo.password)
}
 ::std::string* CMsgDOTAFantasyLeagueInfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueInfo::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueInfo.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueEditInfoRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInfoRequest::kEditInfoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueEditInfoRequest)
}

void CMsgDOTAFantasyLeagueEditInfoRequest::InitAsDefaultInstance() {
  edit_info_ = const_cast< ::CMsgDOTAFantasyLeagueInfo*>(&::CMsgDOTAFantasyLeagueInfo::default_instance());
}

CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest(const CMsgDOTAFantasyLeagueEditInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInfoRequest)
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  edit_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueEditInfoRequest::~CMsgDOTAFantasyLeagueEditInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete edit_info_;
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInfoRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueEditInfoRequest& CMsgDOTAFantasyLeagueEditInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueEditInfoRequest* CMsgDOTAFantasyLeagueEditInfoRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueEditInfoRequest* CMsgDOTAFantasyLeagueEditInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInfoRequest* n = new CMsgDOTAFantasyLeagueEditInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    fantasy_league_id_ = 0u;
    if (has_edit_info()) {
      if (edit_info_ != NULL) edit_info_->::CMsgDOTAFantasyLeagueInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueEditInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_edit_info;
        break;
      }

      // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
      case 2: {
        if (tag == 18) {
         parse_edit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edit_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueEditInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueEditInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (has_edit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->edit_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueEditInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInfoRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (has_edit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->edit_info_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInfoRequest)
  return target;
}

int CMsgDOTAFantasyLeagueEditInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
    if (has_edit_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->edit_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueEditInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInfoRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_edit_info()) {
      mutable_edit_info()->::CMsgDOTAFantasyLeagueInfo::MergeFrom(from.edit_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::Swap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(edit_info_, other->edit_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueEditInfoRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueEditInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInfoRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueEditInfoRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueEditInfoRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInfoRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueEditInfoRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInfoRequest.fantasy_league_id)
}

// optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
bool CMsgDOTAFantasyLeagueEditInfoRequest::has_edit_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_has_edit_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_has_edit_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_edit_info() {
  if (edit_info_ != NULL) edit_info_->::CMsgDOTAFantasyLeagueInfo::Clear();
  clear_has_edit_info();
}
const ::CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueEditInfoRequest::edit_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  return edit_info_ != NULL ? *edit_info_ : *default_instance_->edit_info_;
}
::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::mutable_edit_info() {
  set_has_edit_info();
  if (edit_info_ == NULL) {
    edit_info_ = new ::CMsgDOTAFantasyLeagueInfo;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  return edit_info_;
}
::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::release_edit_info() {
  clear_has_edit_info();
  ::CMsgDOTAFantasyLeagueInfo* temp = edit_info_;
  edit_info_ = NULL;
  return temp;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_allocated_edit_info(::CMsgDOTAFantasyLeagueInfo* edit_info) {
  delete edit_info_;
  edit_info_ = edit_info;
  if (edit_info) {
    set_has_edit_info();
  } else {
    clear_has_edit_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::SUCCESS;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueEditInfoResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueEditInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueEditInfoResponse)
}

void CMsgDOTAFantasyLeagueEditInfoResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse(const CMsgDOTAFantasyLeagueEditInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInfoResponse)
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueEditInfoResponse::~CMsgDOTAFantasyLeagueEditInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueEditInfoResponse& CMsgDOTAFantasyLeagueEditInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueEditInfoResponse* CMsgDOTAFantasyLeagueEditInfoResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueEditInfoResponse* CMsgDOTAFantasyLeagueEditInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInfoResponse* n = new CMsgDOTAFantasyLeagueEditInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueEditInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueEditInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueEditInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueEditInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInfoResponse)
  // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInfoResponse)
  return target;
}

int CMsgDOTAFantasyLeagueEditInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueEditInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::Swap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueEditInfoResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueEditInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInfoResponse

// optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueEditInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInfoResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueEditInfoResponse::set_result(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInfoResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueFindRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueFindRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueFindRequest)
}

void CMsgDOTAFantasyLeagueFindRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest(const CMsgDOTAFantasyLeagueFindRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueFindRequest)
}

void CMsgDOTAFantasyLeagueFindRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueFindRequest::~CMsgDOTAFantasyLeagueFindRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueFindRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueFindRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueFindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueFindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueFindRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueFindRequest& CMsgDOTAFantasyLeagueFindRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueFindRequest* CMsgDOTAFantasyLeagueFindRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueFindRequest* CMsgDOTAFantasyLeagueFindRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueFindRequest* n = new CMsgDOTAFantasyLeagueFindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueFindRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    fantasy_league_id_ = 0u;
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueFindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueFindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueFindRequest.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueFindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueFindRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueFindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueFindRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueFindRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueFindRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueFindRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueFindRequest)
  return target;
}

int CMsgDOTAFantasyLeagueFindRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueFindRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueFindRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueFindRequest::Swap(CMsgDOTAFantasyLeagueFindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueFindRequest::InternalSwap(CMsgDOTAFantasyLeagueFindRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueFindRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueFindRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueFindRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueFindRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueFindRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueFindRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueFindRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueFindRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindRequest.fantasy_league_id)
}

// optional string password = 2;
bool CMsgDOTAFantasyLeagueFindRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueFindRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CMsgDOTAFantasyLeagueFindRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueFindRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindRequest.password)
}
 void CMsgDOTAFantasyLeagueFindRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueFindRequest.password)
}
 void CMsgDOTAFantasyLeagueFindRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueFindRequest.password)
}
 ::std::string* CMsgDOTAFantasyLeagueFindRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueFindRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueFindRequest::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueFindRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueFindRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::SUCCESS;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_NOT_FOUND;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_BAD_PASSWORD;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_FULL;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_ALREADY_MEMBER;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueFindResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueFindResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueFindResponse::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueFindResponse::kCommissionerNameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueFindResponse)
}

void CMsgDOTAFantasyLeagueFindResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse(const CMsgDOTAFantasyLeagueFindResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueFindResponse)
}

void CMsgDOTAFantasyLeagueFindResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueFindResponse::~CMsgDOTAFantasyLeagueFindResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueFindResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueFindResponse::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueFindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueFindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueFindResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueFindResponse& CMsgDOTAFantasyLeagueFindResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueFindResponse* CMsgDOTAFantasyLeagueFindResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueFindResponse* CMsgDOTAFantasyLeagueFindResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueFindResponse* n = new CMsgDOTAFantasyLeagueFindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueFindResponse::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    result_ = 0;
    if (has_fantasy_league_name()) {
      fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_commissioner_name()) {
      commissioner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueFindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueFindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueFindResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fantasy_league_name;
        break;
      }

      // optional string fantasy_league_name = 2;
      case 2: {
        if (tag == 18) {
         parse_fantasy_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), this->fantasy_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commissioner_name;
        break;
      }

      // optional string commissioner_name = 3;
      case 3: {
        if (tag == 26) {
         parse_commissioner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissioner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commissioner_name().data(), this->commissioner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueFindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueFindResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueFindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueFindResponse)
  // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fantasy_league_name = 2;
  if (has_fantasy_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fantasy_league_name(), output);
  }

  // optional string commissioner_name = 3;
  if (has_commissioner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commissioner_name().data(), this->commissioner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->commissioner_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueFindResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueFindResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueFindResponse)
  // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string fantasy_league_name = 2;
  if (has_fantasy_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fantasy_league_name(), target);
  }

  // optional string commissioner_name = 3;
  if (has_commissioner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commissioner_name().data(), this->commissioner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->commissioner_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueFindResponse)
  return target;
}

int CMsgDOTAFantasyLeagueFindResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string fantasy_league_name = 2;
    if (has_fantasy_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string commissioner_name = 3;
    if (has_commissioner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissioner_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueFindResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueFindResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_league_name()) {
      set_has_fantasy_league_name();
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (from.has_commissioner_name()) {
      set_has_commissioner_name();
      commissioner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commissioner_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueFindResponse::Swap(CMsgDOTAFantasyLeagueFindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueFindResponse::InternalSwap(CMsgDOTAFantasyLeagueFindResponse* other) {
  std::swap(result_, other->result_);
  fantasy_league_name_.Swap(&other->fantasy_league_name_);
  commissioner_name_.Swap(&other->commissioner_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueFindResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueFindResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueFindResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueFindResponse

// optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueFindResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueFindResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueFindResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueFindResponse::set_result(::CMsgDOTAFantasyLeagueFindResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindResponse.result)
}

// optional string fantasy_league_name = 2;
bool CMsgDOTAFantasyLeagueFindResponse::has_fantasy_league_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueFindResponse::set_has_fantasy_league_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_has_fantasy_league_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_league_name();
}
 const ::std::string& CMsgDOTAFantasyLeagueFindResponse::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  return fantasy_league_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const ::std::string& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
 void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const char* value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
 void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const char* value, size_t size) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
 ::std::string* CMsgDOTAFantasyLeagueFindResponse::mutable_fantasy_league_name() {
  set_has_fantasy_league_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  return fantasy_league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueFindResponse::release_fantasy_league_name() {
  clear_has_fantasy_league_name();
  return fantasy_league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueFindResponse::set_allocated_fantasy_league_name(::std::string* fantasy_league_name) {
  if (fantasy_league_name != NULL) {
    set_has_fantasy_league_name();
  } else {
    clear_has_fantasy_league_name();
  }
  fantasy_league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_league_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}

// optional string commissioner_name = 3;
bool CMsgDOTAFantasyLeagueFindResponse::has_commissioner_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueFindResponse::set_has_commissioner_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_has_commissioner_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_commissioner_name() {
  commissioner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commissioner_name();
}
 const ::std::string& CMsgDOTAFantasyLeagueFindResponse::commissioner_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  return commissioner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const ::std::string& value) {
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
 void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const char* value) {
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
 void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const char* value, size_t size) {
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
 ::std::string* CMsgDOTAFantasyLeagueFindResponse::mutable_commissioner_name() {
  set_has_commissioner_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  return commissioner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueFindResponse::release_commissioner_name() {
  clear_has_commissioner_name();
  return commissioner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueFindResponse::set_allocated_commissioner_name(::std::string* commissioner_name) {
  if (commissioner_name != NULL) {
    set_has_commissioner_name();
  } else {
    clear_has_commissioner_name();
  }
  commissioner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commissioner_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueInfoRequest::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueInfoRequest)
}

void CMsgDOTAFantasyLeagueInfoRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest(const CMsgDOTAFantasyLeagueInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfoRequest)
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueInfoRequest::~CMsgDOTAFantasyLeagueInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueInfoRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueInfoRequest& CMsgDOTAFantasyLeagueInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueInfoRequest* CMsgDOTAFantasyLeagueInfoRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueInfoRequest* CMsgDOTAFantasyLeagueInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfoRequest* n = new CMsgDOTAFantasyLeagueInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfoRequest::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueInfoRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfoRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfoRequest)
  return target;
}

int CMsgDOTAFantasyLeagueInfoRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfoRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueInfoRequest::Swap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueInfoRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfoRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueInfoRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfoRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfoRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfoRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueInfoRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfoRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::SUCCESS;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_BAD_LEAGUE_ID;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueInfoResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueInfoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueInfoResponse)
}

void CMsgDOTAFantasyLeagueInfoResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse(const CMsgDOTAFantasyLeagueInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueInfoResponse)
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueInfoResponse::~CMsgDOTAFantasyLeagueInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueInfoResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueInfoResponse& CMsgDOTAFantasyLeagueInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueInfoResponse* CMsgDOTAFantasyLeagueInfoResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueInfoResponse* CMsgDOTAFantasyLeagueInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfoResponse* n = new CMsgDOTAFantasyLeagueInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfoResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueInfoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueInfoResponse)
  // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueInfoResponse)
  // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueInfoResponse)
  return target;
}

int CMsgDOTAFantasyLeagueInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueInfoResponse::Swap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueInfoResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfoResponse

// optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfoResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueInfoResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueInfoResponse::set_result(::CMsgDOTAFantasyLeagueInfoResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfoResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueMatchupsRequest::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueMatchupsRequest)
}

void CMsgDOTAFantasyLeagueMatchupsRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest(const CMsgDOTAFantasyLeagueMatchupsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsRequest)
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueMatchupsRequest::~CMsgDOTAFantasyLeagueMatchupsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueMatchupsRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueMatchupsRequest& CMsgDOTAFantasyLeagueMatchupsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueMatchupsRequest* CMsgDOTAFantasyLeagueMatchupsRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueMatchupsRequest* CMsgDOTAFantasyLeagueMatchupsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsRequest* n = new CMsgDOTAFantasyLeagueMatchupsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueMatchupsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueMatchupsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueMatchupsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueMatchupsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsRequest)
  return target;
}

int CMsgDOTAFantasyLeagueMatchupsRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueMatchupsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::Swap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsRequest::InternalSwap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueMatchupsRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueMatchupsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueMatchupsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueMatchupsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueMatchupsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::SUCCESS;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_BAD_LEAGUE_ID;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueMatchupsResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kOwnerAccountId1FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kScore1FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kScore2FieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedCtor() {
  _cached_size_ = 0;
  owner_account_id_1_ = 0u;
  owner_account_id_2_ = 0u;
  score_1_ = 0;
  score_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::~CMsgDOTAFantasyLeagueMatchupsResponse_Matchup() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_descriptor_;
}

const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance_ = NULL;

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* n = new CMsgDOTAFantasyLeagueMatchupsResponse_Matchup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(owner_account_id_1_, score_2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id_1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_1_)));
          set_has_owner_account_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id_2;
        break;
      }

      // optional uint32 owner_account_id_2 = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_account_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
          set_has_owner_account_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_score_1;
        break;
      }

      // optional float score_1 = 3;
      case 3: {
        if (tag == 29) {
         parse_score_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_1_)));
          set_has_score_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_score_2;
        break;
      }

      // optional float score_2 = 4;
      case 4: {
        if (tag == 37) {
         parse_score_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_2_)));
          set_has_score_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  // optional uint32 owner_account_id_1 = 1;
  if (has_owner_account_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id_1(), output);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (has_owner_account_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id_2(), output);
  }

  // optional float score_1 = 3;
  if (has_score_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score_1(), output);
  }

  // optional float score_2 = 4;
  if (has_score_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  // optional uint32 owner_account_id_1 = 1;
  if (has_owner_account_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (has_owner_account_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id_2(), target);
  }

  // optional float score_1 = 3;
  if (has_score_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score_1(), target);
  }

  // optional float score_2 = 4;
  if (has_score_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return target;
}

int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 owner_account_id_1 = 1;
    if (has_owner_account_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 2;
    if (has_owner_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional float score_1 = 3;
    if (has_score_1()) {
      total_size += 1 + 4;
    }

    // optional float score_2 = 4;
    if (has_score_2()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_account_id_1()) {
      set_owner_account_id_1(from.owner_account_id_1());
    }
    if (from.has_owner_account_id_2()) {
      set_owner_account_id_2(from.owner_account_id_2());
    }
    if (from.has_score_1()) {
      set_score_1(from.score_1());
    }
    if (from.has_score_2()) {
      set_score_2(from.score_2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Swap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  std::swap(owner_account_id_1_, other->owner_account_id_1_);
  std::swap(owner_account_id_2_, other->owner_account_id_2_);
  std::swap(score_1_, other->score_1_);
  std::swap(score_2_, other->score_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kMatchupFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kStartTimeFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0u;
  end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::~CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_descriptor_;
}

const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance_ = NULL;

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* n = new CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, end_time_);

#undef ZR_HELPER_
#undef ZR_

  matchup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matchup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matchup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_matchup;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0, n = this->matchup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matchup(i), output);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional uint32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0, n = this->matchup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matchup(i), target);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional uint32 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return target;
}

int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  total_size += 1 * this->matchup_size();
  for (int i = 0; i < this->matchup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchup(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  matchup_.MergeFrom(from.matchup_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Swap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  matchup_.UnsafeArenaSwap(&other->matchup_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueMatchupsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse::kWeeklyMatchupsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueMatchupsResponse)
}

void CMsgDOTAFantasyLeagueMatchupsResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse(const CMsgDOTAFantasyLeagueMatchupsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueMatchupsResponse)
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueMatchupsResponse::~CMsgDOTAFantasyLeagueMatchupsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueMatchupsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueMatchupsResponse& CMsgDOTAFantasyLeagueMatchupsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueMatchupsResponse* CMsgDOTAFantasyLeagueMatchupsResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueMatchupsResponse* CMsgDOTAFantasyLeagueMatchupsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsResponse* n = new CMsgDOTAFantasyLeagueMatchupsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueMatchupsResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, fantasy_league_id_);

#undef ZR_HELPER_
#undef ZR_

  weekly_matchups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueMatchupsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weekly_matchups;
        break;
      }

      // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
      case 3: {
        if (tag == 26) {
         parse_weekly_matchups:
          DO_(input->IncrementRecursionDepth());
         parse_loop_weekly_matchups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_weekly_matchups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_weekly_matchups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueMatchupsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueMatchupsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0, n = this->weekly_matchups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weekly_matchups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueMatchupsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueMatchupsResponse)
  // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0, n = this->weekly_matchups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weekly_matchups(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueMatchupsResponse)
  return target;
}

int CMsgDOTAFantasyLeagueMatchupsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  total_size += 1 * this->weekly_matchups_size();
  for (int i = 0; i < this->weekly_matchups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weekly_matchups(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueMatchupsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  weekly_matchups_.MergeFrom(from.weekly_matchups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::Swap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  weekly_matchups_.UnsafeArenaSwap(&other->weekly_matchups_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueMatchupsResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueMatchupsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueMatchupsResponse_Matchup

// optional uint32 owner_account_id_1 = 1;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_owner_account_id_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_owner_account_id_1() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_owner_account_id_1() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_owner_account_id_1() {
  owner_account_id_1_ = 0u;
  clear_has_owner_account_id_1();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::owner_account_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_1)
  return owner_account_id_1_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_owner_account_id_1(::google::protobuf::uint32 value) {
  set_has_owner_account_id_1();
  owner_account_id_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_1)
}

// optional uint32 owner_account_id_2 = 2;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_owner_account_id_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_owner_account_id_2() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_owner_account_id_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  clear_has_owner_account_id_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_2)
  return owner_account_id_2_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_owner_account_id_2(::google::protobuf::uint32 value) {
  set_has_owner_account_id_2();
  owner_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_2)
}

// optional float score_1 = 3;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_score_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_score_1() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_score_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_score_1() {
  score_1_ = 0;
  clear_has_score_1();
}
 float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_1)
  return score_1_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_score_1(float value) {
  set_has_score_1();
  score_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_1)
}

// optional float score_2 = 4;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_score_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_score_2() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_score_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_score_2() {
  score_2_ = 0;
  clear_has_score_2();
}
 float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_2)
  return score_2_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_score_2(float value) {
  set_has_score_2();
  score_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_2)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups

// repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup_size() const {
  return matchup_.size();
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_matchup() {
  matchup_.Clear();
}
const ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Get(index);
}
::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::mutable_matchup(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Mutable(index);
}
::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::add_matchup() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >*
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::mutable_matchup() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return &matchup_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >&
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_;
}

// optional uint32 start_time = 2;
bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.start_time)
  return start_time_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.start_time)
}

// optional uint32 end_time = 3;
bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.end_time)
  return end_time_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.end_time)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueMatchupsResponse

// optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueMatchupsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueMatchupsResponse::set_result(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyLeagueMatchupsResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueMatchupsResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.fantasy_league_id)
}

// repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
int CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups_size() const {
  return weekly_matchups_.size();
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_weekly_matchups() {
  weekly_matchups_.Clear();
}
const ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Get(index);
}
::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::mutable_weekly_matchups(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Mutable(index);
}
::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::add_weekly_matchups() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >*
CMsgDOTAFantasyLeagueMatchupsResponse::mutable_weekly_matchups() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return &weekly_matchups_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >&
CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAEditFantasyTeamRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamIndexFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamNameFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamLogoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAEditFantasyTeamRequest)
}

void CMsgDOTAEditFantasyTeamRequest::InitAsDefaultInstance() {
}

CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest(const CMsgDOTAEditFantasyTeamRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditFantasyTeamRequest)
}

void CMsgDOTAEditFantasyTeamRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  team_index_ = 0u;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAEditFantasyTeamRequest::~CMsgDOTAEditFantasyTeamRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditFantasyTeamRequest)
  SharedDtor();
}

void CMsgDOTAEditFantasyTeamRequest::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAEditFantasyTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditFantasyTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAEditFantasyTeamRequest_descriptor_;
}

const CMsgDOTAEditFantasyTeamRequest& CMsgDOTAEditFantasyTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAEditFantasyTeamRequest* CMsgDOTAEditFantasyTeamRequest::default_instance_ = NULL;

CMsgDOTAEditFantasyTeamRequest* CMsgDOTAEditFantasyTeamRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAEditFantasyTeamRequest* n = new CMsgDOTAEditFantasyTeamRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAEditFantasyTeamRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAEditFantasyTeamRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(fantasy_league_id_, team_index_);
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    team_logo_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAEditFantasyTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAEditFantasyTeamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAEditFantasyTeamRequest.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_logo;
        break;
      }

      // optional uint64 team_logo = 4;
      case 4: {
        if (tag == 32) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAEditFantasyTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAEditFantasyTeamRequest)
  return false;
#undef DO_
}

void CMsgDOTAEditFantasyTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAEditFantasyTeamRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditFantasyTeamRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional uint64 team_logo = 4;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAEditFantasyTeamRequest)
}

::google::protobuf::uint8* CMsgDOTAEditFantasyTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditFantasyTeamRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditFantasyTeamRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional uint64 team_logo = 4;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditFantasyTeamRequest)
  return target;
}

int CMsgDOTAEditFantasyTeamRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAEditFantasyTeamRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAEditFantasyTeamRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAEditFantasyTeamRequest::Swap(CMsgDOTAEditFantasyTeamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditFantasyTeamRequest::InternalSwap(CMsgDOTAEditFantasyTeamRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAEditFantasyTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAEditFantasyTeamRequest_descriptor_;
  metadata.reflection = CMsgDOTAEditFantasyTeamRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAEditFantasyTeamRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAEditFantasyTeamRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAEditFantasyTeamRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAEditFantasyTeamRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAEditFantasyTeamRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAEditFantasyTeamRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.team_index)
  return team_index_;
}
 void CMsgDOTAEditFantasyTeamRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.team_index)
}

// optional string team_name = 3;
bool CMsgDOTAEditFantasyTeamRequest::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTAEditFantasyTeamRequest::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAEditFantasyTeamRequest::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.team_name)
}
 void CMsgDOTAEditFantasyTeamRequest::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditFantasyTeamRequest.team_name)
}
 void CMsgDOTAEditFantasyTeamRequest::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditFantasyTeamRequest.team_name)
}
 ::std::string* CMsgDOTAEditFantasyTeamRequest::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditFantasyTeamRequest.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAEditFantasyTeamRequest::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAEditFantasyTeamRequest::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditFantasyTeamRequest.team_name)
}

// optional uint64 team_logo = 4;
bool CMsgDOTAEditFantasyTeamRequest::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTAEditFantasyTeamRequest::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.team_logo)
  return team_logo_;
}
 void CMsgDOTAEditFantasyTeamRequest::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.team_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAEditFantasyTeamResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAEditFantasyTeamResponse_EResult_descriptor_;
}
bool CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::SUCCESS;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_UNSPECIFIED;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_INVALID_TEAM_INFO;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NAME_ALREADY_TAKEN;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NO_PERMISSION;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MIN;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MAX;
const int CMsgDOTAEditFantasyTeamResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAEditFantasyTeamResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAEditFantasyTeamResponse)
}

void CMsgDOTAEditFantasyTeamResponse::InitAsDefaultInstance() {
}

CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse(const CMsgDOTAEditFantasyTeamResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditFantasyTeamResponse)
}

void CMsgDOTAEditFantasyTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAEditFantasyTeamResponse::~CMsgDOTAEditFantasyTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditFantasyTeamResponse)
  SharedDtor();
}

void CMsgDOTAEditFantasyTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAEditFantasyTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditFantasyTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAEditFantasyTeamResponse_descriptor_;
}

const CMsgDOTAEditFantasyTeamResponse& CMsgDOTAEditFantasyTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAEditFantasyTeamResponse* CMsgDOTAEditFantasyTeamResponse::default_instance_ = NULL;

CMsgDOTAEditFantasyTeamResponse* CMsgDOTAEditFantasyTeamResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAEditFantasyTeamResponse* n = new CMsgDOTAEditFantasyTeamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAEditFantasyTeamResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAEditFantasyTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAEditFantasyTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAEditFantasyTeamResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAEditFantasyTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAEditFantasyTeamResponse)
  return false;
#undef DO_
}

void CMsgDOTAEditFantasyTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAEditFantasyTeamResponse)
  // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAEditFantasyTeamResponse)
}

::google::protobuf::uint8* CMsgDOTAEditFantasyTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditFantasyTeamResponse)
  // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditFantasyTeamResponse)
  return target;
}

int CMsgDOTAEditFantasyTeamResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAEditFantasyTeamResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAEditFantasyTeamResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAEditFantasyTeamResponse::Swap(CMsgDOTAEditFantasyTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditFantasyTeamResponse::InternalSwap(CMsgDOTAEditFantasyTeamResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAEditFantasyTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAEditFantasyTeamResponse_descriptor_;
  metadata.reflection = CMsgDOTAEditFantasyTeamResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAEditFantasyTeamResponse

// optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAEditFantasyTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAEditFantasyTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAEditFantasyTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAEditFantasyTeamResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamResponse.result)
  return static_cast< ::CMsgDOTAEditFantasyTeamResponse_EResult >(result_);
}
 void CMsgDOTAEditFantasyTeamResponse::set_result(::CMsgDOTAEditFantasyTeamResponse_EResult value) {
  assert(::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::~CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_descriptor_;
}

const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance_ = NULL;

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* n = new CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return target;
}

int CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Swap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::kOwnerAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedCtor() {
  _cached_size_ = 0;
  owner_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::~CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_descriptor_;
}

const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance_ = NULL;

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* n = new CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Clear() {
  owner_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return target;
}

int CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::ByteSize() const {
  int total_size = 0;

  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_account_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Swap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID

// optional uint32 owner_account_id = 1;
bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.owner_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamInfoResponse::kResultsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamInfoResponse)
}

void CMsgDOTAFantasyTeamInfoResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse(const CMsgDOTAFantasyTeamInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfoResponse)
}

void CMsgDOTAFantasyTeamInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamInfoResponse::~CMsgDOTAFantasyTeamInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamInfoResponse_descriptor_;
}

const CMsgDOTAFantasyTeamInfoResponse& CMsgDOTAFantasyTeamInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamInfoResponse* CMsgDOTAFantasyTeamInfoResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamInfoResponse* CMsgDOTAFantasyTeamInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfoResponse* n = new CMsgDOTAFantasyTeamInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfoResponse::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAFantasyTeamInfo results = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamInfoResponse)
  // repeated .CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfoResponse)
  // repeated .CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfoResponse)
  return target;
}

int CMsgDOTAFantasyTeamInfoResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAFantasyTeamInfo results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamInfoResponse::Swap(CMsgDOTAFantasyTeamInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoResponse::InternalSwap(CMsgDOTAFantasyTeamInfoResponse* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamInfoResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfoResponse

// repeated .CMsgDOTAFantasyTeamInfo results = 1;
int CMsgDOTAFantasyTeamInfoResponse::results_size() const {
  return results_.size();
}
void CMsgDOTAFantasyTeamInfoResponse::clear_results() {
  results_.Clear();
}
const ::CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfoResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Get(index);
}
::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Mutable(index);
}
::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::add_results() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo >*
CMsgDOTAFantasyTeamInfoResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamInfoResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo >&
CMsgDOTAFantasyTeamInfoResponse::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamInfoResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamInfo::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kTeamLogoFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kWinsFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kLossesFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kCurrentRosterFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamInfo)
}

void CMsgDOTAFantasyTeamInfo::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo(const CMsgDOTAFantasyTeamInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamInfo)
}

void CMsgDOTAFantasyTeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  owner_account_id_ = 0u;
  fantasy_team_index_ = 0u;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  wins_ = 0u;
  losses_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamInfo::~CMsgDOTAFantasyTeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamInfo)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfo::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamInfo_descriptor_;
}

const CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfo::default_instance_ = NULL;

CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfo* n = new CMsgDOTAFantasyTeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(fantasy_league_id_, owner_account_id_);
    ZR_(fantasy_team_index_, team_logo_);
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    losses_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  current_roster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_team_index;
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
          set_has_fantasy_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (tag == 34) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyTeamInfo.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_logo;
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (tag == 40) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 6;
      case 6: {
        if (tag == 48) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_losses;
        break;
      }

      // optional uint32 losses = 7;
      case 7: {
        if (tag == 56) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_current_roster;
        break;
      }

      // repeated uint32 current_roster = 8;
      case 8: {
        if (tag == 64) {
         parse_current_roster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_current_roster())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_roster())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_current_roster;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamInfo)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamInfo)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (has_fantasy_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint32 wins = 6;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wins(), output);
  }

  // optional uint32 losses = 7;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->losses(), output);
  }

  // repeated uint32 current_roster = 8;
  for (int i = 0; i < this->current_roster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->current_roster(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamInfo)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (has_fantasy_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint64 team_logo = 5;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint32 wins = 6;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wins(), target);
  }

  // optional uint32 losses = 7;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->losses(), target);
  }

  // repeated uint32 current_roster = 8;
  for (int i = 0; i < this->current_roster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->current_roster(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamInfo)
  return target;
}

int CMsgDOTAFantasyTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 team_logo = 5;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint32 wins = 6;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 7;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

  }
  // repeated uint32 current_roster = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_roster_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current_roster(i));
    }
    total_size += 1 * this->current_roster_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const CMsgDOTAFantasyTeamInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  current_roster_.MergeFrom(from.current_roster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_fantasy_team_index()) {
      set_fantasy_team_index(from.fantasy_team_index());
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const CMsgDOTAFantasyTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfo::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamInfo::Swap(CMsgDOTAFantasyTeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfo::InternalSwap(CMsgDOTAFantasyTeamInfo* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  current_roster_.UnsafeArenaSwap(&other->current_roster_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamInfo_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfo

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamInfo::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamInfo::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamInfo::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyTeamInfo::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamInfo::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyTeamInfo::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
bool CMsgDOTAFantasyTeamInfo::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamInfo::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.fantasy_team_index)
  return fantasy_team_index_;
}
 void CMsgDOTAFantasyTeamInfo::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.fantasy_team_index)
}

// optional string team_name = 4;
bool CMsgDOTAFantasyTeamInfo::has_team_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_team_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamInfo::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTAFantasyTeamInfo::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamInfo::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.team_name)
}
 void CMsgDOTAFantasyTeamInfo::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamInfo.team_name)
}
 void CMsgDOTAFantasyTeamInfo::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamInfo.team_name)
}
 ::std::string* CMsgDOTAFantasyTeamInfo::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamInfo.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyTeamInfo::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamInfo::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamInfo.team_name)
}

// optional uint64 team_logo = 5;
bool CMsgDOTAFantasyTeamInfo::has_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamInfo::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyTeamInfo::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.team_logo)
  return team_logo_;
}
 void CMsgDOTAFantasyTeamInfo::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.team_logo)
}

// optional uint32 wins = 6;
bool CMsgDOTAFantasyTeamInfo::has_wins() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_wins() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_wins() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamInfo::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.wins)
  return wins_;
}
 void CMsgDOTAFantasyTeamInfo::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.wins)
}

// optional uint32 losses = 7;
bool CMsgDOTAFantasyTeamInfo::has_losses() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_losses() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_losses() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamInfo::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.losses)
  return losses_;
}
 void CMsgDOTAFantasyTeamInfo::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.losses)
}

// repeated uint32 current_roster = 8;
int CMsgDOTAFantasyTeamInfo::current_roster_size() const {
  return current_roster_.size();
}
void CMsgDOTAFantasyTeamInfo::clear_current_roster() {
  current_roster_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::current_roster(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.current_roster)
  return current_roster_.Get(index);
}
 void CMsgDOTAFantasyTeamInfo::set_current_roster(int index, ::google::protobuf::uint32 value) {
  current_roster_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.current_roster)
}
 void CMsgDOTAFantasyTeamInfo::add_current_roster(::google::protobuf::uint32 value) {
  current_roster_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamInfo.current_roster)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyTeamInfo::current_roster() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamInfo.current_roster)
  return current_roster_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyTeamInfo::mutable_current_roster() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamInfo.current_roster)
  return &current_roster_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamScoreRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kIncludeBenchFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamScoreRequest)
}

void CMsgDOTAFantasyTeamScoreRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest(const CMsgDOTAFantasyTeamScoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamScoreRequest)
}

void CMsgDOTAFantasyTeamScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  owner_account_id_ = 0u;
  fantasy_team_index_ = 0u;
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  filter_start_time_ = 0u;
  filter_end_time_ = 0u;
  include_bench_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamScoreRequest::~CMsgDOTAFantasyTeamScoreRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamScoreRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamScoreRequest_descriptor_;
}

const CMsgDOTAFantasyTeamScoreRequest& CMsgDOTAFantasyTeamScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamScoreRequest* CMsgDOTAFantasyTeamScoreRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamScoreRequest* CMsgDOTAFantasyTeamScoreRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamScoreRequest* n = new CMsgDOTAFantasyTeamScoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamScoreRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamScoreRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(fantasy_league_id_, include_bench_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamScoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_team_index;
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
          set_has_fantasy_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filter_match_id;
        break;
      }

      // optional uint64 filter_match_id = 4;
      case 4: {
        if (tag == 32) {
         parse_filter_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
          set_has_filter_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_filter_start_time;
        break;
      }

      // optional uint32 filter_start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_filter_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
          set_has_filter_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filter_end_time;
        break;
      }

      // optional uint32 filter_end_time = 6;
      case 6: {
        if (tag == 48) {
         parse_filter_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
          set_has_filter_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_include_bench;
        break;
      }

      // optional bool include_bench = 7;
      case 7: {
        if (tag == 56) {
         parse_include_bench:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_bench_)));
          set_has_include_bench();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamScoreRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamScoreRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (has_fantasy_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional uint64 filter_match_id = 4;
  if (has_filter_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->filter_match_id(), output);
  }

  // optional uint32 filter_start_time = 5;
  if (has_filter_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 6;
  if (has_filter_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filter_end_time(), output);
  }

  // optional bool include_bench = 7;
  if (has_include_bench()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->include_bench(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamScoreRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamScoreRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (has_fantasy_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional uint64 filter_match_id = 4;
  if (has_filter_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->filter_match_id(), target);
  }

  // optional uint32 filter_start_time = 5;
  if (has_filter_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 6;
  if (has_filter_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->filter_end_time(), target);
  }

  // optional bool include_bench = 7;
  if (has_include_bench()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->include_bench(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamScoreRequest)
  return target;
}

int CMsgDOTAFantasyTeamScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional uint64 filter_match_id = 4;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional uint32 filter_start_time = 5;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 6;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional bool include_bench = 7;
    if (has_include_bench()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamScoreRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamScoreRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_fantasy_team_index()) {
      set_fantasy_team_index(from.fantasy_team_index());
    }
    if (from.has_filter_match_id()) {
      set_filter_match_id(from.filter_match_id());
    }
    if (from.has_filter_start_time()) {
      set_filter_start_time(from.filter_start_time());
    }
    if (from.has_filter_end_time()) {
      set_filter_end_time(from.filter_end_time());
    }
    if (from.has_include_bench()) {
      set_include_bench(from.include_bench());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamScoreRequest::Swap(CMsgDOTAFantasyTeamScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreRequest::InternalSwap(CMsgDOTAFantasyTeamScoreRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(include_bench_, other->include_bench_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamScoreRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamScoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamScoreRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamScoreRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyTeamScoreRequest::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
bool CMsgDOTAFantasyTeamScoreRequest::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.fantasy_team_index)
  return fantasy_team_index_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.fantasy_team_index)
}

// optional uint64 filter_match_id = 4;
bool CMsgDOTAFantasyTeamScoreRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyTeamScoreRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.filter_match_id)
  return filter_match_id_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.filter_match_id)
}

// optional uint32 filter_start_time = 5;
bool CMsgDOTAFantasyTeamScoreRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.filter_start_time)
  return filter_start_time_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.filter_start_time)
}

// optional uint32 filter_end_time = 6;
bool CMsgDOTAFantasyTeamScoreRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.filter_end_time)
  return filter_end_time_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.filter_end_time)
}

// optional bool include_bench = 7;
bool CMsgDOTAFantasyTeamScoreRequest::has_include_bench() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_include_bench() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_include_bench() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_include_bench() {
  include_bench_ = false;
  clear_has_include_bench();
}
 bool CMsgDOTAFantasyTeamScoreRequest::include_bench() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.include_bench)
  return include_bench_;
}
 void CMsgDOTAFantasyTeamScoreRequest::set_include_bench(bool value) {
  set_has_include_bench();
  include_bench_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.include_bench)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::SUCCESS;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MIN;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamScoreResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::kAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::~CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_descriptor_;
}

const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance_ = NULL;

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* n = new CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(account_id_, score_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // optional float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return target;
}

int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Swap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamScoreResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse::kFantasyTeamScoreFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse::kFantasyPlayerScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamScoreResponse)
}

void CMsgDOTAFantasyTeamScoreResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse(const CMsgDOTAFantasyTeamScoreResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamScoreResponse)
}

void CMsgDOTAFantasyTeamScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fantasy_team_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamScoreResponse::~CMsgDOTAFantasyTeamScoreResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamScoreResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamScoreResponse_descriptor_;
}

const CMsgDOTAFantasyTeamScoreResponse& CMsgDOTAFantasyTeamScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamScoreResponse* CMsgDOTAFantasyTeamScoreResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamScoreResponse* CMsgDOTAFantasyTeamScoreResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamScoreResponse* n = new CMsgDOTAFantasyTeamScoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamScoreResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamScoreResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, fantasy_team_score_);

#undef ZR_HELPER_
#undef ZR_

  fantasy_player_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamScoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamScoreResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_fantasy_team_score;
        break;
      }

      // optional float fantasy_team_score = 2;
      case 2: {
        if (tag == 21) {
         parse_fantasy_team_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_team_score_)));
          set_has_fantasy_team_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fantasy_player_score;
        break;
      }

      // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
      case 3: {
        if (tag == 26) {
         parse_fantasy_player_score:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fantasy_player_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fantasy_player_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fantasy_player_score;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamScoreResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamScoreResponse)
  // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional float fantasy_team_score = 2;
  if (has_fantasy_team_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fantasy_team_score(), output);
  }

  // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0, n = this->fantasy_player_score_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fantasy_player_score(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamScoreResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamScoreResponse)
  // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional float fantasy_team_score = 2;
  if (has_fantasy_team_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fantasy_team_score(), target);
  }

  // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0, n = this->fantasy_player_score_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fantasy_player_score(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamScoreResponse)
  return target;
}

int CMsgDOTAFantasyTeamScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional float fantasy_team_score = 2;
    if (has_fantasy_team_score()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  total_size += 1 * this->fantasy_player_score_size();
  for (int i = 0; i < this->fantasy_player_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_player_score(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamScoreResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamScoreResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fantasy_player_score_.MergeFrom(from.fantasy_player_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_team_score()) {
      set_fantasy_team_score(from.fantasy_team_score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamScoreResponse::Swap(CMsgDOTAFantasyTeamScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreResponse::InternalSwap(CMsgDOTAFantasyTeamScoreResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_team_score_, other->fantasy_team_score_);
  fantasy_player_score_.UnsafeArenaSwap(&other->fantasy_player_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamScoreResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamScoreResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore

// optional uint32 account_id = 1;
bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.account_id)
  return account_id_;
}
 void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.account_id)
}

// optional float score = 2;
bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.score)
  return score_;
}
 void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamScoreResponse

// optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamScoreResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamScoreResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamScoreResponse::set_result(::CMsgDOTAFantasyTeamScoreResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.result)
}

// optional float fantasy_team_score = 2;
bool CMsgDOTAFantasyTeamScoreResponse::has_fantasy_team_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse::set_has_fantasy_team_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_has_fantasy_team_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_fantasy_team_score() {
  fantasy_team_score_ = 0;
  clear_has_fantasy_team_score();
}
 float CMsgDOTAFantasyTeamScoreResponse::fantasy_team_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.fantasy_team_score)
  return fantasy_team_score_;
}
 void CMsgDOTAFantasyTeamScoreResponse::set_fantasy_team_score(float value) {
  set_has_fantasy_team_score();
  fantasy_team_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.fantasy_team_score)
}

// repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
int CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score_size() const {
  return fantasy_player_score_.size();
}
void CMsgDOTAFantasyTeamScoreResponse::clear_fantasy_player_score() {
  fantasy_player_score_.Clear();
}
const ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Get(index);
}
::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::mutable_fantasy_player_score(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Mutable(index);
}
::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::add_fantasy_player_score() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >*
CMsgDOTAFantasyTeamScoreResponse::mutable_fantasy_player_score() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return &fantasy_player_score_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >&
CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamStandingsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kCountFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterLastMatchFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterInHallFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamStandingsRequest)
}

void CMsgDOTAFantasyTeamStandingsRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest(const CMsgDOTAFantasyTeamStandingsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamStandingsRequest)
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  count_ = 0u;
  filter_start_time_ = 0u;
  filter_end_time_ = 0u;
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  filter_last_match_ = false;
  filter_in_hall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamStandingsRequest::~CMsgDOTAFantasyTeamStandingsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamStandingsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamStandingsRequest_descriptor_;
}

const CMsgDOTAFantasyTeamStandingsRequest& CMsgDOTAFantasyTeamStandingsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamStandingsRequest* CMsgDOTAFantasyTeamStandingsRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamStandingsRequest* CMsgDOTAFantasyTeamStandingsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamStandingsRequest* n = new CMsgDOTAFantasyTeamStandingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamStandingsRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamStandingsRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(fantasy_league_id_, filter_in_hall_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamStandingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamStandingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_filter_start_time;
        break;
      }

      // optional uint32 filter_start_time = 3;
      case 3: {
        if (tag == 24) {
         parse_filter_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
          set_has_filter_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filter_end_time;
        break;
      }

      // optional uint32 filter_end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_filter_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
          set_has_filter_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_filter_match_id;
        break;
      }

      // optional uint64 filter_match_id = 5;
      case 5: {
        if (tag == 40) {
         parse_filter_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
          set_has_filter_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filter_last_match;
        break;
      }

      // optional bool filter_last_match = 6;
      case 6: {
        if (tag == 48) {
         parse_filter_last_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
          set_has_filter_last_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_filter_in_hall;
        break;
      }

      // optional bool filter_in_hall = 7;
      case 7: {
        if (tag == 56) {
         parse_filter_in_hall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_in_hall_)));
          set_has_filter_in_hall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamStandingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamStandingsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamStandingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamStandingsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 filter_start_time = 3;
  if (has_filter_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 4;
  if (has_filter_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 5;
  if (has_filter_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 6;
  if (has_filter_last_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_last_match(), output);
  }

  // optional bool filter_in_hall = 7;
  if (has_filter_in_hall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filter_in_hall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamStandingsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamStandingsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (has_filter_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (has_filter_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (has_filter_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (has_filter_last_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_last_match(), target);
  }

  // optional bool filter_in_hall = 7;
  if (has_filter_in_hall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filter_in_hall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamStandingsRequest)
  return target;
}

int CMsgDOTAFantasyTeamStandingsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 filter_start_time = 3;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (has_filter_last_match()) {
      total_size += 1 + 1;
    }

    // optional bool filter_in_hall = 7;
    if (has_filter_in_hall()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamStandingsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamStandingsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_filter_start_time()) {
      set_filter_start_time(from.filter_start_time());
    }
    if (from.has_filter_end_time()) {
      set_filter_end_time(from.filter_end_time());
    }
    if (from.has_filter_match_id()) {
      set_filter_match_id(from.filter_match_id());
    }
    if (from.has_filter_last_match()) {
      set_filter_last_match(from.filter_last_match());
    }
    if (from.has_filter_in_hall()) {
      set_filter_in_hall(from.filter_in_hall());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamStandingsRequest::Swap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsRequest::InternalSwap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(count_, other->count_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_last_match_, other->filter_last_match_);
  std::swap(filter_in_hall_, other->filter_in_hall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamStandingsRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamStandingsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamStandingsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamStandingsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.fantasy_league_id)
}

// optional uint32 count = 2;
bool CMsgDOTAFantasyTeamStandingsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.count)
  return count_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.count)
}

// optional uint32 filter_start_time = 3;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_start_time)
  return filter_start_time_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_start_time)
}

// optional uint32 filter_end_time = 4;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_end_time)
  return filter_end_time_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_end_time)
}

// optional uint64 filter_match_id = 5;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyTeamStandingsRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_match_id)
  return filter_match_id_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_match_id)
}

// optional bool filter_last_match = 6;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_last_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_last_match() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_last_match() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  clear_has_filter_last_match();
}
 bool CMsgDOTAFantasyTeamStandingsRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_last_match)
  return filter_last_match_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_filter_last_match(bool value) {
  set_has_filter_last_match();
  filter_last_match_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_last_match)
}

// optional bool filter_in_hall = 7;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_in_hall() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_in_hall() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_in_hall() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_in_hall() {
  filter_in_hall_ = false;
  clear_has_filter_in_hall();
}
 bool CMsgDOTAFantasyTeamStandingsRequest::filter_in_hall() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_in_hall)
  return filter_in_hall_;
}
 void CMsgDOTAFantasyTeamStandingsRequest::set_filter_in_hall(bool value) {
  set_has_filter_in_hall();
  filter_in_hall_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_in_hall)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::SUCCESS;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MIN;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamStandingsResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamLogoFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kOwnerNameFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kScoreFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kScoreAgainstFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kWinsFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kLossesFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kStreakFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  owner_account_id_ = 0u;
  fantasy_team_index_ = 0u;
  fantasy_team_logo_ = GOOGLE_ULONGLONG(0);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  score_against_ = 0;
  wins_ = 0u;
  losses_ = 0u;
  streak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::~CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_descriptor_;
}

const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance_ = NULL;

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* n = new CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(fantasy_league_id_, fantasy_team_logo_);
    ZR_(fantasy_team_index_, score_);
    if (has_owner_name()) {
      owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fantasy_team_name()) {
      fantasy_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    score_against_ = 0;
  }
  ZR_(wins_, streak_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_team_index;
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (tag == 24) {
         parse_fantasy_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
          set_has_fantasy_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fantasy_team_logo;
        break;
      }

      // optional uint64 fantasy_team_logo = 4;
      case 4: {
        if (tag == 32) {
         parse_fantasy_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_team_logo_)));
          set_has_fantasy_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_owner_name;
        break;
      }

      // optional string owner_name = 5;
      case 5: {
        if (tag == 42) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fantasy_team_name;
        break;
      }

      // optional string fantasy_team_name = 6;
      case 6: {
        if (tag == 50) {
         parse_fantasy_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_team_name().data(), this->fantasy_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_score;
        break;
      }

      // optional float score = 7;
      case 7: {
        if (tag == 61) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_score_against;
        break;
      }

      // optional float score_against = 8;
      case 8: {
        if (tag == 69) {
         parse_score_against:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_against_)));
          set_has_score_against();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 9;
      case 9: {
        if (tag == 72) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_losses;
        break;
      }

      // optional uint32 losses = 10;
      case 10: {
        if (tag == 80) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_streak;
        break;
      }

      // optional int32 streak = 11;
      case 11: {
        if (tag == 88) {
         parse_streak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streak_)));
          set_has_streak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (has_fantasy_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (has_fantasy_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fantasy_team_logo(), output);
  }

  // optional string owner_name = 5;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->owner_name(), output);
  }

  // optional string fantasy_team_name = 6;
  if (has_fantasy_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_team_name().data(), this->fantasy_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fantasy_team_name(), output);
  }

  // optional float score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // optional float score_against = 8;
  if (has_score_against()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->score_against(), output);
  }

  // optional uint32 wins = 9;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wins(), output);
  }

  // optional uint32 losses = 10;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->losses(), output);
  }

  // optional int32 streak = 11;
  if (has_streak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->streak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (has_fantasy_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (has_fantasy_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fantasy_team_logo(), target);
  }

  // optional string owner_name = 5;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->owner_name(), target);
  }

  // optional string fantasy_team_name = 6;
  if (has_fantasy_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_team_name().data(), this->fantasy_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fantasy_team_name(), target);
  }

  // optional float score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->score(), target);
  }

  // optional float score_against = 8;
  if (has_score_against()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->score_against(), target);
  }

  // optional uint32 wins = 9;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wins(), target);
  }

  // optional uint32 losses = 10;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->losses(), target);
  }

  // optional int32 streak = 11;
  if (has_streak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->streak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return target;
}

int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional uint64 fantasy_team_logo = 4;
    if (has_fantasy_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_team_logo());
    }

    // optional string owner_name = 5;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }

    // optional string fantasy_team_name = 6;
    if (has_fantasy_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_team_name());
    }

    // optional float score = 7;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional float score_against = 8;
    if (has_score_against()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 wins = 9;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 10;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional int32 streak = 11;
    if (has_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streak());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_fantasy_team_index()) {
      set_fantasy_team_index(from.fantasy_team_index());
    }
    if (from.has_fantasy_team_logo()) {
      set_fantasy_team_logo(from.fantasy_team_logo());
    }
    if (from.has_owner_name()) {
      set_has_owner_name();
      owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
    }
    if (from.has_fantasy_team_name()) {
      set_has_fantasy_team_name();
      fantasy_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_team_name_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_score_against()) {
      set_score_against(from.score_against());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_streak()) {
      set_streak(from.streak());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Swap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(fantasy_team_logo_, other->fantasy_team_logo_);
  owner_name_.Swap(&other->owner_name_);
  fantasy_team_name_.Swap(&other->fantasy_team_name_);
  std::swap(score_, other->score_);
  std::swap(score_against_, other->score_against_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  std::swap(streak_, other->streak_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamStandingsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse::kTeamScoresFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamStandingsResponse)
}

void CMsgDOTAFantasyTeamStandingsResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse(const CMsgDOTAFantasyTeamStandingsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamStandingsResponse)
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamStandingsResponse::~CMsgDOTAFantasyTeamStandingsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamStandingsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamStandingsResponse_descriptor_;
}

const CMsgDOTAFantasyTeamStandingsResponse& CMsgDOTAFantasyTeamStandingsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamStandingsResponse* CMsgDOTAFantasyTeamStandingsResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamStandingsResponse* CMsgDOTAFantasyTeamStandingsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamStandingsResponse* n = new CMsgDOTAFantasyTeamStandingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamStandingsResponse::Clear() {
  result_ = 0;
  team_scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamStandingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamStandingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamStandingsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_scores;
        break;
      }

      // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
      case 3: {
        if (tag == 26) {
         parse_team_scores:
          DO_(input->IncrementRecursionDepth());
         parse_loop_team_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team_scores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_team_scores;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamStandingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamStandingsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamStandingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamStandingsResponse)
  // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0, n = this->team_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_scores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamStandingsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamStandingsResponse)
  // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0, n = this->team_scores_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team_scores(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamStandingsResponse)
  return target;
}

int CMsgDOTAFantasyTeamStandingsResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  total_size += 1 * this->team_scores_size();
  for (int i = 0; i < this->team_scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_scores(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamStandingsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamStandingsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  team_scores_.MergeFrom(from.team_scores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse::Swap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsResponse::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  std::swap(result_, other->result_);
  team_scores_.UnsafeArenaSwap(&other->team_scores_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamStandingsResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamStandingsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_index)
  return fantasy_team_index_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_index)
}

// optional uint64 fantasy_team_logo = 4;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_logo() {
  fantasy_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_fantasy_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_logo)
  return fantasy_team_logo_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_logo(::google::protobuf::uint64 value) {
  set_has_fantasy_team_logo();
  fantasy_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_logo)
}

// optional string owner_name = 5;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_owner_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_owner_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_name();
}
 const ::std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::owner_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const char* value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const char* value, size_t size) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
 ::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::mutable_owner_name() {
  set_has_owner_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::release_owner_name() {
  clear_has_owner_name();
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    set_has_owner_name();
  } else {
    clear_has_owner_name();
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}

// optional string fantasy_team_name = 6;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_team_name() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_team_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_name() {
  fantasy_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_team_name();
}
 const ::std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  return fantasy_team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const ::std::string& value) {
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const char* value) {
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const char* value, size_t size) {
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
 ::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::mutable_fantasy_team_name() {
  set_has_fantasy_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  return fantasy_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::release_fantasy_team_name() {
  clear_has_fantasy_team_name();
  return fantasy_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_allocated_fantasy_team_name(::std::string* fantasy_team_name) {
  if (fantasy_team_name != NULL) {
    set_has_fantasy_team_name();
  } else {
    clear_has_fantasy_team_name();
  }
  fantasy_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}

// optional float score = 7;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score)
  return score_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score)
}

// optional float score_against = 8;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_score_against() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_score_against() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_score_against() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_score_against() {
  score_against_ = 0;
  clear_has_score_against();
}
 float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::score_against() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score_against)
  return score_against_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_score_against(float value) {
  set_has_score_against();
  score_against_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score_against)
}

// optional uint32 wins = 9;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_wins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_wins() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_wins() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.wins)
  return wins_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.wins)
}

// optional uint32 losses = 10;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_losses() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_losses() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_losses() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.losses)
  return losses_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.losses)
}

// optional int32 streak = 11;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_streak() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_streak() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_streak() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_streak() {
  streak_ = 0;
  clear_has_streak();
}
 ::google::protobuf::int32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::streak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.streak)
  return streak_;
}
 void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_streak(::google::protobuf::int32 value) {
  set_has_streak();
  streak_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.streak)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamStandingsResponse

// optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamStandingsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamStandingsResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamStandingsResponse::set_result(::CMsgDOTAFantasyTeamStandingsResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.result)
}

// repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
int CMsgDOTAFantasyTeamStandingsResponse::team_scores_size() const {
  return team_scores_.size();
}
void CMsgDOTAFantasyTeamStandingsResponse::clear_team_scores() {
  team_scores_.Clear();
}
const ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse::team_scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Get(index);
}
::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::mutable_team_scores(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Mutable(index);
}
::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::add_team_scores() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >*
CMsgDOTAFantasyTeamStandingsResponse::mutable_team_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return &team_scores_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >&
CMsgDOTAFantasyTeamStandingsResponse::team_scores() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerScoreRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterLastMatchFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerScoreRequest)
}

void CMsgDOTAFantasyPlayerScoreRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest(const CMsgDOTAFantasyPlayerScoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreRequest)
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  player_account_id_ = 0u;
  filter_start_time_ = 0u;
  filter_end_time_ = 0u;
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  filter_last_match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerScoreRequest::~CMsgDOTAFantasyPlayerScoreRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreRequest_descriptor_;
}

const CMsgDOTAFantasyPlayerScoreRequest& CMsgDOTAFantasyPlayerScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerScoreRequest* CMsgDOTAFantasyPlayerScoreRequest::default_instance_ = NULL;

CMsgDOTAFantasyPlayerScoreRequest* CMsgDOTAFantasyPlayerScoreRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreRequest* n = new CMsgDOTAFantasyPlayerScoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerScoreRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(fantasy_league_id_, filter_last_match_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerScoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_id;
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_filter_start_time;
        break;
      }

      // optional uint32 filter_start_time = 3;
      case 3: {
        if (tag == 24) {
         parse_filter_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
          set_has_filter_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filter_end_time;
        break;
      }

      // optional uint32 filter_end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_filter_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
          set_has_filter_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_filter_match_id;
        break;
      }

      // optional uint64 filter_match_id = 5;
      case 5: {
        if (tag == 40) {
         parse_filter_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
          set_has_filter_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filter_last_match;
        break;
      }

      // optional bool filter_last_match = 6;
      case 6: {
        if (tag == 48) {
         parse_filter_last_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
          set_has_filter_last_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerScoreRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerScoreRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 filter_start_time = 3;
  if (has_filter_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 4;
  if (has_filter_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 5;
  if (has_filter_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 6;
  if (has_filter_last_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerScoreRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (has_filter_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (has_filter_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (has_filter_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (has_filter_last_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreRequest)
  return target;
}

int CMsgDOTAFantasyPlayerScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 filter_start_time = 3;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (has_filter_last_match()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerScoreRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_filter_start_time()) {
      set_filter_start_time(from.filter_start_time());
    }
    if (from.has_filter_end_time()) {
      set_filter_end_time(from.filter_end_time());
    }
    if (from.has_filter_match_id()) {
      set_filter_match_id(from.filter_match_id());
    }
    if (from.has_filter_last_match()) {
      set_filter_last_match(from.filter_last_match());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerScoreRequest::Swap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_last_match_, other->filter_last_match_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerScoreRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerScoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerScoreRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyPlayerScoreRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.fantasy_league_id)
}

// optional uint32 player_account_id = 2;
bool CMsgDOTAFantasyPlayerScoreRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.player_account_id)
  return player_account_id_;
}
 void CMsgDOTAFantasyPlayerScoreRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.player_account_id)
}

// optional uint32 filter_start_time = 3;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_start_time)
  return filter_start_time_;
}
 void CMsgDOTAFantasyPlayerScoreRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_start_time)
}

// optional uint32 filter_end_time = 4;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_end_time)
  return filter_end_time_;
}
 void CMsgDOTAFantasyPlayerScoreRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_end_time)
}

// optional uint64 filter_match_id = 5;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyPlayerScoreRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_match_id)
  return filter_match_id_;
}
 void CMsgDOTAFantasyPlayerScoreRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_match_id)
}

// optional bool filter_last_match = 6;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_last_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_last_match() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_last_match() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  clear_has_filter_last_match();
}
 bool CMsgDOTAFantasyPlayerScoreRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_last_match)
  return filter_last_match_;
}
 void CMsgDOTAFantasyPlayerScoreRequest::set_filter_last_match(bool value) {
  set_has_filter_last_match();
  filter_last_match_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_last_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::SUCCESS;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerScoreResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerScoreResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kPlayerNameFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerScoreResponse)
}

void CMsgDOTAFantasyPlayerScoreResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse(const CMsgDOTAFantasyPlayerScoreResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreResponse)
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  fantasy_league_id_ = 0u;
  player_account_id_ = 0u;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerScoreResponse::~CMsgDOTAFantasyPlayerScoreResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreResponse_descriptor_;
}

const CMsgDOTAFantasyPlayerScoreResponse& CMsgDOTAFantasyPlayerScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerScoreResponse* CMsgDOTAFantasyPlayerScoreResponse::default_instance_ = NULL;

CMsgDOTAFantasyPlayerScoreResponse* CMsgDOTAFantasyPlayerScoreResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreResponse* n = new CMsgDOTAFantasyPlayerScoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerScoreResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(result_, fantasy_league_id_);
    ZR_(player_account_id_, score_);
    if (has_player_name()) {
      player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerScoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyPlayerScoreResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_account_id;
        break;
      }

      // optional uint32 player_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_name;
        break;
      }

      // optional string player_name = 4;
      case 4: {
        if (tag == 34) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyPlayerScoreResponse.player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_score;
        break;
      }

      // optional float score = 5;
      case 5: {
        if (tag == 45) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerScoreResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerScoreResponse)
  // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 3;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_account_id(), output);
  }

  // optional string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerScoreResponse.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_name(), output);
  }

  // optional float score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerScoreResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreResponse)
  // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 3;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_account_id(), target);
  }

  // optional string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerScoreResponse.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_name(), target);
  }

  // optional float score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreResponse)
  return target;
}

int CMsgDOTAFantasyPlayerScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 3;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional string player_name = 4;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerScoreResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_player_name()) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerScoreResponse::Swap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(player_account_id_, other->player_account_id_);
  player_name_.Swap(&other->player_name_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerScoreResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerScoreResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreResponse

// optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerScoreResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.result)
  return static_cast< ::CMsgDOTAFantasyPlayerScoreResponse_EResult >(result_);
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_result(::CMsgDOTAFantasyPlayerScoreResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyPlayerScoreResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.fantasy_league_id)
}

// optional uint32 player_account_id = 3;
bool CMsgDOTAFantasyPlayerScoreResponse::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreResponse::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.player_account_id)
  return player_account_id_;
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.player_account_id)
}

// optional string player_name = 4;
bool CMsgDOTAFantasyPlayerScoreResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
 const ::std::string& CMsgDOTAFantasyPlayerScoreResponse::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const char* value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
 ::std::string* CMsgDOTAFantasyPlayerScoreResponse::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreResponse.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyPlayerScoreResponse::release_player_name() {
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}

// optional float score = 5;
bool CMsgDOTAFantasyPlayerScoreResponse::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float CMsgDOTAFantasyPlayerScoreResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.score)
  return score_;
}
 void CMsgDOTAFantasyPlayerScoreResponse::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerStandingsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kCountFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kRoleFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterLastMatchFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerStandingsRequest)
}

void CMsgDOTAFantasyPlayerStandingsRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest(const CMsgDOTAFantasyPlayerStandingsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStandingsRequest)
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  count_ = 0u;
  role_ = 0u;
  filter_start_time_ = 0u;
  filter_end_time_ = 0u;
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  filter_last_match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerStandingsRequest::~CMsgDOTAFantasyPlayerStandingsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStandingsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStandingsRequest_descriptor_;
}

const CMsgDOTAFantasyPlayerStandingsRequest& CMsgDOTAFantasyPlayerStandingsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerStandingsRequest* CMsgDOTAFantasyPlayerStandingsRequest::default_instance_ = NULL;

CMsgDOTAFantasyPlayerStandingsRequest* CMsgDOTAFantasyPlayerStandingsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStandingsRequest* n = new CMsgDOTAFantasyPlayerStandingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStandingsRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerStandingsRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(fantasy_league_id_, filter_last_match_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerStandingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerStandingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (tag == 24) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filter_start_time;
        break;
      }

      // optional uint32 filter_start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_filter_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
          set_has_filter_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_filter_end_time;
        break;
      }

      // optional uint32 filter_end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_filter_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
          set_has_filter_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filter_match_id;
        break;
      }

      // optional uint64 filter_match_id = 6;
      case 6: {
        if (tag == 48) {
         parse_filter_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
          set_has_filter_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_filter_last_match;
        break;
      }

      // optional bool filter_last_match = 7;
      case 7: {
        if (tag == 56) {
         parse_filter_last_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
          set_has_filter_last_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerStandingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerStandingsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStandingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerStandingsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // optional uint32 filter_start_time = 4;
  if (has_filter_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 5;
  if (has_filter_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 6;
  if (has_filter_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 7;
  if (has_filter_last_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filter_last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerStandingsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStandingsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // optional uint32 filter_start_time = 4;
  if (has_filter_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 5;
  if (has_filter_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 6;
  if (has_filter_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 7;
  if (has_filter_last_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filter_last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStandingsRequest)
  return target;
}

int CMsgDOTAFantasyPlayerStandingsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 filter_start_time = 4;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 5;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 6;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 7;
    if (has_filter_last_match()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerStandingsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStandingsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_filter_start_time()) {
      set_filter_start_time(from.filter_start_time());
    }
    if (from.has_filter_end_time()) {
      set_filter_end_time(from.filter_end_time());
    }
    if (from.has_filter_match_id()) {
      set_filter_match_id(from.filter_match_id());
    }
    if (from.has_filter_last_match()) {
      set_filter_last_match(from.filter_last_match());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerStandingsRequest::Swap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsRequest::InternalSwap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(count_, other->count_);
  std::swap(role_, other->role_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_last_match_, other->filter_last_match_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerStandingsRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerStandingsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerStandingsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.fantasy_league_id)
}

// optional uint32 count = 2;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.count)
  return count_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.count)
}

// optional uint32 role = 3;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_role() {
  role_ = 0u;
  clear_has_role();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.role)
  return role_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.role)
}

// optional uint32 filter_start_time = 4;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_start_time)
  return filter_start_time_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_start_time)
}

// optional uint32 filter_end_time = 5;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_end_time)
  return filter_end_time_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_end_time)
}

// optional uint64 filter_match_id = 6;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyPlayerStandingsRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_match_id)
  return filter_match_id_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_match_id)
}

// optional bool filter_last_match = 7;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_last_match() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_last_match() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_last_match() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  clear_has_filter_last_match();
}
 bool CMsgDOTAFantasyPlayerStandingsRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_last_match)
  return filter_last_match_;
}
 void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_last_match(bool value) {
  set_has_filter_last_match();
  filter_last_match_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_last_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerStandingsResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kPlayerNameFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_account_id_ = 0u;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::~CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_descriptor_;
}

const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance_ = NULL;

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* n = new CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(player_account_id_, score_);
    if (has_player_name()) {
      player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (tag == 29) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  // optional uint32 player_account_id = 1;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return target;
}

int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_account_id = 1;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_player_name()) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Swap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  std::swap(player_account_id_, other->player_account_id_);
  player_name_.Swap(&other->player_name_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerStandingsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kRoleFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kPlayerScoresFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerStandingsResponse)
}

void CMsgDOTAFantasyPlayerStandingsResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse(const CMsgDOTAFantasyPlayerStandingsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStandingsResponse)
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fantasy_league_id_ = 0u;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerStandingsResponse::~CMsgDOTAFantasyPlayerStandingsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStandingsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerStandingsResponse_descriptor_;
}

const CMsgDOTAFantasyPlayerStandingsResponse& CMsgDOTAFantasyPlayerStandingsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerStandingsResponse* CMsgDOTAFantasyPlayerStandingsResponse::default_instance_ = NULL;

CMsgDOTAFantasyPlayerStandingsResponse* CMsgDOTAFantasyPlayerStandingsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStandingsResponse* n = new CMsgDOTAFantasyPlayerStandingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStandingsResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerStandingsResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(result_, fantasy_league_id_);
    role_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  player_scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerStandingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerStandingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyPlayerStandingsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (tag == 24) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_scores;
        break;
      }

      // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
      case 4: {
        if (tag == 34) {
         parse_player_scores:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_scores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_player_scores;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerStandingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerStandingsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStandingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerStandingsResponse)
  // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0, n = this->player_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_scores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerStandingsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStandingsResponse)
  // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0, n = this->player_scores_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_scores(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStandingsResponse)
  return target;
}

int CMsgDOTAFantasyPlayerStandingsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  total_size += 1 * this->player_scores_size();
  for (int i = 0; i < this->player_scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_scores(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerStandingsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStandingsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_scores_.MergeFrom(from.player_scores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse::Swap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsResponse::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(role_, other->role_);
  player_scores_.UnsafeArenaSwap(&other->player_scores_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerStandingsResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerStandingsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore

// optional uint32 player_account_id = 1;
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_account_id)
  return player_account_id_;
}
 void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_account_id)
}

// optional string player_name = 2;
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
 const ::std::string& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
 void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const char* value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
 void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
 ::std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::release_player_name() {
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}

// optional float score = 3;
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.score)
  return score_;
}
 void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStandingsResponse

// optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerStandingsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.result)
  return static_cast< ::CMsgDOTAFantasyPlayerStandingsResponse_EResult >(result_);
}
 void CMsgDOTAFantasyPlayerStandingsResponse::set_result(::CMsgDOTAFantasyPlayerStandingsResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyPlayerStandingsResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyPlayerStandingsResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.fantasy_league_id)
}

// optional uint32 role = 3;
bool CMsgDOTAFantasyPlayerStandingsResponse::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_role() {
  role_ = 0u;
  clear_has_role();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsResponse::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.role)
  return role_;
}
 void CMsgDOTAFantasyPlayerStandingsResponse::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.role)
}

// repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
int CMsgDOTAFantasyPlayerStandingsResponse::player_scores_size() const {
  return player_scores_.size();
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_player_scores() {
  player_scores_.Clear();
}
const ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse::player_scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Get(index);
}
::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::mutable_player_scores(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Mutable(index);
}
::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::add_player_scores() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >*
CMsgDOTAFantasyPlayerStandingsResponse::mutable_player_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return &player_scores_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >&
CMsgDOTAFantasyPlayerStandingsResponse::player_scores() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerInfoRequest::CMsgDOTAFantasyPlayerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerInfoRequest)
}

void CMsgDOTAFantasyPlayerInfoRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerInfoRequest::CMsgDOTAFantasyPlayerInfoRequest(const CMsgDOTAFantasyPlayerInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerInfoRequest)
}

void CMsgDOTAFantasyPlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerInfoRequest::~CMsgDOTAFantasyPlayerInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerInfoRequest_descriptor_;
}

const CMsgDOTAFantasyPlayerInfoRequest& CMsgDOTAFantasyPlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerInfoRequest* CMsgDOTAFantasyPlayerInfoRequest::default_instance_ = NULL;

CMsgDOTAFantasyPlayerInfoRequest* CMsgDOTAFantasyPlayerInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerInfoRequest* n = new CMsgDOTAFantasyPlayerInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerInfoRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerInfoRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerInfoRequest)
  return target;
}

int CMsgDOTAFantasyPlayerInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerInfoRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerInfoRequest::MergeFrom(const CMsgDOTAFantasyPlayerInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerInfoRequest::CopyFrom(const CMsgDOTAFantasyPlayerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerInfoRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerInfoRequest::Swap(CMsgDOTAFantasyPlayerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerInfoRequest::InternalSwap(CMsgDOTAFantasyPlayerInfoRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerInfoRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerInfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerInfoResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerInfoResponse::CMsgDOTAFantasyPlayerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerInfoResponse)
}

void CMsgDOTAFantasyPlayerInfoResponse::InitAsDefaultInstance() {
  msg_ = const_cast< ::CMsgGCPlayerInfo*>(&::CMsgGCPlayerInfo::default_instance());
}

CMsgDOTAFantasyPlayerInfoResponse::CMsgDOTAFantasyPlayerInfoResponse(const CMsgDOTAFantasyPlayerInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerInfoResponse)
}

void CMsgDOTAFantasyPlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerInfoResponse::~CMsgDOTAFantasyPlayerInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void CMsgDOTAFantasyPlayerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerInfoResponse_descriptor_;
}

const CMsgDOTAFantasyPlayerInfoResponse& CMsgDOTAFantasyPlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerInfoResponse* CMsgDOTAFantasyPlayerInfoResponse::default_instance_ = NULL;

CMsgDOTAFantasyPlayerInfoResponse* CMsgDOTAFantasyPlayerInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerInfoResponse* n = new CMsgDOTAFantasyPlayerInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerInfoResponse::Clear() {
  if (has_msg()) {
    if (msg_ != NULL) msg_->::CMsgGCPlayerInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGCPlayerInfo msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerInfoResponse)
  // optional .CMsgGCPlayerInfo msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerInfoResponse)
  // optional .CMsgGCPlayerInfo msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->msg_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerInfoResponse)
  return target;
}

int CMsgDOTAFantasyPlayerInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgGCPlayerInfo msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerInfoResponse::MergeFrom(const CMsgDOTAFantasyPlayerInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::CMsgGCPlayerInfo::MergeFrom(from.msg());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerInfoResponse::CopyFrom(const CMsgDOTAFantasyPlayerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerInfoResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerInfoResponse::Swap(CMsgDOTAFantasyPlayerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerInfoResponse::InternalSwap(CMsgDOTAFantasyPlayerInfoResponse* other) {
  std::swap(msg_, other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerInfoResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerInfoResponse

// optional .CMsgGCPlayerInfo msg = 1;
bool CMsgDOTAFantasyPlayerInfoResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerInfoResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerInfoResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerInfoResponse::clear_msg() {
  if (msg_ != NULL) msg_->::CMsgGCPlayerInfo::Clear();
  clear_has_msg();
}
const ::CMsgGCPlayerInfo& CMsgDOTAFantasyPlayerInfoResponse::msg() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerInfoResponse.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
::CMsgGCPlayerInfo* CMsgDOTAFantasyPlayerInfoResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::CMsgGCPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerInfoResponse.msg)
  return msg_;
}
::CMsgGCPlayerInfo* CMsgDOTAFantasyPlayerInfoResponse::release_msg() {
  clear_has_msg();
  ::CMsgGCPlayerInfo* temp = msg_;
  msg_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerInfoResponse::set_allocated_msg(::CMsgGCPlayerInfo* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerInfoResponse.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueCreateRequest::kSeasonIdFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kTeamNameFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kLogoFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kTicketItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueCreateRequest)
}

void CMsgDOTAFantasyLeagueCreateRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest(const CMsgDOTAFantasyLeagueCreateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueCreateRequest)
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  season_id_ = 0u;
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  ticket_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueCreateRequest::~CMsgDOTAFantasyLeagueCreateRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueCreateRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueCreateRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueCreateRequest& CMsgDOTAFantasyLeagueCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueCreateRequest* CMsgDOTAFantasyLeagueCreateRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueCreateRequest* CMsgDOTAFantasyLeagueCreateRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueCreateRequest* n = new CMsgDOTAFantasyLeagueCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueCreateRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueCreateRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(logo_, season_id_);
    if (has_fantasy_league_name()) {
      fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
          set_has_season_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fantasy_league_name;
        break;
      }

      // optional string fantasy_league_name = 2;
      case 2: {
        if (tag == 18) {
         parse_fantasy_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), this->fantasy_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueCreateRequest.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (tag == 34) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueCreateRequest.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 5;
      case 5: {
        if (tag == 40) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ticket_item_id;
        break;
      }

      // optional uint64 ticket_item_id = 6;
      case 6: {
        if (tag == 48) {
         parse_ticket_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_item_id_)));
          set_has_ticket_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueCreateRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueCreateRequest)
  // optional uint32 season_id = 1;
  if (has_season_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->season_id(), output);
  }

  // optional string fantasy_league_name = 2;
  if (has_fantasy_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fantasy_league_name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional uint64 logo = 5;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logo(), output);
  }

  // optional uint64 ticket_item_id = 6;
  if (has_ticket_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ticket_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueCreateRequest)
  // optional uint32 season_id = 1;
  if (has_season_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->season_id(), target);
  }

  // optional string fantasy_league_name = 2;
  if (has_fantasy_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fantasy_league_name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueCreateRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint64 logo = 5;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logo(), target);
  }

  // optional uint64 ticket_item_id = 6;
  if (has_ticket_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ticket_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueCreateRequest)
  return target;
}

int CMsgDOTAFantasyLeagueCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 season_id = 1;
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }

    // optional string fantasy_league_name = 2;
    if (has_fantasy_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 logo = 5;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 ticket_item_id = 6;
    if (has_ticket_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket_item_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueCreateRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueCreateRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season_id()) {
      set_season_id(from.season_id());
    }
    if (from.has_fantasy_league_name()) {
      set_has_fantasy_league_name();
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_ticket_item_id()) {
      set_ticket_item_id(from.ticket_item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueCreateRequest::Swap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueCreateRequest::InternalSwap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  std::swap(season_id_, other->season_id_);
  fantasy_league_name_.Swap(&other->fantasy_league_name_);
  password_.Swap(&other->password_);
  team_name_.Swap(&other->team_name_);
  std::swap(logo_, other->logo_);
  std::swap(ticket_item_id_, other->ticket_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueCreateRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueCreateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueCreateRequest

// optional uint32 season_id = 1;
bool CMsgDOTAFantasyLeagueCreateRequest::has_season_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_season_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_season_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_season_id() {
  season_id_ = 0u;
  clear_has_season_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueCreateRequest::season_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.season_id)
  return season_id_;
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_season_id(::google::protobuf::uint32 value) {
  set_has_season_id();
  season_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.season_id)
}

// optional string fantasy_league_name = 2;
bool CMsgDOTAFantasyLeagueCreateRequest::has_fantasy_league_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_fantasy_league_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_fantasy_league_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_league_name();
}
 const ::std::string& CMsgDOTAFantasyLeagueCreateRequest::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  return fantasy_league_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const ::std::string& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const char* value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const char* value, size_t size) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
 ::std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_fantasy_league_name() {
  set_has_fantasy_league_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  return fantasy_league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueCreateRequest::release_fantasy_league_name() {
  clear_has_fantasy_league_name();
  return fantasy_league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_fantasy_league_name(::std::string* fantasy_league_name) {
  if (fantasy_league_name != NULL) {
    set_has_fantasy_league_name();
  } else {
    clear_has_fantasy_league_name();
  }
  fantasy_league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_league_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}

// optional string password = 3;
bool CMsgDOTAFantasyLeagueCreateRequest::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CMsgDOTAFantasyLeagueCreateRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.password)
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueCreateRequest.password)
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueCreateRequest.password)
}
 ::std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueCreateRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueCreateRequest::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueCreateRequest.password)
}

// optional string team_name = 4;
bool CMsgDOTAFantasyLeagueCreateRequest::has_team_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_team_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTAFantasyLeagueCreateRequest::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
 ::std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueCreateRequest.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueCreateRequest::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}

// optional uint64 logo = 5;
bool CMsgDOTAFantasyLeagueCreateRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyLeagueCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.logo)
  return logo_;
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.logo)
}

// optional uint64 ticket_item_id = 6;
bool CMsgDOTAFantasyLeagueCreateRequest::has_ticket_item_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_ticket_item_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_ticket_item_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_ticket_item_id() {
  ticket_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket_item_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyLeagueCreateRequest::ticket_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.ticket_item_id)
  return ticket_item_id_;
}
 void CMsgDOTAFantasyLeagueCreateRequest::set_ticket_item_id(::google::protobuf::uint64 value) {
  set_has_ticket_item_id();
  ticket_item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.ticket_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::SUCCESS;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_SEASON_ID;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_LEAGUE_NAME;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_TEAM_NAME;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_TICKET;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueCreateResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueCreateResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueCreateResponse::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueCreateResponse)
}

void CMsgDOTAFantasyLeagueCreateResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse(const CMsgDOTAFantasyLeagueCreateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueCreateResponse)
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueCreateResponse::~CMsgDOTAFantasyLeagueCreateResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueCreateResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueCreateResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueCreateResponse& CMsgDOTAFantasyLeagueCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueCreateResponse* CMsgDOTAFantasyLeagueCreateResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueCreateResponse* CMsgDOTAFantasyLeagueCreateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueCreateResponse* n = new CMsgDOTAFantasyLeagueCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueCreateResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueCreateResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, fantasy_league_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueCreateResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_league_id;
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fantasy_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueCreateResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueCreateResponse)
  // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueCreateResponse)
  // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueCreateResponse)
  return target;
}

int CMsgDOTAFantasyLeagueCreateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueCreateResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueCreateResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueCreateResponse::Swap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueCreateResponse::InternalSwap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueCreateResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueCreateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueCreateResponse

// optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueCreateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueCreateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueCreateResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueCreateResponse::set_result(::CMsgDOTAFantasyLeagueCreateResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyLeagueCreateResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueCreateResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueCreateResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateResponse.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueCreateResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateResponse.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamCreateRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kLogoFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kTicketItemIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamCreateRequest)
}

void CMsgDOTAFantasyTeamCreateRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest(const CMsgDOTAFantasyTeamCreateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamCreateRequest)
}

void CMsgDOTAFantasyTeamCreateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  ticket_item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamCreateRequest::~CMsgDOTAFantasyTeamCreateRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamCreateRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamCreateRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamCreateRequest_descriptor_;
}

const CMsgDOTAFantasyTeamCreateRequest& CMsgDOTAFantasyTeamCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamCreateRequest* CMsgDOTAFantasyTeamCreateRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamCreateRequest* CMsgDOTAFantasyTeamCreateRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamCreateRequest* n = new CMsgDOTAFantasyTeamCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamCreateRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamCreateRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(logo_, fantasy_league_id_);
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyTeamCreateRequest.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyTeamCreateRequest.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (tag == 32) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ticket_item_id;
        break;
      }

      // optional uint64 ticket_item_id = 5;
      case 5: {
        if (tag == 40) {
         parse_ticket_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_item_id_)));
          set_has_ticket_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamCreateRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamCreateRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamCreateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamCreateRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional uint64 ticket_item_id = 5;
  if (has_ticket_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ticket_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamCreateRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamCreateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyTeamCreateRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional uint64 ticket_item_id = 5;
  if (has_ticket_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ticket_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamCreateRequest)
  return target;
}

int CMsgDOTAFantasyTeamCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 ticket_item_id = 5;
    if (has_ticket_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket_item_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamCreateRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamCreateRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_ticket_item_id()) {
      set_ticket_item_id(from.ticket_item_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamCreateRequest::Swap(CMsgDOTAFantasyTeamCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamCreateRequest::InternalSwap(CMsgDOTAFantasyTeamCreateRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  password_.Swap(&other->password_);
  team_name_.Swap(&other->team_name_);
  std::swap(logo_, other->logo_);
  std::swap(ticket_item_id_, other->ticket_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamCreateRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamCreateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamCreateRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamCreateRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamCreateRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamCreateRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.fantasy_league_id)
}

// optional string password = 2;
bool CMsgDOTAFantasyTeamCreateRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CMsgDOTAFantasyTeamCreateRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamCreateRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.password)
}
 void CMsgDOTAFantasyTeamCreateRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamCreateRequest.password)
}
 void CMsgDOTAFantasyTeamCreateRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamCreateRequest.password)
}
 ::std::string* CMsgDOTAFantasyTeamCreateRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamCreateRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyTeamCreateRequest::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamCreateRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamCreateRequest.password)
}

// optional string team_name = 3;
bool CMsgDOTAFantasyTeamCreateRequest::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTAFantasyTeamCreateRequest::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
 void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
 void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
 ::std::string* CMsgDOTAFantasyTeamCreateRequest::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamCreateRequest.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyTeamCreateRequest::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyTeamCreateRequest::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamCreateRequest.team_name)
}

// optional uint64 logo = 4;
bool CMsgDOTAFantasyTeamCreateRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyTeamCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.logo)
  return logo_;
}
 void CMsgDOTAFantasyTeamCreateRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.logo)
}

// optional uint64 ticket_item_id = 5;
bool CMsgDOTAFantasyTeamCreateRequest::has_ticket_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_ticket_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_ticket_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_ticket_item_id() {
  ticket_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket_item_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyTeamCreateRequest::ticket_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.ticket_item_id)
  return ticket_item_id_;
}
 void CMsgDOTAFantasyTeamCreateRequest::set_ticket_item_id(::google::protobuf::uint64 value) {
  set_has_ticket_item_id();
  ticket_item_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.ticket_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::SUCCESS;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_FANTASY_LEAGUE_ID;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_NAME;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FULL;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_ALREADY_MEMBER;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_PASSWORD;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_TICKET;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MIN;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamCreateResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamCreateResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamCreateResponse::kFantasyTeamIndexFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamCreateResponse)
}

void CMsgDOTAFantasyTeamCreateResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse(const CMsgDOTAFantasyTeamCreateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamCreateResponse)
}

void CMsgDOTAFantasyTeamCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fantasy_team_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamCreateResponse::~CMsgDOTAFantasyTeamCreateResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamCreateResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamCreateResponse_descriptor_;
}

const CMsgDOTAFantasyTeamCreateResponse& CMsgDOTAFantasyTeamCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamCreateResponse* CMsgDOTAFantasyTeamCreateResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamCreateResponse* CMsgDOTAFantasyTeamCreateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamCreateResponse* n = new CMsgDOTAFantasyTeamCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamCreateResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamCreateResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, fantasy_team_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamCreateResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_team_index;
        break;
      }

      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_fantasy_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
          set_has_fantasy_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamCreateResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamCreateResponse)
  // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_team_index = 2;
  if (has_fantasy_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamCreateResponse)
  // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (has_fantasy_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamCreateResponse)
  return target;
}

int CMsgDOTAFantasyTeamCreateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_team_index = 2;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamCreateResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamCreateResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fantasy_team_index()) {
      set_fantasy_team_index(from.fantasy_team_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamCreateResponse::Swap(CMsgDOTAFantasyTeamCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamCreateResponse::InternalSwap(CMsgDOTAFantasyTeamCreateResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamCreateResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamCreateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamCreateResponse

// optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamCreateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamCreateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamCreateResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamCreateResponse::set_result(::CMsgDOTAFantasyTeamCreateResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateResponse.result)
}

// optional uint32 fantasy_team_index = 2;
bool CMsgDOTAFantasyTeamCreateResponse::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamCreateResponse::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamCreateResponse::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateResponse.fantasy_team_index)
  return fantasy_team_index_;
}
 void CMsgDOTAFantasyTeamCreateResponse::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateResponse.fantasy_team_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::kAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::kInvitedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  invited_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::~CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_descriptor_;
}

const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance_ = NULL;

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* n = new CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(account_id_, invited_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invited;
        break;
      }

      // optional bool invited = 2;
      case 2: {
        if (tag == 16) {
         parse_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invited_)));
          set_has_invited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool invited = 2;
  if (has_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->invited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool invited = 2;
  if (has_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->invited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return target;
}

int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool invited = 2;
    if (has_invited()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_invited()) {
      set_invited(from.invited());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Swap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(invited_, other->invited_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kInviteChangeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueEditInvitesRequest)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest(const CMsgDOTAFantasyLeagueEditInvitesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInvitesRequest)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueEditInvitesRequest::~CMsgDOTAFantasyLeagueEditInvitesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInvitesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueEditInvitesRequest& CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueEditInvitesRequest* CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueEditInvitesRequest* CMsgDOTAFantasyLeagueEditInvitesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInvitesRequest* n = new CMsgDOTAFantasyLeagueEditInvitesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    fantasy_league_id_ = 0u;
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  invite_change_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyLeagueEditInvitesRequest.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_invite_change;
        break;
      }

      // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
      case 3: {
        if (tag == 26) {
         parse_invite_change:
          DO_(input->IncrementRecursionDepth());
         parse_loop_invite_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_invite_change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_invite_change;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueEditInvitesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueEditInvitesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0, n = this->invite_change_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invite_change(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueEditInvitesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInvitesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0, n = this->invite_change_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invite_change(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInvitesRequest)
  return target;
}

int CMsgDOTAFantasyLeagueEditInvitesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  total_size += 1 * this->invite_change_size();
  for (int i = 0; i < this->invite_change_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invite_change(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueEditInvitesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInvitesRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  invite_change_.MergeFrom(from.invite_change_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::Swap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  password_.Swap(&other->password_);
  invite_change_.UnsafeArenaSwap(&other->invite_change_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueEditInvitesRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueEditInvitesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange

// optional uint32 account_id = 1;
bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.account_id)
  return account_id_;
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.account_id)
}

// optional bool invited = 2;
bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::has_invited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_has_invited() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_has_invited() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_invited() {
  invited_ = false;
  clear_has_invited();
}
 bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::invited() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.invited)
  return invited_;
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_invited(bool value) {
  set_has_invited();
  invited_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.invited)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueEditInvitesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueEditInvitesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.fantasy_league_id)
}

// optional string password = 2;
bool CMsgDOTAFantasyLeagueEditInvitesRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CMsgDOTAFantasyLeagueEditInvitesRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
 ::std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyLeagueEditInvitesRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}

// repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
int CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change_size() const {
  return invite_change_.size();
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_invite_change() {
  invite_change_.Clear();
}
const ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Get(index);
}
::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_invite_change(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Mutable(index);
}
::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::add_invite_change() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >*
CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_invite_change() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return &invite_change_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >&
CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::SUCCESS;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueEditInvitesResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueEditInvitesResponse)
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse(const CMsgDOTAFantasyLeagueEditInvitesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueEditInvitesResponse)
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueEditInvitesResponse::~CMsgDOTAFantasyLeagueEditInvitesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueEditInvitesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueEditInvitesResponse& CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueEditInvitesResponse* CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueEditInvitesResponse* CMsgDOTAFantasyLeagueEditInvitesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInvitesResponse* n = new CMsgDOTAFantasyLeagueEditInvitesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueEditInvitesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueEditInvitesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueEditInvitesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueEditInvitesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueEditInvitesResponse)
  // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueEditInvitesResponse)
  return target;
}

int CMsgDOTAFantasyLeagueEditInvitesResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueEditInvitesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInvitesResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::Swap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueEditInvitesResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueEditInvitesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInvitesResponse

// optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueEditInvitesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueEditInvitesResponse::set_result(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueDraftStatusRequest::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueDraftStatusRequest)
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest(const CMsgDOTAFantasyLeagueDraftStatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftStatusRequest)
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueDraftStatusRequest::~CMsgDOTAFantasyLeagueDraftStatusRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftStatusRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueDraftStatusRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueDraftStatusRequest& CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueDraftStatusRequest* CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueDraftStatusRequest* CMsgDOTAFantasyLeagueDraftStatusRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftStatusRequest* n = new CMsgDOTAFantasyLeagueDraftStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueDraftStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueDraftStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueDraftStatusRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueDraftStatusRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftStatusRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftStatusRequest)
  return target;
}

int CMsgDOTAFantasyLeagueDraftStatusRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueDraftStatusRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftStatusRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatusRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::Swap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueDraftStatusRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueDraftStatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftStatusRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueDraftStatusRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatusRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatusRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueDraftStatusRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatusRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueDraftStatus::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kDraftOrderFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kCurrentPickFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kTimeRemainingFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kPendingResumeFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kCompletedFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kAvailablePlayersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueDraftStatus)
}

void CMsgDOTAFantasyLeagueDraftStatus::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus(const CMsgDOTAFantasyLeagueDraftStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftStatus)
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  current_pick_ = 0u;
  time_remaining_ = 0u;
  pending_resume_ = false;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueDraftStatus::~CMsgDOTAFantasyLeagueDraftStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftStatus)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueDraftStatus_descriptor_;
}

const CMsgDOTAFantasyLeagueDraftStatus& CMsgDOTAFantasyLeagueDraftStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueDraftStatus* CMsgDOTAFantasyLeagueDraftStatus::default_instance_ = NULL;

CMsgDOTAFantasyLeagueDraftStatus* CMsgDOTAFantasyLeagueDraftStatus::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftStatus* n = new CMsgDOTAFantasyLeagueDraftStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueDraftStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 61u) {
    ZR_(fantasy_league_id_, completed_);
  }

#undef ZR_HELPER_
#undef ZR_

  draft_order_.Clear();
  available_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueDraftStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueDraftStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_draft_order;
        break;
      }

      // repeated uint32 draft_order = 2;
      case 2: {
        if (tag == 16) {
         parse_draft_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_draft_order())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_draft_order())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_draft_order;
        if (input->ExpectTag(24)) goto parse_current_pick;
        break;
      }

      // optional uint32 current_pick = 3;
      case 3: {
        if (tag == 24) {
         parse_current_pick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_pick_)));
          set_has_current_pick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_remaining;
        break;
      }

      // optional uint32 time_remaining = 4;
      case 4: {
        if (tag == 32) {
         parse_time_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remaining_)));
          set_has_time_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pending_resume;
        break;
      }

      // optional bool pending_resume = 5;
      case 5: {
        if (tag == 40) {
         parse_pending_resume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_resume_)));
          set_has_pending_resume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_completed;
        break;
      }

      // optional bool completed = 6;
      case 6: {
        if (tag == 48) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_available_players;
        break;
      }

      // repeated uint32 available_players = 7;
      case 7: {
        if (tag == 56) {
         parse_available_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_available_players())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_available_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_available_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueDraftStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueDraftStatus)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueDraftStatus)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // repeated uint32 draft_order = 2;
  for (int i = 0; i < this->draft_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->draft_order(i), output);
  }

  // optional uint32 current_pick = 3;
  if (has_current_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_pick(), output);
  }

  // optional uint32 time_remaining = 4;
  if (has_time_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_remaining(), output);
  }

  // optional bool pending_resume = 5;
  if (has_pending_resume()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pending_resume(), output);
  }

  // optional bool completed = 6;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->completed(), output);
  }

  // repeated uint32 available_players = 7;
  for (int i = 0; i < this->available_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->available_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueDraftStatus)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftStatus)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // repeated uint32 draft_order = 2;
  for (int i = 0; i < this->draft_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->draft_order(i), target);
  }

  // optional uint32 current_pick = 3;
  if (has_current_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_pick(), target);
  }

  // optional uint32 time_remaining = 4;
  if (has_time_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_remaining(), target);
  }

  // optional bool pending_resume = 5;
  if (has_pending_resume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pending_resume(), target);
  }

  // optional bool completed = 6;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->completed(), target);
  }

  // repeated uint32 available_players = 7;
  for (int i = 0; i < this->available_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->available_players(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftStatus)
  return target;
}

int CMsgDOTAFantasyLeagueDraftStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 61u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 current_pick = 3;
    if (has_current_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_pick());
    }

    // optional uint32 time_remaining = 4;
    if (has_time_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_remaining());
    }

    // optional bool pending_resume = 5;
    if (has_pending_resume()) {
      total_size += 1 + 1;
    }

    // optional bool completed = 6;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 draft_order = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->draft_order_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->draft_order(i));
    }
    total_size += 1 * this->draft_order_size() + data_size;
  }

  // repeated uint32 available_players = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->available_players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->available_players(i));
    }
    total_size += 1 * this->available_players_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueDraftStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  draft_order_.MergeFrom(from.draft_order_);
  available_players_.MergeFrom(from.available_players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_current_pick()) {
      set_current_pick(from.current_pick());
    }
    if (from.has_time_remaining()) {
      set_time_remaining(from.time_remaining());
    }
    if (from.has_pending_resume()) {
      set_pending_resume(from.pending_resume());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatus::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueDraftStatus::Swap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftStatus::InternalSwap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  draft_order_.UnsafeArenaSwap(&other->draft_order_);
  std::swap(current_pick_, other->current_pick_);
  std::swap(time_remaining_, other->time_remaining_);
  std::swap(pending_resume_, other->pending_resume_);
  std::swap(completed_, other->completed_);
  available_players_.UnsafeArenaSwap(&other->available_players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueDraftStatus_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueDraftStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftStatus

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueDraftStatus::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.fantasy_league_id)
}

// repeated uint32 draft_order = 2;
int CMsgDOTAFantasyLeagueDraftStatus::draft_order_size() const {
  return draft_order_.size();
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_draft_order() {
  draft_order_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::draft_order(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return draft_order_.Get(index);
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_draft_order(int index, ::google::protobuf::uint32 value) {
  draft_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
}
 void CMsgDOTAFantasyLeagueDraftStatus::add_draft_order(::google::protobuf::uint32 value) {
  draft_order_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::draft_order() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return draft_order_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::mutable_draft_order() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return &draft_order_;
}

// optional uint32 current_pick = 3;
bool CMsgDOTAFantasyLeagueDraftStatus::has_current_pick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_current_pick() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_current_pick() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_current_pick() {
  current_pick_ = 0u;
  clear_has_current_pick();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::current_pick() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.current_pick)
  return current_pick_;
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_current_pick(::google::protobuf::uint32 value) {
  set_has_current_pick();
  current_pick_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.current_pick)
}

// optional uint32 time_remaining = 4;
bool CMsgDOTAFantasyLeagueDraftStatus::has_time_remaining() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_time_remaining() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_time_remaining() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_time_remaining() {
  time_remaining_ = 0u;
  clear_has_time_remaining();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::time_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.time_remaining)
  return time_remaining_;
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_time_remaining(::google::protobuf::uint32 value) {
  set_has_time_remaining();
  time_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.time_remaining)
}

// optional bool pending_resume = 5;
bool CMsgDOTAFantasyLeagueDraftStatus::has_pending_resume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_pending_resume() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_pending_resume() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_pending_resume() {
  pending_resume_ = false;
  clear_has_pending_resume();
}
 bool CMsgDOTAFantasyLeagueDraftStatus::pending_resume() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.pending_resume)
  return pending_resume_;
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_pending_resume(bool value) {
  set_has_pending_resume();
  pending_resume_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.pending_resume)
}

// optional bool completed = 6;
bool CMsgDOTAFantasyLeagueDraftStatus::has_completed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_completed() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_completed() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
 bool CMsgDOTAFantasyLeagueDraftStatus::completed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.completed)
  return completed_;
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.completed)
}

// repeated uint32 available_players = 7;
int CMsgDOTAFantasyLeagueDraftStatus::available_players_size() const {
  return available_players_.size();
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_available_players() {
  available_players_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::available_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return available_players_.Get(index);
}
 void CMsgDOTAFantasyLeagueDraftStatus::set_available_players(int index, ::google::protobuf::uint32 value) {
  available_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.available_players)
}
 void CMsgDOTAFantasyLeagueDraftStatus::add_available_players(::google::protobuf::uint32 value) {
  available_players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueDraftStatus.available_players)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::available_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return available_players_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::mutable_available_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return &available_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kPlayerAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  team_index_ = 0u;
  player_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueDraftPlayerRequest::~CMsgDOTAFantasyLeagueDraftPlayerRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueDraftPlayerRequest_descriptor_;
}

const CMsgDOTAFantasyLeagueDraftPlayerRequest& CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueDraftPlayerRequest* CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeagueDraftPlayerRequest* CMsgDOTAFantasyLeagueDraftPlayerRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftPlayerRequest* n = new CMsgDOTAFantasyLeagueDraftPlayerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeagueDraftPlayerRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, player_account_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueDraftPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_account_id;
        break;
      }

      // optional uint32 player_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 player_account_id = 3;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 player_account_id = 3;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return target;
}

int CMsgDOTAFantasyLeagueDraftPlayerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 player_account_id = 3;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueDraftPlayerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftPlayerRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::Swap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueDraftPlayerRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueDraftPlayerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftPlayerRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerRequest.team_index)
  return team_index_;
}
 void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerRequest.team_index)
}

// optional uint32 player_account_id = 3;
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerRequest.player_account_id)
  return player_account_id_;
}
 void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerRequest.player_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::SUCCESS;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_INVALID_FANTASY_LEAGUE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_FANTASY_LEAGUE_NOT_DRAFTING;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_NOT_OWNERS_TURN;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_INVALID;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_UNAVAILABLE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_NO_VALID_SLOTS;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeagueDraftPlayerResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeagueDraftPlayerResponse::~CMsgDOTAFantasyLeagueDraftPlayerResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_;
}

const CMsgDOTAFantasyLeagueDraftPlayerResponse& CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeagueDraftPlayerResponse* CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeagueDraftPlayerResponse* CMsgDOTAFantasyLeagueDraftPlayerResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftPlayerResponse* n = new CMsgDOTAFantasyLeagueDraftPlayerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeagueDraftPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return target;
}

int CMsgDOTAFantasyLeagueDraftPlayerResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeagueDraftPlayerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftPlayerResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::Swap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeagueDraftPlayerResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeagueDraftPlayerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftPlayerResponse

// optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueDraftPlayerResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeagueDraftPlayerResponse::set_result(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamRosterSwapRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kTimestampFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kSlot1FieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kSlot2FieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamRosterSwapRequest)
}

void CMsgDOTAFantasyTeamRosterSwapRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest(const CMsgDOTAFantasyTeamRosterSwapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterSwapRequest)
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  team_index_ = 0u;
  timestamp_ = 0u;
  slot_1_ = 0u;
  slot_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamRosterSwapRequest::~CMsgDOTAFantasyTeamRosterSwapRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterSwapRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterSwapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterSwapRequest_descriptor_;
}

const CMsgDOTAFantasyTeamRosterSwapRequest& CMsgDOTAFantasyTeamRosterSwapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamRosterSwapRequest* CMsgDOTAFantasyTeamRosterSwapRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamRosterSwapRequest* CMsgDOTAFantasyTeamRosterSwapRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterSwapRequest* n = new CMsgDOTAFantasyTeamRosterSwapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamRosterSwapRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(fantasy_league_id_, slot_2_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamRosterSwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_slot_1;
        break;
      }

      // optional uint32 slot_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_slot_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_1_)));
          set_has_slot_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_slot_2;
        break;
      }

      // optional uint32 slot_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_slot_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_2_)));
          set_has_slot_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamRosterSwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamRosterSwapRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional uint32 slot_1 = 4;
  if (has_slot_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_1(), output);
  }

  // optional uint32 slot_2 = 5;
  if (has_slot_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slot_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamRosterSwapRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterSwapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterSwapRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional uint32 slot_1 = 4;
  if (has_slot_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_1(), target);
  }

  // optional uint32 slot_2 = 5;
  if (has_slot_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slot_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterSwapRequest)
  return target;
}

int CMsgDOTAFantasyTeamRosterSwapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 slot_1 = 4;
    if (has_slot_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_1());
    }

    // optional uint32 slot_2 = 5;
    if (has_slot_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_2());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamRosterSwapRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterSwapRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_slot_1()) {
      set_slot_1(from.slot_1());
    }
    if (from.has_slot_2()) {
      set_slot_2(from.slot_2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::Swap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterSwapRequest::InternalSwap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(slot_1_, other->slot_1_);
  std::swap(slot_2_, other->slot_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterSwapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamRosterSwapRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamRosterSwapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterSwapRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamRosterSwapRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.team_index)
  return team_index_;
}
 void CMsgDOTAFantasyTeamRosterSwapRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.team_index)
}

// optional uint32 timestamp = 3;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.timestamp)
  return timestamp_;
}
 void CMsgDOTAFantasyTeamRosterSwapRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.timestamp)
}

// optional uint32 slot_1 = 4;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_slot_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_slot_1() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_slot_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_slot_1() {
  slot_1_ = 0u;
  clear_has_slot_1();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::slot_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.slot_1)
  return slot_1_;
}
 void CMsgDOTAFantasyTeamRosterSwapRequest::set_slot_1(::google::protobuf::uint32 value) {
  set_has_slot_1();
  slot_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.slot_1)
}

// optional uint32 slot_2 = 5;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_slot_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_slot_2() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_slot_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_slot_2() {
  slot_2_ = 0u;
  clear_has_slot_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::slot_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.slot_2)
  return slot_2_;
}
 void CMsgDOTAFantasyTeamRosterSwapRequest::set_slot_2(::google::protobuf::uint32 value) {
  set_has_slot_2();
  slot_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.slot_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOTS_INVALID;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOT_LOCKED;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterSwapResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamRosterSwapResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamRosterSwapResponse)
}

void CMsgDOTAFantasyTeamRosterSwapResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse(const CMsgDOTAFantasyTeamRosterSwapResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterSwapResponse)
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamRosterSwapResponse::~CMsgDOTAFantasyTeamRosterSwapResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterSwapResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterSwapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_;
}

const CMsgDOTAFantasyTeamRosterSwapResponse& CMsgDOTAFantasyTeamRosterSwapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamRosterSwapResponse* CMsgDOTAFantasyTeamRosterSwapResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamRosterSwapResponse* CMsgDOTAFantasyTeamRosterSwapResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterSwapResponse* n = new CMsgDOTAFantasyTeamRosterSwapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamRosterSwapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamRosterSwapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamRosterSwapResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamRosterSwapResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterSwapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterSwapResponse)
  // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterSwapResponse)
  return target;
}

int CMsgDOTAFantasyTeamRosterSwapResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamRosterSwapResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterSwapResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::Swap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterSwapResponse::InternalSwap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterSwapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamRosterSwapResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamRosterSwapResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterSwapResponse

// optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamRosterSwapResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamRosterSwapResponse::set_result(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kAddAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kDropAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamRosterAddDropRequest)
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest(const CMsgDOTAFantasyTeamRosterAddDropRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterAddDropRequest)
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  team_index_ = 0u;
  add_account_id_ = 0u;
  drop_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamRosterAddDropRequest::~CMsgDOTAFantasyTeamRosterAddDropRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterAddDropRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterAddDropRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterAddDropRequest_descriptor_;
}

const CMsgDOTAFantasyTeamRosterAddDropRequest& CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamRosterAddDropRequest* CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamRosterAddDropRequest* CMsgDOTAFantasyTeamRosterAddDropRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterAddDropRequest* n = new CMsgDOTAFantasyTeamRosterAddDropRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamRosterAddDropRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, drop_account_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamRosterAddDropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_add_account_id;
        break;
      }

      // optional uint32 add_account_id = 5;
      case 5: {
        if (tag == 40) {
         parse_add_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_account_id_)));
          set_has_add_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_drop_account_id;
        break;
      }

      // optional uint32 drop_account_id = 6;
      case 6: {
        if (tag == 48) {
         parse_drop_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_account_id_)));
          set_has_drop_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamRosterAddDropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamRosterAddDropRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 add_account_id = 5;
  if (has_add_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_account_id(), output);
  }

  // optional uint32 drop_account_id = 6;
  if (has_drop_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->drop_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamRosterAddDropRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterAddDropRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterAddDropRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 add_account_id = 5;
  if (has_add_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_account_id(), target);
  }

  // optional uint32 drop_account_id = 6;
  if (has_drop_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->drop_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterAddDropRequest)
  return target;
}

int CMsgDOTAFantasyTeamRosterAddDropRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 add_account_id = 5;
    if (has_add_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_account_id());
    }

    // optional uint32 drop_account_id = 6;
    if (has_drop_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_account_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamRosterAddDropRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterAddDropRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_add_account_id()) {
      set_add_account_id(from.add_account_id());
    }
    if (from.has_drop_account_id()) {
      set_drop_account_id(from.drop_account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::Swap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(add_account_id_, other->add_account_id_);
  std::swap(drop_account_id_, other->drop_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterAddDropRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamRosterAddDropRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamRosterAddDropRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterAddDropRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamRosterAddDropRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.team_index)
  return team_index_;
}
 void CMsgDOTAFantasyTeamRosterAddDropRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.team_index)
}

// optional uint32 add_account_id = 5;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_add_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_add_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_add_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_add_account_id() {
  add_account_id_ = 0u;
  clear_has_add_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::add_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.add_account_id)
  return add_account_id_;
}
 void CMsgDOTAFantasyTeamRosterAddDropRequest::set_add_account_id(::google::protobuf::uint32 value) {
  set_has_add_account_id();
  add_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.add_account_id)
}

// optional uint32 drop_account_id = 6;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_drop_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_drop_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_drop_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_drop_account_id() {
  drop_account_id_ = 0u;
  clear_has_drop_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::drop_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.drop_account_id)
  return drop_account_id_;
}
 void CMsgDOTAFantasyTeamRosterAddDropRequest::set_drop_account_id(::google::protobuf::uint32 value) {
  set_has_drop_account_id();
  drop_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.drop_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_AVAILABLE;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_ON_TEAM;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_TRADE_ALREADY_PENDING;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamRosterAddDropResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamRosterAddDropResponse)
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse(const CMsgDOTAFantasyTeamRosterAddDropResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterAddDropResponse)
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamRosterAddDropResponse::~CMsgDOTAFantasyTeamRosterAddDropResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterAddDropResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterAddDropResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_;
}

const CMsgDOTAFantasyTeamRosterAddDropResponse& CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamRosterAddDropResponse* CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamRosterAddDropResponse* CMsgDOTAFantasyTeamRosterAddDropResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterAddDropResponse* n = new CMsgDOTAFantasyTeamRosterAddDropResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamRosterAddDropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamRosterAddDropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamRosterAddDropResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamRosterAddDropResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterAddDropResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterAddDropResponse)
  // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterAddDropResponse)
  return target;
}

int CMsgDOTAFantasyTeamRosterAddDropResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamRosterAddDropResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterAddDropResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::Swap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterAddDropResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamRosterAddDropResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamRosterAddDropResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterAddDropResponse

// optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamRosterAddDropResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamRosterAddDropResponse::set_result(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamTradesRequest::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamTradesRequest)
}

void CMsgDOTAFantasyTeamTradesRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest(const CMsgDOTAFantasyTeamTradesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradesRequest)
}

void CMsgDOTAFantasyTeamTradesRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamTradesRequest::~CMsgDOTAFantasyTeamTradesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamTradesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradesRequest_descriptor_;
}

const CMsgDOTAFantasyTeamTradesRequest& CMsgDOTAFantasyTeamTradesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamTradesRequest* CMsgDOTAFantasyTeamTradesRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamTradesRequest* CMsgDOTAFantasyTeamTradesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradesRequest* n = new CMsgDOTAFantasyTeamTradesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradesRequest::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamTradesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamTradesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamTradesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamTradesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamTradesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamTradesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradesRequest)
  return target;
}

int CMsgDOTAFantasyTeamTradesRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamTradesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradesRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamTradesRequest::Swap(CMsgDOTAFantasyTeamTradesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesRequest::InternalSwap(CMsgDOTAFantasyTeamTradesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamTradesRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamTradesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamTradesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamTradesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::SUCCESS;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MIN;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamTradesResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kTimestampFieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kOwnerAccountId1FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kPlayerAccountId1FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kPlayerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kStatusFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamTradesResponse.Trade)
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade(const CMsgDOTAFantasyTeamTradesResponse_Trade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradesResponse.Trade)
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  owner_account_id_1_ = 0u;
  owner_account_id_2_ = 0u;
  player_account_id_1_ = 0u;
  player_account_id_2_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamTradesResponse_Trade::~CMsgDOTAFantasyTeamTradesResponse_Trade() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradesResponse.Trade)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesResponse_Trade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradesResponse_Trade_descriptor_;
}

const CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance_ = NULL;

CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse_Trade::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradesResponse_Trade* n = new CMsgDOTAFantasyTeamTradesResponse_Trade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamTradesResponse_Trade*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(timestamp_, status_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamTradesResponse_Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id_1;
        break;
      }

      // optional uint32 owner_account_id_1 = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_account_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_1_)));
          set_has_owner_account_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner_account_id_2;
        break;
      }

      // optional uint32 owner_account_id_2 = 3;
      case 3: {
        if (tag == 24) {
         parse_owner_account_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
          set_has_owner_account_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_account_id_1;
        break;
      }

      // optional uint32 player_account_id_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_player_account_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_1_)));
          set_has_player_account_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_account_id_2;
        break;
      }

      // optional uint32 player_account_id_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_player_account_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_2_)));
          set_has_player_account_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamTradesResponse.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamTradesResponse.Trade)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (has_owner_account_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id_1(), output);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (has_owner_account_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_account_id_2(), output);
  }

  // optional uint32 player_account_id_1 = 4;
  if (has_player_account_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_account_id_1(), output);
  }

  // optional uint32 player_account_id_2 = 5;
  if (has_player_account_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_account_id_2(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamTradesResponse.Trade)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesResponse_Trade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradesResponse.Trade)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (has_owner_account_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (has_owner_account_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_account_id_2(), target);
  }

  // optional uint32 player_account_id_1 = 4;
  if (has_player_account_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_account_id_1(), target);
  }

  // optional uint32 player_account_id_2 = 5;
  if (has_player_account_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_account_id_2(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradesResponse.Trade)
  return target;
}

int CMsgDOTAFantasyTeamTradesResponse_Trade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 owner_account_id_1 = 2;
    if (has_owner_account_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 3;
    if (has_owner_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional uint32 player_account_id_1 = 4;
    if (has_player_account_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id_1());
    }

    // optional uint32 player_account_id_2 = 5;
    if (has_player_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id_2());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamTradesResponse_Trade* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradesResponse_Trade>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_owner_account_id_1()) {
      set_owner_account_id_1(from.owner_account_id_1());
    }
    if (from.has_owner_account_id_2()) {
      set_owner_account_id_2(from.owner_account_id_2());
    }
    if (from.has_player_account_id_1()) {
      set_player_account_id_1(from.player_account_id_1());
    }
    if (from.has_player_account_id_2()) {
      set_player_account_id_2(from.player_account_id_2());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse_Trade::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::Swap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::InternalSwap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(owner_account_id_1_, other->owner_account_id_1_);
  std::swap(owner_account_id_2_, other->owner_account_id_2_);
  std::swap(player_account_id_1_, other->player_account_id_1_);
  std::swap(player_account_id_2_, other->player_account_id_2_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesResponse_Trade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamTradesResponse_Trade_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamTradesResponse_Trade_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamTradesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse::kTradesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamTradesResponse)
}

void CMsgDOTAFantasyTeamTradesResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse(const CMsgDOTAFantasyTeamTradesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradesResponse)
}

void CMsgDOTAFantasyTeamTradesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamTradesResponse::~CMsgDOTAFantasyTeamTradesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamTradesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradesResponse_descriptor_;
}

const CMsgDOTAFantasyTeamTradesResponse& CMsgDOTAFantasyTeamTradesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamTradesResponse* CMsgDOTAFantasyTeamTradesResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamTradesResponse* CMsgDOTAFantasyTeamTradesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradesResponse* n = new CMsgDOTAFantasyTeamTradesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradesResponse::Clear() {
  result_ = 0;
  trades_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamTradesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamTradesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamTradesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trades;
        break;
      }

      // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
      case 2: {
        if (tag == 18) {
         parse_trades:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_trades;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamTradesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamTradesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamTradesResponse)
  // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0, n = this->trades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trades(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamTradesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradesResponse)
  // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0, n = this->trades_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trades(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradesResponse)
  return target;
}

int CMsgDOTAFantasyTeamTradesResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  total_size += 1 * this->trades_size();
  for (int i = 0; i < this->trades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trades(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamTradesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradesResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  trades_.MergeFrom(from.trades_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamTradesResponse::Swap(CMsgDOTAFantasyTeamTradesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesResponse::InternalSwap(CMsgDOTAFantasyTeamTradesResponse* other) {
  std::swap(result_, other->result_);
  trades_.UnsafeArenaSwap(&other->trades_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamTradesResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamTradesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradesResponse_Trade

// optional uint32 timestamp = 1;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.timestamp)
  return timestamp_;
}
 void CMsgDOTAFantasyTeamTradesResponse_Trade::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.timestamp)
}

// optional uint32 owner_account_id_1 = 2;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_owner_account_id_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_owner_account_id_1() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_owner_account_id_1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_owner_account_id_1() {
  owner_account_id_1_ = 0u;
  clear_has_owner_account_id_1();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::owner_account_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_1)
  return owner_account_id_1_;
}
 void CMsgDOTAFantasyTeamTradesResponse_Trade::set_owner_account_id_1(::google::protobuf::uint32 value) {
  set_has_owner_account_id_1();
  owner_account_id_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_1)
}

// optional uint32 owner_account_id_2 = 3;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_owner_account_id_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_owner_account_id_2() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_owner_account_id_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  clear_has_owner_account_id_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_2)
  return owner_account_id_2_;
}
 void CMsgDOTAFantasyTeamTradesResponse_Trade::set_owner_account_id_2(::google::protobuf::uint32 value) {
  set_has_owner_account_id_2();
  owner_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_2)
}

// optional uint32 player_account_id_1 = 4;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_player_account_id_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_player_account_id_1() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_player_account_id_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_player_account_id_1() {
  player_account_id_1_ = 0u;
  clear_has_player_account_id_1();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::player_account_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_1)
  return player_account_id_1_;
}
 void CMsgDOTAFantasyTeamTradesResponse_Trade::set_player_account_id_1(::google::protobuf::uint32 value) {
  set_has_player_account_id_1();
  player_account_id_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_1)
}

// optional uint32 player_account_id_2 = 5;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_player_account_id_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_player_account_id_2() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_player_account_id_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_player_account_id_2() {
  player_account_id_2_ = 0u;
  clear_has_player_account_id_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::player_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_2)
  return player_account_id_2_;
}
 void CMsgDOTAFantasyTeamTradesResponse_Trade::set_player_account_id_2(::google::protobuf::uint32 value) {
  set_has_player_account_id_2();
  player_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_2)
}

// optional uint32 status = 6;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_status() {
  status_ = 0u;
  clear_has_status();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.status)
  return status_;
}
 void CMsgDOTAFantasyTeamTradesResponse_Trade::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.status)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamTradesResponse

// optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamTradesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamTradesResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamTradesResponse::set_result(::CMsgDOTAFantasyTeamTradesResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.result)
}

// repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
int CMsgDOTAFantasyTeamTradesResponse::trades_size() const {
  return trades_.size();
}
void CMsgDOTAFantasyTeamTradesResponse::clear_trades() {
  trades_.Clear();
}
const ::CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Get(index);
}
::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Mutable(index);
}
::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::add_trades() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade >*
CMsgDOTAFantasyTeamTradesResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamTradesResponse.trades)
  return &trades_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade >&
CMsgDOTAFantasyTeamTradesResponse::trades() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamTradeCancelRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kTeamIndex1FieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kTeamIndex2FieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamTradeCancelRequest)
}

void CMsgDOTAFantasyTeamTradeCancelRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest(const CMsgDOTAFantasyTeamTradeCancelRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradeCancelRequest)
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  team_index_1_ = 0u;
  owner_account_id_2_ = 0u;
  team_index_2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamTradeCancelRequest::~CMsgDOTAFantasyTeamTradeCancelRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradeCancelRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradeCancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradeCancelRequest_descriptor_;
}

const CMsgDOTAFantasyTeamTradeCancelRequest& CMsgDOTAFantasyTeamTradeCancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamTradeCancelRequest* CMsgDOTAFantasyTeamTradeCancelRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamTradeCancelRequest* CMsgDOTAFantasyTeamTradeCancelRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradeCancelRequest* n = new CMsgDOTAFantasyTeamTradeCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamTradeCancelRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, team_index_2_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamTradeCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team_index_1;
        break;
      }

      // optional uint32 team_index_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_team_index_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_1_)));
          set_has_team_index_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owner_account_id_2;
        break;
      }

      // optional uint32 owner_account_id_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_owner_account_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
          set_has_owner_account_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_index_2;
        break;
      }

      // optional uint32 team_index_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_team_index_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_2_)));
          set_has_team_index_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamTradeCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamTradeCancelRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index_1 = 3;
  if (has_team_index_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_index_1(), output);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (has_owner_account_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner_account_id_2(), output);
  }

  // optional uint32 team_index_2 = 5;
  if (has_team_index_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_index_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamTradeCancelRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradeCancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradeCancelRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index_1 = 3;
  if (has_team_index_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_index_1(), target);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (has_owner_account_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner_account_id_2(), target);
  }

  // optional uint32 team_index_2 = 5;
  if (has_team_index_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_index_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradeCancelRequest)
  return target;
}

int CMsgDOTAFantasyTeamTradeCancelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index_1 = 3;
    if (has_team_index_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index_1());
    }

    // optional uint32 owner_account_id_2 = 4;
    if (has_owner_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional uint32 team_index_2 = 5;
    if (has_team_index_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index_2());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamTradeCancelRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradeCancelRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_team_index_1()) {
      set_team_index_1(from.team_index_1());
    }
    if (from.has_owner_account_id_2()) {
      set_owner_account_id_2(from.owner_account_id_2());
    }
    if (from.has_team_index_2()) {
      set_team_index_2(from.team_index_2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::Swap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradeCancelRequest::InternalSwap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_1_, other->team_index_1_);
  std::swap(owner_account_id_2_, other->owner_account_id_2_);
  std::swap(team_index_2_, other->team_index_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradeCancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamTradeCancelRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamTradeCancelRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradeCancelRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamTradeCancelRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.fantasy_league_id)
}

// optional uint32 team_index_1 = 3;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_team_index_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_team_index_1() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_team_index_1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_team_index_1() {
  team_index_1_ = 0u;
  clear_has_team_index_1();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::team_index_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_1)
  return team_index_1_;
}
 void CMsgDOTAFantasyTeamTradeCancelRequest::set_team_index_1(::google::protobuf::uint32 value) {
  set_has_team_index_1();
  team_index_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_1)
}

// optional uint32 owner_account_id_2 = 4;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_owner_account_id_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_owner_account_id_2() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_owner_account_id_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  clear_has_owner_account_id_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.owner_account_id_2)
  return owner_account_id_2_;
}
 void CMsgDOTAFantasyTeamTradeCancelRequest::set_owner_account_id_2(::google::protobuf::uint32 value) {
  set_has_owner_account_id_2();
  owner_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.owner_account_id_2)
}

// optional uint32 team_index_2 = 5;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_team_index_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_team_index_2() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_team_index_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_team_index_2() {
  team_index_2_ = 0u;
  clear_has_team_index_2();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::team_index_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_2)
  return team_index_2_;
}
 void CMsgDOTAFantasyTeamTradeCancelRequest::set_team_index_2(::google::protobuf::uint32 value) {
  set_has_team_index_2();
  team_index_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::SUCCESS;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_TRADE;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MIN;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamTradeCancelResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamTradeCancelResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamTradeCancelResponse)
}

void CMsgDOTAFantasyTeamTradeCancelResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse(const CMsgDOTAFantasyTeamTradeCancelResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamTradeCancelResponse)
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamTradeCancelResponse::~CMsgDOTAFantasyTeamTradeCancelResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamTradeCancelResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradeCancelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_;
}

const CMsgDOTAFantasyTeamTradeCancelResponse& CMsgDOTAFantasyTeamTradeCancelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamTradeCancelResponse* CMsgDOTAFantasyTeamTradeCancelResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamTradeCancelResponse* CMsgDOTAFantasyTeamTradeCancelResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradeCancelResponse* n = new CMsgDOTAFantasyTeamTradeCancelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamTradeCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamTradeCancelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamTradeCancelResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamTradeCancelResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradeCancelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamTradeCancelResponse)
  // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamTradeCancelResponse)
  return target;
}

int CMsgDOTAFantasyTeamTradeCancelResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamTradeCancelResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradeCancelResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::Swap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradeCancelResponse::InternalSwap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradeCancelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamTradeCancelResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamTradeCancelResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradeCancelResponse

// optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamTradeCancelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamTradeCancelResponse::set_result(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamRosterRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamRosterRequest)
}

void CMsgDOTAFantasyTeamRosterRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest(const CMsgDOTAFantasyTeamRosterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterRequest)
}

void CMsgDOTAFantasyTeamRosterRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  team_index_ = 0u;
  owner_account_id_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamRosterRequest::~CMsgDOTAFantasyTeamRosterRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamRosterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterRequest_descriptor_;
}

const CMsgDOTAFantasyTeamRosterRequest& CMsgDOTAFantasyTeamRosterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamRosterRequest* CMsgDOTAFantasyTeamRosterRequest::default_instance_ = NULL;

CMsgDOTAFantasyTeamRosterRequest* CMsgDOTAFantasyTeamRosterRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterRequest* n = new CMsgDOTAFantasyTeamRosterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyTeamRosterRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, timestamp_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamRosterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamRosterRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamRosterRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 owner_account_id = 3;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_account_id(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamRosterRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 owner_account_id = 3;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_account_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterRequest)
  return target;
}

int CMsgDOTAFantasyTeamRosterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 owner_account_id = 3;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamRosterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamRosterRequest::Swap(CMsgDOTAFantasyTeamRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterRequest::InternalSwap(CMsgDOTAFantasyTeamRosterRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamRosterRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamRosterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamRosterRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyTeamRosterRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyTeamRosterRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.team_index)
  return team_index_;
}
 void CMsgDOTAFantasyTeamRosterRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.team_index)
}

// optional uint32 owner_account_id = 3;
bool CMsgDOTAFantasyTeamRosterRequest::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyTeamRosterRequest::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.owner_account_id)
}

// optional uint32 timestamp = 4;
bool CMsgDOTAFantasyTeamRosterRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.timestamp)
  return timestamp_;
}
 void CMsgDOTAFantasyTeamRosterRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyTeamRosterResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamRosterResponse::kPlayerAccountIdsFieldNumber;
const int CMsgDOTAFantasyTeamRosterResponse::kPlayerLockedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyTeamRosterResponse)
}

void CMsgDOTAFantasyTeamRosterResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse(const CMsgDOTAFantasyTeamRosterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyTeamRosterResponse)
}

void CMsgDOTAFantasyTeamRosterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyTeamRosterResponse::~CMsgDOTAFantasyTeamRosterResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyTeamRosterResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyTeamRosterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyTeamRosterResponse_descriptor_;
}

const CMsgDOTAFantasyTeamRosterResponse& CMsgDOTAFantasyTeamRosterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyTeamRosterResponse* CMsgDOTAFantasyTeamRosterResponse::default_instance_ = NULL;

CMsgDOTAFantasyTeamRosterResponse* CMsgDOTAFantasyTeamRosterResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterResponse* n = new CMsgDOTAFantasyTeamRosterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterResponse::Clear() {
  result_ = 0;
  player_account_ids_.Clear();
  player_locked_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyTeamRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyTeamRosterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyTeamRosterResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_ids;
        break;
      }

      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_player_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_player_account_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_ids;
        if (input->ExpectTag(24)) goto parse_player_locked;
        break;
      }

      // repeated bool player_locked = 3;
      case 3: {
        if (tag == 24) {
         parse_player_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_player_locked())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_player_locked())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_locked;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyTeamRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyTeamRosterResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyTeamRosterResponse)
  // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0; i < this->player_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_account_ids(i), output);
  }

  // repeated bool player_locked = 3;
  for (int i = 0; i < this->player_locked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->player_locked(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyTeamRosterResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyTeamRosterResponse)
  // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0; i < this->player_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->player_account_ids(i), target);
  }

  // repeated bool player_locked = 3;
  for (int i = 0; i < this->player_locked_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->player_locked(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyTeamRosterResponse)
  return target;
}

int CMsgDOTAFantasyTeamRosterResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated uint32 player_account_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_account_ids(i));
    }
    total_size += 1 * this->player_account_ids_size() + data_size;
  }

  // repeated bool player_locked = 3;
  {
    int data_size = 0;
    data_size = 1 * this->player_locked_size();
    total_size += 1 * this->player_locked_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyTeamRosterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  player_account_ids_.MergeFrom(from.player_account_ids_);
  player_locked_.MergeFrom(from.player_locked_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyTeamRosterResponse::Swap(CMsgDOTAFantasyTeamRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterResponse::InternalSwap(CMsgDOTAFantasyTeamRosterResponse* other) {
  std::swap(result_, other->result_);
  player_account_ids_.UnsafeArenaSwap(&other->player_account_ids_);
  player_locked_.UnsafeArenaSwap(&other->player_locked_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyTeamRosterResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyTeamRosterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterResponse

// optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamRosterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterResponse.result)
  return static_cast< ::CMsgDOTAFantasyTeamRosterResponse_EResult >(result_);
}
 void CMsgDOTAFantasyTeamRosterResponse::set_result(::CMsgDOTAFantasyTeamRosterResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterResponse.result)
}

// repeated uint32 player_account_ids = 2;
int CMsgDOTAFantasyTeamRosterResponse::player_account_ids_size() const {
  return player_account_ids_.size();
}
void CMsgDOTAFantasyTeamRosterResponse::clear_player_account_ids() {
  player_account_ids_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterResponse::player_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return player_account_ids_.Get(index);
}
 void CMsgDOTAFantasyTeamRosterResponse::set_player_account_ids(int index, ::google::protobuf::uint32 value) {
  player_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
}
 void CMsgDOTAFantasyTeamRosterResponse::add_player_account_ids(::google::protobuf::uint32 value) {
  player_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyTeamRosterResponse::player_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return player_account_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyTeamRosterResponse::mutable_player_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return &player_account_ids_;
}

// repeated bool player_locked = 3;
int CMsgDOTAFantasyTeamRosterResponse::player_locked_size() const {
  return player_locked_.size();
}
void CMsgDOTAFantasyTeamRosterResponse::clear_player_locked() {
  player_locked_.Clear();
}
 bool CMsgDOTAFantasyTeamRosterResponse::player_locked(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return player_locked_.Get(index);
}
 void CMsgDOTAFantasyTeamRosterResponse::set_player_locked(int index, bool value) {
  player_locked_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterResponse.player_locked)
}
 void CMsgDOTAFantasyTeamRosterResponse::add_player_locked(bool value) {
  player_locked_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamRosterResponse.player_locked)
}
 const ::google::protobuf::RepeatedField< bool >&
CMsgDOTAFantasyTeamRosterResponse::player_locked() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return player_locked_;
}
 ::google::protobuf::RepeatedField< bool >*
CMsgDOTAFantasyTeamRosterResponse::mutable_player_locked() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return &player_locked_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerHisoricalStatsRequest::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest::~CMsgDOTAFantasyPlayerHisoricalStatsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerHisoricalStatsRequest_descriptor_;
}

const CMsgDOTAFantasyPlayerHisoricalStatsRequest& CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest* CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance_ = NULL;

CMsgDOTAFantasyPlayerHisoricalStatsRequest* CMsgDOTAFantasyPlayerHisoricalStatsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsRequest* n = new CMsgDOTAFantasyPlayerHisoricalStatsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return target;
}

int CMsgDOTAFantasyPlayerHisoricalStatsRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerHisoricalStatsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Swap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerHisoricalStatsRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerHisoricalStatsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerHisoricalStatsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kMatchesFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kLevelsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kAssistsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kLastHitsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kDeniesFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kXppmFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kStunsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kHealingFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedCtor() {
  _cached_size_ = 0;
  matches_ = 0u;
  levels_ = 0;
  kills_ = 0;
  deaths_ = 0;
  assists_ = 0;
  last_hits_ = 0;
  denies_ = 0;
  gpm_ = 0;
  xppm_ = 0;
  stuns_ = 0;
  healing_ = 0;
  tower_kills_ = 0;
  roshan_kills_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_descriptor_;
}

const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance_ = NULL;

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* n = new CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(matches_, gpm_);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(xppm_, score_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matches = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matches_)));
          set_has_matches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_levels;
        break;
      }

      // optional float levels = 2;
      case 2: {
        if (tag == 21) {
         parse_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &levels_)));
          set_has_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_kills;
        break;
      }

      // optional float kills = 3;
      case 3: {
        if (tag == 29) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_deaths;
        break;
      }

      // optional float deaths = 4;
      case 4: {
        if (tag == 37) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_assists;
        break;
      }

      // optional float assists = 5;
      case 5: {
        if (tag == 45) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_last_hits;
        break;
      }

      // optional float last_hits = 6;
      case 6: {
        if (tag == 53) {
         parse_last_hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_hits_)));
          set_has_last_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_denies;
        break;
      }

      // optional float denies = 7;
      case 7: {
        if (tag == 61) {
         parse_denies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denies_)));
          set_has_denies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_gpm;
        break;
      }

      // optional float gpm = 8;
      case 8: {
        if (tag == 69) {
         parse_gpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
          set_has_gpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_xppm;
        break;
      }

      // optional float xppm = 9;
      case 9: {
        if (tag == 77) {
         parse_xppm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
          set_has_xppm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_stuns;
        break;
      }

      // optional float stuns = 10;
      case 10: {
        if (tag == 85) {
         parse_stuns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
          set_has_stuns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_healing;
        break;
      }

      // optional float healing = 11;
      case 11: {
        if (tag == 93) {
         parse_healing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
          set_has_healing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_tower_kills;
        break;
      }

      // optional float tower_kills = 12;
      case 12: {
        if (tag == 101) {
         parse_tower_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tower_kills_)));
          set_has_tower_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_roshan_kills;
        break;
      }

      // optional float roshan_kills = 13;
      case 13: {
        if (tag == 109) {
         parse_roshan_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roshan_kills_)));
          set_has_roshan_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_score;
        break;
      }

      // optional float score = 14;
      case 14: {
        if (tag == 117) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  // optional uint32 matches = 1;
  if (has_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matches(), output);
  }

  // optional float levels = 2;
  if (has_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->levels(), output);
  }

  // optional float kills = 3;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kills(), output);
  }

  // optional float deaths = 4;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->deaths(), output);
  }

  // optional float assists = 5;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->assists(), output);
  }

  // optional float last_hits = 6;
  if (has_last_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->last_hits(), output);
  }

  // optional float denies = 7;
  if (has_denies()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->denies(), output);
  }

  // optional float gpm = 8;
  if (has_gpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->gpm(), output);
  }

  // optional float xppm = 9;
  if (has_xppm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->xppm(), output);
  }

  // optional float stuns = 10;
  if (has_stuns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->stuns(), output);
  }

  // optional float healing = 11;
  if (has_healing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->healing(), output);
  }

  // optional float tower_kills = 12;
  if (has_tower_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tower_kills(), output);
  }

  // optional float roshan_kills = 13;
  if (has_roshan_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->roshan_kills(), output);
  }

  // optional float score = 14;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  // optional uint32 matches = 1;
  if (has_matches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matches(), target);
  }

  // optional float levels = 2;
  if (has_levels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->levels(), target);
  }

  // optional float kills = 3;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kills(), target);
  }

  // optional float deaths = 4;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->deaths(), target);
  }

  // optional float assists = 5;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->assists(), target);
  }

  // optional float last_hits = 6;
  if (has_last_hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->last_hits(), target);
  }

  // optional float denies = 7;
  if (has_denies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->denies(), target);
  }

  // optional float gpm = 8;
  if (has_gpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->gpm(), target);
  }

  // optional float xppm = 9;
  if (has_xppm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->xppm(), target);
  }

  // optional float stuns = 10;
  if (has_stuns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->stuns(), target);
  }

  // optional float healing = 11;
  if (has_healing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->healing(), target);
  }

  // optional float tower_kills = 12;
  if (has_tower_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tower_kills(), target);
  }

  // optional float roshan_kills = 13;
  if (has_roshan_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->roshan_kills(), target);
  }

  // optional float score = 14;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return target;
}

int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 matches = 1;
    if (has_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matches());
    }

    // optional float levels = 2;
    if (has_levels()) {
      total_size += 1 + 4;
    }

    // optional float kills = 3;
    if (has_kills()) {
      total_size += 1 + 4;
    }

    // optional float deaths = 4;
    if (has_deaths()) {
      total_size += 1 + 4;
    }

    // optional float assists = 5;
    if (has_assists()) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 6;
    if (has_last_hits()) {
      total_size += 1 + 4;
    }

    // optional float denies = 7;
    if (has_denies()) {
      total_size += 1 + 4;
    }

    // optional float gpm = 8;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float xppm = 9;
    if (has_xppm()) {
      total_size += 1 + 4;
    }

    // optional float stuns = 10;
    if (has_stuns()) {
      total_size += 1 + 4;
    }

    // optional float healing = 11;
    if (has_healing()) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 12;
    if (has_tower_kills()) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 13;
    if (has_roshan_kills()) {
      total_size += 1 + 4;
    }

    // optional float score = 14;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matches()) {
      set_matches(from.matches());
    }
    if (from.has_levels()) {
      set_levels(from.levels());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_last_hits()) {
      set_last_hits(from.last_hits());
    }
    if (from.has_denies()) {
      set_denies(from.denies());
    }
    if (from.has_gpm()) {
      set_gpm(from.gpm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xppm()) {
      set_xppm(from.xppm());
    }
    if (from.has_stuns()) {
      set_stuns(from.stuns());
    }
    if (from.has_healing()) {
      set_healing(from.healing());
    }
    if (from.has_tower_kills()) {
      set_tower_kills(from.tower_kills());
    }
    if (from.has_roshan_kills()) {
      set_roshan_kills(from.roshan_kills());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  std::swap(matches_, other->matches_);
  std::swap(levels_, other->levels_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gpm_, other->gpm_);
  std::swap(xppm_, other->xppm_);
  std::swap(stuns_, other->stuns_);
  std::swap(healing_, other->healing_);
  std::swap(tower_kills_, other->tower_kills_);
  std::swap(roshan_kills_, other->roshan_kills_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kWeeksFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kStatsPremiumFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kStatsProfessionalFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InitAsDefaultInstance() {
  stats_premium_ = const_cast< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(&::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance());
  stats_professional_ = const_cast< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(&::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance());
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  weeks_ = 0u;
  stats_premium_ = NULL;
  stats_professional_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedDtor() {
  if (this != default_instance_) {
    delete stats_premium_;
    delete stats_professional_;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_descriptor_;
}

const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance_ = NULL;

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* n = new CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(account_id_, weeks_);
    if (has_stats_premium()) {
      if (stats_premium_ != NULL) stats_premium_->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
    }
    if (has_stats_professional()) {
      if (stats_professional_ != NULL) stats_professional_->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weeks;
        break;
      }

      // optional uint32 weeks = 2;
      case 2: {
        if (tag == 16) {
         parse_weeks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeks_)));
          set_has_weeks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stats_premium;
        break;
      }

      // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
      case 4: {
        if (tag == 34) {
         parse_stats_premium:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_premium()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stats_professional;
        break;
      }

      // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
      case 5: {
        if (tag == 42) {
         parse_stats_professional:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_professional()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 weeks = 2;
  if (has_weeks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weeks(), output);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (has_stats_premium()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stats_premium_, output);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (has_stats_professional()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stats_professional_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 weeks = 2;
  if (has_weeks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weeks(), target);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (has_stats_premium()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->stats_premium_, target);
  }

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (has_stats_professional()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->stats_professional_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return target;
}

int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 weeks = 2;
    if (has_weeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeks());
    }

    // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
    if (has_stats_premium()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_premium_);
    }

    // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
    if (has_stats_professional()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_professional_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_weeks()) {
      set_weeks(from.weeks());
    }
    if (from.has_stats_premium()) {
      mutable_stats_premium()->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from.stats_premium());
    }
    if (from.has_stats_professional()) {
      mutable_stats_professional()->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from.stats_professional());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(weeks_, other->weeks_);
  std::swap(stats_premium_, other->stats_premium_);
  std::swap(stats_professional_, other->stats_professional_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse::~CMsgDOTAFantasyPlayerHisoricalStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_;
}

const CMsgDOTAFantasyPlayerHisoricalStatsResponse& CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse* CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance_ = NULL;

CMsgDOTAFantasyPlayerHisoricalStatsResponse* CMsgDOTAFantasyPlayerHisoricalStatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse* n = new CMsgDOTAFantasyPlayerHisoricalStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Clear() {
  result_ = 0;
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
      case 2: {
        if (tag == 18) {
         parse_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return target;
}

int CMsgDOTAFantasyPlayerHisoricalStatsResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  std::swap(result_, other->result_);
  stats_.UnsafeArenaSwap(&other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerHisoricalStatsResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerHisoricalStatsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator

// optional uint32 matches = 1;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_matches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_matches() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_matches() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_matches() {
  matches_ = 0u;
  clear_has_matches();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::matches() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.matches)
  return matches_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_matches(::google::protobuf::uint32 value) {
  set_has_matches();
  matches_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.matches)
}

// optional float levels = 2;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_levels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_levels() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_levels() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_levels() {
  levels_ = 0;
  clear_has_levels();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::levels() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.levels)
  return levels_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_levels(float value) {
  set_has_levels();
  levels_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.levels)
}

// optional float kills = 3;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_kills() {
  kills_ = 0;
  clear_has_kills();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.kills)
  return kills_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_kills(float value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.kills)
}

// optional float deaths = 4;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_deaths() {
  deaths_ = 0;
  clear_has_deaths();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.deaths)
  return deaths_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_deaths(float value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.deaths)
}

// optional float assists = 5;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_assists() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_assists() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_assists() {
  assists_ = 0;
  clear_has_assists();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.assists)
  return assists_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_assists(float value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.assists)
}

// optional float last_hits = 6;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_last_hits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_last_hits() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_last_hits() {
  last_hits_ = 0;
  clear_has_last_hits();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.last_hits)
  return last_hits_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_last_hits(float value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.last_hits)
}

// optional float denies = 7;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_denies() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_denies() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_denies() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_denies() {
  denies_ = 0;
  clear_has_denies();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.denies)
  return denies_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_denies(float value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.denies)
}

// optional float gpm = 8;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_gpm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_gpm() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.gpm)
  return gpm_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.gpm)
}

// optional float xppm = 9;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_xppm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_xppm() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_xppm() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_xppm() {
  xppm_ = 0;
  clear_has_xppm();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::xppm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.xppm)
  return xppm_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_xppm(float value) {
  set_has_xppm();
  xppm_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.xppm)
}

// optional float stuns = 10;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_stuns() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_stuns() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_stuns() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::stuns() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.stuns)
  return stuns_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.stuns)
}

// optional float healing = 11;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_healing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_healing() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_healing() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_healing() {
  healing_ = 0;
  clear_has_healing();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.healing)
  return healing_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_healing(float value) {
  set_has_healing();
  healing_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.healing)
}

// optional float tower_kills = 12;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_tower_kills() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_tower_kills() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_tower_kills() {
  tower_kills_ = 0;
  clear_has_tower_kills();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::tower_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.tower_kills)
  return tower_kills_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_tower_kills(float value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.tower_kills)
}

// optional float roshan_kills = 13;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_roshan_kills() {
  roshan_kills_ = 0;
  clear_has_roshan_kills();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.roshan_kills)
  return roshan_kills_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_roshan_kills(float value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.roshan_kills)
}

// optional float score = 14;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_score() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.score)
  return score_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats

// optional uint32 account_id = 1;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.account_id)
  return account_id_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.account_id)
}

// optional uint32 weeks = 2;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_weeks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_weeks() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_weeks() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_weeks() {
  weeks_ = 0u;
  clear_has_weeks();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::weeks() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.weeks)
  return weeks_;
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_weeks(::google::protobuf::uint32 value) {
  set_has_weeks();
  weeks_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.weeks)
}

// optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_stats_premium() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_stats_premium() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_stats_premium() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_stats_premium() {
  if (stats_premium_ != NULL) stats_premium_->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
  clear_has_stats_premium();
}
const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::stats_premium() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  return stats_premium_ != NULL ? *stats_premium_ : *default_instance_->stats_premium_;
}
::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::mutable_stats_premium() {
  set_has_stats_premium();
  if (stats_premium_ == NULL) {
    stats_premium_ = new ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  return stats_premium_;
}
::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::release_stats_premium() {
  clear_has_stats_premium();
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_premium_;
  stats_premium_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_allocated_stats_premium(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium) {
  delete stats_premium_;
  stats_premium_ = stats_premium;
  if (stats_premium) {
    set_has_stats_premium();
  } else {
    clear_has_stats_premium();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
}

// optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_stats_professional() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_stats_professional() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_stats_professional() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_stats_professional() {
  if (stats_professional_ != NULL) stats_professional_->::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
  clear_has_stats_professional();
}
const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::stats_professional() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  return stats_professional_ != NULL ? *stats_professional_ : *default_instance_->stats_professional_;
}
::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::mutable_stats_professional() {
  set_has_stats_professional();
  if (stats_professional_ == NULL) {
    stats_professional_ = new ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  return stats_professional_;
}
::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::release_stats_professional() {
  clear_has_stats_professional();
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_professional_;
  stats_professional_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_allocated_stats_professional(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional) {
  delete stats_professional_;
  stats_professional_ = stats_professional;
  if (stats_professional) {
    set_has_stats_professional();
  } else {
    clear_has_stats_professional();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerHisoricalStatsResponse

// optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.result)
  return static_cast< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult >(result_);
}
 void CMsgDOTAFantasyPlayerHisoricalStatsResponse::set_result(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.result)
}

// repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
int CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats_size() const {
  return stats_.size();
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_stats() {
  stats_.Clear();
}
const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Get(index);
}
::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Mutable(index);
}
::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >*
CMsgDOTAFantasyPlayerHisoricalStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >&
CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyMessageAdd::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyMessageAdd::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyMessageAdd)
}

void CMsgDOTAFantasyMessageAdd::InitAsDefaultInstance() {
}

CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd(const CMsgDOTAFantasyMessageAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessageAdd)
}

void CMsgDOTAFantasyMessageAdd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyMessageAdd::~CMsgDOTAFantasyMessageAdd() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessageAdd)
  SharedDtor();
}

void CMsgDOTAFantasyMessageAdd::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyMessageAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessageAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyMessageAdd_descriptor_;
}

const CMsgDOTAFantasyMessageAdd& CMsgDOTAFantasyMessageAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyMessageAdd* CMsgDOTAFantasyMessageAdd::default_instance_ = NULL;

CMsgDOTAFantasyMessageAdd* CMsgDOTAFantasyMessageAdd::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessageAdd* n = new CMsgDOTAFantasyMessageAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessageAdd::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    fantasy_league_id_ = 0u;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyMessageAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyMessageAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyMessageAdd.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyMessageAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyMessageAdd)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessageAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyMessageAdd)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyMessageAdd.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyMessageAdd)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessageAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessageAdd)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyMessageAdd.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessageAdd)
  return target;
}

int CMsgDOTAFantasyMessageAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyMessageAdd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessageAdd>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const CMsgDOTAFantasyMessageAdd& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const CMsgDOTAFantasyMessageAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessageAdd::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyMessageAdd::Swap(CMsgDOTAFantasyMessageAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessageAdd::InternalSwap(CMsgDOTAFantasyMessageAdd* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessageAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyMessageAdd_descriptor_;
  metadata.reflection = CMsgDOTAFantasyMessageAdd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessageAdd

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyMessageAdd::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessageAdd::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessageAdd::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessageAdd::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessageAdd::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessageAdd.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyMessageAdd::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessageAdd.fantasy_league_id)
}

// optional string message = 2;
bool CMsgDOTAFantasyMessageAdd::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessageAdd::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessageAdd::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessageAdd::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& CMsgDOTAFantasyMessageAdd::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessageAdd.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyMessageAdd::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessageAdd.message)
}
 void CMsgDOTAFantasyMessageAdd::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyMessageAdd.message)
}
 void CMsgDOTAFantasyMessageAdd::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyMessageAdd.message)
}
 ::std::string* CMsgDOTAFantasyMessageAdd::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyMessageAdd.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyMessageAdd::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyMessageAdd::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyMessageAdd.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyMessagesRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyMessagesRequest::kStartMessageFieldNumber;
const int CMsgDOTAFantasyMessagesRequest::kEndMessageFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyMessagesRequest)
}

void CMsgDOTAFantasyMessagesRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest(const CMsgDOTAFantasyMessagesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessagesRequest)
}

void CMsgDOTAFantasyMessagesRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  start_message_ = 0u;
  end_message_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyMessagesRequest::~CMsgDOTAFantasyMessagesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessagesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyMessagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyMessagesRequest_descriptor_;
}

const CMsgDOTAFantasyMessagesRequest& CMsgDOTAFantasyMessagesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyMessagesRequest* CMsgDOTAFantasyMessagesRequest::default_instance_ = NULL;

CMsgDOTAFantasyMessagesRequest* CMsgDOTAFantasyMessagesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessagesRequest* n = new CMsgDOTAFantasyMessagesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessagesRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyMessagesRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, end_message_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyMessagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_message;
        break;
      }

      // optional uint32 start_message = 2;
      case 2: {
        if (tag == 16) {
         parse_start_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_message_)));
          set_has_start_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_message;
        break;
      }

      // optional uint32 end_message = 3;
      case 3: {
        if (tag == 24) {
         parse_end_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_message_)));
          set_has_end_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyMessagesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyMessagesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 start_message = 2;
  if (has_start_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_message(), output);
  }

  // optional uint32 end_message = 3;
  if (has_end_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyMessagesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessagesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 start_message = 2;
  if (has_start_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_message(), target);
  }

  // optional uint32 end_message = 3;
  if (has_end_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessagesRequest)
  return target;
}

int CMsgDOTAFantasyMessagesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 start_message = 2;
    if (has_start_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_message());
    }

    // optional uint32 end_message = 3;
    if (has_end_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyMessagesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessagesRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const CMsgDOTAFantasyMessagesRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_start_message()) {
      set_start_message(from.start_message());
    }
    if (from.has_end_message()) {
      set_end_message(from.end_message());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const CMsgDOTAFantasyMessagesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyMessagesRequest::Swap(CMsgDOTAFantasyMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesRequest::InternalSwap(CMsgDOTAFantasyMessagesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(start_message_, other->start_message_);
  std::swap(end_message_, other->end_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyMessagesRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyMessagesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessagesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyMessagesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessagesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessagesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessagesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyMessagesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesRequest.fantasy_league_id)
}

// optional uint32 start_message = 2;
bool CMsgDOTAFantasyMessagesRequest::has_start_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessagesRequest::set_has_start_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessagesRequest::clear_has_start_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessagesRequest::clear_start_message() {
  start_message_ = 0u;
  clear_has_start_message();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesRequest::start_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesRequest.start_message)
  return start_message_;
}
 void CMsgDOTAFantasyMessagesRequest::set_start_message(::google::protobuf::uint32 value) {
  set_has_start_message();
  start_message_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesRequest.start_message)
}

// optional uint32 end_message = 3;
bool CMsgDOTAFantasyMessagesRequest::has_end_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyMessagesRequest::set_has_end_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyMessagesRequest::clear_has_end_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyMessagesRequest::clear_end_message() {
  end_message_ = 0u;
  clear_has_end_message();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesRequest::end_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesRequest.end_message)
  return end_message_;
}
 void CMsgDOTAFantasyMessagesRequest::set_end_message(::google::protobuf::uint32 value) {
  set_has_end_message();
  end_message_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesRequest.end_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyMessagesResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyMessagesResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyMessagesResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::SUCCESS;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MIN;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MAX;
const int CMsgDOTAFantasyMessagesResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyMessagesResponse_Message::kMessageIdFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kMessageFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kAuthorAccountIdFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyMessagesResponse.Message)
}

void CMsgDOTAFantasyMessagesResponse_Message::InitAsDefaultInstance() {
}

CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message(const CMsgDOTAFantasyMessagesResponse_Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessagesResponse.Message)
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_id_ = 0u;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_account_id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyMessagesResponse_Message::~CMsgDOTAFantasyMessagesResponse_Message() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessagesResponse.Message)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesResponse_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyMessagesResponse_Message_descriptor_;
}

const CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse_Message::default_instance_ = NULL;

CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse_Message::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessagesResponse_Message* n = new CMsgDOTAFantasyMessagesResponse_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessagesResponse_Message::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyMessagesResponse_Message*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(message_id_, time_);
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyMessagesResponse_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyMessagesResponse.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyMessagesResponse.Message.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_author_account_id;
        break;
      }

      // optional uint32 author_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_author_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &author_account_id_)));
          set_has_author_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyMessagesResponse.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyMessagesResponse.Message)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessagesResponse_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyMessagesResponse.Message)
  // optional uint32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyMessagesResponse.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 author_account_id = 3;
  if (has_author_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->author_account_id(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyMessagesResponse.Message)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesResponse_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessagesResponse.Message)
  // optional uint32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyMessagesResponse.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 author_account_id = 3;
  if (has_author_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->author_account_id(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessagesResponse.Message)
  return target;
}

int CMsgDOTAFantasyMessagesResponse_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 author_account_id = 3;
    if (has_author_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->author_account_id());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyMessagesResponse_Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessagesResponse_Message>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_author_account_id()) {
      set_author_account_id(from.author_account_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse_Message::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyMessagesResponse_Message::Swap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesResponse_Message::InternalSwap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  std::swap(message_id_, other->message_id_);
  message_.Swap(&other->message_);
  std::swap(author_account_id_, other->author_account_id_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesResponse_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyMessagesResponse_Message_descriptor_;
  metadata.reflection = CMsgDOTAFantasyMessagesResponse_Message_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyMessagesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyMessagesResponse::kMessagesFieldNumber;
const int CMsgDOTAFantasyMessagesResponse::kNumTotalMessagesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyMessagesResponse)
}

void CMsgDOTAFantasyMessagesResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse(const CMsgDOTAFantasyMessagesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyMessagesResponse)
}

void CMsgDOTAFantasyMessagesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  num_total_messages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyMessagesResponse::~CMsgDOTAFantasyMessagesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyMessagesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyMessagesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyMessagesResponse_descriptor_;
}

const CMsgDOTAFantasyMessagesResponse& CMsgDOTAFantasyMessagesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyMessagesResponse* CMsgDOTAFantasyMessagesResponse::default_instance_ = NULL;

CMsgDOTAFantasyMessagesResponse* CMsgDOTAFantasyMessagesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessagesResponse* n = new CMsgDOTAFantasyMessagesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessagesResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyMessagesResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, num_total_messages_);

#undef ZR_HELPER_
#undef ZR_

  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyMessagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyMessagesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyMessagesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
      case 2: {
        if (tag == 18) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_num_total_messages;
        break;
      }

      // optional uint32 num_total_messages = 3;
      case 3: {
        if (tag == 24) {
         parse_num_total_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_total_messages_)));
          set_has_num_total_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyMessagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyMessagesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyMessagesResponse)
  // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // optional uint32 num_total_messages = 3;
  if (has_num_total_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_total_messages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyMessagesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyMessagesResponse)
  // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  // optional uint32 num_total_messages = 3;
  if (has_num_total_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_total_messages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyMessagesResponse)
  return target;
}

int CMsgDOTAFantasyMessagesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 num_total_messages = 3;
    if (has_num_total_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_total_messages());
    }

  }
  // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyMessagesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessagesResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const CMsgDOTAFantasyMessagesResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_num_total_messages()) {
      set_num_total_messages(from.num_total_messages());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const CMsgDOTAFantasyMessagesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyMessagesResponse::Swap(CMsgDOTAFantasyMessagesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesResponse::InternalSwap(CMsgDOTAFantasyMessagesResponse* other) {
  std::swap(result_, other->result_);
  messages_.UnsafeArenaSwap(&other->messages_);
  std::swap(num_total_messages_, other->num_total_messages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyMessagesResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyMessagesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessagesResponse_Message

// optional uint32 message_id = 1;
bool CMsgDOTAFantasyMessagesResponse_Message::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse_Message::message_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.message_id)
  return message_id_;
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.message_id)
}

// optional string message = 2;
bool CMsgDOTAFantasyMessagesResponse_Message::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& CMsgDOTAFantasyMessagesResponse_Message::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.message)
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyMessagesResponse.Message.message)
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyMessagesResponse.Message.message)
}
 ::std::string* CMsgDOTAFantasyMessagesResponse_Message::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyMessagesResponse.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyMessagesResponse_Message::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyMessagesResponse.Message.message)
}

// optional uint32 author_account_id = 3;
bool CMsgDOTAFantasyMessagesResponse_Message::has_author_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_author_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_author_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_author_account_id() {
  author_account_id_ = 0u;
  clear_has_author_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse_Message::author_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.author_account_id)
  return author_account_id_;
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_author_account_id(::google::protobuf::uint32 value) {
  set_has_author_account_id();
  author_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.author_account_id)
}

// optional uint32 time = 4;
bool CMsgDOTAFantasyMessagesResponse_Message::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse_Message::time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.time)
  return time_;
}
 void CMsgDOTAFantasyMessagesResponse_Message::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.time)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyMessagesResponse

// optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyMessagesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessagesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.result)
  return static_cast< ::CMsgDOTAFantasyMessagesResponse_EResult >(result_);
}
 void CMsgDOTAFantasyMessagesResponse::set_result(::CMsgDOTAFantasyMessagesResponse_EResult value) {
  assert(::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.result)
}

// repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
int CMsgDOTAFantasyMessagesResponse::messages_size() const {
  return messages_.size();
}
void CMsgDOTAFantasyMessagesResponse::clear_messages() {
  messages_.Clear();
}
const ::CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Get(index);
}
::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Mutable(index);
}
::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message >*
CMsgDOTAFantasyMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyMessagesResponse.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message >&
CMsgDOTAFantasyMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyMessagesResponse.messages)
  return messages_;
}

// optional uint32 num_total_messages = 3;
bool CMsgDOTAFantasyMessagesResponse::has_num_total_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyMessagesResponse::set_has_num_total_messages() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyMessagesResponse::clear_has_num_total_messages() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyMessagesResponse::clear_num_total_messages() {
  num_total_messages_ = 0u;
  clear_has_num_total_messages();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse::num_total_messages() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.num_total_messages)
  return num_total_messages_;
}
 void CMsgDOTAFantasyMessagesResponse::set_num_total_messages(::google::protobuf::uint32 value) {
  set_has_num_total_messages();
  num_total_messages_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.num_total_messages)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyRemoveOwner::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyRemoveOwner::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyRemoveOwner::kTeamIndexFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyRemoveOwner)
}

void CMsgDOTAFantasyRemoveOwner::InitAsDefaultInstance() {
}

CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner(const CMsgDOTAFantasyRemoveOwner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyRemoveOwner)
}

void CMsgDOTAFantasyRemoveOwner::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  owner_account_id_ = 0u;
  team_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyRemoveOwner::~CMsgDOTAFantasyRemoveOwner() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyRemoveOwner)
  SharedDtor();
}

void CMsgDOTAFantasyRemoveOwner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyRemoveOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyRemoveOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyRemoveOwner_descriptor_;
}

const CMsgDOTAFantasyRemoveOwner& CMsgDOTAFantasyRemoveOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyRemoveOwner* CMsgDOTAFantasyRemoveOwner::default_instance_ = NULL;

CMsgDOTAFantasyRemoveOwner* CMsgDOTAFantasyRemoveOwner::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyRemoveOwner* n = new CMsgDOTAFantasyRemoveOwner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyRemoveOwner::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyRemoveOwner*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, team_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyRemoveOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyRemoveOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team_index;
        break;
      }

      // optional uint32 team_index = 3;
      case 3: {
        if (tag == 24) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyRemoveOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyRemoveOwner)
  return false;
#undef DO_
}

void CMsgDOTAFantasyRemoveOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyRemoveOwner)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 team_index = 3;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyRemoveOwner)
}

::google::protobuf::uint8* CMsgDOTAFantasyRemoveOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyRemoveOwner)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 team_index = 3;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyRemoveOwner)
  return target;
}

int CMsgDOTAFantasyRemoveOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 team_index = 3;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyRemoveOwner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyRemoveOwner>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const CMsgDOTAFantasyRemoveOwner& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const CMsgDOTAFantasyRemoveOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwner::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyRemoveOwner::Swap(CMsgDOTAFantasyRemoveOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyRemoveOwner::InternalSwap(CMsgDOTAFantasyRemoveOwner* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyRemoveOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyRemoveOwner_descriptor_;
  metadata.reflection = CMsgDOTAFantasyRemoveOwner_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyRemoveOwner

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyRemoveOwner::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyRemoveOwner::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyRemoveOwner::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyRemoveOwner::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyRemoveOwner::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwner.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyRemoveOwner::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwner.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyRemoveOwner::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyRemoveOwner::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyRemoveOwner::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyRemoveOwner::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyRemoveOwner::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwner.owner_account_id)
  return owner_account_id_;
}
 void CMsgDOTAFantasyRemoveOwner::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwner.owner_account_id)
}

// optional uint32 team_index = 3;
bool CMsgDOTAFantasyRemoveOwner::has_team_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyRemoveOwner::set_has_team_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyRemoveOwner::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyRemoveOwner::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyRemoveOwner::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwner.team_index)
  return team_index_;
}
 void CMsgDOTAFantasyRemoveOwner::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwner.team_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::SUCCESS;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NOT_A_MEMBER;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MIN;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MAX;
const int CMsgDOTAFantasyRemoveOwnerResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyRemoveOwnerResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyRemoveOwnerResponse)
}

void CMsgDOTAFantasyRemoveOwnerResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse(const CMsgDOTAFantasyRemoveOwnerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyRemoveOwnerResponse)
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyRemoveOwnerResponse::~CMsgDOTAFantasyRemoveOwnerResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyRemoveOwnerResponse)
  SharedDtor();
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyRemoveOwnerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyRemoveOwnerResponse_descriptor_;
}

const CMsgDOTAFantasyRemoveOwnerResponse& CMsgDOTAFantasyRemoveOwnerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyRemoveOwnerResponse* CMsgDOTAFantasyRemoveOwnerResponse::default_instance_ = NULL;

CMsgDOTAFantasyRemoveOwnerResponse* CMsgDOTAFantasyRemoveOwnerResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyRemoveOwnerResponse* n = new CMsgDOTAFantasyRemoveOwnerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyRemoveOwnerResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyRemoveOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyRemoveOwnerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyRemoveOwnerResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyRemoveOwnerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyRemoveOwnerResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyRemoveOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyRemoveOwnerResponse)
  // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyRemoveOwnerResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyRemoveOwnerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyRemoveOwnerResponse)
  // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyRemoveOwnerResponse)
  return target;
}

int CMsgDOTAFantasyRemoveOwnerResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyRemoveOwnerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyRemoveOwnerResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwnerResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyRemoveOwnerResponse::Swap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyRemoveOwnerResponse::InternalSwap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyRemoveOwnerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyRemoveOwnerResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyRemoveOwnerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyRemoveOwnerResponse

// optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyRemoveOwnerResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyRemoveOwnerResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyRemoveOwnerResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyRemoveOwnerResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwnerResponse.result)
  return static_cast< ::CMsgDOTAFantasyRemoveOwnerResponse_EResult >(result_);
}
 void CMsgDOTAFantasyRemoveOwnerResponse::set_result(::CMsgDOTAFantasyRemoveOwnerResponse_EResult value) {
  assert(::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwnerResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyScheduledMatchesRequest::kFantasyLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyScheduledMatchesRequest)
}

void CMsgDOTAFantasyScheduledMatchesRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest(const CMsgDOTAFantasyScheduledMatchesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyScheduledMatchesRequest)
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyScheduledMatchesRequest::~CMsgDOTAFantasyScheduledMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyScheduledMatchesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyScheduledMatchesRequest_descriptor_;
}

const CMsgDOTAFantasyScheduledMatchesRequest& CMsgDOTAFantasyScheduledMatchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyScheduledMatchesRequest* CMsgDOTAFantasyScheduledMatchesRequest::default_instance_ = NULL;

CMsgDOTAFantasyScheduledMatchesRequest* CMsgDOTAFantasyScheduledMatchesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyScheduledMatchesRequest* n = new CMsgDOTAFantasyScheduledMatchesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyScheduledMatchesRequest::Clear() {
  fantasy_league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyScheduledMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyScheduledMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyScheduledMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyScheduledMatchesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyScheduledMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyScheduledMatchesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyScheduledMatchesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyScheduledMatchesRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyScheduledMatchesRequest)
  return target;
}

int CMsgDOTAFantasyScheduledMatchesRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyScheduledMatchesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyScheduledMatchesRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyScheduledMatchesRequest::Swap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesRequest::InternalSwap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyScheduledMatchesRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyScheduledMatchesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyScheduledMatchesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyScheduledMatchesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyScheduledMatchesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyScheduledMatchesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::SUCCESS;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MIN;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MAX;
const int CMsgDOTAFantasyScheduledMatchesResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kTimestampFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kTeamIdsFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kLeagueIdsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InitAsDefaultInstance() {
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::~CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_descriptor_;
}

const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance_ = NULL;

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* n = new CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Clear() {
  timestamp_ = 0u;
  team_ids_.Clear();
  league_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_ids;
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_team_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_team_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_ids;
        if (input->ExpectTag(24)) goto parse_league_ids;
        break;
      }

      // repeated uint32 league_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_league_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_league_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_league_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_league_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return false;
#undef DO_
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0; i < this->team_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  // repeated uint32 league_ids = 3;
  for (int i = 0; i < this->league_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->league_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0; i < this->team_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->team_ids(i), target);
  }

  // repeated uint32 league_ids = 3;
  for (int i = 0; i < this->league_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->league_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return target;
}

int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::ByteSize() const {
  int total_size = 0;

  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  // repeated uint32 team_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->team_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->team_ids(i));
    }
    total_size += 1 * this->team_ids_size() + data_size;
  }

  // repeated uint32 league_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->league_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->league_ids(i));
    }
    total_size += 1 * this->league_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  team_ids_.MergeFrom(from.team_ids_);
  league_ids_.MergeFrom(from.league_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Swap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  std::swap(timestamp_, other->timestamp_);
  team_ids_.UnsafeArenaSwap(&other->team_ids_);
  league_ids_.UnsafeArenaSwap(&other->league_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_descriptor_;
  metadata.reflection = CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyScheduledMatchesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse::kScheduledMatchDaysFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyScheduledMatchesResponse)
}

void CMsgDOTAFantasyScheduledMatchesResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse(const CMsgDOTAFantasyScheduledMatchesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyScheduledMatchesResponse)
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyScheduledMatchesResponse::~CMsgDOTAFantasyScheduledMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyScheduledMatchesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyScheduledMatchesResponse_descriptor_;
}

const CMsgDOTAFantasyScheduledMatchesResponse& CMsgDOTAFantasyScheduledMatchesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyScheduledMatchesResponse* CMsgDOTAFantasyScheduledMatchesResponse::default_instance_ = NULL;

CMsgDOTAFantasyScheduledMatchesResponse* CMsgDOTAFantasyScheduledMatchesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyScheduledMatchesResponse* n = new CMsgDOTAFantasyScheduledMatchesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyScheduledMatchesResponse::Clear() {
  result_ = 0;
  scheduled_match_days_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyScheduledMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyScheduledMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyScheduledMatchesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scheduled_match_days;
        break;
      }

      // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
      case 2: {
        if (tag == 18) {
         parse_scheduled_match_days:
          DO_(input->IncrementRecursionDepth());
         parse_loop_scheduled_match_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_scheduled_match_days()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_scheduled_match_days;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyScheduledMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyScheduledMatchesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyScheduledMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyScheduledMatchesResponse)
  // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0, n = this->scheduled_match_days_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scheduled_match_days(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyScheduledMatchesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyScheduledMatchesResponse)
  // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0, n = this->scheduled_match_days_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scheduled_match_days(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyScheduledMatchesResponse)
  return target;
}

int CMsgDOTAFantasyScheduledMatchesResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  total_size += 1 * this->scheduled_match_days_size();
  for (int i = 0; i < this->scheduled_match_days_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scheduled_match_days(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyScheduledMatchesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyScheduledMatchesResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  scheduled_match_days_.MergeFrom(from.scheduled_match_days_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse::Swap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesResponse::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  std::swap(result_, other->result_);
  scheduled_match_days_.UnsafeArenaSwap(&other->scheduled_match_days_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyScheduledMatchesResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyScheduledMatchesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays

// optional uint32 timestamp = 1;
bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.timestamp)
  return timestamp_;
}
 void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.timestamp)
}

// repeated uint32 team_ids = 2;
int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids_size() const {
  return team_ids_.size();
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_team_ids() {
  team_ids_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return team_ids_.Get(index);
}
 void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
}
 void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return team_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return &team_ids_;
}

// repeated uint32 league_ids = 3;
int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids_size() const {
  return league_ids_.size();
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_league_ids() {
  league_ids_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return league_ids_.Get(index);
}
 void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_league_ids(int index, ::google::protobuf::uint32 value) {
  league_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
}
 void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::add_league_ids(::google::protobuf::uint32 value) {
  league_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return league_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::mutable_league_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return &league_ids_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyScheduledMatchesResponse

// optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyScheduledMatchesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyScheduledMatchesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.result)
  return static_cast< ::CMsgDOTAFantasyScheduledMatchesResponse_EResult >(result_);
}
 void CMsgDOTAFantasyScheduledMatchesResponse::set_result(::CMsgDOTAFantasyScheduledMatchesResponse_EResult value) {
  assert(::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.result)
}

// repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
int CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days_size() const {
  return scheduled_match_days_.size();
}
void CMsgDOTAFantasyScheduledMatchesResponse::clear_scheduled_match_days() {
  scheduled_match_days_.Clear();
}
const ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Get(index);
}
::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::mutable_scheduled_match_days(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Mutable(index);
}
::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::add_scheduled_match_days() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >*
CMsgDOTAFantasyScheduledMatchesResponse::mutable_scheduled_match_days() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return &scheduled_match_days_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >&
CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyLeaveLeagueRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeaveLeagueRequest::kFantasyTeamIndexFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeaveLeagueRequest)
}

void CMsgDOTAFantasyLeaveLeagueRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest(const CMsgDOTAFantasyLeaveLeagueRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeaveLeagueRequest)
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  fantasy_team_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeaveLeagueRequest::~CMsgDOTAFantasyLeaveLeagueRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeaveLeagueRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeaveLeagueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeaveLeagueRequest_descriptor_;
}

const CMsgDOTAFantasyLeaveLeagueRequest& CMsgDOTAFantasyLeaveLeagueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeaveLeagueRequest* CMsgDOTAFantasyLeaveLeagueRequest::default_instance_ = NULL;

CMsgDOTAFantasyLeaveLeagueRequest* CMsgDOTAFantasyLeaveLeagueRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeaveLeagueRequest* n = new CMsgDOTAFantasyLeaveLeagueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeaveLeagueRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyLeaveLeagueRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, fantasy_team_index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeaveLeagueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeaveLeagueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_team_index;
        break;
      }

      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (tag == 16) {
         parse_fantasy_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
          set_has_fantasy_team_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeaveLeagueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeaveLeagueRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeaveLeagueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeaveLeagueRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 fantasy_team_index = 2;
  if (has_fantasy_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeaveLeagueRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeaveLeagueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeaveLeagueRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (has_fantasy_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeaveLeagueRequest)
  return target;
}

int CMsgDOTAFantasyLeaveLeagueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 fantasy_team_index = 2;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeaveLeagueRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeaveLeagueRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_fantasy_team_index()) {
      set_fantasy_team_index(from.fantasy_team_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeaveLeagueRequest::Swap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeaveLeagueRequest::InternalSwap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeaveLeagueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeaveLeagueRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeaveLeagueRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeaveLeagueRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeaveLeagueRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeaveLeagueRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeaveLeagueRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyLeaveLeagueRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_league_id)
}

// optional uint32 fantasy_team_index = 2;
bool CMsgDOTAFantasyLeaveLeagueRequest::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeaveLeagueRequest::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyLeaveLeagueRequest::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_team_index)
  return fantasy_team_index_;
}
 void CMsgDOTAFantasyLeaveLeagueRequest::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_team_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::SUCCESS;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_NOT_MEMBER;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_LEAGUE_NOT_FOUND;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_DRAFT_ACTIVE;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MIN;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MAX;
const int CMsgDOTAFantasyLeaveLeagueResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyLeaveLeagueResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyLeaveLeagueResponse)
}

void CMsgDOTAFantasyLeaveLeagueResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse(const CMsgDOTAFantasyLeaveLeagueResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLeaveLeagueResponse)
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyLeaveLeagueResponse::~CMsgDOTAFantasyLeaveLeagueResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLeaveLeagueResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeaveLeagueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyLeaveLeagueResponse_descriptor_;
}

const CMsgDOTAFantasyLeaveLeagueResponse& CMsgDOTAFantasyLeaveLeagueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyLeaveLeagueResponse* CMsgDOTAFantasyLeaveLeagueResponse::default_instance_ = NULL;

CMsgDOTAFantasyLeaveLeagueResponse* CMsgDOTAFantasyLeaveLeagueResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeaveLeagueResponse* n = new CMsgDOTAFantasyLeaveLeagueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeaveLeagueResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyLeaveLeagueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyLeaveLeagueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyLeaveLeagueResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyLeaveLeagueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyLeaveLeagueResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeaveLeagueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyLeaveLeagueResponse)
  // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyLeaveLeagueResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeaveLeagueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLeaveLeagueResponse)
  // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLeaveLeagueResponse)
  return target;
}

int CMsgDOTAFantasyLeaveLeagueResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyLeaveLeagueResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeaveLeagueResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyLeaveLeagueResponse::Swap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeaveLeagueResponse::InternalSwap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeaveLeagueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyLeaveLeagueResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyLeaveLeagueResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeaveLeagueResponse

// optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeaveLeagueResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeaveLeagueResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeaveLeagueResponse.result)
  return static_cast< ::CMsgDOTAFantasyLeaveLeagueResponse_EResult >(result_);
}
 void CMsgDOTAFantasyLeaveLeagueResponse::set_result(::CMsgDOTAFantasyLeaveLeagueResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeaveLeagueResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kEndTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
  player_account_id_ = 0u;
  start_time_ = 0u;
  end_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerScoreDetailsRequest::~CMsgDOTAFantasyPlayerScoreDetailsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreDetailsRequest_descriptor_;
}

const CMsgDOTAFantasyPlayerScoreDetailsRequest& CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerScoreDetailsRequest* CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance_ = NULL;

CMsgDOTAFantasyPlayerScoreDetailsRequest* CMsgDOTAFantasyPlayerScoreDetailsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreDetailsRequest* n = new CMsgDOTAFantasyPlayerScoreDetailsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerScoreDetailsRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fantasy_league_id_, end_time_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerScoreDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
          set_has_fantasy_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_id;
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (tag == 24) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return target;
}

int CMsgDOTAFantasyPlayerScoreDetailsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerScoreDetailsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreDetailsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_league_id()) {
      set_fantasy_league_id(from.fantasy_league_id());
    }
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::Swap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerScoreDetailsRequest_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerScoreDetailsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreDetailsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.fantasy_league_id)
}

// optional uint32 player_account_id = 2;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.player_account_id)
  return player_account_id_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.player_account_id)
}

// optional uint32 start_time = 3;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.start_time)
  return start_time_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.start_time)
}

// optional uint32 end_time = 4;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.end_time)
  return end_time_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor_;
}
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_NOT_MEMBER;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesNumFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kLeagueTierFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamLogoFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamNameFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kStatsFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOwnedByFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kBenchedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InitAsDefaultInstance() {
  stats_ = const_cast< ::CMsgFantasyLeagueScoring*>(&::CMsgFantasyLeagueScoring::default_instance());
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  series_id_ = 0u;
  series_num_ = 0u;
  series_type_ = 0u;
  league_tier_ = 0u;
  league_id_ = 0u;
  opposing_team_id_ = 0u;
  opposing_team_logo_ = GOOGLE_ULONGLONG(0);
  opposing_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_ = NULL;
  owned_by_ = 0u;
  benched_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::~CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedDtor() {
  opposing_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stats_;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_descriptor_;
}

const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance_ = NULL;

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* n = new CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(match_id_, opposing_team_logo_);
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(owned_by_, benched_);
    if (has_opposing_team_name()) {
      opposing_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::CMsgFantasyLeagueScoring::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 2;
      case 2: {
        if (tag == 16) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_series_num;
        break;
      }

      // optional uint32 series_num = 3;
      case 3: {
        if (tag == 24) {
         parse_series_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_num_)));
          set_has_series_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 4;
      case 4: {
        if (tag == 32) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_league_tier;
        break;
      }

      // optional uint32 league_tier = 5;
      case 5: {
        if (tag == 40) {
         parse_league_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_tier_)));
          set_has_league_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 6;
      case 6: {
        if (tag == 48) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_opposing_team_id;
        break;
      }

      // optional uint32 opposing_team_id = 7;
      case 7: {
        if (tag == 56) {
         parse_opposing_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opposing_team_id_)));
          set_has_opposing_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_opposing_team_logo;
        break;
      }

      // optional uint64 opposing_team_logo = 8;
      case 8: {
        if (tag == 64) {
         parse_opposing_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opposing_team_logo_)));
          set_has_opposing_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_opposing_team_name;
        break;
      }

      // optional string opposing_team_name = 9;
      case 9: {
        if (tag == 74) {
         parse_opposing_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opposing_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opposing_team_name().data(), this->opposing_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stats;
        break;
      }

      // optional .CMsgFantasyLeagueScoring stats = 10;
      case 10: {
        if (tag == 82) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_owned_by;
        break;
      }

      // optional uint32 owned_by = 11;
      case 11: {
        if (tag == 88) {
         parse_owned_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owned_by_)));
          set_has_owned_by();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_benched;
        break;
      }

      // optional bool benched = 12;
      case 12: {
        if (tag == 96) {
         parse_benched:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &benched_)));
          set_has_benched();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 series_id = 2;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->series_id(), output);
  }

  // optional uint32 series_num = 3;
  if (has_series_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series_num(), output);
  }

  // optional uint32 series_type = 4;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->series_type(), output);
  }

  // optional uint32 league_tier = 5;
  if (has_league_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_tier(), output);
  }

  // optional uint32 league_id = 6;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->league_id(), output);
  }

  // optional uint32 opposing_team_id = 7;
  if (has_opposing_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opposing_team_id(), output);
  }

  // optional uint64 opposing_team_logo = 8;
  if (has_opposing_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->opposing_team_logo(), output);
  }

  // optional string opposing_team_name = 9;
  if (has_opposing_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opposing_team_name().data(), this->opposing_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->opposing_team_name(), output);
  }

  // optional .CMsgFantasyLeagueScoring stats = 10;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->stats_, output);
  }

  // optional uint32 owned_by = 11;
  if (has_owned_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->owned_by(), output);
  }

  // optional bool benched = 12;
  if (has_benched()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->benched(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 series_id = 2;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->series_id(), target);
  }

  // optional uint32 series_num = 3;
  if (has_series_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series_num(), target);
  }

  // optional uint32 series_type = 4;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->series_type(), target);
  }

  // optional uint32 league_tier = 5;
  if (has_league_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_tier(), target);
  }

  // optional uint32 league_id = 6;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->league_id(), target);
  }

  // optional uint32 opposing_team_id = 7;
  if (has_opposing_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opposing_team_id(), target);
  }

  // optional uint64 opposing_team_logo = 8;
  if (has_opposing_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->opposing_team_logo(), target);
  }

  // optional string opposing_team_name = 9;
  if (has_opposing_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opposing_team_name().data(), this->opposing_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->opposing_team_name(), target);
  }

  // optional .CMsgFantasyLeagueScoring stats = 10;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->stats_, target);
  }

  // optional uint32 owned_by = 11;
  if (has_owned_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->owned_by(), target);
  }

  // optional bool benched = 12;
  if (has_benched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->benched(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return target;
}

int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 series_id = 2;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_num = 3;
    if (has_series_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_num());
    }

    // optional uint32 series_type = 4;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 league_tier = 5;
    if (has_league_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_tier());
    }

    // optional uint32 league_id = 6;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 opposing_team_id = 7;
    if (has_opposing_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opposing_team_id());
    }

    // optional uint64 opposing_team_logo = 8;
    if (has_opposing_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opposing_team_logo());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string opposing_team_name = 9;
    if (has_opposing_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opposing_team_name());
    }

    // optional .CMsgFantasyLeagueScoring stats = 10;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

    // optional uint32 owned_by = 11;
    if (has_owned_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owned_by());
    }

    // optional bool benched = 12;
    if (has_benched()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_series_num()) {
      set_series_num(from.series_num());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_league_tier()) {
      set_league_tier(from.league_tier());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_opposing_team_id()) {
      set_opposing_team_id(from.opposing_team_id());
    }
    if (from.has_opposing_team_logo()) {
      set_opposing_team_logo(from.opposing_team_logo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opposing_team_name()) {
      set_has_opposing_team_name();
      opposing_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opposing_team_name_);
    }
    if (from.has_stats()) {
      mutable_stats()->::CMsgFantasyLeagueScoring::MergeFrom(from.stats());
    }
    if (from.has_owned_by()) {
      set_owned_by(from.owned_by());
    }
    if (from.has_benched()) {
      set_benched(from.benched());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(series_id_, other->series_id_);
  std::swap(series_num_, other->series_num_);
  std::swap(series_type_, other->series_type_);
  std::swap(league_tier_, other->league_tier_);
  std::swap(league_id_, other->league_id_);
  std::swap(opposing_team_id_, other->opposing_team_id_);
  std::swap(opposing_team_logo_, other->opposing_team_logo_);
  opposing_team_name_.Swap(&other->opposing_team_name_);
  std::swap(stats_, other->stats_);
  std::swap(owned_by_, other->owned_by_);
  std::swap(benched_, other->benched_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::InitAsDefaultInstance() {
}

CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAFantasyPlayerScoreDetailsResponse::~CMsgDOTAFantasyPlayerScoreDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_;
}

const CMsgDOTAFantasyPlayerScoreDetailsResponse& CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAFantasyPlayerScoreDetailsResponse* CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance_ = NULL;

CMsgDOTAFantasyPlayerScoreDetailsResponse* CMsgDOTAFantasyPlayerScoreDetailsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreDetailsResponse* n = new CMsgDOTAFantasyPlayerScoreDetailsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::Clear() {
  result_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return target;
}

int CMsgDOTAFantasyPlayerScoreDetailsResponse::ByteSize() const {
  int total_size = 0;

  // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreDetailsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  std::swap(result_, other->result_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAFantasyPlayerScoreDetailsResponse_descriptor_;
  metadata.reflection = CMsgDOTAFantasyPlayerScoreDetailsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData

// optional uint64 match_id = 1;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.match_id)
  return match_id_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.match_id)
}

// optional uint32 series_id = 2;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_series_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_id)
  return series_id_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_id)
}

// optional uint32 series_num = 3;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_series_num() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_series_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_num() {
  series_num_ = 0u;
  clear_has_series_num();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_num)
  return series_num_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_num(::google::protobuf::uint32 value) {
  set_has_series_num();
  series_num_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_num)
}

// optional uint32 series_type = 4;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_series_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_type)
  return series_type_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_type)
}

// optional uint32 league_tier = 5;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_league_tier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_league_tier() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_league_tier() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_league_tier() {
  league_tier_ = 0u;
  clear_has_league_tier();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::league_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_tier)
  return league_tier_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_league_tier(::google::protobuf::uint32 value) {
  set_has_league_tier();
  league_tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_tier)
}

// optional uint32 league_id = 6;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_league_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_league_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_id)
  return league_id_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_id)
}

// optional uint32 opposing_team_id = 7;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_opposing_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_opposing_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_id() {
  opposing_team_id_ = 0u;
  clear_has_opposing_team_id();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_id)
  return opposing_team_id_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_id(::google::protobuf::uint32 value) {
  set_has_opposing_team_id();
  opposing_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_id)
}

// optional uint64 opposing_team_logo = 8;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_opposing_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_opposing_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_logo() {
  opposing_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_opposing_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_logo)
  return opposing_team_logo_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_logo(::google::protobuf::uint64 value) {
  set_has_opposing_team_logo();
  opposing_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_logo)
}

// optional string opposing_team_name = 9;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_opposing_team_name() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_opposing_team_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_name() {
  opposing_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opposing_team_name();
}
 const ::std::string& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  return opposing_team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const ::std::string& value) {
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const char* value) {
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const char* value, size_t size) {
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
 ::std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::mutable_opposing_team_name() {
  set_has_opposing_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  return opposing_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::release_opposing_team_name() {
  clear_has_opposing_team_name();
  return opposing_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_allocated_opposing_team_name(::std::string* opposing_team_name) {
  if (opposing_team_name != NULL) {
    set_has_opposing_team_name();
  } else {
    clear_has_opposing_team_name();
  }
  opposing_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opposing_team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}

// optional .CMsgFantasyLeagueScoring stats = 10;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_stats() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_stats() {
  if (stats_ != NULL) stats_->::CMsgFantasyLeagueScoring::Clear();
  clear_has_stats();
}
const ::CMsgFantasyLeagueScoring& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::stats() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
::CMsgFantasyLeagueScoring* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::CMsgFantasyLeagueScoring;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.stats)
  return stats_;
}
::CMsgFantasyLeagueScoring* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::release_stats() {
  clear_has_stats();
  ::CMsgFantasyLeagueScoring* temp = stats_;
  stats_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_allocated_stats(::CMsgFantasyLeagueScoring* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.stats)
}

// optional uint32 owned_by = 11;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_owned_by() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_owned_by() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_owned_by() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_owned_by() {
  owned_by_ = 0u;
  clear_has_owned_by();
}
 ::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::owned_by() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.owned_by)
  return owned_by_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_owned_by(::google::protobuf::uint32 value) {
  set_has_owned_by();
  owned_by_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.owned_by)
}

// optional bool benched = 12;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_benched() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_benched() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_benched() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_benched() {
  benched_ = false;
  clear_has_benched();
}
 bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::benched() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.benched)
  return benched_;
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_benched(bool value) {
  set_has_benched();
  benched_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.benched)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerScoreDetailsResponse

// optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerScoreDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.result)
  return static_cast< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult >(result_);
}
 void CMsgDOTAFantasyPlayerScoreDetailsResponse::set_result(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.result)
}

// repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
int CMsgDOTAFantasyPlayerScoreDetailsResponse::data_size() const {
  return data_.size();
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_data() {
  data_.Clear();
}
const ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Get(index);
}
::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Mutable(index);
}
::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::add_data() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >*
CMsgDOTAFantasyPlayerScoreDetailsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >&
CMsgDOTAFantasyPlayerScoreDetailsResponse::data() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournament_Team::kTeamIdFieldNumber;
const int CMsgDOTATournament_Team::kTeamNameFieldNumber;
const int CMsgDOTATournament_Team::kTeamAbbrevFieldNumber;
const int CMsgDOTATournament_Team::kPlayersFieldNumber;
const int CMsgDOTATournament_Team::kSeedFieldNumber;
const int CMsgDOTATournament_Team::kTeamLogoFieldNumber;
const int CMsgDOTATournament_Team::kCountryCodeFieldNumber;
const int CMsgDOTATournament_Team::kNodeOrStateFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament_Team::CMsgDOTATournament_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::InitAsDefaultInstance() {
}

CMsgDOTATournament_Team::CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_abbrev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seed_ = 0u;
  team_logo_ = GOOGLE_ULONGLONG(0);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_or_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament_Team::~CMsgDOTATournament_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Team)
  SharedDtor();
}

void CMsgDOTATournament_Team::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_abbrev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_Team_descriptor_;
}

const CMsgDOTATournament_Team& CMsgDOTATournament_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTATournament_Team* CMsgDOTATournament_Team::default_instance_ = NULL;

CMsgDOTATournament_Team* CMsgDOTATournament_Team::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament_Team* n = new CMsgDOTATournament_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament_Team::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTATournament_Team*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247u) {
    ZR_(team_id_, seed_);
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_team_abbrev()) {
      team_abbrev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    team_logo_ = GOOGLE_ULONGLONG(0);
    if (has_country_code()) {
      country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    node_or_state_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTATournament_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (tag == 18) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTATournament.Team.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_abbrev;
        break;
      }

      // optional string team_abbrev = 3;
      case 3: {
        if (tag == 26) {
         parse_team_abbrev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_abbrev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_abbrev().data(), this->team_abbrev().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTATournament.Team.team_abbrev");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated uint32 players = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seed;
        break;
      }

      // optional uint32 seed = 5;
      case 5: {
        if (tag == 40) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_logo;
        break;
      }

      // optional uint64 team_logo = 6;
      case 6: {
        if (tag == 48) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_country_code;
        break;
      }

      // optional string country_code = 7;
      case 7: {
        if (tag == 58) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTATournament.Team.country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_node_or_state;
        break;
      }

      // optional uint32 node_or_state = 8;
      case 8: {
        if (tag == 64) {
         parse_node_or_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_or_state_)));
          set_has_node_or_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament.Team)
  return false;
#undef DO_
}

void CMsgDOTATournament_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament.Team)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional string team_abbrev = 3;
  if (has_team_abbrev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_abbrev().data(), this->team_abbrev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.team_abbrev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_abbrev(), output);
  }

  // repeated uint32 players = 4 [packed = true];
  if (this->players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_players_cached_byte_size_);
  }
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->players(i), output);
  }

  // optional uint32 seed = 5;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seed(), output);
  }

  // optional uint64 team_logo = 6;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->team_logo(), output);
  }

  // optional string country_code = 7;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_code(), output);
  }

  // optional uint32 node_or_state = 8;
  if (has_node_or_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->node_or_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament.Team)
}

::google::protobuf::uint8* CMsgDOTATournament_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Team)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional string team_abbrev = 3;
  if (has_team_abbrev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_abbrev().data(), this->team_abbrev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.team_abbrev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_abbrev(), target);
  }

  // repeated uint32 players = 4 [packed = true];
  if (this->players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _players_cached_byte_size_, target);
  }
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->players(i), target);
  }

  // optional uint32 seed = 5;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seed(), target);
  }

  // optional uint64 team_logo = 6;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->team_logo(), target);
  }

  // optional string country_code = 7;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_code(), target);
  }

  // optional uint32 node_or_state = 8;
  if (has_node_or_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->node_or_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Team)
  return target;
}

int CMsgDOTATournament_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 247u) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_abbrev = 3;
    if (has_team_abbrev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_abbrev());
    }

    // optional uint32 seed = 5;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional uint64 team_logo = 6;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional string country_code = 7;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional uint32 node_or_state = 8;
    if (has_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_or_state());
    }

  }
  // repeated uint32 players = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->players(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _players_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Team::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTATournament_Team* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament_Team>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Team::MergeFrom(const CMsgDOTATournament_Team& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_team_abbrev()) {
      set_has_team_abbrev();
      team_abbrev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_abbrev_);
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_country_code()) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (from.has_node_or_state()) {
      set_node_or_state(from.node_or_state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTATournament_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Team::CopyFrom(const CMsgDOTATournament_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Team::IsInitialized() const {

  return true;
}

void CMsgDOTATournament_Team::Swap(CMsgDOTATournament_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Team::InternalSwap(CMsgDOTATournament_Team* other) {
  std::swap(team_id_, other->team_id_);
  team_name_.Swap(&other->team_name_);
  team_abbrev_.Swap(&other->team_abbrev_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(seed_, other->seed_);
  std::swap(team_logo_, other->team_logo_);
  country_code_.Swap(&other->country_code_);
  std::swap(node_or_state_, other->node_or_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_Team_descriptor_;
  metadata.reflection = CMsgDOTATournament_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournament_Game::kGameIdFieldNumber;
const int CMsgDOTATournament_Game::kGoodTeamIdFieldNumber;
const int CMsgDOTATournament_Game::kBadTeamIdFieldNumber;
const int CMsgDOTATournament_Game::kGoodTeamSeedFieldNumber;
const int CMsgDOTATournament_Game::kBadTeamSeedFieldNumber;
const int CMsgDOTATournament_Game::kLobbyIdFieldNumber;
const int CMsgDOTATournament_Game::kMatchIdFieldNumber;
const int CMsgDOTATournament_Game::kGameNameFieldNumber;
const int CMsgDOTATournament_Game::kLiveStreamFieldNumber;
const int CMsgDOTATournament_Game::kMessageFieldNumber;
const int CMsgDOTATournament_Game::kResultsFinalFieldNumber;
const int CMsgDOTATournament_Game::kStateFieldNumber;
const int CMsgDOTATournament_Game::kNodeIdFieldNumber;
const int CMsgDOTATournament_Game::kStartTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament_Game::CMsgDOTATournament_Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::InitAsDefaultInstance() {
}

CMsgDOTATournament_Game::CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_id_ = 0u;
  good_team_id_ = 0u;
  bad_team_id_ = 0u;
  good_team_seed_ = 0u;
  bad_team_seed_ = 0u;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  match_id_ = GOOGLE_ULONGLONG(0);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  live_stream_ = false;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  results_final_ = false;
  state_ = 0;
  node_id_ = 0u;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament_Game::~CMsgDOTATournament_Game() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Game)
  SharedDtor();
}

void CMsgDOTATournament_Game::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_Game_descriptor_;
}

const CMsgDOTATournament_Game& CMsgDOTATournament_Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTATournament_Game* CMsgDOTATournament_Game::default_instance_ = NULL;

CMsgDOTATournament_Game* CMsgDOTATournament_Game::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament_Game* n = new CMsgDOTATournament_Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament_Game::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTATournament_Game*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(game_id_, match_id_);
    bad_team_seed_ = 0u;
    if (has_game_name()) {
      game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(live_stream_, results_final_);
    ZR_(state_, start_time_);
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTATournament_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_good_team_id;
        break;
      }

      // optional uint32 good_team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_good_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_team_id_)));
          set_has_good_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bad_team_id;
        break;
      }

      // optional uint32 bad_team_id = 3;
      case 3: {
        if (tag == 24) {
         parse_bad_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bad_team_id_)));
          set_has_bad_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lobby_id;
        break;
      }

      // optional fixed64 lobby_id = 4;
      case 4: {
        if (tag == 33) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 5;
      case 5: {
        if (tag == 40) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_game_name;
        break;
      }

      // optional string game_name = 6;
      case 6: {
        if (tag == 50) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTATournament.Game.game_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_live_stream;
        break;
      }

      // optional bool live_stream = 7;
      case 7: {
        if (tag == 56) {
         parse_live_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &live_stream_)));
          set_has_live_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_message;
        break;
      }

      // optional string message = 9;
      case 9: {
        if (tag == 74) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgDOTATournament.Game.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_results_final;
        break;
      }

      // optional bool results_final = 10;
      case 10: {
        if (tag == 80) {
         parse_results_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &results_final_)));
          set_has_results_final();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_good_team_seed;
        break;
      }

      // optional uint32 good_team_seed = 12;
      case 12: {
        if (tag == 96) {
         parse_good_team_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &good_team_seed_)));
          set_has_good_team_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bad_team_seed;
        break;
      }

      // optional uint32 bad_team_seed = 13;
      case 13: {
        if (tag == 104) {
         parse_bad_team_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bad_team_seed_)));
          set_has_bad_team_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_state;
        break;
      }

      // optional .ETournamentGameState state = 14 [default = k_ETournamentGameState_Unknown];
      case 14: {
        if (tag == 112) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentGameState_IsValid(value)) {
            set_state(static_cast< ::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_node_id;
        break;
      }

      // optional uint32 node_id = 15;
      case 15: {
        if (tag == 120) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 16;
      case 16: {
        if (tag == 128) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament.Game)
  return false;
#undef DO_
}

void CMsgDOTATournament_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament.Game)
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 good_team_id = 2;
  if (has_good_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->good_team_id(), output);
  }

  // optional uint32 bad_team_id = 3;
  if (has_bad_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bad_team_id(), output);
  }

  // optional fixed64 lobby_id = 4;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->lobby_id(), output);
  }

  // optional uint64 match_id = 5;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  // optional string game_name = 6;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Game.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_name(), output);
  }

  // optional bool live_stream = 7;
  if (has_live_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->live_stream(), output);
  }

  // optional string message = 9;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Game.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->message(), output);
  }

  // optional bool results_final = 10;
  if (has_results_final()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->results_final(), output);
  }

  // optional uint32 good_team_seed = 12;
  if (has_good_team_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->good_team_seed(), output);
  }

  // optional uint32 bad_team_seed = 13;
  if (has_bad_team_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bad_team_seed(), output);
  }

  // optional .ETournamentGameState state = 14 [default = k_ETournamentGameState_Unknown];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->state(), output);
  }

  // optional uint32 node_id = 15;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->node_id(), output);
  }

  // optional uint32 start_time = 16;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament.Game)
}

::google::protobuf::uint8* CMsgDOTATournament_Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Game)
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 good_team_id = 2;
  if (has_good_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->good_team_id(), target);
  }

  // optional uint32 bad_team_id = 3;
  if (has_bad_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bad_team_id(), target);
  }

  // optional fixed64 lobby_id = 4;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->lobby_id(), target);
  }

  // optional uint64 match_id = 5;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  // optional string game_name = 6;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Game.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_name(), target);
  }

  // optional bool live_stream = 7;
  if (has_live_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->live_stream(), target);
  }

  // optional string message = 9;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Game.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->message(), target);
  }

  // optional bool results_final = 10;
  if (has_results_final()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->results_final(), target);
  }

  // optional uint32 good_team_seed = 12;
  if (has_good_team_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->good_team_seed(), target);
  }

  // optional uint32 bad_team_seed = 13;
  if (has_bad_team_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->bad_team_seed(), target);
  }

  // optional .ETournamentGameState state = 14 [default = k_ETournamentGameState_Unknown];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->state(), target);
  }

  // optional uint32 node_id = 15;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->node_id(), target);
  }

  // optional uint32 start_time = 16;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Game)
  return target;
}

int CMsgDOTATournament_Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 good_team_id = 2;
    if (has_good_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good_team_id());
    }

    // optional uint32 bad_team_id = 3;
    if (has_bad_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bad_team_id());
    }

    // optional uint32 good_team_seed = 12;
    if (has_good_team_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->good_team_seed());
    }

    // optional uint32 bad_team_seed = 13;
    if (has_bad_team_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bad_team_seed());
    }

    // optional fixed64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional string game_name = 6;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool live_stream = 7;
    if (has_live_stream()) {
      total_size += 1 + 1;
    }

    // optional string message = 9;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool results_final = 10;
    if (has_results_final()) {
      total_size += 1 + 1;
    }

    // optional .ETournamentGameState state = 14 [default = k_ETournamentGameState_Unknown];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 node_id = 15;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 start_time = 16;
    if (has_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Game::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTATournament_Game* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament_Game>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Game::MergeFrom(const CMsgDOTATournament_Game& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_good_team_id()) {
      set_good_team_id(from.good_team_id());
    }
    if (from.has_bad_team_id()) {
      set_bad_team_id(from.bad_team_id());
    }
    if (from.has_good_team_seed()) {
      set_good_team_seed(from.good_team_seed());
    }
    if (from.has_bad_team_seed()) {
      set_bad_team_seed(from.bad_team_seed());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_game_name()) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_live_stream()) {
      set_live_stream(from.live_stream());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_results_final()) {
      set_results_final(from.results_final());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTATournament_Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Game::CopyFrom(const CMsgDOTATournament_Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Game::IsInitialized() const {

  return true;
}

void CMsgDOTATournament_Game::Swap(CMsgDOTATournament_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Game::InternalSwap(CMsgDOTATournament_Game* other) {
  std::swap(game_id_, other->game_id_);
  std::swap(good_team_id_, other->good_team_id_);
  std::swap(bad_team_id_, other->bad_team_id_);
  std::swap(good_team_seed_, other->good_team_seed_);
  std::swap(bad_team_seed_, other->bad_team_seed_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(match_id_, other->match_id_);
  game_name_.Swap(&other->game_name_);
  std::swap(live_stream_, other->live_stream_);
  message_.Swap(&other->message_);
  std::swap(results_final_, other->results_final_);
  std::swap(state_, other->state_);
  std::swap(node_id_, other->node_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament_Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_Game_descriptor_;
  metadata.reflection = CMsgDOTATournament_Game_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournament_Node::kNodeIdFieldNumber;
const int CMsgDOTATournament_Node::kTeamSeedAFieldNumber;
const int CMsgDOTATournament_Node::kTeamSeedBFieldNumber;
const int CMsgDOTATournament_Node::kWinnerNodeFieldNumber;
const int CMsgDOTATournament_Node::kLoserNodeFieldNumber;
const int CMsgDOTATournament_Node::kSeriesTypeFieldNumber;
const int CMsgDOTATournament_Node::kNodeStateFieldNumber;
const int CMsgDOTATournament_Node::kSeriesIdFieldNumber;
const int CMsgDOTATournament_Node::kStartTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament_Node::CMsgDOTATournament_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::InitAsDefaultInstance() {
}

CMsgDOTATournament_Node::CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0u;
  team_seed_a_ = 0u;
  team_seed_b_ = 0u;
  winner_node_ = 0u;
  loser_node_ = 0u;
  series_type_ = 0u;
  node_state_ = 0;
  series_id_ = 0u;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament_Node::~CMsgDOTATournament_Node() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Node)
  SharedDtor();
}

void CMsgDOTATournament_Node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_Node_descriptor_;
}

const CMsgDOTATournament_Node& CMsgDOTATournament_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTATournament_Node* CMsgDOTATournament_Node::default_instance_ = NULL;

CMsgDOTATournament_Node* CMsgDOTATournament_Node::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament_Node* n = new CMsgDOTATournament_Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament_Node::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTATournament_Node*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(node_id_, series_id_);
  }
  start_time_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTATournament_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_seed_a;
        break;
      }

      // optional uint32 team_seed_a = 2;
      case 2: {
        if (tag == 16) {
         parse_team_seed_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_seed_a_)));
          set_has_team_seed_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team_seed_b;
        break;
      }

      // optional uint32 team_seed_b = 3;
      case 3: {
        if (tag == 24) {
         parse_team_seed_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_seed_b_)));
          set_has_team_seed_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_winner_node;
        break;
      }

      // optional uint32 winner_node = 4;
      case 4: {
        if (tag == 32) {
         parse_winner_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_node_)));
          set_has_winner_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loser_node;
        break;
      }

      // optional uint32 loser_node = 5;
      case 5: {
        if (tag == 40) {
         parse_loser_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loser_node_)));
          set_has_loser_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 7;
      case 7: {
        if (tag == 56) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_node_state;
        break;
      }

      // optional .ETournamentNodeState node_state = 8 [default = k_ETournamentNodeState_Unknown];
      case 8: {
        if (tag == 64) {
         parse_node_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentNodeState_IsValid(value)) {
            set_node_state(static_cast< ::ETournamentNodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_series_id;
        break;
      }

      // optional uint32 series_id = 9;
      case 9: {
        if (tag == 72) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 16;
      case 16: {
        if (tag == 128) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament.Node)
  return false;
#undef DO_
}

void CMsgDOTATournament_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament.Node)
  // optional uint32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional uint32 team_seed_a = 2;
  if (has_team_seed_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_seed_a(), output);
  }

  // optional uint32 team_seed_b = 3;
  if (has_team_seed_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_seed_b(), output);
  }

  // optional uint32 winner_node = 4;
  if (has_winner_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winner_node(), output);
  }

  // optional uint32 loser_node = 5;
  if (has_loser_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->loser_node(), output);
  }

  // optional uint32 series_type = 7;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_type(), output);
  }

  // optional .ETournamentNodeState node_state = 8 [default = k_ETournamentNodeState_Unknown];
  if (has_node_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->node_state(), output);
  }

  // optional uint32 series_id = 9;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->series_id(), output);
  }

  // optional uint32 start_time = 16;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament.Node)
}

::google::protobuf::uint8* CMsgDOTATournament_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Node)
  // optional uint32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional uint32 team_seed_a = 2;
  if (has_team_seed_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_seed_a(), target);
  }

  // optional uint32 team_seed_b = 3;
  if (has_team_seed_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_seed_b(), target);
  }

  // optional uint32 winner_node = 4;
  if (has_winner_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winner_node(), target);
  }

  // optional uint32 loser_node = 5;
  if (has_loser_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->loser_node(), target);
  }

  // optional uint32 series_type = 7;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_type(), target);
  }

  // optional .ETournamentNodeState node_state = 8 [default = k_ETournamentNodeState_Unknown];
  if (has_node_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->node_state(), target);
  }

  // optional uint32 series_id = 9;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->series_id(), target);
  }

  // optional uint32 start_time = 16;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Node)
  return target;
}

int CMsgDOTATournament_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 team_seed_a = 2;
    if (has_team_seed_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_seed_a());
    }

    // optional uint32 team_seed_b = 3;
    if (has_team_seed_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_seed_b());
    }

    // optional uint32 winner_node = 4;
    if (has_winner_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_node());
    }

    // optional uint32 loser_node = 5;
    if (has_loser_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loser_node());
    }

    // optional uint32 series_type = 7;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional .ETournamentNodeState node_state = 8 [default = k_ETournamentNodeState_Unknown];
    if (has_node_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_state());
    }

    // optional uint32 series_id = 9;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

  }
  // optional uint32 start_time = 16;
  if (has_start_time()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Node::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTATournament_Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament_Node>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Node::MergeFrom(const CMsgDOTATournament_Node& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_team_seed_a()) {
      set_team_seed_a(from.team_seed_a());
    }
    if (from.has_team_seed_b()) {
      set_team_seed_b(from.team_seed_b());
    }
    if (from.has_winner_node()) {
      set_winner_node(from.winner_node());
    }
    if (from.has_loser_node()) {
      set_loser_node(from.loser_node());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_node_state()) {
      set_node_state(from.node_state());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTATournament_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Node::CopyFrom(const CMsgDOTATournament_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Node::IsInitialized() const {

  return true;
}

void CMsgDOTATournament_Node::Swap(CMsgDOTATournament_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Node::InternalSwap(CMsgDOTATournament_Node* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(team_seed_a_, other->team_seed_a_);
  std::swap(team_seed_b_, other->team_seed_b_);
  std::swap(winner_node_, other->winner_node_);
  std::swap(loser_node_, other->loser_node_);
  std::swap(series_type_, other->series_type_);
  std::swap(node_state_, other->node_state_);
  std::swap(series_id_, other->series_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_Node_descriptor_;
  metadata.reflection = CMsgDOTATournament_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournament::kTeamsFieldNumber;
const int CMsgDOTATournament::kGamesFieldNumber;
const int CMsgDOTATournament::kGidFieldNumber;
const int CMsgDOTATournament::kTournamentIdFieldNumber;
const int CMsgDOTATournament::kTournamentTypeFieldNumber;
const int CMsgDOTATournament::kTournamentTemplateFieldNumber;
const int CMsgDOTATournament::kLeagueIdFieldNumber;
const int CMsgDOTATournament::kStartTimeFieldNumber;
const int CMsgDOTATournament::kStateFieldNumber;
const int CMsgDOTATournament::kNodesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament::CMsgDOTATournament()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament)
}

void CMsgDOTATournament::InitAsDefaultInstance() {
}

CMsgDOTATournament::CMsgDOTATournament(const CMsgDOTATournament& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament)
}

void CMsgDOTATournament::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  tournament_id_ = 0u;
  tournament_type_ = 0;
  tournament_template_ = 0;
  league_id_ = 0u;
  start_time_ = 0u;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament::~CMsgDOTATournament() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament)
  SharedDtor();
}

void CMsgDOTATournament::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_descriptor_;
}

const CMsgDOTATournament& CMsgDOTATournament::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTATournament* CMsgDOTATournament::default_instance_ = NULL;

CMsgDOTATournament* CMsgDOTATournament::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament* n = new CMsgDOTATournament;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTATournament*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 252u) {
    ZR_(gid_, start_time_);
  }
  state_ = 0;

#undef ZR_HELPER_
#undef ZR_

  teams_.Clear();
  games_.Clear();
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTATournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTATournament.Team teams = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_teams;
        if (input->ExpectTag(18)) goto parse_loop_games;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTATournament.Game games = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_games;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // optional uint64 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 4;
      case 4: {
        if (tag == 32) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tournament_type;
        break;
      }

      // optional .ETournamentType tournament_type = 5 [default = k_ETournamentType_Unknown];
      case 5: {
        if (tag == 40) {
         parse_tournament_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentType_IsValid(value)) {
            set_tournament_type(static_cast< ::ETournamentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tournament_template;
        break;
      }

      // optional .ETournamentTemplate tournament_template = 6 [default = k_ETournamentTemplate_None];
      case 6: {
        if (tag == 48) {
         parse_tournament_template:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentTemplate_IsValid(value)) {
            set_tournament_template(static_cast< ::ETournamentTemplate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 7;
      case 7: {
        if (tag == 56) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 8;
      case 8: {
        if (tag == 64) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional .ETournamentState state = 9 [default = k_ETournamentState_Unknown];
      case 9: {
        if (tag == 72) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentState_IsValid(value)) {
            set_state(static_cast< ::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_nodes;
        break;
      }

      // repeated .CMsgDOTATournament.Node nodes = 10;
      case 10: {
        if (tag == 82) {
         parse_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament)
  return false;
#undef DO_
}

void CMsgDOTATournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament)
  // repeated .CMsgDOTATournament.Team teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  // repeated .CMsgDOTATournament.Game games = 2;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->games(i), output);
  }

  // optional uint64 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gid(), output);
  }

  // optional uint32 tournament_id = 4;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tournament_id(), output);
  }

  // optional .ETournamentType tournament_type = 5 [default = k_ETournamentType_Unknown];
  if (has_tournament_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tournament_type(), output);
  }

  // optional .ETournamentTemplate tournament_template = 6 [default = k_ETournamentTemplate_None];
  if (has_tournament_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tournament_template(), output);
  }

  // optional uint32 league_id = 7;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->league_id(), output);
  }

  // optional uint32 start_time = 8;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->start_time(), output);
  }

  // optional .ETournamentState state = 9 [default = k_ETournamentState_Unknown];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->state(), output);
  }

  // repeated .CMsgDOTATournament.Node nodes = 10;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament)
}

::google::protobuf::uint8* CMsgDOTATournament::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament)
  // repeated .CMsgDOTATournament.Team teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  // repeated .CMsgDOTATournament.Game games = 2;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->games(i), target);
  }

  // optional uint64 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gid(), target);
  }

  // optional uint32 tournament_id = 4;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tournament_id(), target);
  }

  // optional .ETournamentType tournament_type = 5 [default = k_ETournamentType_Unknown];
  if (has_tournament_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tournament_type(), target);
  }

  // optional .ETournamentTemplate tournament_template = 6 [default = k_ETournamentTemplate_None];
  if (has_tournament_template()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tournament_template(), target);
  }

  // optional uint32 league_id = 7;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->league_id(), target);
  }

  // optional uint32 start_time = 8;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->start_time(), target);
  }

  // optional .ETournamentState state = 9 [default = k_ETournamentState_Unknown];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->state(), target);
  }

  // repeated .CMsgDOTATournament.Node nodes = 10;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament)
  return target;
}

int CMsgDOTATournament::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & 252u) {
    // optional uint64 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // optional uint32 tournament_id = 4;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional .ETournamentType tournament_type = 5 [default = k_ETournamentType_Unknown];
    if (has_tournament_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tournament_type());
    }

    // optional .ETournamentTemplate tournament_template = 6 [default = k_ETournamentTemplate_None];
    if (has_tournament_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tournament_template());
    }

    // optional uint32 league_id = 7;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  // optional .ETournamentState state = 9 [default = k_ETournamentState_Unknown];
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // repeated .CMsgDOTATournament.Team teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CMsgDOTATournament.Game games = 2;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  // repeated .CMsgDOTATournament.Node nodes = 10;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTATournament* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament::MergeFrom(const CMsgDOTATournament& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  teams_.MergeFrom(from.teams_);
  games_.MergeFrom(from.games_);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_type()) {
      set_tournament_type(from.tournament_type());
    }
    if (from.has_tournament_template()) {
      set_tournament_template(from.tournament_template());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTATournament::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament::CopyFrom(const CMsgDOTATournament& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament::IsInitialized() const {

  return true;
}

void CMsgDOTATournament::Swap(CMsgDOTATournament* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament::InternalSwap(CMsgDOTATournament* other) {
  teams_.UnsafeArenaSwap(&other->teams_);
  games_.UnsafeArenaSwap(&other->games_);
  std::swap(gid_, other->gid_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_type_, other->tournament_type_);
  std::swap(tournament_template_, other->tournament_template_);
  std::swap(league_id_, other->league_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(state_, other->state_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_descriptor_;
  metadata.reflection = CMsgDOTATournament_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournament_Team

// optional uint32 team_id = 1;
bool CMsgDOTATournament_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_id)
  return team_id_;
}
 void CMsgDOTATournament_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_id)
}

// optional string team_name = 2;
bool CMsgDOTATournament_Team::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament_Team::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament_Team::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& CMsgDOTATournament_Team::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Team::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_name)
}
 void CMsgDOTATournament_Team::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.team_name)
}
 void CMsgDOTATournament_Team::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.team_name)
}
 ::std::string* CMsgDOTATournament_Team::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTATournament_Team::release_team_name() {
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Team::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.team_name)
}

// optional string team_abbrev = 3;
bool CMsgDOTATournament_Team::has_team_abbrev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_abbrev() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament_Team::clear_has_team_abbrev() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament_Team::clear_team_abbrev() {
  team_abbrev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_abbrev();
}
 const ::std::string& CMsgDOTATournament_Team::team_abbrev() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_abbrev)
  return team_abbrev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Team::set_team_abbrev(const ::std::string& value) {
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_abbrev)
}
 void CMsgDOTATournament_Team::set_team_abbrev(const char* value) {
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.team_abbrev)
}
 void CMsgDOTATournament_Team::set_team_abbrev(const char* value, size_t size) {
  set_has_team_abbrev();
  team_abbrev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.team_abbrev)
}
 ::std::string* CMsgDOTATournament_Team::mutable_team_abbrev() {
  set_has_team_abbrev();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.team_abbrev)
  return team_abbrev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTATournament_Team::release_team_abbrev() {
  clear_has_team_abbrev();
  return team_abbrev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Team::set_allocated_team_abbrev(::std::string* team_abbrev) {
  if (team_abbrev != NULL) {
    set_has_team_abbrev();
  } else {
    clear_has_team_abbrev();
  }
  team_abbrev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_abbrev);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.team_abbrev)
}

// repeated uint32 players = 4 [packed = true];
int CMsgDOTATournament_Team::players_size() const {
  return players_.size();
}
void CMsgDOTATournament_Team::clear_players() {
  players_.Clear();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.players)
  return players_.Get(index);
}
 void CMsgDOTATournament_Team::set_players(int index, ::google::protobuf::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.players)
}
 void CMsgDOTATournament_Team::add_players(::google::protobuf::uint32 value) {
  players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.players)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.players)
  return players_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.players)
  return &players_;
}

// optional uint32 seed = 5;
bool CMsgDOTATournament_Team::has_seed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament_Team::set_has_seed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament_Team::clear_has_seed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament_Team::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Team::seed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.seed)
  return seed_;
}
 void CMsgDOTATournament_Team::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.seed)
}

// optional uint64 team_logo = 6;
bool CMsgDOTATournament_Team::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament_Team::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament_Team::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
 ::google::protobuf::uint64 CMsgDOTATournament_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_logo)
  return team_logo_;
}
 void CMsgDOTATournament_Team::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_logo)
}

// optional string country_code = 7;
bool CMsgDOTATournament_Team::has_country_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournament_Team::set_has_country_code() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournament_Team::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournament_Team::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
 const ::std::string& CMsgDOTATournament_Team::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.country_code)
  return country_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Team::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.country_code)
}
 void CMsgDOTATournament_Team::set_country_code(const char* value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.country_code)
}
 void CMsgDOTATournament_Team::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.country_code)
}
 ::std::string* CMsgDOTATournament_Team::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTATournament_Team::release_country_code() {
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Team::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.country_code)
}

// optional uint32 node_or_state = 8;
bool CMsgDOTATournament_Team::has_node_or_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournament_Team::set_has_node_or_state() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournament_Team::clear_has_node_or_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournament_Team::clear_node_or_state() {
  node_or_state_ = 0u;
  clear_has_node_or_state();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Team::node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.node_or_state)
  return node_or_state_;
}
 void CMsgDOTATournament_Team::set_node_or_state(::google::protobuf::uint32 value) {
  set_has_node_or_state();
  node_or_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.node_or_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Game

// optional uint32 game_id = 1;
bool CMsgDOTATournament_Game::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament_Game::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament_Game::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament_Game::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.game_id)
  return game_id_;
}
 void CMsgDOTATournament_Game::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.game_id)
}

// optional uint32 good_team_id = 2;
bool CMsgDOTATournament_Game::has_good_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament_Game::set_has_good_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament_Game::clear_has_good_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament_Game::clear_good_team_id() {
  good_team_id_ = 0u;
  clear_has_good_team_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::good_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.good_team_id)
  return good_team_id_;
}
 void CMsgDOTATournament_Game::set_good_team_id(::google::protobuf::uint32 value) {
  set_has_good_team_id();
  good_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.good_team_id)
}

// optional uint32 bad_team_id = 3;
bool CMsgDOTATournament_Game::has_bad_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament_Game::set_has_bad_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament_Game::clear_has_bad_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament_Game::clear_bad_team_id() {
  bad_team_id_ = 0u;
  clear_has_bad_team_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::bad_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.bad_team_id)
  return bad_team_id_;
}
 void CMsgDOTATournament_Game::set_bad_team_id(::google::protobuf::uint32 value) {
  set_has_bad_team_id();
  bad_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.bad_team_id)
}

// optional uint32 good_team_seed = 12;
bool CMsgDOTATournament_Game::has_good_team_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament_Game::set_has_good_team_seed() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament_Game::clear_has_good_team_seed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament_Game::clear_good_team_seed() {
  good_team_seed_ = 0u;
  clear_has_good_team_seed();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::good_team_seed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.good_team_seed)
  return good_team_seed_;
}
 void CMsgDOTATournament_Game::set_good_team_seed(::google::protobuf::uint32 value) {
  set_has_good_team_seed();
  good_team_seed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.good_team_seed)
}

// optional uint32 bad_team_seed = 13;
bool CMsgDOTATournament_Game::has_bad_team_seed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament_Game::set_has_bad_team_seed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament_Game::clear_has_bad_team_seed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament_Game::clear_bad_team_seed() {
  bad_team_seed_ = 0u;
  clear_has_bad_team_seed();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::bad_team_seed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.bad_team_seed)
  return bad_team_seed_;
}
 void CMsgDOTATournament_Game::set_bad_team_seed(::google::protobuf::uint32 value) {
  set_has_bad_team_seed();
  bad_team_seed_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.bad_team_seed)
}

// optional fixed64 lobby_id = 4;
bool CMsgDOTATournament_Game::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament_Game::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament_Game::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament_Game::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
 ::google::protobuf::uint64 CMsgDOTATournament_Game::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.lobby_id)
  return lobby_id_;
}
 void CMsgDOTATournament_Game::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.lobby_id)
}

// optional uint64 match_id = 5;
bool CMsgDOTATournament_Game::has_match_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournament_Game::set_has_match_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournament_Game::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournament_Game::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
 ::google::protobuf::uint64 CMsgDOTATournament_Game::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.match_id)
  return match_id_;
}
 void CMsgDOTATournament_Game::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.match_id)
}

// optional string game_name = 6;
bool CMsgDOTATournament_Game::has_game_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournament_Game::set_has_game_name() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournament_Game::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournament_Game::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
 const ::std::string& CMsgDOTATournament_Game::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.game_name)
  return game_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Game::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.game_name)
}
 void CMsgDOTATournament_Game::set_game_name(const char* value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Game.game_name)
}
 void CMsgDOTATournament_Game::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Game.game_name)
}
 ::std::string* CMsgDOTATournament_Game::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTATournament_Game::release_game_name() {
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Game::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Game.game_name)
}

// optional bool live_stream = 7;
bool CMsgDOTATournament_Game::has_live_stream() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTATournament_Game::set_has_live_stream() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTATournament_Game::clear_has_live_stream() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTATournament_Game::clear_live_stream() {
  live_stream_ = false;
  clear_has_live_stream();
}
 bool CMsgDOTATournament_Game::live_stream() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.live_stream)
  return live_stream_;
}
 void CMsgDOTATournament_Game::set_live_stream(bool value) {
  set_has_live_stream();
  live_stream_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.live_stream)
}

// optional string message = 9;
bool CMsgDOTATournament_Game::has_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTATournament_Game::set_has_message() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTATournament_Game::clear_has_message() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTATournament_Game::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& CMsgDOTATournament_Game::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Game::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.message)
}
 void CMsgDOTATournament_Game::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Game.message)
}
 void CMsgDOTATournament_Game::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Game.message)
}
 ::std::string* CMsgDOTATournament_Game::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Game.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgDOTATournament_Game::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgDOTATournament_Game::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Game.message)
}

// optional bool results_final = 10;
bool CMsgDOTATournament_Game::has_results_final() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTATournament_Game::set_has_results_final() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTATournament_Game::clear_has_results_final() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTATournament_Game::clear_results_final() {
  results_final_ = false;
  clear_has_results_final();
}
 bool CMsgDOTATournament_Game::results_final() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.results_final)
  return results_final_;
}
 void CMsgDOTATournament_Game::set_results_final(bool value) {
  set_has_results_final();
  results_final_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.results_final)
}

// optional .ETournamentGameState state = 14 [default = k_ETournamentGameState_Unknown];
bool CMsgDOTATournament_Game::has_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTATournament_Game::set_has_state() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTATournament_Game::clear_has_state() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTATournament_Game::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::ETournamentGameState CMsgDOTATournament_Game::state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.state)
  return static_cast< ::ETournamentGameState >(state_);
}
 void CMsgDOTATournament_Game::set_state(::ETournamentGameState value) {
  assert(::ETournamentGameState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.state)
}

// optional uint32 node_id = 15;
bool CMsgDOTATournament_Game::has_node_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTATournament_Game::set_has_node_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTATournament_Game::clear_has_node_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTATournament_Game::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.node_id)
  return node_id_;
}
 void CMsgDOTATournament_Game::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.node_id)
}

// optional uint32 start_time = 16;
bool CMsgDOTATournament_Game::has_start_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTATournament_Game::set_has_start_time() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTATournament_Game::clear_has_start_time() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTATournament_Game::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Game::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.start_time)
  return start_time_;
}
 void CMsgDOTATournament_Game::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.start_time)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Node

// optional uint32 node_id = 1;
bool CMsgDOTATournament_Node::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament_Node::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament_Node::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament_Node::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.node_id)
  return node_id_;
}
 void CMsgDOTATournament_Node::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.node_id)
}

// optional uint32 team_seed_a = 2;
bool CMsgDOTATournament_Node::has_team_seed_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament_Node::set_has_team_seed_a() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament_Node::clear_has_team_seed_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament_Node::clear_team_seed_a() {
  team_seed_a_ = 0u;
  clear_has_team_seed_a();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::team_seed_a() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.team_seed_a)
  return team_seed_a_;
}
 void CMsgDOTATournament_Node::set_team_seed_a(::google::protobuf::uint32 value) {
  set_has_team_seed_a();
  team_seed_a_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.team_seed_a)
}

// optional uint32 team_seed_b = 3;
bool CMsgDOTATournament_Node::has_team_seed_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament_Node::set_has_team_seed_b() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament_Node::clear_has_team_seed_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament_Node::clear_team_seed_b() {
  team_seed_b_ = 0u;
  clear_has_team_seed_b();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::team_seed_b() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.team_seed_b)
  return team_seed_b_;
}
 void CMsgDOTATournament_Node::set_team_seed_b(::google::protobuf::uint32 value) {
  set_has_team_seed_b();
  team_seed_b_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.team_seed_b)
}

// optional uint32 winner_node = 4;
bool CMsgDOTATournament_Node::has_winner_node() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament_Node::set_has_winner_node() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament_Node::clear_has_winner_node() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament_Node::clear_winner_node() {
  winner_node_ = 0u;
  clear_has_winner_node();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::winner_node() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.winner_node)
  return winner_node_;
}
 void CMsgDOTATournament_Node::set_winner_node(::google::protobuf::uint32 value) {
  set_has_winner_node();
  winner_node_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.winner_node)
}

// optional uint32 loser_node = 5;
bool CMsgDOTATournament_Node::has_loser_node() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament_Node::set_has_loser_node() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament_Node::clear_has_loser_node() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament_Node::clear_loser_node() {
  loser_node_ = 0u;
  clear_has_loser_node();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::loser_node() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.loser_node)
  return loser_node_;
}
 void CMsgDOTATournament_Node::set_loser_node(::google::protobuf::uint32 value) {
  set_has_loser_node();
  loser_node_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.loser_node)
}

// optional uint32 series_type = 7;
bool CMsgDOTATournament_Node::has_series_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament_Node::set_has_series_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament_Node::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament_Node::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.series_type)
  return series_type_;
}
 void CMsgDOTATournament_Node::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.series_type)
}

// optional .ETournamentNodeState node_state = 8 [default = k_ETournamentNodeState_Unknown];
bool CMsgDOTATournament_Node::has_node_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournament_Node::set_has_node_state() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournament_Node::clear_has_node_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournament_Node::clear_node_state() {
  node_state_ = 0;
  clear_has_node_state();
}
 ::ETournamentNodeState CMsgDOTATournament_Node::node_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.node_state)
  return static_cast< ::ETournamentNodeState >(node_state_);
}
 void CMsgDOTATournament_Node::set_node_state(::ETournamentNodeState value) {
  assert(::ETournamentNodeState_IsValid(value));
  set_has_node_state();
  node_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.node_state)
}

// optional uint32 series_id = 9;
bool CMsgDOTATournament_Node::has_series_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournament_Node::set_has_series_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournament_Node::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournament_Node::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.series_id)
  return series_id_;
}
 void CMsgDOTATournament_Node::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.series_id)
}

// optional uint32 start_time = 16;
bool CMsgDOTATournament_Node::has_start_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTATournament_Node::set_has_start_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTATournament_Node::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTATournament_Node::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
 ::google::protobuf::uint32 CMsgDOTATournament_Node::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.start_time)
  return start_time_;
}
 void CMsgDOTATournament_Node::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.start_time)
}

// -------------------------------------------------------------------

// CMsgDOTATournament

// repeated .CMsgDOTATournament.Team teams = 1;
int CMsgDOTATournament::teams_size() const {
  return teams_.size();
}
void CMsgDOTATournament::clear_teams() {
  teams_.Clear();
}
const ::CMsgDOTATournament_Team& CMsgDOTATournament::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.teams)
  return teams_.Get(index);
}
::CMsgDOTATournament_Team* CMsgDOTATournament::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.teams)
  return teams_.Mutable(index);
}
::CMsgDOTATournament_Team* CMsgDOTATournament::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >*
CMsgDOTATournament::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >&
CMsgDOTATournament::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.teams)
  return teams_;
}

// repeated .CMsgDOTATournament.Game games = 2;
int CMsgDOTATournament::games_size() const {
  return games_.size();
}
void CMsgDOTATournament::clear_games() {
  games_.Clear();
}
const ::CMsgDOTATournament_Game& CMsgDOTATournament::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.games)
  return games_.Get(index);
}
::CMsgDOTATournament_Game* CMsgDOTATournament::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.games)
  return games_.Mutable(index);
}
::CMsgDOTATournament_Game* CMsgDOTATournament::add_games() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >*
CMsgDOTATournament::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >&
CMsgDOTATournament::games() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.games)
  return games_;
}

// optional uint64 gid = 3;
bool CMsgDOTATournament::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
 ::google::protobuf::uint64 CMsgDOTATournament::gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.gid)
  return gid_;
}
 void CMsgDOTATournament::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.gid)
}

// optional uint32 tournament_id = 4;
bool CMsgDOTATournament::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_id)
  return tournament_id_;
}
 void CMsgDOTATournament::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_id)
}

// optional .ETournamentType tournament_type = 5 [default = k_ETournamentType_Unknown];
bool CMsgDOTATournament::has_tournament_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament::set_has_tournament_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament::clear_has_tournament_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament::clear_tournament_type() {
  tournament_type_ = 0;
  clear_has_tournament_type();
}
 ::ETournamentType CMsgDOTATournament::tournament_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_type)
  return static_cast< ::ETournamentType >(tournament_type_);
}
 void CMsgDOTATournament::set_tournament_type(::ETournamentType value) {
  assert(::ETournamentType_IsValid(value));
  set_has_tournament_type();
  tournament_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_type)
}

// optional .ETournamentTemplate tournament_template = 6 [default = k_ETournamentTemplate_None];
bool CMsgDOTATournament::has_tournament_template() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament::set_has_tournament_template() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament::clear_has_tournament_template() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament::clear_tournament_template() {
  tournament_template_ = 0;
  clear_has_tournament_template();
}
 ::ETournamentTemplate CMsgDOTATournament::tournament_template() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_template)
  return static_cast< ::ETournamentTemplate >(tournament_template_);
}
 void CMsgDOTATournament::set_tournament_template(::ETournamentTemplate value) {
  assert(::ETournamentTemplate_IsValid(value));
  set_has_tournament_template();
  tournament_template_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_template)
}

// optional uint32 league_id = 7;
bool CMsgDOTATournament::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournament::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournament::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournament::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CMsgDOTATournament::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.league_id)
  return league_id_;
}
 void CMsgDOTATournament::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.league_id)
}

// optional uint32 start_time = 8;
bool CMsgDOTATournament::has_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournament::set_has_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournament::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournament::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
 ::google::protobuf::uint32 CMsgDOTATournament::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.start_time)
  return start_time_;
}
 void CMsgDOTATournament::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.start_time)
}

// optional .ETournamentState state = 9 [default = k_ETournamentState_Unknown];
bool CMsgDOTATournament::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTATournament::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTATournament::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTATournament::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::ETournamentState CMsgDOTATournament::state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.state)
  return static_cast< ::ETournamentState >(state_);
}
 void CMsgDOTATournament::set_state(::ETournamentState value) {
  assert(::ETournamentState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.state)
}

// repeated .CMsgDOTATournament.Node nodes = 10;
int CMsgDOTATournament::nodes_size() const {
  return nodes_.size();
}
void CMsgDOTATournament::clear_nodes() {
  nodes_.Clear();
}
const ::CMsgDOTATournament_Node& CMsgDOTATournament::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.nodes)
  return nodes_.Get(index);
}
::CMsgDOTATournament_Node* CMsgDOTATournament::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.nodes)
  return nodes_.Mutable(index);
}
::CMsgDOTATournament_Node* CMsgDOTATournament::add_nodes() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node >*
CMsgDOTATournament::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node >&
CMsgDOTATournament::nodes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournamentRequest::kTournamentIdFieldNumber;
const int CMsgDOTATournamentRequest::kClientTournamentGidFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::InitAsDefaultInstance() {
}

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  client_tournament_gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentRequest::~CMsgDOTATournamentRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentRequest)
  SharedDtor();
}

void CMsgDOTATournamentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentRequest_descriptor_;
}

const CMsgDOTATournamentRequest& CMsgDOTATournamentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentRequest* CMsgDOTATournamentRequest::default_instance_ = NULL;

CMsgDOTATournamentRequest* CMsgDOTATournamentRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentRequest* n = new CMsgDOTATournamentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTATournamentRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(client_tournament_gid_, tournament_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTATournamentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_tournament_gid;
        break;
      }

      // optional uint64 client_tournament_gid = 2;
      case 2: {
        if (tag == 16) {
         parse_client_tournament_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_tournament_gid_)));
          set_has_client_tournament_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentRequest)
  return false;
#undef DO_
}

void CMsgDOTATournamentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentRequest)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint64 client_tournament_gid = 2;
  if (has_client_tournament_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->client_tournament_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentRequest)
}

::google::protobuf::uint8* CMsgDOTATournamentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentRequest)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint64 client_tournament_gid = 2;
  if (has_client_tournament_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->client_tournament_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentRequest)
  return target;
}

int CMsgDOTATournamentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint64 client_tournament_gid = 2;
    if (has_client_tournament_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_tournament_gid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTATournamentRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentRequest::MergeFrom(const CMsgDOTATournamentRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_client_tournament_gid()) {
      set_client_tournament_gid(from.client_tournament_gid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTATournamentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentRequest::CopyFrom(const CMsgDOTATournamentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentRequest::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentRequest::Swap(CMsgDOTATournamentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentRequest::InternalSwap(CMsgDOTATournamentRequest* other) {
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(client_tournament_gid_, other->client_tournament_gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentRequest_descriptor_;
  metadata.reflection = CMsgDOTATournamentRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentRequest

// optional uint32 tournament_id = 1;
bool CMsgDOTATournamentRequest::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentRequest::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentRequest::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentRequest::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
 ::google::protobuf::uint32 CMsgDOTATournamentRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentRequest.tournament_id)
  return tournament_id_;
}
 void CMsgDOTATournamentRequest::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentRequest.tournament_id)
}

// optional uint64 client_tournament_gid = 2;
bool CMsgDOTATournamentRequest::has_client_tournament_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentRequest::set_has_client_tournament_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentRequest::clear_has_client_tournament_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentRequest::clear_client_tournament_gid() {
  client_tournament_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_tournament_gid();
}
 ::google::protobuf::uint64 CMsgDOTATournamentRequest::client_tournament_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentRequest.client_tournament_gid)
  return client_tournament_gid_;
}
 void CMsgDOTATournamentRequest::set_client_tournament_gid(::google::protobuf::uint64 value) {
  set_has_client_tournament_gid();
  client_tournament_gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentRequest.client_tournament_gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournamentResponse::kResultFieldNumber;
const int CMsgDOTATournamentResponse::kTournamentFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentResponse::CMsgDOTATournamentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::InitAsDefaultInstance() {
  tournament_ = const_cast< ::CMsgDOTATournament*>(&::CMsgDOTATournament::default_instance());
}

CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 2u;
  tournament_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentResponse::~CMsgDOTATournamentResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentResponse)
  SharedDtor();
}

void CMsgDOTATournamentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tournament_;
  }
}

void CMsgDOTATournamentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentResponse_descriptor_;
}

const CMsgDOTATournamentResponse& CMsgDOTATournamentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentResponse* CMsgDOTATournamentResponse::default_instance_ = NULL;

CMsgDOTATournamentResponse* CMsgDOTATournamentResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentResponse* n = new CMsgDOTATournamentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    result_ = 2u;
    if (has_tournament()) {
      if (tournament_ != NULL) tournament_->::CMsgDOTATournament::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTATournamentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tournament;
        break;
      }

      // optional .CMsgDOTATournament tournament = 2;
      case 2: {
        if (tag == 18) {
         parse_tournament:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentResponse)
  return false;
#undef DO_
}

void CMsgDOTATournamentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentResponse)
  // optional uint32 result = 1 [default = 2];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .CMsgDOTATournament tournament = 2;
  if (has_tournament()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tournament_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentResponse)
}

::google::protobuf::uint8* CMsgDOTATournamentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentResponse)
  // optional uint32 result = 1 [default = 2];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .CMsgDOTATournament tournament = 2;
  if (has_tournament()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->tournament_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentResponse)
  return target;
}

int CMsgDOTATournamentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 result = 1 [default = 2];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .CMsgDOTATournament tournament = 2;
    if (has_tournament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tournament_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTATournamentResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentResponse::MergeFrom(const CMsgDOTATournamentResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tournament()) {
      mutable_tournament()->::CMsgDOTATournament::MergeFrom(from.tournament());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTATournamentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentResponse::CopyFrom(const CMsgDOTATournamentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentResponse::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentResponse::Swap(CMsgDOTATournamentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentResponse::InternalSwap(CMsgDOTATournamentResponse* other) {
  std::swap(result_, other->result_);
  std::swap(tournament_, other->tournament_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentResponse_descriptor_;
  metadata.reflection = CMsgDOTATournamentResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentResponse

// optional uint32 result = 1 [default = 2];
bool CMsgDOTATournamentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
 ::google::protobuf::uint32 CMsgDOTATournamentResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentResponse.result)
  return result_;
}
 void CMsgDOTATournamentResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentResponse.result)
}

// optional .CMsgDOTATournament tournament = 2;
bool CMsgDOTATournamentResponse::has_tournament() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentResponse::set_has_tournament() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentResponse::clear_has_tournament() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentResponse::clear_tournament() {
  if (tournament_ != NULL) tournament_->::CMsgDOTATournament::Clear();
  clear_has_tournament();
}
const ::CMsgDOTATournament& CMsgDOTATournamentResponse::tournament() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentResponse.tournament)
  return tournament_ != NULL ? *tournament_ : *default_instance_->tournament_;
}
::CMsgDOTATournament* CMsgDOTATournamentResponse::mutable_tournament() {
  set_has_tournament();
  if (tournament_ == NULL) {
    tournament_ = new ::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentResponse.tournament)
  return tournament_;
}
::CMsgDOTATournament* CMsgDOTATournamentResponse::release_tournament() {
  clear_has_tournament();
  ::CMsgDOTATournament* temp = tournament_;
  tournament_ = NULL;
  return temp;
}
void CMsgDOTATournamentResponse::set_allocated_tournament(::CMsgDOTATournament* tournament) {
  delete tournament_;
  tournament_ = tournament;
  if (tournament) {
    set_has_tournament();
  } else {
    clear_has_tournament();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentResponse.tournament)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAClearTournamentGame::kTournamentIdFieldNumber;
const int CMsgDOTAClearTournamentGame::kGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::InitAsDefaultInstance() {
}

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAClearTournamentGame::~CMsgDOTAClearTournamentGame() {
  // @@protoc_insertion_point(destructor:CMsgDOTAClearTournamentGame)
  SharedDtor();
}

void CMsgDOTAClearTournamentGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAClearTournamentGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAClearTournamentGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAClearTournamentGame_descriptor_;
}

const CMsgDOTAClearTournamentGame& CMsgDOTAClearTournamentGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAClearTournamentGame* CMsgDOTAClearTournamentGame::default_instance_ = NULL;

CMsgDOTAClearTournamentGame* CMsgDOTAClearTournamentGame::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAClearTournamentGame* n = new CMsgDOTAClearTournamentGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAClearTournamentGame::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAClearTournamentGame*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tournament_id_, game_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAClearTournamentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAClearTournamentGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAClearTournamentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAClearTournamentGame)
  return false;
#undef DO_
}

void CMsgDOTAClearTournamentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAClearTournamentGame)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAClearTournamentGame)
}

::google::protobuf::uint8* CMsgDOTAClearTournamentGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAClearTournamentGame)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAClearTournamentGame)
  return target;
}

int CMsgDOTAClearTournamentGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAClearTournamentGame::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAClearTournamentGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAClearTournamentGame>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAClearTournamentGame::MergeFrom(const CMsgDOTAClearTournamentGame& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAClearTournamentGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClearTournamentGame::CopyFrom(const CMsgDOTAClearTournamentGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClearTournamentGame::IsInitialized() const {

  return true;
}

void CMsgDOTAClearTournamentGame::Swap(CMsgDOTAClearTournamentGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAClearTournamentGame::InternalSwap(CMsgDOTAClearTournamentGame* other) {
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAClearTournamentGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAClearTournamentGame_descriptor_;
  metadata.reflection = CMsgDOTAClearTournamentGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAClearTournamentGame

// optional uint32 tournament_id = 1;
bool CMsgDOTAClearTournamentGame::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAClearTournamentGame::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAClearTournamentGame::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAClearTournamentGame::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
 ::google::protobuf::uint32 CMsgDOTAClearTournamentGame::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClearTournamentGame.tournament_id)
  return tournament_id_;
}
 void CMsgDOTAClearTournamentGame::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClearTournamentGame.tournament_id)
}

// optional uint32 game_id = 2;
bool CMsgDOTAClearTournamentGame::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAClearTournamentGame::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAClearTournamentGame::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAClearTournamentGame::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
 ::google::protobuf::uint32 CMsgDOTAClearTournamentGame::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClearTournamentGame.game_id)
  return game_id_;
}
 void CMsgDOTAClearTournamentGame::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClearTournamentGame.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPassportVoteTeamGuess::kLeagueIdFieldNumber;
const int CMsgDOTAPassportVoteTeamGuess::kWinnerIdFieldNumber;
const int CMsgDOTAPassportVoteTeamGuess::kRunnerupIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPassportVoteTeamGuess)
}

void CMsgDOTAPassportVoteTeamGuess::InitAsDefaultInstance() {
}

CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVoteTeamGuess)
}

void CMsgDOTAPassportVoteTeamGuess::SharedCtor() {
  _cached_size_ = 0;
  league_id_ = 0u;
  winner_id_ = 0u;
  runnerup_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPassportVoteTeamGuess::~CMsgDOTAPassportVoteTeamGuess() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVoteTeamGuess)
  SharedDtor();
}

void CMsgDOTAPassportVoteTeamGuess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPassportVoteTeamGuess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportVoteTeamGuess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPassportVoteTeamGuess_descriptor_;
}

const CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVoteTeamGuess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVoteTeamGuess::default_instance_ = NULL;

CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVoteTeamGuess::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportVoteTeamGuess* n = new CMsgDOTAPassportVoteTeamGuess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportVoteTeamGuess::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAPassportVoteTeamGuess*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(league_id_, runnerup_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAPassportVoteTeamGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPassportVoteTeamGuess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_winner_id;
        break;
      }

      // optional uint32 winner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_winner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_runnerup_id;
        break;
      }

      // optional uint32 runnerup_id = 3;
      case 3: {
        if (tag == 24) {
         parse_runnerup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runnerup_id_)));
          set_has_runnerup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPassportVoteTeamGuess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPassportVoteTeamGuess)
  return false;
#undef DO_
}

void CMsgDOTAPassportVoteTeamGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPassportVoteTeamGuess)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 winner_id = 2;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winner_id(), output);
  }

  // optional uint32 runnerup_id = 3;
  if (has_runnerup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->runnerup_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPassportVoteTeamGuess)
}

::google::protobuf::uint8* CMsgDOTAPassportVoteTeamGuess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVoteTeamGuess)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 winner_id = 2;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winner_id(), target);
  }

  // optional uint32 runnerup_id = 3;
  if (has_runnerup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->runnerup_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVoteTeamGuess)
  return target;
}

int CMsgDOTAPassportVoteTeamGuess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 winner_id = 2;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_id());
    }

    // optional uint32 runnerup_id = 3;
    if (has_runnerup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runnerup_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAPassportVoteTeamGuess* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportVoteTeamGuess>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
    if (from.has_runnerup_id()) {
      set_runnerup_id(from.runnerup_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteTeamGuess::IsInitialized() const {

  return true;
}

void CMsgDOTAPassportVoteTeamGuess::Swap(CMsgDOTAPassportVoteTeamGuess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVoteTeamGuess::InternalSwap(CMsgDOTAPassportVoteTeamGuess* other) {
  std::swap(league_id_, other->league_id_);
  std::swap(winner_id_, other->winner_id_);
  std::swap(runnerup_id_, other->runnerup_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportVoteTeamGuess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPassportVoteTeamGuess_descriptor_;
  metadata.reflection = CMsgDOTAPassportVoteTeamGuess_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportVoteTeamGuess

// optional uint32 league_id = 1;
bool CMsgDOTAPassportVoteTeamGuess::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportVoteTeamGuess::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
 ::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.league_id)
  return league_id_;
}
 void CMsgDOTAPassportVoteTeamGuess::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.league_id)
}

// optional uint32 winner_id = 2;
bool CMsgDOTAPassportVoteTeamGuess::has_winner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPassportVoteTeamGuess::set_has_winner_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_winner_id() {
  winner_id_ = 0u;
  clear_has_winner_id();
}
 ::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::winner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.winner_id)
  return winner_id_;
}
 void CMsgDOTAPassportVoteTeamGuess::set_winner_id(::google::protobuf::uint32 value) {
  set_has_winner_id();
  winner_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.winner_id)
}

// optional uint32 runnerup_id = 3;
bool CMsgDOTAPassportVoteTeamGuess::has_runnerup_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAPassportVoteTeamGuess::set_has_runnerup_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_has_runnerup_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_runnerup_id() {
  runnerup_id_ = 0u;
  clear_has_runnerup_id();
}
 ::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::runnerup_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
  return runnerup_id_;
}
 void CMsgDOTAPassportVoteTeamGuess::set_runnerup_id(::google::protobuf::uint32 value) {
  set_has_runnerup_id();
  runnerup_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPassportVoteGenericSelection::kSelectionIndexFieldNumber;
const int CMsgDOTAPassportVoteGenericSelection::kSelectionFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPassportVoteGenericSelection)
}

void CMsgDOTAPassportVoteGenericSelection::InitAsDefaultInstance() {
}

CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVoteGenericSelection)
}

void CMsgDOTAPassportVoteGenericSelection::SharedCtor() {
  _cached_size_ = 0;
  selection_index_ = 0;
  selection_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPassportVoteGenericSelection::~CMsgDOTAPassportVoteGenericSelection() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVoteGenericSelection)
  SharedDtor();
}

void CMsgDOTAPassportVoteGenericSelection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPassportVoteGenericSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportVoteGenericSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPassportVoteGenericSelection_descriptor_;
}

const CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVoteGenericSelection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVoteGenericSelection::default_instance_ = NULL;

CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVoteGenericSelection::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportVoteGenericSelection* n = new CMsgDOTAPassportVoteGenericSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportVoteGenericSelection::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAPassportVoteGenericSelection*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(selection_index_, selection_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAPassportVoteGenericSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPassportVoteGenericSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_2013PassportSelectionIndices_IsValid(value)) {
            set_selection_index(static_cast< ::DOTA_2013PassportSelectionIndices >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selection;
        break;
      }

      // optional uint32 selection = 2;
      case 2: {
        if (tag == 16) {
         parse_selection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_)));
          set_has_selection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPassportVoteGenericSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPassportVoteGenericSelection)
  return false;
#undef DO_
}

void CMsgDOTAPassportVoteGenericSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPassportVoteGenericSelection)
  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (has_selection_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->selection_index(), output);
  }

  // optional uint32 selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPassportVoteGenericSelection)
}

::google::protobuf::uint8* CMsgDOTAPassportVoteGenericSelection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVoteGenericSelection)
  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (has_selection_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->selection_index(), target);
  }

  // optional uint32 selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selection(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVoteGenericSelection)
  return target;
}

int CMsgDOTAPassportVoteGenericSelection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
    if (has_selection_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_index());
    }

    // optional uint32 selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAPassportVoteGenericSelection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportVoteGenericSelection>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection_index()) {
      set_selection_index(from.selection_index());
    }
    if (from.has_selection()) {
      set_selection(from.selection());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteGenericSelection::IsInitialized() const {

  return true;
}

void CMsgDOTAPassportVoteGenericSelection::Swap(CMsgDOTAPassportVoteGenericSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVoteGenericSelection::InternalSwap(CMsgDOTAPassportVoteGenericSelection* other) {
  std::swap(selection_index_, other->selection_index_);
  std::swap(selection_, other->selection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportVoteGenericSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPassportVoteGenericSelection_descriptor_;
  metadata.reflection = CMsgDOTAPassportVoteGenericSelection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportVoteGenericSelection

// optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
bool CMsgDOTAPassportVoteGenericSelection::has_selection_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportVoteGenericSelection::set_has_selection_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_has_selection_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_selection_index() {
  selection_index_ = 0;
  clear_has_selection_index();
}
 ::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::selection_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection_index)
  return static_cast< ::DOTA_2013PassportSelectionIndices >(selection_index_);
}
 void CMsgDOTAPassportVoteGenericSelection::set_selection_index(::DOTA_2013PassportSelectionIndices value) {
  assert(::DOTA_2013PassportSelectionIndices_IsValid(value));
  set_has_selection_index();
  selection_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection_index)
}

// optional uint32 selection = 2;
bool CMsgDOTAPassportVoteGenericSelection::has_selection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPassportVoteGenericSelection::set_has_selection() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_has_selection() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_selection() {
  selection_ = 0u;
  clear_has_selection();
}
 ::google::protobuf::uint32 CMsgDOTAPassportVoteGenericSelection::selection() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection)
  return selection_;
}
 void CMsgDOTAPassportVoteGenericSelection::set_selection(::google::protobuf::uint32 value) {
  set_has_selection();
  selection_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPassportStampedPlayer::kSteamIdFieldNumber;
const int CMsgDOTAPassportStampedPlayer::kStampLevelFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPassportStampedPlayer)
}

void CMsgDOTAPassportStampedPlayer::InitAsDefaultInstance() {
}

CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportStampedPlayer)
}

void CMsgDOTAPassportStampedPlayer::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  stamp_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPassportStampedPlayer::~CMsgDOTAPassportStampedPlayer() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportStampedPlayer)
  SharedDtor();
}

void CMsgDOTAPassportStampedPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPassportStampedPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportStampedPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPassportStampedPlayer_descriptor_;
}

const CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportStampedPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportStampedPlayer::default_instance_ = NULL;

CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportStampedPlayer::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportStampedPlayer* n = new CMsgDOTAPassportStampedPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportStampedPlayer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgDOTAPassportStampedPlayer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(steam_id_, stamp_level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAPassportStampedPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPassportStampedPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stamp_level;
        break;
      }

      // optional uint32 stamp_level = 2;
      case 2: {
        if (tag == 16) {
         parse_stamp_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_level_)));
          set_has_stamp_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPassportStampedPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPassportStampedPlayer)
  return false;
#undef DO_
}

void CMsgDOTAPassportStampedPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPassportStampedPlayer)
  // optional uint64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id(), output);
  }

  // optional uint32 stamp_level = 2;
  if (has_stamp_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPassportStampedPlayer)
}

::google::protobuf::uint8* CMsgDOTAPassportStampedPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportStampedPlayer)
  // optional uint64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 stamp_level = 2;
  if (has_stamp_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportStampedPlayer)
  return target;
}

int CMsgDOTAPassportStampedPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 stamp_level = 2;
    if (has_stamp_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp_level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAPassportStampedPlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportStampedPlayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const CMsgDOTAPassportStampedPlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_stamp_level()) {
      set_stamp_level(from.stamp_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const CMsgDOTAPassportStampedPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportStampedPlayer::IsInitialized() const {

  return true;
}

void CMsgDOTAPassportStampedPlayer::Swap(CMsgDOTAPassportStampedPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportStampedPlayer::InternalSwap(CMsgDOTAPassportStampedPlayer* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(stamp_level_, other->stamp_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportStampedPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPassportStampedPlayer_descriptor_;
  metadata.reflection = CMsgDOTAPassportStampedPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportStampedPlayer

// optional uint64 steam_id = 1;
bool CMsgDOTAPassportStampedPlayer::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportStampedPlayer::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportStampedPlayer::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportStampedPlayer::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
 ::google::protobuf::uint64 CMsgDOTAPassportStampedPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.steam_id)
  return steam_id_;
}
 void CMsgDOTAPassportStampedPlayer::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.steam_id)
}

// optional uint32 stamp_level = 2;
bool CMsgDOTAPassportStampedPlayer::has_stamp_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPassportStampedPlayer::set_has_stamp_level() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPassportStampedPlayer::clear_has_stamp_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPassportStampedPlayer::clear_stamp_level() {
  stamp_level_ = 0u;
  clear_has_stamp_level();
}
 ::google::protobuf::uint32 CMsgDOTAPassportStampedPlayer::stamp_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.stamp_level)
  return stamp_level_;
}
 void CMsgDOTAPassportStampedPlayer::set_stamp_level(::google::protobuf::uint32 value) {
  set_has_stamp_level();
  stamp_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.stamp_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPassportPlayerCardChallenge::kChallengeIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPassportPlayerCardChallenge)
}

void CMsgDOTAPassportPlayerCardChallenge::InitAsDefaultInstance() {
}

CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportPlayerCardChallenge)
}

void CMsgDOTAPassportPlayerCardChallenge::SharedCtor() {
  _cached_size_ = 0;
  challenge_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPassportPlayerCardChallenge::~CMsgDOTAPassportPlayerCardChallenge() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportPlayerCardChallenge)
  SharedDtor();
}

void CMsgDOTAPassportPlayerCardChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPassportPlayerCardChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportPlayerCardChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPassportPlayerCardChallenge_descriptor_;
}

const CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportPlayerCardChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportPlayerCardChallenge::default_instance_ = NULL;

CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportPlayerCardChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportPlayerCardChallenge* n = new CMsgDOTAPassportPlayerCardChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportPlayerCardChallenge::Clear() {
  challenge_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAPassportPlayerCardChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPassportPlayerCardChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challenge_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
          set_has_challenge_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPassportPlayerCardChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPassportPlayerCardChallenge)
  return false;
#undef DO_
}

void CMsgDOTAPassportPlayerCardChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPassportPlayerCardChallenge)
  // optional uint32 challenge_id = 1;
  if (has_challenge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPassportPlayerCardChallenge)
}

::google::protobuf::uint8* CMsgDOTAPassportPlayerCardChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportPlayerCardChallenge)
  // optional uint32 challenge_id = 1;
  if (has_challenge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportPlayerCardChallenge)
  return target;
}

int CMsgDOTAPassportPlayerCardChallenge::ByteSize() const {
  int total_size = 0;

  // optional uint32 challenge_id = 1;
  if (has_challenge_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAPassportPlayerCardChallenge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportPlayerCardChallenge>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge_id()) {
      set_challenge_id(from.challenge_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportPlayerCardChallenge::IsInitialized() const {

  return true;
}

void CMsgDOTAPassportPlayerCardChallenge::Swap(CMsgDOTAPassportPlayerCardChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportPlayerCardChallenge::InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
  std::swap(challenge_id_, other->challenge_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportPlayerCardChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPassportPlayerCardChallenge_descriptor_;
  metadata.reflection = CMsgDOTAPassportPlayerCardChallenge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportPlayerCardChallenge

// optional uint32 challenge_id = 1;
bool CMsgDOTAPassportPlayerCardChallenge::has_challenge_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportPlayerCardChallenge::set_has_challenge_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportPlayerCardChallenge::clear_has_challenge_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportPlayerCardChallenge::clear_challenge_id() {
  challenge_id_ = 0u;
  clear_has_challenge_id();
}
 ::google::protobuf::uint32 CMsgDOTAPassportPlayerCardChallenge::challenge_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
  return challenge_id_;
}
 void CMsgDOTAPassportPlayerCardChallenge::set_challenge_id(::google::protobuf::uint32 value) {
  set_has_challenge_id();
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPassportVote::kTeamVotesFieldNumber;
const int CMsgDOTAPassportVote::kGenericSelectionsFieldNumber;
const int CMsgDOTAPassportVote::kStampedPlayersFieldNumber;
const int CMsgDOTAPassportVote::kPlayerCardChallengesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPassportVote::CMsgDOTAPassportVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPassportVote)
}

void CMsgDOTAPassportVote::InitAsDefaultInstance() {
}

CMsgDOTAPassportVote::CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPassportVote)
}

void CMsgDOTAPassportVote::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPassportVote::~CMsgDOTAPassportVote() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPassportVote)
  SharedDtor();
}

void CMsgDOTAPassportVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPassportVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPassportVote_descriptor_;
}

const CMsgDOTAPassportVote& CMsgDOTAPassportVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgDOTAPassportVote* CMsgDOTAPassportVote::default_instance_ = NULL;

CMsgDOTAPassportVote* CMsgDOTAPassportVote::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportVote* n = new CMsgDOTAPassportVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportVote::Clear() {
  team_votes_.Clear();
  generic_selections_.Clear();
  stamped_players_.Clear();
  player_card_challenges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgDOTAPassportVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPassportVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_team_votes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team_votes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_team_votes;
        if (input->ExpectTag(18)) goto parse_loop_generic_selections;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_generic_selections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_generic_selections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_generic_selections;
        if (input->ExpectTag(26)) goto parse_loop_stamped_players;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stamped_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stamped_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stamped_players;
        if (input->ExpectTag(34)) goto parse_loop_player_card_challenges;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_card_challenges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_card_challenges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_player_card_challenges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPassportVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPassportVote)
  return false;
#undef DO_
}

void CMsgDOTAPassportVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPassportVote)
  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0, n = this->team_votes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_votes(i), output);
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0, n = this->generic_selections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generic_selections(i), output);
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0, n = this->stamped_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stamped_players(i), output);
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0, n = this->player_card_challenges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_card_challenges(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPassportVote)
}

::google::protobuf::uint8* CMsgDOTAPassportVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPassportVote)
  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0, n = this->team_votes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_votes(i), target);
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0, n = this->generic_selections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->generic_selections(i), target);
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0, n = this->stamped_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stamped_players(i), target);
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0, n = this->player_card_challenges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_card_challenges(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPassportVote)
  return target;
}

int CMsgDOTAPassportVote::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  total_size += 1 * this->team_votes_size();
  for (int i = 0; i < this->team_votes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_votes(i));
  }

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  total_size += 1 * this->generic_selections_size();
  for (int i = 0; i < this->generic_selections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generic_selections(i));
  }

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  total_size += 1 * this->stamped_players_size();
  for (int i = 0; i < this->stamped_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stamped_players(i));
  }

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  total_size += 1 * this->player_card_challenges_size();
  for (int i = 0; i < this->player_card_challenges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_card_challenges(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportVote::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgDOTAPassportVote* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportVote>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVote::MergeFrom(const CMsgDOTAPassportVote& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  team_votes_.MergeFrom(from.team_votes_);
  generic_selections_.MergeFrom(from.generic_selections_);
  stamped_players_.MergeFrom(from.stamped_players_);
  player_card_challenges_.MergeFrom(from.player_card_challenges_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgDOTAPassportVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVote::CopyFrom(const CMsgDOTAPassportVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVote::IsInitialized() const {

  return true;
}

void CMsgDOTAPassportVote::Swap(CMsgDOTAPassportVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVote::InternalSwap(CMsgDOTAPassportVote* other) {
  team_votes_.UnsafeArenaSwap(&other->team_votes_);
  generic_selections_.UnsafeArenaSwap(&other->generic_selections_);
  stamped_players_.UnsafeArenaSwap(&other->stamped_players_);
  player_card_challenges_.UnsafeArenaSwap(&other->player_card_challenges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPassportVote_descriptor_;
  metadata.reflection = CMsgDOTAPassportVote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportVote

// repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
int CMsgDOTAPassportVote::team_votes_size() const {
  return team_votes_.size();
}
void CMsgDOTAPassportVote::clear_team_votes() {
  team_votes_.Clear();
}
const ::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::team_votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Get(index);
}
::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::mutable_team_votes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Mutable(index);
}
::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::add_team_votes() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
CMsgDOTAPassportVote::mutable_team_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.team_votes)
  return &team_votes_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
CMsgDOTAPassportVote::team_votes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.team_votes)
  return team_votes_;
}

// repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
int CMsgDOTAPassportVote::generic_selections_size() const {
  return generic_selections_.size();
}
void CMsgDOTAPassportVote::clear_generic_selections() {
  generic_selections_.Clear();
}
const ::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::generic_selections(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Get(index);
}
::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::mutable_generic_selections(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Mutable(index);
}
::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::add_generic_selections() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
CMsgDOTAPassportVote::mutable_generic_selections() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.generic_selections)
  return &generic_selections_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
CMsgDOTAPassportVote::generic_selections() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_;
}

// repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
int CMsgDOTAPassportVote::stamped_players_size() const {
  return stamped_players_.size();
}
void CMsgDOTAPassportVote::clear_stamped_players() {
  stamped_players_.Clear();
}
const ::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::stamped_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Get(index);
}
::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::mutable_stamped_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Mutable(index);
}
::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::add_stamped_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
CMsgDOTAPassportVote::mutable_stamped_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.stamped_players)
  return &stamped_players_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
CMsgDOTAPassportVote::stamped_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_;
}

// repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
int CMsgDOTAPassportVote::player_card_challenges_size() const {
  return player_card_challenges_.size();
}
void CMsgDOTAPassportVote::clear_player_card_challenges() {
  player_card_challenges_.Clear();
}
const ::CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportVote::player_card_challenges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Get(index);
}
::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::mutable_player_card_challenges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Mutable(index);
}
::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::add_player_card_challenges() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >*
CMsgDOTAPassportVote::mutable_player_card_challenges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.player_card_challenges)
  return &player_card_challenges_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >&
CMsgDOTAPassportVote::player_card_challenges() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgPassportDataRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgPassportDataRequest::CMsgPassportDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPassportDataRequest)
}

void CMsgPassportDataRequest::InitAsDefaultInstance() {
}

CMsgPassportDataRequest::CMsgPassportDataRequest(const CMsgPassportDataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPassportDataRequest)
}

void CMsgPassportDataRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPassportDataRequest::~CMsgPassportDataRequest() {
  // @@protoc_insertion_point(destructor:CMsgPassportDataRequest)
  SharedDtor();
}

void CMsgPassportDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPassportDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPassportDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPassportDataRequest_descriptor_;
}

const CMsgPassportDataRequest& CMsgPassportDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgPassportDataRequest* CMsgPassportDataRequest::default_instance_ = NULL;

CMsgPassportDataRequest* CMsgPassportDataRequest::New(::google::protobuf::Arena* arena) const {
  CMsgPassportDataRequest* n = new CMsgPassportDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPassportDataRequest::Clear() {
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgPassportDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPassportDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPassportDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPassportDataRequest)
  return false;
#undef DO_
}

void CMsgPassportDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPassportDataRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPassportDataRequest)
}

::google::protobuf::uint8* CMsgPassportDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPassportDataRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPassportDataRequest)
  return target;
}

int CMsgPassportDataRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPassportDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgPassportDataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPassportDataRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPassportDataRequest::MergeFrom(const CMsgPassportDataRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgPassportDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPassportDataRequest::CopyFrom(const CMsgPassportDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPassportDataRequest::IsInitialized() const {

  return true;
}

void CMsgPassportDataRequest::Swap(CMsgPassportDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPassportDataRequest::InternalSwap(CMsgPassportDataRequest* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPassportDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPassportDataRequest_descriptor_;
  metadata.reflection = CMsgPassportDataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPassportDataRequest

// optional uint32 account_id = 1;
bool CMsgPassportDataRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPassportDataRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPassportDataRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPassportDataRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgPassportDataRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataRequest.account_id)
  return account_id_;
}
 void CMsgPassportDataRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataRequest.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgPassportDataResponse::kAccountIdFieldNumber;
const int CMsgPassportDataResponse::kResultFieldNumber;
const int CMsgPassportDataResponse::kInternationalFieldNumber;
const int CMsgPassportDataResponse::kEastQualifiersPredictEndTimeFieldNumber;
const int CMsgPassportDataResponse::kWestQualifiersPredictEndTimeFieldNumber;
const int CMsgPassportDataResponse::kAllstarMatchEndTimeFieldNumber;
const int CMsgPassportDataResponse::kLeagueGuessesFieldNumber;
const int CMsgPassportDataResponse::kEastQualifiersWinnerTeamIdFieldNumber;
const int CMsgPassportDataResponse::kEastQualifiersRunnerUpTeamIdFieldNumber;
const int CMsgPassportDataResponse::kWestQualifiersWinnerTeamIdFieldNumber;
const int CMsgPassportDataResponse::kWestQualifiersRunnerUpTeamIdFieldNumber;
const int CMsgPassportDataResponse::kPassportsBoughtFieldNumber;
const int CMsgPassportDataResponse::kOriginalPurchaserIdFieldNumber;
const int CMsgPassportDataResponse::kFantasyTeamCountFieldNumber;
const int CMsgPassportDataResponse::kFantasyTeamexpirationFieldNumber;
const int CMsgPassportDataResponse::kFantasyTeamsWillLockAtFieldNumber;
#endif  // !_MSC_VER

CMsgPassportDataResponse::CMsgPassportDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPassportDataResponse)
}

void CMsgPassportDataResponse::InitAsDefaultInstance() {
  international_ = const_cast< ::CMsgDOTATournament*>(&::CMsgDOTATournament::default_instance());
  league_guesses_ = const_cast< ::CMsgDOTAPassportVote*>(&::CMsgDOTAPassportVote::default_instance());
}

CMsgPassportDataResponse::CMsgPassportDataResponse(const CMsgPassportDataResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPassportDataResponse)
}

void CMsgPassportDataResponse::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  result_ = 2u;
  international_ = NULL;
  east_qualifiers_predict_end_time_ = 0u;
  west_qualifiers_predict_end_time_ = 0u;
  allstar_match_end_time_ = 0u;
  league_guesses_ = NULL;
  east_qualifiers_winner_team_id_ = 0u;
  east_qualifiers_runner_up_team_id_ = 0u;
  west_qualifiers_winner_team_id_ = 0u;
  west_qualifiers_runner_up_team_id_ = 0u;
  passports_bought_ = 0u;
  original_purchaser_id_ = 0u;
  fantasy_team_count_ = 0u;
  fantasy_teamexpiration_ = 0u;
  fantasy_teams_will_lock_at_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPassportDataResponse::~CMsgPassportDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgPassportDataResponse)
  SharedDtor();
}

void CMsgPassportDataResponse::SharedDtor() {
  if (this != default_instance_) {
    delete international_;
    delete league_guesses_;
  }
}

void CMsgPassportDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPassportDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPassportDataResponse_descriptor_;
}

const CMsgPassportDataResponse& CMsgPassportDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ffantasy_2eproto();
  return *default_instance_;
}

CMsgPassportDataResponse* CMsgPassportDataResponse::default_instance_ = NULL;

CMsgPassportDataResponse* CMsgPassportDataResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPassportDataResponse* n = new CMsgPassportDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPassportDataResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgPassportDataResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(east_qualifiers_predict_end_time_, west_qualifiers_predict_end_time_);
    ZR_(allstar_match_end_time_, east_qualifiers_winner_team_id_);
    account_id_ = 0u;
    result_ = 2u;
    if (has_international()) {
      if (international_ != NULL) international_->::CMsgDOTATournament::Clear();
    }
    if (has_league_guesses()) {
      if (league_guesses_ != NULL) league_guesses_->::CMsgDOTAPassportVote::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(east_qualifiers_runner_up_team_id_, fantasy_teams_will_lock_at_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgPassportDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPassportDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2 [default = 2];
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_international;
        break;
      }

      // optional .CMsgDOTATournament international = 5;
      case 5: {
        if (tag == 42) {
         parse_international:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_international()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_league_guesses;
        break;
      }

      // optional .CMsgDOTAPassportVote league_guesses = 6;
      case 6: {
        if (tag == 50) {
         parse_league_guesses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_league_guesses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_east_qualifiers_predict_end_time;
        break;
      }

      // optional uint32 east_qualifiers_predict_end_time = 7;
      case 7: {
        if (tag == 56) {
         parse_east_qualifiers_predict_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &east_qualifiers_predict_end_time_)));
          set_has_east_qualifiers_predict_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_west_qualifiers_predict_end_time;
        break;
      }

      // optional uint32 west_qualifiers_predict_end_time = 8;
      case 8: {
        if (tag == 64) {
         parse_west_qualifiers_predict_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &west_qualifiers_predict_end_time_)));
          set_has_west_qualifiers_predict_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_allstar_match_end_time;
        break;
      }

      // optional uint32 allstar_match_end_time = 9;
      case 9: {
        if (tag == 72) {
         parse_allstar_match_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allstar_match_end_time_)));
          set_has_allstar_match_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_east_qualifiers_winner_team_id;
        break;
      }

      // optional uint32 east_qualifiers_winner_team_id = 10;
      case 10: {
        if (tag == 80) {
         parse_east_qualifiers_winner_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &east_qualifiers_winner_team_id_)));
          set_has_east_qualifiers_winner_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_east_qualifiers_runner_up_team_id;
        break;
      }

      // optional uint32 east_qualifiers_runner_up_team_id = 11;
      case 11: {
        if (tag == 88) {
         parse_east_qualifiers_runner_up_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &east_qualifiers_runner_up_team_id_)));
          set_has_east_qualifiers_runner_up_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_west_qualifiers_winner_team_id;
        break;
      }

      // optional uint32 west_qualifiers_winner_team_id = 12;
      case 12: {
        if (tag == 96) {
         parse_west_qualifiers_winner_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &west_qualifiers_winner_team_id_)));
          set_has_west_qualifiers_winner_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_west_qualifiers_runner_up_team_id;
        break;
      }

      // optional uint32 west_qualifiers_runner_up_team_id = 13;
      case 13: {
        if (tag == 104) {
         parse_west_qualifiers_runner_up_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &west_qualifiers_runner_up_team_id_)));
          set_has_west_qualifiers_runner_up_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_passports_bought;
        break;
      }

      // optional uint32 passports_bought = 14;
      case 14: {
        if (tag == 112) {
         parse_passports_bought:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passports_bought_)));
          set_has_passports_bought();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_original_purchaser_id;
        break;
      }

      // optional uint32 original_purchaser_id = 15;
      case 15: {
        if (tag == 120) {
         parse_original_purchaser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_purchaser_id_)));
          set_has_original_purchaser_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fantasy_team_count;
        break;
      }

      // optional uint32 fantasy_team_count = 16;
      case 16: {
        if (tag == 128) {
         parse_fantasy_team_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_count_)));
          set_has_fantasy_team_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fantasy_teamexpiration;
        break;
      }

      // optional uint32 fantasy_teamexpiration = 17;
      case 17: {
        if (tag == 136) {
         parse_fantasy_teamexpiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_teamexpiration_)));
          set_has_fantasy_teamexpiration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_fantasy_teams_will_lock_at;
        break;
      }

      // optional uint32 fantasy_teams_will_lock_at = 18;
      case 18: {
        if (tag == 144) {
         parse_fantasy_teams_will_lock_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_teams_will_lock_at_)));
          set_has_fantasy_teams_will_lock_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPassportDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPassportDataResponse)
  return false;
#undef DO_
}

void CMsgPassportDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPassportDataResponse)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 result = 2 [default = 2];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional .CMsgDOTATournament international = 5;
  if (has_international()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->international_, output);
  }

  // optional .CMsgDOTAPassportVote league_guesses = 6;
  if (has_league_guesses()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->league_guesses_, output);
  }

  // optional uint32 east_qualifiers_predict_end_time = 7;
  if (has_east_qualifiers_predict_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->east_qualifiers_predict_end_time(), output);
  }

  // optional uint32 west_qualifiers_predict_end_time = 8;
  if (has_west_qualifiers_predict_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->west_qualifiers_predict_end_time(), output);
  }

  // optional uint32 allstar_match_end_time = 9;
  if (has_allstar_match_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->allstar_match_end_time(), output);
  }

  // optional uint32 east_qualifiers_winner_team_id = 10;
  if (has_east_qualifiers_winner_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->east_qualifiers_winner_team_id(), output);
  }

  // optional uint32 east_qualifiers_runner_up_team_id = 11;
  if (has_east_qualifiers_runner_up_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->east_qualifiers_runner_up_team_id(), output);
  }

  // optional uint32 west_qualifiers_winner_team_id = 12;
  if (has_west_qualifiers_winner_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->west_qualifiers_winner_team_id(), output);
  }

  // optional uint32 west_qualifiers_runner_up_team_id = 13;
  if (has_west_qualifiers_runner_up_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->west_qualifiers_runner_up_team_id(), output);
  }

  // optional uint32 passports_bought = 14;
  if (has_passports_bought()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->passports_bought(), output);
  }

  // optional uint32 original_purchaser_id = 15;
  if (has_original_purchaser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->original_purchaser_id(), output);
  }

  // optional uint32 fantasy_team_count = 16;
  if (has_fantasy_team_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fantasy_team_count(), output);
  }

  // optional uint32 fantasy_teamexpiration = 17;
  if (has_fantasy_teamexpiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fantasy_teamexpiration(), output);
  }

  // optional uint32 fantasy_teams_will_lock_at = 18;
  if (has_fantasy_teams_will_lock_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fantasy_teams_will_lock_at(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPassportDataResponse)
}

::google::protobuf::uint8* CMsgPassportDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPassportDataResponse)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 result = 2 [default = 2];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // optional .CMsgDOTATournament international = 5;
  if (has_international()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->international_, target);
  }

  // optional .CMsgDOTAPassportVote league_guesses = 6;
  if (has_league_guesses()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->league_guesses_, target);
  }

  // optional uint32 east_qualifiers_predict_end_time = 7;
  if (has_east_qualifiers_predict_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->east_qualifiers_predict_end_time(), target);
  }

  // optional uint32 west_qualifiers_predict_end_time = 8;
  if (has_west_qualifiers_predict_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->west_qualifiers_predict_end_time(), target);
  }

  // optional uint32 allstar_match_end_time = 9;
  if (has_allstar_match_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->allstar_match_end_time(), target);
  }

  // optional uint32 east_qualifiers_winner_team_id = 10;
  if (has_east_qualifiers_winner_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->east_qualifiers_winner_team_id(), target);
  }

  // optional uint32 east_qualifiers_runner_up_team_id = 11;
  if (has_east_qualifiers_runner_up_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->east_qualifiers_runner_up_team_id(), target);
  }

  // optional uint32 west_qualifiers_winner_team_id = 12;
  if (has_west_qualifiers_winner_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->west_qualifiers_winner_team_id(), target);
  }

  // optional uint32 west_qualifiers_runner_up_team_id = 13;
  if (has_west_qualifiers_runner_up_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->west_qualifiers_runner_up_team_id(), target);
  }

  // optional uint32 passports_bought = 14;
  if (has_passports_bought()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->passports_bought(), target);
  }

  // optional uint32 original_purchaser_id = 15;
  if (has_original_purchaser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->original_purchaser_id(), target);
  }

  // optional uint32 fantasy_team_count = 16;
  if (has_fantasy_team_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fantasy_team_count(), target);
  }

  // optional uint32 fantasy_teamexpiration = 17;
  if (has_fantasy_teamexpiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fantasy_teamexpiration(), target);
  }

  // optional uint32 fantasy_teams_will_lock_at = 18;
  if (has_fantasy_teams_will_lock_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fantasy_teams_will_lock_at(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPassportDataResponse)
  return target;
}

int CMsgPassportDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 result = 2 [default = 2];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .CMsgDOTATournament international = 5;
    if (has_international()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->international_);
    }

    // optional uint32 east_qualifiers_predict_end_time = 7;
    if (has_east_qualifiers_predict_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->east_qualifiers_predict_end_time());
    }

    // optional uint32 west_qualifiers_predict_end_time = 8;
    if (has_west_qualifiers_predict_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->west_qualifiers_predict_end_time());
    }

    // optional uint32 allstar_match_end_time = 9;
    if (has_allstar_match_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allstar_match_end_time());
    }

    // optional .CMsgDOTAPassportVote league_guesses = 6;
    if (has_league_guesses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->league_guesses_);
    }

    // optional uint32 east_qualifiers_winner_team_id = 10;
    if (has_east_qualifiers_winner_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->east_qualifiers_winner_team_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 east_qualifiers_runner_up_team_id = 11;
    if (has_east_qualifiers_runner_up_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->east_qualifiers_runner_up_team_id());
    }

    // optional uint32 west_qualifiers_winner_team_id = 12;
    if (has_west_qualifiers_winner_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->west_qualifiers_winner_team_id());
    }

    // optional uint32 west_qualifiers_runner_up_team_id = 13;
    if (has_west_qualifiers_runner_up_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->west_qualifiers_runner_up_team_id());
    }

    // optional uint32 passports_bought = 14;
    if (has_passports_bought()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passports_bought());
    }

    // optional uint32 original_purchaser_id = 15;
    if (has_original_purchaser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_purchaser_id());
    }

    // optional uint32 fantasy_team_count = 16;
    if (has_fantasy_team_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_count());
    }

    // optional uint32 fantasy_teamexpiration = 17;
    if (has_fantasy_teamexpiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_teamexpiration());
    }

    // optional uint32 fantasy_teams_will_lock_at = 18;
    if (has_fantasy_teams_will_lock_at()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_teams_will_lock_at());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPassportDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgPassportDataResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPassportDataResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPassportDataResponse::MergeFrom(const CMsgPassportDataResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_international()) {
      mutable_international()->::CMsgDOTATournament::MergeFrom(from.international());
    }
    if (from.has_east_qualifiers_predict_end_time()) {
      set_east_qualifiers_predict_end_time(from.east_qualifiers_predict_end_time());
    }
    if (from.has_west_qualifiers_predict_end_time()) {
      set_west_qualifiers_predict_end_time(from.west_qualifiers_predict_end_time());
    }
    if (from.has_allstar_match_end_time()) {
      set_allstar_match_end_time(from.allstar_match_end_time());
    }
    if (from.has_league_guesses()) {
      mutable_league_guesses()->::CMsgDOTAPassportVote::MergeFrom(from.league_guesses());
    }
    if (from.has_east_qualifiers_winner_team_id()) {
      set_east_qualifiers_winner_team_id(from.east_qualifiers_winner_team_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_east_qualifiers_runner_up_team_id()) {
      set_east_qualifiers_runner_up_team_id(from.east_qualifiers_runner_up_team_id());
    }
    if (from.has_west_qualifiers_winner_team_id()) {
      set_west_qualifiers_winner_team_id(from.west_qualifiers_winner_team_id());
    }
    if (from.has_west_qualifiers_runner_up_team_id()) {
      set_west_qualifiers_runner_up_team_id(from.west_qualifiers_runner_up_team_id());
    }
    if (from.has_passports_bought()) {
      set_passports_bought(from.passports_bought());
    }
    if (from.has_original_purchaser_id()) {
      set_original_purchaser_id(from.original_purchaser_id());
    }
    if (from.has_fantasy_team_count()) {
      set_fantasy_team_count(from.fantasy_team_count());
    }
    if (from.has_fantasy_teamexpiration()) {
      set_fantasy_teamexpiration(from.fantasy_teamexpiration());
    }
    if (from.has_fantasy_teams_will_lock_at()) {
      set_fantasy_teams_will_lock_at(from.fantasy_teams_will_lock_at());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgPassportDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPassportDataResponse::CopyFrom(const CMsgPassportDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPassportDataResponse::IsInitialized() const {

  return true;
}

void CMsgPassportDataResponse::Swap(CMsgPassportDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPassportDataResponse::InternalSwap(CMsgPassportDataResponse* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(result_, other->result_);
  std::swap(international_, other->international_);
  std::swap(east_qualifiers_predict_end_time_, other->east_qualifiers_predict_end_time_);
  std::swap(west_qualifiers_predict_end_time_, other->west_qualifiers_predict_end_time_);
  std::swap(allstar_match_end_time_, other->allstar_match_end_time_);
  std::swap(league_guesses_, other->league_guesses_);
  std::swap(east_qualifiers_winner_team_id_, other->east_qualifiers_winner_team_id_);
  std::swap(east_qualifiers_runner_up_team_id_, other->east_qualifiers_runner_up_team_id_);
  std::swap(west_qualifiers_winner_team_id_, other->west_qualifiers_winner_team_id_);
  std::swap(west_qualifiers_runner_up_team_id_, other->west_qualifiers_runner_up_team_id_);
  std::swap(passports_bought_, other->passports_bought_);
  std::swap(original_purchaser_id_, other->original_purchaser_id_);
  std::swap(fantasy_team_count_, other->fantasy_team_count_);
  std::swap(fantasy_teamexpiration_, other->fantasy_teamexpiration_);
  std::swap(fantasy_teams_will_lock_at_, other->fantasy_teams_will_lock_at_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPassportDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPassportDataResponse_descriptor_;
  metadata.reflection = CMsgPassportDataResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPassportDataResponse

// optional uint32 account_id = 1;
bool CMsgPassportDataResponse::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPassportDataResponse::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPassportDataResponse::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPassportDataResponse::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.account_id)
  return account_id_;
}
 void CMsgPassportDataResponse::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.account_id)
}

// optional uint32 result = 2 [default = 2];
bool CMsgPassportDataResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPassportDataResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPassportDataResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPassportDataResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.result)
  return result_;
}
 void CMsgPassportDataResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.result)
}

// optional .CMsgDOTATournament international = 5;
bool CMsgPassportDataResponse::has_international() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPassportDataResponse::set_has_international() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPassportDataResponse::clear_has_international() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPassportDataResponse::clear_international() {
  if (international_ != NULL) international_->::CMsgDOTATournament::Clear();
  clear_has_international();
}
const ::CMsgDOTATournament& CMsgPassportDataResponse::international() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.international)
  return international_ != NULL ? *international_ : *default_instance_->international_;
}
::CMsgDOTATournament* CMsgPassportDataResponse::mutable_international() {
  set_has_international();
  if (international_ == NULL) {
    international_ = new ::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPassportDataResponse.international)
  return international_;
}
::CMsgDOTATournament* CMsgPassportDataResponse::release_international() {
  clear_has_international();
  ::CMsgDOTATournament* temp = international_;
  international_ = NULL;
  return temp;
}
void CMsgPassportDataResponse::set_allocated_international(::CMsgDOTATournament* international) {
  delete international_;
  international_ = international;
  if (international) {
    set_has_international();
  } else {
    clear_has_international();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportDataResponse.international)
}

// optional uint32 east_qualifiers_predict_end_time = 7;
bool CMsgPassportDataResponse::has_east_qualifiers_predict_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPassportDataResponse::set_has_east_qualifiers_predict_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPassportDataResponse::clear_has_east_qualifiers_predict_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPassportDataResponse::clear_east_qualifiers_predict_end_time() {
  east_qualifiers_predict_end_time_ = 0u;
  clear_has_east_qualifiers_predict_end_time();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::east_qualifiers_predict_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers_predict_end_time)
  return east_qualifiers_predict_end_time_;
}
 void CMsgPassportDataResponse::set_east_qualifiers_predict_end_time(::google::protobuf::uint32 value) {
  set_has_east_qualifiers_predict_end_time();
  east_qualifiers_predict_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.east_qualifiers_predict_end_time)
}

// optional uint32 west_qualifiers_predict_end_time = 8;
bool CMsgPassportDataResponse::has_west_qualifiers_predict_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPassportDataResponse::set_has_west_qualifiers_predict_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPassportDataResponse::clear_has_west_qualifiers_predict_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPassportDataResponse::clear_west_qualifiers_predict_end_time() {
  west_qualifiers_predict_end_time_ = 0u;
  clear_has_west_qualifiers_predict_end_time();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::west_qualifiers_predict_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers_predict_end_time)
  return west_qualifiers_predict_end_time_;
}
 void CMsgPassportDataResponse::set_west_qualifiers_predict_end_time(::google::protobuf::uint32 value) {
  set_has_west_qualifiers_predict_end_time();
  west_qualifiers_predict_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.west_qualifiers_predict_end_time)
}

// optional uint32 allstar_match_end_time = 9;
bool CMsgPassportDataResponse::has_allstar_match_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgPassportDataResponse::set_has_allstar_match_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgPassportDataResponse::clear_has_allstar_match_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgPassportDataResponse::clear_allstar_match_end_time() {
  allstar_match_end_time_ = 0u;
  clear_has_allstar_match_end_time();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::allstar_match_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.allstar_match_end_time)
  return allstar_match_end_time_;
}
 void CMsgPassportDataResponse::set_allstar_match_end_time(::google::protobuf::uint32 value) {
  set_has_allstar_match_end_time();
  allstar_match_end_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.allstar_match_end_time)
}

// optional .CMsgDOTAPassportVote league_guesses = 6;
bool CMsgPassportDataResponse::has_league_guesses() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgPassportDataResponse::set_has_league_guesses() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgPassportDataResponse::clear_has_league_guesses() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgPassportDataResponse::clear_league_guesses() {
  if (league_guesses_ != NULL) league_guesses_->::CMsgDOTAPassportVote::Clear();
  clear_has_league_guesses();
}
const ::CMsgDOTAPassportVote& CMsgPassportDataResponse::league_guesses() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.league_guesses)
  return league_guesses_ != NULL ? *league_guesses_ : *default_instance_->league_guesses_;
}
::CMsgDOTAPassportVote* CMsgPassportDataResponse::mutable_league_guesses() {
  set_has_league_guesses();
  if (league_guesses_ == NULL) {
    league_guesses_ = new ::CMsgDOTAPassportVote;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPassportDataResponse.league_guesses)
  return league_guesses_;
}
::CMsgDOTAPassportVote* CMsgPassportDataResponse::release_league_guesses() {
  clear_has_league_guesses();
  ::CMsgDOTAPassportVote* temp = league_guesses_;
  league_guesses_ = NULL;
  return temp;
}
void CMsgPassportDataResponse::set_allocated_league_guesses(::CMsgDOTAPassportVote* league_guesses) {
  delete league_guesses_;
  league_guesses_ = league_guesses;
  if (league_guesses) {
    set_has_league_guesses();
  } else {
    clear_has_league_guesses();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPassportDataResponse.league_guesses)
}

// optional uint32 east_qualifiers_winner_team_id = 10;
bool CMsgPassportDataResponse::has_east_qualifiers_winner_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgPassportDataResponse::set_has_east_qualifiers_winner_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgPassportDataResponse::clear_has_east_qualifiers_winner_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgPassportDataResponse::clear_east_qualifiers_winner_team_id() {
  east_qualifiers_winner_team_id_ = 0u;
  clear_has_east_qualifiers_winner_team_id();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::east_qualifiers_winner_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers_winner_team_id)
  return east_qualifiers_winner_team_id_;
}
 void CMsgPassportDataResponse::set_east_qualifiers_winner_team_id(::google::protobuf::uint32 value) {
  set_has_east_qualifiers_winner_team_id();
  east_qualifiers_winner_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.east_qualifiers_winner_team_id)
}

// optional uint32 east_qualifiers_runner_up_team_id = 11;
bool CMsgPassportDataResponse::has_east_qualifiers_runner_up_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgPassportDataResponse::set_has_east_qualifiers_runner_up_team_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgPassportDataResponse::clear_has_east_qualifiers_runner_up_team_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgPassportDataResponse::clear_east_qualifiers_runner_up_team_id() {
  east_qualifiers_runner_up_team_id_ = 0u;
  clear_has_east_qualifiers_runner_up_team_id();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::east_qualifiers_runner_up_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.east_qualifiers_runner_up_team_id)
  return east_qualifiers_runner_up_team_id_;
}
 void CMsgPassportDataResponse::set_east_qualifiers_runner_up_team_id(::google::protobuf::uint32 value) {
  set_has_east_qualifiers_runner_up_team_id();
  east_qualifiers_runner_up_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.east_qualifiers_runner_up_team_id)
}

// optional uint32 west_qualifiers_winner_team_id = 12;
bool CMsgPassportDataResponse::has_west_qualifiers_winner_team_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgPassportDataResponse::set_has_west_qualifiers_winner_team_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgPassportDataResponse::clear_has_west_qualifiers_winner_team_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgPassportDataResponse::clear_west_qualifiers_winner_team_id() {
  west_qualifiers_winner_team_id_ = 0u;
  clear_has_west_qualifiers_winner_team_id();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::west_qualifiers_winner_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers_winner_team_id)
  return west_qualifiers_winner_team_id_;
}
 void CMsgPassportDataResponse::set_west_qualifiers_winner_team_id(::google::protobuf::uint32 value) {
  set_has_west_qualifiers_winner_team_id();
  west_qualifiers_winner_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.west_qualifiers_winner_team_id)
}

// optional uint32 west_qualifiers_runner_up_team_id = 13;
bool CMsgPassportDataResponse::has_west_qualifiers_runner_up_team_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgPassportDataResponse::set_has_west_qualifiers_runner_up_team_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgPassportDataResponse::clear_has_west_qualifiers_runner_up_team_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgPassportDataResponse::clear_west_qualifiers_runner_up_team_id() {
  west_qualifiers_runner_up_team_id_ = 0u;
  clear_has_west_qualifiers_runner_up_team_id();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::west_qualifiers_runner_up_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.west_qualifiers_runner_up_team_id)
  return west_qualifiers_runner_up_team_id_;
}
 void CMsgPassportDataResponse::set_west_qualifiers_runner_up_team_id(::google::protobuf::uint32 value) {
  set_has_west_qualifiers_runner_up_team_id();
  west_qualifiers_runner_up_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.west_qualifiers_runner_up_team_id)
}

// optional uint32 passports_bought = 14;
bool CMsgPassportDataResponse::has_passports_bought() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgPassportDataResponse::set_has_passports_bought() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgPassportDataResponse::clear_has_passports_bought() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgPassportDataResponse::clear_passports_bought() {
  passports_bought_ = 0u;
  clear_has_passports_bought();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::passports_bought() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.passports_bought)
  return passports_bought_;
}
 void CMsgPassportDataResponse::set_passports_bought(::google::protobuf::uint32 value) {
  set_has_passports_bought();
  passports_bought_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.passports_bought)
}

// optional uint32 original_purchaser_id = 15;
bool CMsgPassportDataResponse::has_original_purchaser_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgPassportDataResponse::set_has_original_purchaser_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgPassportDataResponse::clear_has_original_purchaser_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgPassportDataResponse::clear_original_purchaser_id() {
  original_purchaser_id_ = 0u;
  clear_has_original_purchaser_id();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::original_purchaser_id() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.original_purchaser_id)
  return original_purchaser_id_;
}
 void CMsgPassportDataResponse::set_original_purchaser_id(::google::protobuf::uint32 value) {
  set_has_original_purchaser_id();
  original_purchaser_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.original_purchaser_id)
}

// optional uint32 fantasy_team_count = 16;
bool CMsgPassportDataResponse::has_fantasy_team_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgPassportDataResponse::set_has_fantasy_team_count() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgPassportDataResponse::clear_has_fantasy_team_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgPassportDataResponse::clear_fantasy_team_count() {
  fantasy_team_count_ = 0u;
  clear_has_fantasy_team_count();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::fantasy_team_count() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.fantasy_team_count)
  return fantasy_team_count_;
}
 void CMsgPassportDataResponse::set_fantasy_team_count(::google::protobuf::uint32 value) {
  set_has_fantasy_team_count();
  fantasy_team_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.fantasy_team_count)
}

// optional uint32 fantasy_teamexpiration = 17;
bool CMsgPassportDataResponse::has_fantasy_teamexpiration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgPassportDataResponse::set_has_fantasy_teamexpiration() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgPassportDataResponse::clear_has_fantasy_teamexpiration() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgPassportDataResponse::clear_fantasy_teamexpiration() {
  fantasy_teamexpiration_ = 0u;
  clear_has_fantasy_teamexpiration();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::fantasy_teamexpiration() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.fantasy_teamexpiration)
  return fantasy_teamexpiration_;
}
 void CMsgPassportDataResponse::set_fantasy_teamexpiration(::google::protobuf::uint32 value) {
  set_has_fantasy_teamexpiration();
  fantasy_teamexpiration_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.fantasy_teamexpiration)
}

// optional uint32 fantasy_teams_will_lock_at = 18;
bool CMsgPassportDataResponse::has_fantasy_teams_will_lock_at() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgPassportDataResponse::set_has_fantasy_teams_will_lock_at() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgPassportDataResponse::clear_has_fantasy_teams_will_lock_at() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgPassportDataResponse::clear_fantasy_teams_will_lock_at() {
  fantasy_teams_will_lock_at_ = 0u;
  clear_has_fantasy_teams_will_lock_at();
}
 ::google::protobuf::uint32 CMsgPassportDataResponse::fantasy_teams_will_lock_at() const {
  // @@protoc_insertion_point(field_get:CMsgPassportDataResponse.fantasy_teams_will_lock_at)
  return fantasy_teams_will_lock_at_;
}
 void CMsgPassportDataResponse::set_fantasy_teams_will_lock_at(::google::protobuf::uint32 value) {
  set_has_fantasy_teams_will_lock_at();
  fantasy_teams_will_lock_at_ = value;
  // @@protoc_insertion_point(field_set:CMsgPassportDataResponse.fantasy_teams_will_lock_at)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
