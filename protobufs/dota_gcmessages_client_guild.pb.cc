// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildSDO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildSDO_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_Invitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildSDO_Invitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildAuditSDO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildAuditSDO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildAuditSDO_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildAuditSDO_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAccountGuildMembershipsSDO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_Membership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAccountGuildMembershipsSDO_Membership_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_Invitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAAccountGuildMembershipsSDO_Invitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildCreateResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCreateResponse_EError_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildSetAccountRoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildSetAccountRoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildSetAccountRoleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildSetAccountRoleResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildInviteAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildInviteAccountResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildInviteAccountResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildCancelInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildCancelInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildCancelInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildCancelInviteResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCancelInviteResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateDetailsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildUpdateDetailsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateDetailsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildUpdateDetailsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPartySetOpenGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPartySetOpenGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPartySetOpenGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPartySetOpenGuildResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAJoinOpenGuildPartyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAJoinOpenGuildPartyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAJoinOpenGuildPartyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAJoinOpenGuildPartyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildOpenPartyRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildOpenPartyRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildOpenPartyRefresh_OpenParty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildOpenPartyRefresh_OpenParty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTARequestGuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTARequestGuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildInviteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildUpdateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildEditLogoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildEditLogoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGuildEditLogoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGuildEditLogoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildEditLogoResponse_EResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fguild_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_guild.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgDOTAGuildSDO_descriptor_ = file->message_type(0);
  static const int CMsgDOTAGuildSDO_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, time_disbanded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, incremental_),
  };
  CMsgDOTAGuildSDO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildSDO_descriptor_,
      CMsgDOTAGuildSDO::default_instance_,
      CMsgDOTAGuildSDO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildSDO));
  CMsgDOTAGuildSDO_Member_descriptor_ = CMsgDOTAGuildSDO_descriptor_->nested_type(0);
  static const int CMsgDOTAGuildSDO_Member_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, time_joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, role_),
  };
  CMsgDOTAGuildSDO_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildSDO_Member_descriptor_,
      CMsgDOTAGuildSDO_Member::default_instance_,
      CMsgDOTAGuildSDO_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildSDO_Member));
  CMsgDOTAGuildSDO_Invitation_descriptor_ = CMsgDOTAGuildSDO_descriptor_->nested_type(1);
  static const int CMsgDOTAGuildSDO_Invitation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, time_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, account_id_sender_),
  };
  CMsgDOTAGuildSDO_Invitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildSDO_Invitation_descriptor_,
      CMsgDOTAGuildSDO_Invitation::default_instance_,
      CMsgDOTAGuildSDO_Invitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildSDO_Invitation));
  CMsgDOTAGuildAuditSDO_descriptor_ = file->message_type(1);
  static const int CMsgDOTAGuildAuditSDO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, entries_),
  };
  CMsgDOTAGuildAuditSDO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildAuditSDO_descriptor_,
      CMsgDOTAGuildAuditSDO::default_instance_,
      CMsgDOTAGuildAuditSDO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildAuditSDO));
  CMsgDOTAGuildAuditSDO_Entry_descriptor_ = CMsgDOTAGuildAuditSDO_descriptor_->nested_type(0);
  static const int CMsgDOTAGuildAuditSDO_Entry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, event_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, account_id_requestor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, account_id_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, reference_data_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, reference_data_b_),
  };
  CMsgDOTAGuildAuditSDO_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildAuditSDO_Entry_descriptor_,
      CMsgDOTAGuildAuditSDO_Entry::default_instance_,
      CMsgDOTAGuildAuditSDO_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildAuditSDO_Entry));
  CMsgDOTAAccountGuildMembershipsSDO_descriptor_ = file->message_type(2);
  static const int CMsgDOTAAccountGuildMembershipsSDO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, memberships_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, invitations_),
  };
  CMsgDOTAAccountGuildMembershipsSDO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAccountGuildMembershipsSDO_descriptor_,
      CMsgDOTAAccountGuildMembershipsSDO::default_instance_,
      CMsgDOTAAccountGuildMembershipsSDO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAccountGuildMembershipsSDO));
  CMsgDOTAAccountGuildMembershipsSDO_Membership_descriptor_ = CMsgDOTAAccountGuildMembershipsSDO_descriptor_->nested_type(0);
  static const int CMsgDOTAAccountGuildMembershipsSDO_Membership_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, role_),
  };
  CMsgDOTAAccountGuildMembershipsSDO_Membership_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAccountGuildMembershipsSDO_Membership_descriptor_,
      CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance_,
      CMsgDOTAAccountGuildMembershipsSDO_Membership_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAccountGuildMembershipsSDO_Membership));
  CMsgDOTAAccountGuildMembershipsSDO_Invitation_descriptor_ = CMsgDOTAAccountGuildMembershipsSDO_descriptor_->nested_type(1);
  static const int CMsgDOTAAccountGuildMembershipsSDO_Invitation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, time_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, account_id_sender_),
  };
  CMsgDOTAAccountGuildMembershipsSDO_Invitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAAccountGuildMembershipsSDO_Invitation_descriptor_,
      CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance_,
      CMsgDOTAAccountGuildMembershipsSDO_Invitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAAccountGuildMembershipsSDO_Invitation));
  CMsgDOTAGuildCreateRequest_descriptor_ = file->message_type(3);
  static const int CMsgDOTAGuildCreateRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, banner_logo_),
  };
  CMsgDOTAGuildCreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildCreateRequest_descriptor_,
      CMsgDOTAGuildCreateRequest::default_instance_,
      CMsgDOTAGuildCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildCreateRequest));
  CMsgDOTAGuildCreateResponse_descriptor_ = file->message_type(4);
  static const int CMsgDOTAGuildCreateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, errors_),
  };
  CMsgDOTAGuildCreateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildCreateResponse_descriptor_,
      CMsgDOTAGuildCreateResponse::default_instance_,
      CMsgDOTAGuildCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildCreateResponse));
  CMsgDOTAGuildCreateResponse_EError_descriptor_ = CMsgDOTAGuildCreateResponse_descriptor_->enum_type(0);
  CMsgDOTAGuildSetAccountRoleRequest_descriptor_ = file->message_type(5);
  static const int CMsgDOTAGuildSetAccountRoleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, target_role_),
  };
  CMsgDOTAGuildSetAccountRoleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildSetAccountRoleRequest_descriptor_,
      CMsgDOTAGuildSetAccountRoleRequest::default_instance_,
      CMsgDOTAGuildSetAccountRoleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildSetAccountRoleRequest));
  CMsgDOTAGuildSetAccountRoleResponse_descriptor_ = file->message_type(6);
  static const int CMsgDOTAGuildSetAccountRoleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleResponse, result_),
  };
  CMsgDOTAGuildSetAccountRoleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildSetAccountRoleResponse_descriptor_,
      CMsgDOTAGuildSetAccountRoleResponse::default_instance_,
      CMsgDOTAGuildSetAccountRoleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildSetAccountRoleResponse));
  CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor_ = CMsgDOTAGuildSetAccountRoleResponse_descriptor_->enum_type(0);
  CMsgDOTAGuildInviteAccountRequest_descriptor_ = file->message_type(7);
  static const int CMsgDOTAGuildInviteAccountRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, target_account_id_),
  };
  CMsgDOTAGuildInviteAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildInviteAccountRequest_descriptor_,
      CMsgDOTAGuildInviteAccountRequest::default_instance_,
      CMsgDOTAGuildInviteAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildInviteAccountRequest));
  CMsgDOTAGuildInviteAccountResponse_descriptor_ = file->message_type(8);
  static const int CMsgDOTAGuildInviteAccountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountResponse, result_),
  };
  CMsgDOTAGuildInviteAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildInviteAccountResponse_descriptor_,
      CMsgDOTAGuildInviteAccountResponse::default_instance_,
      CMsgDOTAGuildInviteAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildInviteAccountResponse));
  CMsgDOTAGuildInviteAccountResponse_EResult_descriptor_ = CMsgDOTAGuildInviteAccountResponse_descriptor_->enum_type(0);
  CMsgDOTAGuildCancelInviteRequest_descriptor_ = file->message_type(9);
  static const int CMsgDOTAGuildCancelInviteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, target_account_id_),
  };
  CMsgDOTAGuildCancelInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildCancelInviteRequest_descriptor_,
      CMsgDOTAGuildCancelInviteRequest::default_instance_,
      CMsgDOTAGuildCancelInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildCancelInviteRequest));
  CMsgDOTAGuildCancelInviteResponse_descriptor_ = file->message_type(10);
  static const int CMsgDOTAGuildCancelInviteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteResponse, result_),
  };
  CMsgDOTAGuildCancelInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildCancelInviteResponse_descriptor_,
      CMsgDOTAGuildCancelInviteResponse::default_instance_,
      CMsgDOTAGuildCancelInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildCancelInviteResponse));
  CMsgDOTAGuildCancelInviteResponse_EResult_descriptor_ = CMsgDOTAGuildCancelInviteResponse_descriptor_->enum_type(0);
  CMsgDOTAGuildUpdateDetailsRequest_descriptor_ = file->message_type(11);
  static const int CMsgDOTAGuildUpdateDetailsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, banner_logo_),
  };
  CMsgDOTAGuildUpdateDetailsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildUpdateDetailsRequest_descriptor_,
      CMsgDOTAGuildUpdateDetailsRequest::default_instance_,
      CMsgDOTAGuildUpdateDetailsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildUpdateDetailsRequest));
  CMsgDOTAGuildUpdateDetailsResponse_descriptor_ = file->message_type(12);
  static const int CMsgDOTAGuildUpdateDetailsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsResponse, result_),
  };
  CMsgDOTAGuildUpdateDetailsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildUpdateDetailsResponse_descriptor_,
      CMsgDOTAGuildUpdateDetailsResponse::default_instance_,
      CMsgDOTAGuildUpdateDetailsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildUpdateDetailsResponse));
  CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor_ = CMsgDOTAGuildUpdateDetailsResponse_descriptor_->enum_type(0);
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_descriptor_ = file->message_type(13);
  static const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, member_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, description_),
  };
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_descriptor_,
      CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance_,
      CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest));
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_descriptor_ = file->message_type(14);
  static const int CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse, maintain_association_),
  };
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_descriptor_,
      CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance_,
      CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse));
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_descriptor_ = file->message_type(15);
  static const int CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, guild_id_),
  };
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_descriptor_,
      CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance_,
      CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest));
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_descriptor_ = file->message_type(16);
  static const int CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_offsets_[1] = {
  };
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_descriptor_,
      CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance_,
      CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse));
  CMsgDOTAPartySetOpenGuildRequest_descriptor_ = file->message_type(17);
  static const int CMsgDOTAPartySetOpenGuildRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, description_),
  };
  CMsgDOTAPartySetOpenGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPartySetOpenGuildRequest_descriptor_,
      CMsgDOTAPartySetOpenGuildRequest::default_instance_,
      CMsgDOTAPartySetOpenGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPartySetOpenGuildRequest));
  CMsgDOTAPartySetOpenGuildResponse_descriptor_ = file->message_type(18);
  static const int CMsgDOTAPartySetOpenGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildResponse, result_),
  };
  CMsgDOTAPartySetOpenGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPartySetOpenGuildResponse_descriptor_,
      CMsgDOTAPartySetOpenGuildResponse::default_instance_,
      CMsgDOTAPartySetOpenGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPartySetOpenGuildResponse));
  CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor_ = CMsgDOTAPartySetOpenGuildResponse_descriptor_->enum_type(0);
  CMsgDOTAJoinOpenGuildPartyRequest_descriptor_ = file->message_type(19);
  static const int CMsgDOTAJoinOpenGuildPartyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyRequest, party_id_),
  };
  CMsgDOTAJoinOpenGuildPartyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAJoinOpenGuildPartyRequest_descriptor_,
      CMsgDOTAJoinOpenGuildPartyRequest::default_instance_,
      CMsgDOTAJoinOpenGuildPartyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAJoinOpenGuildPartyRequest));
  CMsgDOTAJoinOpenGuildPartyResponse_descriptor_ = file->message_type(20);
  static const int CMsgDOTAJoinOpenGuildPartyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyResponse, result_),
  };
  CMsgDOTAJoinOpenGuildPartyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAJoinOpenGuildPartyResponse_descriptor_,
      CMsgDOTAJoinOpenGuildPartyResponse::default_instance_,
      CMsgDOTAJoinOpenGuildPartyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAJoinOpenGuildPartyResponse));
  CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor_ = CMsgDOTAJoinOpenGuildPartyResponse_descriptor_->enum_type(0);
  CMsgDOTAGuildOpenPartyRefresh_descriptor_ = file->message_type(21);
  static const int CMsgDOTAGuildOpenPartyRefresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, open_parties_),
  };
  CMsgDOTAGuildOpenPartyRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildOpenPartyRefresh_descriptor_,
      CMsgDOTAGuildOpenPartyRefresh::default_instance_,
      CMsgDOTAGuildOpenPartyRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildOpenPartyRefresh));
  CMsgDOTAGuildOpenPartyRefresh_OpenParty_descriptor_ = CMsgDOTAGuildOpenPartyRefresh_descriptor_->nested_type(0);
  static const int CMsgDOTAGuildOpenPartyRefresh_OpenParty_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, member_account_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, description_),
  };
  CMsgDOTAGuildOpenPartyRefresh_OpenParty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildOpenPartyRefresh_OpenParty_descriptor_,
      CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance_,
      CMsgDOTAGuildOpenPartyRefresh_OpenParty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildOpenPartyRefresh_OpenParty));
  CMsgDOTARequestGuildData_descriptor_ = file->message_type(22);
  static const int CMsgDOTARequestGuildData_offsets_[1] = {
  };
  CMsgDOTARequestGuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTARequestGuildData_descriptor_,
      CMsgDOTARequestGuildData::default_instance_,
      CMsgDOTARequestGuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestGuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestGuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTARequestGuildData));
  CMsgDOTAGuildInviteData_descriptor_ = file->message_type(23);
  static const int CMsgDOTAGuildInviteData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, invited_to_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, guild_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, inviter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, member_count_),
  };
  CMsgDOTAGuildInviteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildInviteData_descriptor_,
      CMsgDOTAGuildInviteData::default_instance_,
      CMsgDOTAGuildInviteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildInviteData));
  CMsgDOTAGuildUpdateMessage_descriptor_ = file->message_type(24);
  static const int CMsgDOTAGuildUpdateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, guild_id_),
  };
  CMsgDOTAGuildUpdateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildUpdateMessage_descriptor_,
      CMsgDOTAGuildUpdateMessage::default_instance_,
      CMsgDOTAGuildUpdateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildUpdateMessage));
  CMsgDOTAGuildEditLogoRequest_descriptor_ = file->message_type(25);
  static const int CMsgDOTAGuildEditLogoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, logo_),
  };
  CMsgDOTAGuildEditLogoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildEditLogoRequest_descriptor_,
      CMsgDOTAGuildEditLogoRequest::default_instance_,
      CMsgDOTAGuildEditLogoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildEditLogoRequest));
  CMsgDOTAGuildEditLogoResponse_descriptor_ = file->message_type(26);
  static const int CMsgDOTAGuildEditLogoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, result_),
  };
  CMsgDOTAGuildEditLogoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGuildEditLogoResponse_descriptor_,
      CMsgDOTAGuildEditLogoResponse::default_instance_,
      CMsgDOTAGuildEditLogoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGuildEditLogoResponse));
  CMsgDOTAGuildEditLogoResponse_EResult_descriptor_ = CMsgDOTAGuildEditLogoResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fguild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildSDO_descriptor_, &CMsgDOTAGuildSDO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildSDO_Member_descriptor_, &CMsgDOTAGuildSDO_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildSDO_Invitation_descriptor_, &CMsgDOTAGuildSDO_Invitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildAuditSDO_descriptor_, &CMsgDOTAGuildAuditSDO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildAuditSDO_Entry_descriptor_, &CMsgDOTAGuildAuditSDO_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAccountGuildMembershipsSDO_descriptor_, &CMsgDOTAAccountGuildMembershipsSDO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAccountGuildMembershipsSDO_Membership_descriptor_, &CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAAccountGuildMembershipsSDO_Invitation_descriptor_, &CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildCreateRequest_descriptor_, &CMsgDOTAGuildCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildCreateResponse_descriptor_, &CMsgDOTAGuildCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildSetAccountRoleRequest_descriptor_, &CMsgDOTAGuildSetAccountRoleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildSetAccountRoleResponse_descriptor_, &CMsgDOTAGuildSetAccountRoleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildInviteAccountRequest_descriptor_, &CMsgDOTAGuildInviteAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildInviteAccountResponse_descriptor_, &CMsgDOTAGuildInviteAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildCancelInviteRequest_descriptor_, &CMsgDOTAGuildCancelInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildCancelInviteResponse_descriptor_, &CMsgDOTAGuildCancelInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildUpdateDetailsRequest_descriptor_, &CMsgDOTAGuildUpdateDetailsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildUpdateDetailsResponse_descriptor_, &CMsgDOTAGuildUpdateDetailsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_descriptor_, &CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_descriptor_, &CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_descriptor_, &CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_descriptor_, &CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPartySetOpenGuildRequest_descriptor_, &CMsgDOTAPartySetOpenGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPartySetOpenGuildResponse_descriptor_, &CMsgDOTAPartySetOpenGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAJoinOpenGuildPartyRequest_descriptor_, &CMsgDOTAJoinOpenGuildPartyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAJoinOpenGuildPartyResponse_descriptor_, &CMsgDOTAJoinOpenGuildPartyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildOpenPartyRefresh_descriptor_, &CMsgDOTAGuildOpenPartyRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildOpenPartyRefresh_OpenParty_descriptor_, &CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTARequestGuildData_descriptor_, &CMsgDOTARequestGuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildInviteData_descriptor_, &CMsgDOTAGuildInviteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildUpdateMessage_descriptor_, &CMsgDOTAGuildUpdateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildEditLogoRequest_descriptor_, &CMsgDOTAGuildEditLogoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGuildEditLogoResponse_descriptor_, &CMsgDOTAGuildEditLogoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fguild_2eproto() {
  delete CMsgDOTAGuildSDO::default_instance_;
  delete CMsgDOTAGuildSDO_reflection_;
  delete CMsgDOTAGuildSDO_Member::default_instance_;
  delete CMsgDOTAGuildSDO_Member_reflection_;
  delete CMsgDOTAGuildSDO_Invitation::default_instance_;
  delete CMsgDOTAGuildSDO_Invitation_reflection_;
  delete CMsgDOTAGuildAuditSDO::default_instance_;
  delete CMsgDOTAGuildAuditSDO_reflection_;
  delete CMsgDOTAGuildAuditSDO_Entry::default_instance_;
  delete CMsgDOTAGuildAuditSDO_Entry_reflection_;
  delete CMsgDOTAAccountGuildMembershipsSDO::default_instance_;
  delete CMsgDOTAAccountGuildMembershipsSDO_reflection_;
  delete CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance_;
  delete CMsgDOTAAccountGuildMembershipsSDO_Membership_reflection_;
  delete CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance_;
  delete CMsgDOTAAccountGuildMembershipsSDO_Invitation_reflection_;
  delete CMsgDOTAGuildCreateRequest::default_instance_;
  delete CMsgDOTAGuildCreateRequest_reflection_;
  delete CMsgDOTAGuildCreateResponse::default_instance_;
  delete CMsgDOTAGuildCreateResponse_reflection_;
  delete CMsgDOTAGuildSetAccountRoleRequest::default_instance_;
  delete CMsgDOTAGuildSetAccountRoleRequest_reflection_;
  delete CMsgDOTAGuildSetAccountRoleResponse::default_instance_;
  delete CMsgDOTAGuildSetAccountRoleResponse_reflection_;
  delete CMsgDOTAGuildInviteAccountRequest::default_instance_;
  delete CMsgDOTAGuildInviteAccountRequest_reflection_;
  delete CMsgDOTAGuildInviteAccountResponse::default_instance_;
  delete CMsgDOTAGuildInviteAccountResponse_reflection_;
  delete CMsgDOTAGuildCancelInviteRequest::default_instance_;
  delete CMsgDOTAGuildCancelInviteRequest_reflection_;
  delete CMsgDOTAGuildCancelInviteResponse::default_instance_;
  delete CMsgDOTAGuildCancelInviteResponse_reflection_;
  delete CMsgDOTAGuildUpdateDetailsRequest::default_instance_;
  delete CMsgDOTAGuildUpdateDetailsRequest_reflection_;
  delete CMsgDOTAGuildUpdateDetailsResponse::default_instance_;
  delete CMsgDOTAGuildUpdateDetailsResponse_reflection_;
  delete CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance_;
  delete CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_reflection_;
  delete CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance_;
  delete CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_reflection_;
  delete CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance_;
  delete CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_reflection_;
  delete CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance_;
  delete CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_reflection_;
  delete CMsgDOTAPartySetOpenGuildRequest::default_instance_;
  delete CMsgDOTAPartySetOpenGuildRequest_reflection_;
  delete CMsgDOTAPartySetOpenGuildResponse::default_instance_;
  delete CMsgDOTAPartySetOpenGuildResponse_reflection_;
  delete CMsgDOTAJoinOpenGuildPartyRequest::default_instance_;
  delete CMsgDOTAJoinOpenGuildPartyRequest_reflection_;
  delete CMsgDOTAJoinOpenGuildPartyResponse::default_instance_;
  delete CMsgDOTAJoinOpenGuildPartyResponse_reflection_;
  delete CMsgDOTAGuildOpenPartyRefresh::default_instance_;
  delete CMsgDOTAGuildOpenPartyRefresh_reflection_;
  delete CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance_;
  delete CMsgDOTAGuildOpenPartyRefresh_OpenParty_reflection_;
  delete CMsgDOTARequestGuildData::default_instance_;
  delete CMsgDOTARequestGuildData_reflection_;
  delete CMsgDOTAGuildInviteData::default_instance_;
  delete CMsgDOTAGuildInviteData_reflection_;
  delete CMsgDOTAGuildUpdateMessage::default_instance_;
  delete CMsgDOTAGuildUpdateMessage_reflection_;
  delete CMsgDOTAGuildEditLogoRequest::default_instance_;
  delete CMsgDOTAGuildEditLogoRequest_reflection_;
  delete CMsgDOTAGuildEditLogoResponse::default_instance_;
  delete CMsgDOTAGuildEditLogoResponse_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"dota_gcmessages_client_guild.proto\"\270\003\n"
    "\020CMsgDOTAGuildSDO\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004n"
    "ame\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022\024\n\014time_created\030\004"
    " \001(\r\022\026\n\016time_disbanded\030\005 \001(\r\022\014\n\004logo\030\006 \001"
    "(\004\022\021\n\tbase_logo\030\007 \001(\004\022\023\n\013banner_logo\030\010 \001"
    "(\004\022)\n\007members\030\t \003(\0132\030.CMsgDOTAGuildSDO.M"
    "ember\0221\n\013invitations\030\n \003(\0132\034.CMsgDOTAGui"
    "ldSDO.Invitation\022\017\n\007message\030\013 \001(\t\022\023\n\013inc"
    "remental\030\014 \001(\010\032\?\n\006Member\022\022\n\naccount_id\030\001"
    " \001(\r\022\023\n\013time_joined\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\032"
    "N\n\nInvitation\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ttim"
    "e_sent\030\002 \001(\r\022\031\n\021account_id_sender\030\003 \001(\r\""
    "\207\002\n\025CMsgDOTAGuildAuditSDO\022\020\n\010guild_id\030\001 "
    "\001(\r\022-\n\007entries\030\002 \003(\0132\034.CMsgDOTAGuildAudi"
    "tSDO.Entry\032\254\001\n\005Entry\022\023\n\013event_index\030\001 \001("
    "\r\022\021\n\ttimestamp\030\002 \001(\r\022\016\n\006action\030\003 \001(\r\022\034\n\024"
    "account_id_requestor\030\004 \001(\r\022\031\n\021account_id"
    "_target\030\005 \001(\r\022\030\n\020reference_data_a\030\006 \001(\r\022"
    "\030\n\020reference_data_b\030\007 \001(\r\"\276\002\n\"CMsgDOTAAc"
    "countGuildMembershipsSDO\022\022\n\naccount_id\030\001"
    " \001(\r\022C\n\013memberships\030\002 \003(\0132..CMsgDOTAAcco"
    "untGuildMembershipsSDO.Membership\022C\n\013inv"
    "itations\030\003 \003(\0132..CMsgDOTAAccountGuildMem"
    "bershipsSDO.Invitation\032,\n\nMembership\022\020\n\010"
    "guild_id\030\001 \001(\r\022\014\n\004role\030\002 \001(\r\032L\n\nInvitati"
    "on\022\020\n\010guild_id\030\001 \001(\r\022\021\n\ttime_sent\030\002 \001(\r\022"
    "\031\n\021account_id_sender\030\003 \001(\r\"m\n\032CMsgDOTAGu"
    "ildCreateRequest\022\014\n\004name\030\001 \001(\t\022\013\n\003tag\030\002 "
    "\001(\t\022\014\n\004logo\030\003 \001(\004\022\021\n\tbase_logo\030\004 \001(\004\022\023\n\013"
    "banner_logo\030\005 \001(\004\"\272\002\n\033CMsgDOTAGuildCreat"
    "eResponse\022\020\n\010guild_id\030\001 \001(\r\0223\n\006errors\030\002 "
    "\003(\0162#.CMsgDOTAGuildCreateResponse.EError"
    "\"\323\001\n\006EError\022\017\n\013UNSPECIFIED\020\000\022\016\n\nNAME_EMP"
    "TY\020\001\022\027\n\023NAME_BAD_CHARACTERS\020\002\022\021\n\rNAME_TO"
    "O_LONG\020\003\022\016\n\nNAME_TAKEN\020\004\022\r\n\tTAG_EMPTY\020\005\022"
    "\026\n\022TAG_BAD_CHARACTERS\020\006\022\020\n\014TAG_TOO_LONG\020"
    "\007\022\033\n\027ACCOUNT_TOO_MANY_GUILDS\020\010\022\026\n\022LOGO_U"
    "PLOAD_FAILED\020\t\"f\n\"CMsgDOTAGuildSetAccoun"
    "tRoleRequest\022\020\n\010guild_id\030\001 \001(\r\022\031\n\021target"
    "_account_id\030\002 \001(\r\022\023\n\013target_role\030\003 \001(\r\"\225"
    "\002\n#CMsgDOTAGuildSetAccountRoleResponse\022E"
    "\n\006result\030\001 \001(\0162,.CMsgDOTAGuildSetAccount"
    "RoleResponse.EResult:\007SUCCESS\"\246\001\n\007EResul"
    "t\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n"
    "\023ERROR_NO_PERMISSION\020\002\022\031\n\025ERROR_NO_OTHER"
    "_LEADER\020\003\022!\n\035ERROR_ACCOUNT_TOO_MANY_GUIL"
    "DS\020\004\022 \n\034ERROR_GUILD_TOO_MANY_MEMBERS\020\005\"P"
    "\n!CMsgDOTAGuildInviteAccountRequest\022\020\n\010g"
    "uild_id\030\001 \001(\r\022\031\n\021target_account_id\030\002 \001(\r"
    "\"\343\002\n\"CMsgDOTAGuildInviteAccountResponse\022"
    "D\n\006result\030\001 \001(\0162+.CMsgDOTAGuildInviteAcc"
    "ountResponse.EResult:\007SUCCESS\"\366\001\n\007EResul"
    "t\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n"
    "\023ERROR_NO_PERMISSION\020\002\022!\n\035ERROR_ACCOUNT_"
    "ALREADY_INVITED\020\003\022\"\n\036ERROR_ACCOUNT_ALREA"
    "DY_IN_GUILD\020\004\022\"\n\036ERROR_ACCOUNT_TOO_MANY_"
    "INVITES\020\005\022 \n\034ERROR_GUILD_TOO_MANY_INVITE"
    "S\020\006\022!\n\035ERROR_ACCOUNT_TOO_MANY_GUILDS\020\007\"O"
    "\n CMsgDOTAGuildCancelInviteRequest\022\020\n\010gu"
    "ild_id\030\001 \001(\r\022\031\n\021target_account_id\030\002 \001(\r\""
    "\260\001\n!CMsgDOTAGuildCancelInviteResponse\022C\n"
    "\006result\030\001 \001(\0162*.CMsgDOTAGuildCancelInvit"
    "eResponse.EResult:\007SUCCESS\"F\n\007EResult\022\013\n"
    "\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERR"
    "OR_NO_PERMISSION\020\002\"k\n!CMsgDOTAGuildUpdat"
    "eDetailsRequest\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004log"
    "o\030\002 \001(\004\022\021\n\tbase_logo\030\003 \001(\004\022\023\n\013banner_log"
    "o\030\004 \001(\004\"\262\001\n\"CMsgDOTAGuildUpdateDetailsRe"
    "sponse\022D\n\006result\030\001 \001(\0162+.CMsgDOTAGuildUp"
    "dateDetailsResponse.EResult:\007SUCCESS\"F\n\007"
    "EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIE"
    "D\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\200\001\n)CMsgDOT"
    "AGCToGCUpdateOpenGuildPartyRequest\022\020\n\010pa"
    "rty_id\030\001 \001(\004\022\020\n\010guild_id\030\002 \001(\r\022\032\n\022member"
    "_account_ids\030\003 \003(\r\022\023\n\013description\030\004 \001(\t\""
    "J\n*CMsgDOTAGCToGCUpdateOpenGuildPartyRes"
    "ponse\022\034\n\024maintain_association\030\001 \001(\010\"P\n*C"
    "MsgDOTAGCToGCDestroyOpenGuildPartyReques"
    "t\022\020\n\010party_id\030\001 \001(\004\022\020\n\010guild_id\030\002 \001(\r\"-\n"
    "+CMsgDOTAGCToGCDestroyOpenGuildPartyResp"
    "onse\"I\n CMsgDOTAPartySetOpenGuildRequest"
    "\022\020\n\010guild_id\030\001 \001(\r\022\023\n\013description\030\002 \001(\t\""
    "\227\001\n!CMsgDOTAPartySetOpenGuildResponse\022C\n"
    "\006result\030\001 \001(\0162*.CMsgDOTAPartySetOpenGuil"
    "dResponse.EResult:\007SUCCESS\"-\n\007EResult\022\013\n"
    "\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\"5\n!CMs"
    "gDOTAJoinOpenGuildPartyRequest\022\020\n\010party_"
    "id\030\001 \001(\004\"\231\001\n\"CMsgDOTAJoinOpenGuildPartyR"
    "esponse\022D\n\006result\030\001 \001(\0162+.CMsgDOTAJoinOp"
    "enGuildPartyResponse.EResult:\007SUCCESS\"-\n"
    "\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFI"
    "ED\020\001\"\327\001\n\035CMsgDOTAGuildOpenPartyRefresh\022\020"
    "\n\010guild_id\030\001 \001(\r\022>\n\014open_parties\030\002 \003(\0132("
    ".CMsgDOTAGuildOpenPartyRefresh.OpenParty"
    "\032d\n\tOpenParty\022\020\n\010party_id\030\001 \001(\004\022\032\n\022membe"
    "r_account_ids\030\002 \003(\r\022\024\n\014time_created\030\003 \001("
    "\r\022\023\n\013description\030\004 \001(\t\"\032\n\030CMsgDOTAReques"
    "tGuildData\"\267\001\n\027CMsgDOTAGuildInviteData\022\030"
    "\n\020invited_to_guild\030\001 \001(\010\022\020\n\010guild_id\030\002 \001"
    "(\r\022\022\n\nguild_name\030\003 \001(\t\022\021\n\tguild_tag\030\004 \001("
    "\t\022\014\n\004logo\030\005 \001(\004\022\017\n\007inviter\030\006 \001(\r\022\024\n\014invi"
    "ter_name\030\007 \001(\t\022\024\n\014member_count\030\010 \001(\r\"\?\n\032"
    "CMsgDOTAGuildUpdateMessage\022\017\n\007message\030\001 "
    "\001(\t\022\020\n\010guild_id\030\002 \001(\r\">\n\034CMsgDOTAGuildEd"
    "itLogoRequest\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004logo\030"
    "\002 \001(\004\"\314\001\n\035CMsgDOTAGuildEditLogoResponse\022"
    "\020\n\010guild_id\030\001 \001(\r\022\?\n\006result\030\002 \001(\0162&.CMsg"
    "DOTAGuildEditLogoResponse.EResult:\007SUCCE"
    "SS\"X\n\007EResult\022\013\n\007SUCCESS\020\000\022\021\n\rNO_PERMISS"
    "ION\020\001\022\026\n\022LOGO_UPLOAD_FAILED\020\002\022\025\n\021UNSPECI"
    "FIED_ERROR\020\003B\005H\001\200\001\000", 4419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_guild.proto", &protobuf_RegisterTypes);
  CMsgDOTAGuildSDO::default_instance_ = new CMsgDOTAGuildSDO();
  CMsgDOTAGuildSDO_Member::default_instance_ = new CMsgDOTAGuildSDO_Member();
  CMsgDOTAGuildSDO_Invitation::default_instance_ = new CMsgDOTAGuildSDO_Invitation();
  CMsgDOTAGuildAuditSDO::default_instance_ = new CMsgDOTAGuildAuditSDO();
  CMsgDOTAGuildAuditSDO_Entry::default_instance_ = new CMsgDOTAGuildAuditSDO_Entry();
  CMsgDOTAAccountGuildMembershipsSDO::default_instance_ = new CMsgDOTAAccountGuildMembershipsSDO();
  CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance_ = new CMsgDOTAAccountGuildMembershipsSDO_Membership();
  CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance_ = new CMsgDOTAAccountGuildMembershipsSDO_Invitation();
  CMsgDOTAGuildCreateRequest::default_instance_ = new CMsgDOTAGuildCreateRequest();
  CMsgDOTAGuildCreateResponse::default_instance_ = new CMsgDOTAGuildCreateResponse();
  CMsgDOTAGuildSetAccountRoleRequest::default_instance_ = new CMsgDOTAGuildSetAccountRoleRequest();
  CMsgDOTAGuildSetAccountRoleResponse::default_instance_ = new CMsgDOTAGuildSetAccountRoleResponse();
  CMsgDOTAGuildInviteAccountRequest::default_instance_ = new CMsgDOTAGuildInviteAccountRequest();
  CMsgDOTAGuildInviteAccountResponse::default_instance_ = new CMsgDOTAGuildInviteAccountResponse();
  CMsgDOTAGuildCancelInviteRequest::default_instance_ = new CMsgDOTAGuildCancelInviteRequest();
  CMsgDOTAGuildCancelInviteResponse::default_instance_ = new CMsgDOTAGuildCancelInviteResponse();
  CMsgDOTAGuildUpdateDetailsRequest::default_instance_ = new CMsgDOTAGuildUpdateDetailsRequest();
  CMsgDOTAGuildUpdateDetailsResponse::default_instance_ = new CMsgDOTAGuildUpdateDetailsResponse();
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance_ = new CMsgDOTAGCToGCUpdateOpenGuildPartyRequest();
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance_ = new CMsgDOTAGCToGCUpdateOpenGuildPartyResponse();
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance_ = new CMsgDOTAGCToGCDestroyOpenGuildPartyRequest();
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance_ = new CMsgDOTAGCToGCDestroyOpenGuildPartyResponse();
  CMsgDOTAPartySetOpenGuildRequest::default_instance_ = new CMsgDOTAPartySetOpenGuildRequest();
  CMsgDOTAPartySetOpenGuildResponse::default_instance_ = new CMsgDOTAPartySetOpenGuildResponse();
  CMsgDOTAJoinOpenGuildPartyRequest::default_instance_ = new CMsgDOTAJoinOpenGuildPartyRequest();
  CMsgDOTAJoinOpenGuildPartyResponse::default_instance_ = new CMsgDOTAJoinOpenGuildPartyResponse();
  CMsgDOTAGuildOpenPartyRefresh::default_instance_ = new CMsgDOTAGuildOpenPartyRefresh();
  CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance_ = new CMsgDOTAGuildOpenPartyRefresh_OpenParty();
  CMsgDOTARequestGuildData::default_instance_ = new CMsgDOTARequestGuildData();
  CMsgDOTAGuildInviteData::default_instance_ = new CMsgDOTAGuildInviteData();
  CMsgDOTAGuildUpdateMessage::default_instance_ = new CMsgDOTAGuildUpdateMessage();
  CMsgDOTAGuildEditLogoRequest::default_instance_ = new CMsgDOTAGuildEditLogoRequest();
  CMsgDOTAGuildEditLogoResponse::default_instance_ = new CMsgDOTAGuildEditLogoResponse();
  CMsgDOTAGuildSDO::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildSDO_Member::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildSDO_Invitation::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildAuditSDO::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildAuditSDO_Entry::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAccountGuildMembershipsSDO::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance_->InitAsDefaultInstance();
  CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildCreateRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildCreateResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildSetAccountRoleRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildSetAccountRoleResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildInviteAccountRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildInviteAccountResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildCancelInviteRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildCancelInviteResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildUpdateDetailsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildUpdateDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPartySetOpenGuildRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPartySetOpenGuildResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAJoinOpenGuildPartyRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAJoinOpenGuildPartyResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildOpenPartyRefresh::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance_->InitAsDefaultInstance();
  CMsgDOTARequestGuildData::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildInviteData::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildUpdateMessage::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildEditLogoRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGuildEditLogoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fguild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fguild_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fguild_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5fguild_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildSDO_Member::kAccountIdFieldNumber;
const int CMsgDOTAGuildSDO_Member::kTimeJoinedFieldNumber;
const int CMsgDOTAGuildSDO_Member::kRoleFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildSDO_Member::CMsgDOTAGuildSDO_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildSDO.Member)
}

void CMsgDOTAGuildSDO_Member::InitAsDefaultInstance() {
}

CMsgDOTAGuildSDO_Member::CMsgDOTAGuildSDO_Member(const CMsgDOTAGuildSDO_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildSDO.Member)
}

void CMsgDOTAGuildSDO_Member::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  time_joined_ = 0u;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildSDO_Member::~CMsgDOTAGuildSDO_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildSDO.Member)
  SharedDtor();
}

void CMsgDOTAGuildSDO_Member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildSDO_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildSDO_Member_descriptor_;
}

const CMsgDOTAGuildSDO_Member& CMsgDOTAGuildSDO_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO_Member::default_instance_ = NULL;

CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO_Member::New() const {
  return new CMsgDOTAGuildSDO_Member;
}

void CMsgDOTAGuildSDO_Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildSDO_Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, role_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildSDO_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildSDO.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_joined;
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (tag == 16) {
         parse_time_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
          set_has_time_joined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (tag == 24) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildSDO.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildSDO.Member)
  return false;
#undef DO_
}

void CMsgDOTAGuildSDO_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildSDO.Member)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (has_time_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildSDO.Member)
}

::google::protobuf::uint8* CMsgDOTAGuildSDO_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildSDO.Member)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (has_time_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildSDO.Member)
  return target;
}

int CMsgDOTAGuildSDO_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 2;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSDO_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildSDO_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildSDO_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSDO_Member::MergeFrom(const CMsgDOTAGuildSDO_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_time_joined()) {
      set_time_joined(from.time_joined());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildSDO_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSDO_Member::CopyFrom(const CMsgDOTAGuildSDO_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSDO_Member::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildSDO_Member::Swap(CMsgDOTAGuildSDO_Member* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(time_joined_, other->time_joined_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildSDO_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildSDO_Member_descriptor_;
  metadata.reflection = CMsgDOTAGuildSDO_Member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAGuildSDO_Invitation::kAccountIdFieldNumber;
const int CMsgDOTAGuildSDO_Invitation::kTimeSentFieldNumber;
const int CMsgDOTAGuildSDO_Invitation::kAccountIdSenderFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildSDO_Invitation::CMsgDOTAGuildSDO_Invitation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildSDO.Invitation)
}

void CMsgDOTAGuildSDO_Invitation::InitAsDefaultInstance() {
}

CMsgDOTAGuildSDO_Invitation::CMsgDOTAGuildSDO_Invitation(const CMsgDOTAGuildSDO_Invitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildSDO.Invitation)
}

void CMsgDOTAGuildSDO_Invitation::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  time_sent_ = 0u;
  account_id_sender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildSDO_Invitation::~CMsgDOTAGuildSDO_Invitation() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildSDO.Invitation)
  SharedDtor();
}

void CMsgDOTAGuildSDO_Invitation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildSDO_Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_Invitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildSDO_Invitation_descriptor_;
}

const CMsgDOTAGuildSDO_Invitation& CMsgDOTAGuildSDO_Invitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO_Invitation::default_instance_ = NULL;

CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO_Invitation::New() const {
  return new CMsgDOTAGuildSDO_Invitation;
}

void CMsgDOTAGuildSDO_Invitation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildSDO_Invitation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, account_id_sender_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildSDO_Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildSDO.Invitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_sent;
        break;
      }

      // optional uint32 time_sent = 2;
      case 2: {
        if (tag == 16) {
         parse_time_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_sent_)));
          set_has_time_sent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_id_sender;
        break;
      }

      // optional uint32 account_id_sender = 3;
      case 3: {
        if (tag == 24) {
         parse_account_id_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_sender_)));
          set_has_account_id_sender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildSDO.Invitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildSDO.Invitation)
  return false;
#undef DO_
}

void CMsgDOTAGuildSDO_Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildSDO.Invitation)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_sent = 2;
  if (has_time_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_sent(), output);
  }

  // optional uint32 account_id_sender = 3;
  if (has_account_id_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id_sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildSDO.Invitation)
}

::google::protobuf::uint8* CMsgDOTAGuildSDO_Invitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildSDO.Invitation)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_sent = 2;
  if (has_time_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_sent(), target);
  }

  // optional uint32 account_id_sender = 3;
  if (has_account_id_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id_sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildSDO.Invitation)
  return target;
}

int CMsgDOTAGuildSDO_Invitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_sent = 2;
    if (has_time_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_sent());
    }

    // optional uint32 account_id_sender = 3;
    if (has_account_id_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSDO_Invitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildSDO_Invitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildSDO_Invitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSDO_Invitation::MergeFrom(const CMsgDOTAGuildSDO_Invitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_time_sent()) {
      set_time_sent(from.time_sent());
    }
    if (from.has_account_id_sender()) {
      set_account_id_sender(from.account_id_sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildSDO_Invitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSDO_Invitation::CopyFrom(const CMsgDOTAGuildSDO_Invitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSDO_Invitation::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildSDO_Invitation::Swap(CMsgDOTAGuildSDO_Invitation* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(time_sent_, other->time_sent_);
    std::swap(account_id_sender_, other->account_id_sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildSDO_Invitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildSDO_Invitation_descriptor_;
  metadata.reflection = CMsgDOTAGuildSDO_Invitation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAGuildSDO::kGuildIdFieldNumber;
const int CMsgDOTAGuildSDO::kNameFieldNumber;
const int CMsgDOTAGuildSDO::kTagFieldNumber;
const int CMsgDOTAGuildSDO::kTimeCreatedFieldNumber;
const int CMsgDOTAGuildSDO::kTimeDisbandedFieldNumber;
const int CMsgDOTAGuildSDO::kLogoFieldNumber;
const int CMsgDOTAGuildSDO::kBaseLogoFieldNumber;
const int CMsgDOTAGuildSDO::kBannerLogoFieldNumber;
const int CMsgDOTAGuildSDO::kMembersFieldNumber;
const int CMsgDOTAGuildSDO::kInvitationsFieldNumber;
const int CMsgDOTAGuildSDO::kMessageFieldNumber;
const int CMsgDOTAGuildSDO::kIncrementalFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildSDO::CMsgDOTAGuildSDO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildSDO)
}

void CMsgDOTAGuildSDO::InitAsDefaultInstance() {
}

CMsgDOTAGuildSDO::CMsgDOTAGuildSDO(const CMsgDOTAGuildSDO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildSDO)
}

void CMsgDOTAGuildSDO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_created_ = 0u;
  time_disbanded_ = 0u;
  logo_ = GOOGLE_ULONGLONG(0);
  base_logo_ = GOOGLE_ULONGLONG(0);
  banner_logo_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incremental_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildSDO::~CMsgDOTAGuildSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildSDO)
  SharedDtor();
}

void CMsgDOTAGuildSDO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildSDO_descriptor_;
}

const CMsgDOTAGuildSDO& CMsgDOTAGuildSDO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildSDO* CMsgDOTAGuildSDO::default_instance_ = NULL;

CMsgDOTAGuildSDO* CMsgDOTAGuildSDO::New() const {
  return new CMsgDOTAGuildSDO;
}

void CMsgDOTAGuildSDO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildSDO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guild_id_, time_created_);
    ZR_(logo_, time_disbanded_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3072) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    incremental_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  invitations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 4;
      case 4: {
        if (tag == 32) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_disbanded;
        break;
      }

      // optional uint32 time_disbanded = 5;
      case 5: {
        if (tag == 40) {
         parse_time_disbanded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_disbanded_)));
          set_has_time_disbanded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 6;
      case 6: {
        if (tag == 48) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_base_logo;
        break;
      }

      // optional uint64 base_logo = 7;
      case 7: {
        if (tag == 56) {
         parse_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
          set_has_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_banner_logo;
        break;
      }

      // optional uint64 banner_logo = 8;
      case 8: {
        if (tag == 64) {
         parse_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
          set_has_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_members;
        break;
      }

      // repeated .CMsgDOTAGuildSDO.Member members = 9;
      case 9: {
        if (tag == 74) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_members;
        if (input->ExpectTag(82)) goto parse_invitations;
        break;
      }

      // repeated .CMsgDOTAGuildSDO.Invitation invitations = 10;
      case 10: {
        if (tag == 82) {
         parse_invitations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_invitations;
        if (input->ExpectTag(90)) goto parse_message;
        break;
      }

      // optional string message = 11;
      case 11: {
        if (tag == 90) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_incremental;
        break;
      }

      // optional bool incremental = 12;
      case 12: {
        if (tag == 96) {
         parse_incremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
          set_has_incremental();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildSDO)
  return false;
#undef DO_
}

void CMsgDOTAGuildSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildSDO)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint32 time_created = 4;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_created(), output);
  }

  // optional uint32 time_disbanded = 5;
  if (has_time_disbanded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_disbanded(), output);
  }

  // optional uint64 logo = 6;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logo(), output);
  }

  // optional uint64 base_logo = 7;
  if (has_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 8;
  if (has_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->banner_logo(), output);
  }

  // repeated .CMsgDOTAGuildSDO.Member members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }

  // repeated .CMsgDOTAGuildSDO.Invitation invitations = 10;
  for (int i = 0; i < this->invitations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->invitations(i), output);
  }

  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->message(), output);
  }

  // optional bool incremental = 12;
  if (has_incremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->incremental(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildSDO)
}

::google::protobuf::uint8* CMsgDOTAGuildSDO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildSDO)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint32 time_created = 4;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_created(), target);
  }

  // optional uint32 time_disbanded = 5;
  if (has_time_disbanded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_disbanded(), target);
  }

  // optional uint64 logo = 6;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logo(), target);
  }

  // optional uint64 base_logo = 7;
  if (has_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 8;
  if (has_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->banner_logo(), target);
  }

  // repeated .CMsgDOTAGuildSDO.Member members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->members(i), target);
  }

  // repeated .CMsgDOTAGuildSDO.Invitation invitations = 10;
  for (int i = 0; i < this->invitations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->invitations(i), target);
  }

  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }

  // optional bool incremental = 12;
  if (has_incremental()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->incremental(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildSDO)
  return target;
}

int CMsgDOTAGuildSDO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint32 time_created = 4;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 time_disbanded = 5;
    if (has_time_disbanded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_disbanded());
    }

    // optional uint64 logo = 6;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 7;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 8;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string message = 11;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool incremental = 12;
    if (has_incremental()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTAGuildSDO.Member members = 9;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .CMsgDOTAGuildSDO.Invitation invitations = 10;
  total_size += 1 * this->invitations_size();
  for (int i = 0; i < this->invitations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSDO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildSDO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildSDO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSDO::MergeFrom(const CMsgDOTAGuildSDO& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  invitations_.MergeFrom(from.invitations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_time_disbanded()) {
      set_time_disbanded(from.time_disbanded());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_base_logo()) {
      set_base_logo(from.base_logo());
    }
    if (from.has_banner_logo()) {
      set_banner_logo(from.banner_logo());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_incremental()) {
      set_incremental(from.incremental());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildSDO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSDO::CopyFrom(const CMsgDOTAGuildSDO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSDO::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildSDO::Swap(CMsgDOTAGuildSDO* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(time_created_, other->time_created_);
    std::swap(time_disbanded_, other->time_disbanded_);
    std::swap(logo_, other->logo_);
    std::swap(base_logo_, other->base_logo_);
    std::swap(banner_logo_, other->banner_logo_);
    members_.Swap(&other->members_);
    invitations_.Swap(&other->invitations_);
    std::swap(message_, other->message_);
    std::swap(incremental_, other->incremental_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildSDO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildSDO_descriptor_;
  metadata.reflection = CMsgDOTAGuildSDO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildAuditSDO_Entry::kEventIndexFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kTimestampFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kActionFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kAccountIdRequestorFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kAccountIdTargetFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kReferenceDataAFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kReferenceDataBFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildAuditSDO_Entry::CMsgDOTAGuildAuditSDO_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildAuditSDO.Entry)
}

void CMsgDOTAGuildAuditSDO_Entry::InitAsDefaultInstance() {
}

CMsgDOTAGuildAuditSDO_Entry::CMsgDOTAGuildAuditSDO_Entry(const CMsgDOTAGuildAuditSDO_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildAuditSDO.Entry)
}

void CMsgDOTAGuildAuditSDO_Entry::SharedCtor() {
  _cached_size_ = 0;
  event_index_ = 0u;
  timestamp_ = 0u;
  action_ = 0u;
  account_id_requestor_ = 0u;
  account_id_target_ = 0u;
  reference_data_a_ = 0u;
  reference_data_b_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildAuditSDO_Entry::~CMsgDOTAGuildAuditSDO_Entry() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildAuditSDO.Entry)
  SharedDtor();
}

void CMsgDOTAGuildAuditSDO_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildAuditSDO_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildAuditSDO_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildAuditSDO_Entry_descriptor_;
}

const CMsgDOTAGuildAuditSDO_Entry& CMsgDOTAGuildAuditSDO_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO_Entry::default_instance_ = NULL;

CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO_Entry::New() const {
  return new CMsgDOTAGuildAuditSDO_Entry;
}

void CMsgDOTAGuildAuditSDO_Entry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildAuditSDO_Entry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(event_index_, reference_data_b_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildAuditSDO_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildAuditSDO.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_index_)));
          set_has_event_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional uint32 action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_account_id_requestor;
        break;
      }

      // optional uint32 account_id_requestor = 4;
      case 4: {
        if (tag == 32) {
         parse_account_id_requestor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_requestor_)));
          set_has_account_id_requestor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_account_id_target;
        break;
      }

      // optional uint32 account_id_target = 5;
      case 5: {
        if (tag == 40) {
         parse_account_id_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_target_)));
          set_has_account_id_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reference_data_a;
        break;
      }

      // optional uint32 reference_data_a = 6;
      case 6: {
        if (tag == 48) {
         parse_reference_data_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_a_)));
          set_has_reference_data_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reference_data_b;
        break;
      }

      // optional uint32 reference_data_b = 7;
      case 7: {
        if (tag == 56) {
         parse_reference_data_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_b_)));
          set_has_reference_data_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildAuditSDO.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildAuditSDO.Entry)
  return false;
#undef DO_
}

void CMsgDOTAGuildAuditSDO_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildAuditSDO.Entry)
  // optional uint32 event_index = 1;
  if (has_event_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_index(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action(), output);
  }

  // optional uint32 account_id_requestor = 4;
  if (has_account_id_requestor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id_requestor(), output);
  }

  // optional uint32 account_id_target = 5;
  if (has_account_id_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id_target(), output);
  }

  // optional uint32 reference_data_a = 6;
  if (has_reference_data_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reference_data_a(), output);
  }

  // optional uint32 reference_data_b = 7;
  if (has_reference_data_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reference_data_b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildAuditSDO.Entry)
}

::google::protobuf::uint8* CMsgDOTAGuildAuditSDO_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildAuditSDO.Entry)
  // optional uint32 event_index = 1;
  if (has_event_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_index(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action(), target);
  }

  // optional uint32 account_id_requestor = 4;
  if (has_account_id_requestor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id_requestor(), target);
  }

  // optional uint32 account_id_target = 5;
  if (has_account_id_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id_target(), target);
  }

  // optional uint32 reference_data_a = 6;
  if (has_reference_data_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reference_data_a(), target);
  }

  // optional uint32 reference_data_b = 7;
  if (has_reference_data_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reference_data_b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildAuditSDO.Entry)
  return target;
}

int CMsgDOTAGuildAuditSDO_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_index = 1;
    if (has_event_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_index());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional uint32 account_id_requestor = 4;
    if (has_account_id_requestor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_requestor());
    }

    // optional uint32 account_id_target = 5;
    if (has_account_id_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_target());
    }

    // optional uint32 reference_data_a = 6;
    if (has_reference_data_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data_a());
    }

    // optional uint32 reference_data_b = 7;
    if (has_reference_data_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data_b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildAuditSDO_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildAuditSDO_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildAuditSDO_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildAuditSDO_Entry::MergeFrom(const CMsgDOTAGuildAuditSDO_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_index()) {
      set_event_index(from.event_index());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_account_id_requestor()) {
      set_account_id_requestor(from.account_id_requestor());
    }
    if (from.has_account_id_target()) {
      set_account_id_target(from.account_id_target());
    }
    if (from.has_reference_data_a()) {
      set_reference_data_a(from.reference_data_a());
    }
    if (from.has_reference_data_b()) {
      set_reference_data_b(from.reference_data_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildAuditSDO_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildAuditSDO_Entry::CopyFrom(const CMsgDOTAGuildAuditSDO_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildAuditSDO_Entry::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildAuditSDO_Entry::Swap(CMsgDOTAGuildAuditSDO_Entry* other) {
  if (other != this) {
    std::swap(event_index_, other->event_index_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(action_, other->action_);
    std::swap(account_id_requestor_, other->account_id_requestor_);
    std::swap(account_id_target_, other->account_id_target_);
    std::swap(reference_data_a_, other->reference_data_a_);
    std::swap(reference_data_b_, other->reference_data_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildAuditSDO_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildAuditSDO_Entry_descriptor_;
  metadata.reflection = CMsgDOTAGuildAuditSDO_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAGuildAuditSDO::kGuildIdFieldNumber;
const int CMsgDOTAGuildAuditSDO::kEntriesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildAuditSDO::CMsgDOTAGuildAuditSDO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildAuditSDO)
}

void CMsgDOTAGuildAuditSDO::InitAsDefaultInstance() {
}

CMsgDOTAGuildAuditSDO::CMsgDOTAGuildAuditSDO(const CMsgDOTAGuildAuditSDO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildAuditSDO)
}

void CMsgDOTAGuildAuditSDO::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildAuditSDO::~CMsgDOTAGuildAuditSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildAuditSDO)
  SharedDtor();
}

void CMsgDOTAGuildAuditSDO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildAuditSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildAuditSDO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildAuditSDO_descriptor_;
}

const CMsgDOTAGuildAuditSDO& CMsgDOTAGuildAuditSDO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildAuditSDO* CMsgDOTAGuildAuditSDO::default_instance_ = NULL;

CMsgDOTAGuildAuditSDO* CMsgDOTAGuildAuditSDO::New() const {
  return new CMsgDOTAGuildAuditSDO;
}

void CMsgDOTAGuildAuditSDO::Clear() {
  guild_id_ = 0u;
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildAuditSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildAuditSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .CMsgDOTAGuildAuditSDO.Entry entries = 2;
      case 2: {
        if (tag == 18) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildAuditSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildAuditSDO)
  return false;
#undef DO_
}

void CMsgDOTAGuildAuditSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildAuditSDO)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // repeated .CMsgDOTAGuildAuditSDO.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildAuditSDO)
}

::google::protobuf::uint8* CMsgDOTAGuildAuditSDO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildAuditSDO)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // repeated .CMsgDOTAGuildAuditSDO.Entry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildAuditSDO)
  return target;
}

int CMsgDOTAGuildAuditSDO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  // repeated .CMsgDOTAGuildAuditSDO.Entry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildAuditSDO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildAuditSDO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildAuditSDO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildAuditSDO::MergeFrom(const CMsgDOTAGuildAuditSDO& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildAuditSDO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildAuditSDO::CopyFrom(const CMsgDOTAGuildAuditSDO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildAuditSDO::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildAuditSDO::Swap(CMsgDOTAGuildAuditSDO* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildAuditSDO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildAuditSDO_descriptor_;
  metadata.reflection = CMsgDOTAGuildAuditSDO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAAccountGuildMembershipsSDO_Membership::kGuildIdFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO_Membership::kRoleFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAccountGuildMembershipsSDO_Membership::CMsgDOTAAccountGuildMembershipsSDO_Membership()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAAccountGuildMembershipsSDO.Membership)
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::InitAsDefaultInstance() {
}

CMsgDOTAAccountGuildMembershipsSDO_Membership::CMsgDOTAAccountGuildMembershipsSDO_Membership(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAccountGuildMembershipsSDO.Membership)
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAccountGuildMembershipsSDO_Membership::~CMsgDOTAAccountGuildMembershipsSDO_Membership() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  SharedDtor();
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_Membership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAccountGuildMembershipsSDO_Membership_descriptor_;
}

const CMsgDOTAAccountGuildMembershipsSDO_Membership& CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance_ = NULL;

CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO_Membership::New() const {
  return new CMsgDOTAAccountGuildMembershipsSDO_Membership;
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAAccountGuildMembershipsSDO_Membership*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guild_id_, role_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAccountGuildMembershipsSDO_Membership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }

      // optional uint32 role = 2;
      case 2: {
        if (tag == 16) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  return false;
#undef DO_
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAAccountGuildMembershipsSDO.Membership)
}

::google::protobuf::uint8* CMsgDOTAAccountGuildMembershipsSDO_Membership::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAccountGuildMembershipsSDO.Membership)
  return target;
}

int CMsgDOTAAccountGuildMembershipsSDO_Membership::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAccountGuildMembershipsSDO_Membership* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAccountGuildMembershipsSDO_Membership*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAccountGuildMembershipsSDO_Membership::IsInitialized() const {

  return true;
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::Swap(CMsgDOTAAccountGuildMembershipsSDO_Membership* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAccountGuildMembershipsSDO_Membership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAccountGuildMembershipsSDO_Membership_descriptor_;
  metadata.reflection = CMsgDOTAAccountGuildMembershipsSDO_Membership_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAAccountGuildMembershipsSDO_Invitation::kGuildIdFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO_Invitation::kTimeSentFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO_Invitation::kAccountIdSenderFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAccountGuildMembershipsSDO_Invitation::CMsgDOTAAccountGuildMembershipsSDO_Invitation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::InitAsDefaultInstance() {
}

CMsgDOTAAccountGuildMembershipsSDO_Invitation::CMsgDOTAAccountGuildMembershipsSDO_Invitation(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  time_sent_ = 0u;
  account_id_sender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAccountGuildMembershipsSDO_Invitation::~CMsgDOTAAccountGuildMembershipsSDO_Invitation() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  SharedDtor();
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_Invitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAccountGuildMembershipsSDO_Invitation_descriptor_;
}

const CMsgDOTAAccountGuildMembershipsSDO_Invitation& CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance_ = NULL;

CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO_Invitation::New() const {
  return new CMsgDOTAAccountGuildMembershipsSDO_Invitation;
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAAccountGuildMembershipsSDO_Invitation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guild_id_, account_id_sender_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_sent;
        break;
      }

      // optional uint32 time_sent = 2;
      case 2: {
        if (tag == 16) {
         parse_time_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_sent_)));
          set_has_time_sent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_id_sender;
        break;
      }

      // optional uint32 account_id_sender = 3;
      case 3: {
        if (tag == 24) {
         parse_account_id_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_sender_)));
          set_has_account_id_sender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  return false;
#undef DO_
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 time_sent = 2;
  if (has_time_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_sent(), output);
  }

  // optional uint32 account_id_sender = 3;
  if (has_account_id_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id_sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
}

::google::protobuf::uint8* CMsgDOTAAccountGuildMembershipsSDO_Invitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 time_sent = 2;
  if (has_time_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_sent(), target);
  }

  // optional uint32 account_id_sender = 3;
  if (has_account_id_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id_sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  return target;
}

int CMsgDOTAAccountGuildMembershipsSDO_Invitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 time_sent = 2;
    if (has_time_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_sent());
    }

    // optional uint32 account_id_sender = 3;
    if (has_account_id_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAccountGuildMembershipsSDO_Invitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAccountGuildMembershipsSDO_Invitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_time_sent()) {
      set_time_sent(from.time_sent());
    }
    if (from.has_account_id_sender()) {
      set_account_id_sender(from.account_id_sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::IsInitialized() const {

  return true;
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::Swap(CMsgDOTAAccountGuildMembershipsSDO_Invitation* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(time_sent_, other->time_sent_);
    std::swap(account_id_sender_, other->account_id_sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAccountGuildMembershipsSDO_Invitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAccountGuildMembershipsSDO_Invitation_descriptor_;
  metadata.reflection = CMsgDOTAAccountGuildMembershipsSDO_Invitation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAAccountGuildMembershipsSDO::kAccountIdFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO::kMembershipsFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO::kInvitationsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAAccountGuildMembershipsSDO::CMsgDOTAAccountGuildMembershipsSDO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAAccountGuildMembershipsSDO)
}

void CMsgDOTAAccountGuildMembershipsSDO::InitAsDefaultInstance() {
}

CMsgDOTAAccountGuildMembershipsSDO::CMsgDOTAAccountGuildMembershipsSDO(const CMsgDOTAAccountGuildMembershipsSDO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAccountGuildMembershipsSDO)
}

void CMsgDOTAAccountGuildMembershipsSDO::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAAccountGuildMembershipsSDO::~CMsgDOTAAccountGuildMembershipsSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAccountGuildMembershipsSDO)
  SharedDtor();
}

void CMsgDOTAAccountGuildMembershipsSDO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAAccountGuildMembershipsSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAAccountGuildMembershipsSDO_descriptor_;
}

const CMsgDOTAAccountGuildMembershipsSDO& CMsgDOTAAccountGuildMembershipsSDO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAAccountGuildMembershipsSDO* CMsgDOTAAccountGuildMembershipsSDO::default_instance_ = NULL;

CMsgDOTAAccountGuildMembershipsSDO* CMsgDOTAAccountGuildMembershipsSDO::New() const {
  return new CMsgDOTAAccountGuildMembershipsSDO;
}

void CMsgDOTAAccountGuildMembershipsSDO::Clear() {
  account_id_ = 0u;
  memberships_.Clear();
  invitations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAAccountGuildMembershipsSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAAccountGuildMembershipsSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_memberships;
        break;
      }

      // repeated .CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
      case 2: {
        if (tag == 18) {
         parse_memberships:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberships()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_memberships;
        if (input->ExpectTag(26)) goto parse_invitations;
        break;
      }

      // repeated .CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
      case 3: {
        if (tag == 26) {
         parse_invitations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_invitations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAAccountGuildMembershipsSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAAccountGuildMembershipsSDO)
  return false;
#undef DO_
}

void CMsgDOTAAccountGuildMembershipsSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAAccountGuildMembershipsSDO)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  for (int i = 0; i < this->memberships_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberships(i), output);
  }

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  for (int i = 0; i < this->invitations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invitations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAAccountGuildMembershipsSDO)
}

::google::protobuf::uint8* CMsgDOTAAccountGuildMembershipsSDO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAccountGuildMembershipsSDO)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  for (int i = 0; i < this->memberships_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberships(i), target);
  }

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  for (int i = 0; i < this->invitations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invitations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAccountGuildMembershipsSDO)
  return target;
}

int CMsgDOTAAccountGuildMembershipsSDO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  total_size += 1 * this->memberships_size();
  for (int i = 0; i < this->memberships_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberships(i));
  }

  // repeated .CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  total_size += 1 * this->invitations_size();
  for (int i = 0; i < this->invitations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAccountGuildMembershipsSDO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAAccountGuildMembershipsSDO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAAccountGuildMembershipsSDO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAAccountGuildMembershipsSDO::MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberships_.MergeFrom(from.memberships_);
  invitations_.MergeFrom(from.invitations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAAccountGuildMembershipsSDO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAccountGuildMembershipsSDO::CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAccountGuildMembershipsSDO::IsInitialized() const {

  return true;
}

void CMsgDOTAAccountGuildMembershipsSDO::Swap(CMsgDOTAAccountGuildMembershipsSDO* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    memberships_.Swap(&other->memberships_);
    invitations_.Swap(&other->invitations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAAccountGuildMembershipsSDO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAAccountGuildMembershipsSDO_descriptor_;
  metadata.reflection = CMsgDOTAAccountGuildMembershipsSDO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildCreateRequest::kNameFieldNumber;
const int CMsgDOTAGuildCreateRequest::kTagFieldNumber;
const int CMsgDOTAGuildCreateRequest::kLogoFieldNumber;
const int CMsgDOTAGuildCreateRequest::kBaseLogoFieldNumber;
const int CMsgDOTAGuildCreateRequest::kBannerLogoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildCreateRequest::CMsgDOTAGuildCreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildCreateRequest)
}

void CMsgDOTAGuildCreateRequest::InitAsDefaultInstance() {
}

CMsgDOTAGuildCreateRequest::CMsgDOTAGuildCreateRequest(const CMsgDOTAGuildCreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildCreateRequest)
}

void CMsgDOTAGuildCreateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  base_logo_ = GOOGLE_ULONGLONG(0);
  banner_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildCreateRequest::~CMsgDOTAGuildCreateRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildCreateRequest)
  SharedDtor();
}

void CMsgDOTAGuildCreateRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildCreateRequest_descriptor_;
}

const CMsgDOTAGuildCreateRequest& CMsgDOTAGuildCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildCreateRequest* CMsgDOTAGuildCreateRequest::default_instance_ = NULL;

CMsgDOTAGuildCreateRequest* CMsgDOTAGuildCreateRequest::New() const {
  return new CMsgDOTAGuildCreateRequest;
}

void CMsgDOTAGuildCreateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildCreateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(logo_, banner_logo_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 3;
      case 3: {
        if (tag == 24) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_logo;
        break;
      }

      // optional uint64 base_logo = 4;
      case 4: {
        if (tag == 32) {
         parse_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
          set_has_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_banner_logo;
        break;
      }

      // optional uint64 banner_logo = 5;
      case 5: {
        if (tag == 40) {
         parse_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
          set_has_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildCreateRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildCreateRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint64 logo = 3;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logo(), output);
  }

  // optional uint64 base_logo = 4;
  if (has_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 5;
  if (has_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->banner_logo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildCreateRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint64 logo = 3;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (has_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (has_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->banner_logo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildCreateRequest)
  return target;
}

int CMsgDOTAGuildCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint64 logo = 3;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 4;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildCreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildCreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCreateRequest::MergeFrom(const CMsgDOTAGuildCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_base_logo()) {
      set_base_logo(from.base_logo());
    }
    if (from.has_banner_logo()) {
      set_banner_logo(from.banner_logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCreateRequest::CopyFrom(const CMsgDOTAGuildCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCreateRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildCreateRequest::Swap(CMsgDOTAGuildCreateRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(logo_, other->logo_);
    std::swap(base_logo_, other->base_logo_);
    std::swap(banner_logo_, other->banner_logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildCreateRequest_descriptor_;
  metadata.reflection = CMsgDOTAGuildCreateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCreateResponse_EError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildCreateResponse_EError_descriptor_;
}
bool CMsgDOTAGuildCreateResponse_EError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::UNSPECIFIED;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_EMPTY;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_BAD_CHARACTERS;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_TOO_LONG;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_TAKEN;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::TAG_EMPTY;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::TAG_BAD_CHARACTERS;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::TAG_TOO_LONG;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::ACCOUNT_TOO_MANY_GUILDS;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::EError_MIN;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::EError_MAX;
const int CMsgDOTAGuildCreateResponse::EError_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAGuildCreateResponse::kGuildIdFieldNumber;
const int CMsgDOTAGuildCreateResponse::kErrorsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildCreateResponse::CMsgDOTAGuildCreateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildCreateResponse)
}

void CMsgDOTAGuildCreateResponse::InitAsDefaultInstance() {
}

CMsgDOTAGuildCreateResponse::CMsgDOTAGuildCreateResponse(const CMsgDOTAGuildCreateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildCreateResponse)
}

void CMsgDOTAGuildCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildCreateResponse::~CMsgDOTAGuildCreateResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildCreateResponse)
  SharedDtor();
}

void CMsgDOTAGuildCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildCreateResponse_descriptor_;
}

const CMsgDOTAGuildCreateResponse& CMsgDOTAGuildCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildCreateResponse* CMsgDOTAGuildCreateResponse::default_instance_ = NULL;

CMsgDOTAGuildCreateResponse* CMsgDOTAGuildCreateResponse::New() const {
  return new CMsgDOTAGuildCreateResponse;
}

void CMsgDOTAGuildCreateResponse::Clear() {
  guild_id_ = 0u;
  errors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errors;
        break;
      }

      // repeated .CMsgDOTAGuildCreateResponse.EError errors = 2;
      case 2: {
        if (tag == 16) {
         parse_errors:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAGuildCreateResponse_EError_IsValid(value)) {
            add_errors(static_cast< ::CMsgDOTAGuildCreateResponse_EError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::CMsgDOTAGuildCreateResponse_EError_IsValid,
                 this->mutable_errors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildCreateResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildCreateResponse)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // repeated .CMsgDOTAGuildCreateResponse.EError errors = 2;
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildCreateResponse)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // repeated .CMsgDOTAGuildCreateResponse.EError errors = 2;
  for (int i = 0; i < this->errors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildCreateResponse)
  return target;
}

int CMsgDOTAGuildCreateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  // repeated .CMsgDOTAGuildCreateResponse.EError errors = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->errors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->errors(i));
    }
    total_size += 1 * this->errors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildCreateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildCreateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCreateResponse::MergeFrom(const CMsgDOTAGuildCreateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  errors_.MergeFrom(from.errors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCreateResponse::CopyFrom(const CMsgDOTAGuildCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCreateResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildCreateResponse::Swap(CMsgDOTAGuildCreateResponse* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    errors_.Swap(&other->errors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildCreateResponse_descriptor_;
  metadata.reflection = CMsgDOTAGuildCreateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildSetAccountRoleRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildSetAccountRoleRequest::kTargetAccountIdFieldNumber;
const int CMsgDOTAGuildSetAccountRoleRequest::kTargetRoleFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildSetAccountRoleRequest::CMsgDOTAGuildSetAccountRoleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildSetAccountRoleRequest)
}

void CMsgDOTAGuildSetAccountRoleRequest::InitAsDefaultInstance() {
}

CMsgDOTAGuildSetAccountRoleRequest::CMsgDOTAGuildSetAccountRoleRequest(const CMsgDOTAGuildSetAccountRoleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildSetAccountRoleRequest)
}

void CMsgDOTAGuildSetAccountRoleRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  target_account_id_ = 0u;
  target_role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildSetAccountRoleRequest::~CMsgDOTAGuildSetAccountRoleRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildSetAccountRoleRequest)
  SharedDtor();
}

void CMsgDOTAGuildSetAccountRoleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildSetAccountRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSetAccountRoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildSetAccountRoleRequest_descriptor_;
}

const CMsgDOTAGuildSetAccountRoleRequest& CMsgDOTAGuildSetAccountRoleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildSetAccountRoleRequest* CMsgDOTAGuildSetAccountRoleRequest::default_instance_ = NULL;

CMsgDOTAGuildSetAccountRoleRequest* CMsgDOTAGuildSetAccountRoleRequest::New() const {
  return new CMsgDOTAGuildSetAccountRoleRequest;
}

void CMsgDOTAGuildSetAccountRoleRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildSetAccountRoleRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guild_id_, target_role_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildSetAccountRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildSetAccountRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_account_id;
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
          set_has_target_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_role;
        break;
      }

      // optional uint32 target_role = 3;
      case 3: {
        if (tag == 24) {
         parse_target_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_role_)));
          set_has_target_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildSetAccountRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildSetAccountRoleRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildSetAccountRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildSetAccountRoleRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (has_target_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  // optional uint32 target_role = 3;
  if (has_target_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildSetAccountRoleRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildSetAccountRoleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildSetAccountRoleRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (has_target_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  // optional uint32 target_role = 3;
  if (has_target_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildSetAccountRoleRequest)
  return target;
}

int CMsgDOTAGuildSetAccountRoleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 target_account_id = 2;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

    // optional uint32 target_role = 3;
    if (has_target_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSetAccountRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildSetAccountRoleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildSetAccountRoleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSetAccountRoleRequest::MergeFrom(const CMsgDOTAGuildSetAccountRoleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_target_account_id()) {
      set_target_account_id(from.target_account_id());
    }
    if (from.has_target_role()) {
      set_target_role(from.target_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildSetAccountRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSetAccountRoleRequest::CopyFrom(const CMsgDOTAGuildSetAccountRoleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSetAccountRoleRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildSetAccountRoleRequest::Swap(CMsgDOTAGuildSetAccountRoleRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(target_account_id_, other->target_account_id_);
    std::swap(target_role_, other->target_role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildSetAccountRoleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildSetAccountRoleRequest_descriptor_;
  metadata.reflection = CMsgDOTAGuildSetAccountRoleRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor_;
}
bool CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::SUCCESS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_NO_OTHER_LEADER;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_ACCOUNT_TOO_MANY_GUILDS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_GUILD_TOO_MANY_MEMBERS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::EResult_MIN;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::EResult_MAX;
const int CMsgDOTAGuildSetAccountRoleResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAGuildSetAccountRoleResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildSetAccountRoleResponse::CMsgDOTAGuildSetAccountRoleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildSetAccountRoleResponse)
}

void CMsgDOTAGuildSetAccountRoleResponse::InitAsDefaultInstance() {
}

CMsgDOTAGuildSetAccountRoleResponse::CMsgDOTAGuildSetAccountRoleResponse(const CMsgDOTAGuildSetAccountRoleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildSetAccountRoleResponse)
}

void CMsgDOTAGuildSetAccountRoleResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildSetAccountRoleResponse::~CMsgDOTAGuildSetAccountRoleResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildSetAccountRoleResponse)
  SharedDtor();
}

void CMsgDOTAGuildSetAccountRoleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildSetAccountRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSetAccountRoleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildSetAccountRoleResponse_descriptor_;
}

const CMsgDOTAGuildSetAccountRoleResponse& CMsgDOTAGuildSetAccountRoleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildSetAccountRoleResponse* CMsgDOTAGuildSetAccountRoleResponse::default_instance_ = NULL;

CMsgDOTAGuildSetAccountRoleResponse* CMsgDOTAGuildSetAccountRoleResponse::New() const {
  return new CMsgDOTAGuildSetAccountRoleResponse;
}

void CMsgDOTAGuildSetAccountRoleResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildSetAccountRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildSetAccountRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAGuildSetAccountRoleResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildSetAccountRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildSetAccountRoleResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildSetAccountRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildSetAccountRoleResponse)
  // optional .CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildSetAccountRoleResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildSetAccountRoleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildSetAccountRoleResponse)
  // optional .CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildSetAccountRoleResponse)
  return target;
}

int CMsgDOTAGuildSetAccountRoleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSetAccountRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildSetAccountRoleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildSetAccountRoleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSetAccountRoleResponse::MergeFrom(const CMsgDOTAGuildSetAccountRoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildSetAccountRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSetAccountRoleResponse::CopyFrom(const CMsgDOTAGuildSetAccountRoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSetAccountRoleResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildSetAccountRoleResponse::Swap(CMsgDOTAGuildSetAccountRoleResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildSetAccountRoleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildSetAccountRoleResponse_descriptor_;
  metadata.reflection = CMsgDOTAGuildSetAccountRoleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildInviteAccountRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildInviteAccountRequest::kTargetAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildInviteAccountRequest::CMsgDOTAGuildInviteAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildInviteAccountRequest)
}

void CMsgDOTAGuildInviteAccountRequest::InitAsDefaultInstance() {
}

CMsgDOTAGuildInviteAccountRequest::CMsgDOTAGuildInviteAccountRequest(const CMsgDOTAGuildInviteAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildInviteAccountRequest)
}

void CMsgDOTAGuildInviteAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  target_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildInviteAccountRequest::~CMsgDOTAGuildInviteAccountRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildInviteAccountRequest)
  SharedDtor();
}

void CMsgDOTAGuildInviteAccountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildInviteAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildInviteAccountRequest_descriptor_;
}

const CMsgDOTAGuildInviteAccountRequest& CMsgDOTAGuildInviteAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildInviteAccountRequest* CMsgDOTAGuildInviteAccountRequest::default_instance_ = NULL;

CMsgDOTAGuildInviteAccountRequest* CMsgDOTAGuildInviteAccountRequest::New() const {
  return new CMsgDOTAGuildInviteAccountRequest;
}

void CMsgDOTAGuildInviteAccountRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildInviteAccountRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guild_id_, target_account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildInviteAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildInviteAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_account_id;
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
          set_has_target_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildInviteAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildInviteAccountRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildInviteAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildInviteAccountRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (has_target_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildInviteAccountRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildInviteAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildInviteAccountRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (has_target_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildInviteAccountRequest)
  return target;
}

int CMsgDOTAGuildInviteAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 target_account_id = 2;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildInviteAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildInviteAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildInviteAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildInviteAccountRequest::MergeFrom(const CMsgDOTAGuildInviteAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_target_account_id()) {
      set_target_account_id(from.target_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildInviteAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildInviteAccountRequest::CopyFrom(const CMsgDOTAGuildInviteAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildInviteAccountRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildInviteAccountRequest::Swap(CMsgDOTAGuildInviteAccountRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(target_account_id_, other->target_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildInviteAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildInviteAccountRequest_descriptor_;
  metadata.reflection = CMsgDOTAGuildInviteAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildInviteAccountResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildInviteAccountResponse_EResult_descriptor_;
}
bool CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::SUCCESS;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_ALREADY_INVITED;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_ALREADY_IN_GUILD;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_TOO_MANY_INVITES;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_GUILD_TOO_MANY_INVITES;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_TOO_MANY_GUILDS;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::EResult_MIN;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::EResult_MAX;
const int CMsgDOTAGuildInviteAccountResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAGuildInviteAccountResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildInviteAccountResponse::CMsgDOTAGuildInviteAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildInviteAccountResponse)
}

void CMsgDOTAGuildInviteAccountResponse::InitAsDefaultInstance() {
}

CMsgDOTAGuildInviteAccountResponse::CMsgDOTAGuildInviteAccountResponse(const CMsgDOTAGuildInviteAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildInviteAccountResponse)
}

void CMsgDOTAGuildInviteAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildInviteAccountResponse::~CMsgDOTAGuildInviteAccountResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildInviteAccountResponse)
  SharedDtor();
}

void CMsgDOTAGuildInviteAccountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildInviteAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildInviteAccountResponse_descriptor_;
}

const CMsgDOTAGuildInviteAccountResponse& CMsgDOTAGuildInviteAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildInviteAccountResponse* CMsgDOTAGuildInviteAccountResponse::default_instance_ = NULL;

CMsgDOTAGuildInviteAccountResponse* CMsgDOTAGuildInviteAccountResponse::New() const {
  return new CMsgDOTAGuildInviteAccountResponse;
}

void CMsgDOTAGuildInviteAccountResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildInviteAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildInviteAccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAGuildInviteAccountResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildInviteAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildInviteAccountResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildInviteAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildInviteAccountResponse)
  // optional .CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildInviteAccountResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildInviteAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildInviteAccountResponse)
  // optional .CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildInviteAccountResponse)
  return target;
}

int CMsgDOTAGuildInviteAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildInviteAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildInviteAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildInviteAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildInviteAccountResponse::MergeFrom(const CMsgDOTAGuildInviteAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildInviteAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildInviteAccountResponse::CopyFrom(const CMsgDOTAGuildInviteAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildInviteAccountResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildInviteAccountResponse::Swap(CMsgDOTAGuildInviteAccountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildInviteAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildInviteAccountResponse_descriptor_;
  metadata.reflection = CMsgDOTAGuildInviteAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildCancelInviteRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildCancelInviteRequest::kTargetAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildCancelInviteRequest::CMsgDOTAGuildCancelInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildCancelInviteRequest)
}

void CMsgDOTAGuildCancelInviteRequest::InitAsDefaultInstance() {
}

CMsgDOTAGuildCancelInviteRequest::CMsgDOTAGuildCancelInviteRequest(const CMsgDOTAGuildCancelInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildCancelInviteRequest)
}

void CMsgDOTAGuildCancelInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  target_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildCancelInviteRequest::~CMsgDOTAGuildCancelInviteRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildCancelInviteRequest)
  SharedDtor();
}

void CMsgDOTAGuildCancelInviteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildCancelInviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCancelInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildCancelInviteRequest_descriptor_;
}

const CMsgDOTAGuildCancelInviteRequest& CMsgDOTAGuildCancelInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildCancelInviteRequest* CMsgDOTAGuildCancelInviteRequest::default_instance_ = NULL;

CMsgDOTAGuildCancelInviteRequest* CMsgDOTAGuildCancelInviteRequest::New() const {
  return new CMsgDOTAGuildCancelInviteRequest;
}

void CMsgDOTAGuildCancelInviteRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildCancelInviteRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guild_id_, target_account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildCancelInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildCancelInviteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_account_id;
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
          set_has_target_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildCancelInviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildCancelInviteRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildCancelInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildCancelInviteRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (has_target_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildCancelInviteRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildCancelInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildCancelInviteRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (has_target_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildCancelInviteRequest)
  return target;
}

int CMsgDOTAGuildCancelInviteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 target_account_id = 2;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCancelInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildCancelInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildCancelInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCancelInviteRequest::MergeFrom(const CMsgDOTAGuildCancelInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_target_account_id()) {
      set_target_account_id(from.target_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildCancelInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCancelInviteRequest::CopyFrom(const CMsgDOTAGuildCancelInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCancelInviteRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildCancelInviteRequest::Swap(CMsgDOTAGuildCancelInviteRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(target_account_id_, other->target_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildCancelInviteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildCancelInviteRequest_descriptor_;
  metadata.reflection = CMsgDOTAGuildCancelInviteRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCancelInviteResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildCancelInviteResponse_EResult_descriptor_;
}
bool CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::SUCCESS;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::EResult_MIN;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::EResult_MAX;
const int CMsgDOTAGuildCancelInviteResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAGuildCancelInviteResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildCancelInviteResponse::CMsgDOTAGuildCancelInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildCancelInviteResponse)
}

void CMsgDOTAGuildCancelInviteResponse::InitAsDefaultInstance() {
}

CMsgDOTAGuildCancelInviteResponse::CMsgDOTAGuildCancelInviteResponse(const CMsgDOTAGuildCancelInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildCancelInviteResponse)
}

void CMsgDOTAGuildCancelInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildCancelInviteResponse::~CMsgDOTAGuildCancelInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildCancelInviteResponse)
  SharedDtor();
}

void CMsgDOTAGuildCancelInviteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildCancelInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCancelInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildCancelInviteResponse_descriptor_;
}

const CMsgDOTAGuildCancelInviteResponse& CMsgDOTAGuildCancelInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildCancelInviteResponse* CMsgDOTAGuildCancelInviteResponse::default_instance_ = NULL;

CMsgDOTAGuildCancelInviteResponse* CMsgDOTAGuildCancelInviteResponse::New() const {
  return new CMsgDOTAGuildCancelInviteResponse;
}

void CMsgDOTAGuildCancelInviteResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildCancelInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildCancelInviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAGuildCancelInviteResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildCancelInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildCancelInviteResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildCancelInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildCancelInviteResponse)
  // optional .CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildCancelInviteResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildCancelInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildCancelInviteResponse)
  // optional .CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildCancelInviteResponse)
  return target;
}

int CMsgDOTAGuildCancelInviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCancelInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildCancelInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildCancelInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCancelInviteResponse::MergeFrom(const CMsgDOTAGuildCancelInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildCancelInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCancelInviteResponse::CopyFrom(const CMsgDOTAGuildCancelInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCancelInviteResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildCancelInviteResponse::Swap(CMsgDOTAGuildCancelInviteResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildCancelInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildCancelInviteResponse_descriptor_;
  metadata.reflection = CMsgDOTAGuildCancelInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildUpdateDetailsRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildUpdateDetailsRequest::kLogoFieldNumber;
const int CMsgDOTAGuildUpdateDetailsRequest::kBaseLogoFieldNumber;
const int CMsgDOTAGuildUpdateDetailsRequest::kBannerLogoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildUpdateDetailsRequest::CMsgDOTAGuildUpdateDetailsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildUpdateDetailsRequest)
}

void CMsgDOTAGuildUpdateDetailsRequest::InitAsDefaultInstance() {
}

CMsgDOTAGuildUpdateDetailsRequest::CMsgDOTAGuildUpdateDetailsRequest(const CMsgDOTAGuildUpdateDetailsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildUpdateDetailsRequest)
}

void CMsgDOTAGuildUpdateDetailsRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  logo_ = GOOGLE_ULONGLONG(0);
  base_logo_ = GOOGLE_ULONGLONG(0);
  banner_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildUpdateDetailsRequest::~CMsgDOTAGuildUpdateDetailsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildUpdateDetailsRequest)
  SharedDtor();
}

void CMsgDOTAGuildUpdateDetailsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildUpdateDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateDetailsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildUpdateDetailsRequest_descriptor_;
}

const CMsgDOTAGuildUpdateDetailsRequest& CMsgDOTAGuildUpdateDetailsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildUpdateDetailsRequest* CMsgDOTAGuildUpdateDetailsRequest::default_instance_ = NULL;

CMsgDOTAGuildUpdateDetailsRequest* CMsgDOTAGuildUpdateDetailsRequest::New() const {
  return new CMsgDOTAGuildUpdateDetailsRequest;
}

void CMsgDOTAGuildUpdateDetailsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildUpdateDetailsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(logo_, guild_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildUpdateDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildUpdateDetailsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 2;
      case 2: {
        if (tag == 16) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_base_logo;
        break;
      }

      // optional uint64 base_logo = 3;
      case 3: {
        if (tag == 24) {
         parse_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
          set_has_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_banner_logo;
        break;
      }

      // optional uint64 banner_logo = 4;
      case 4: {
        if (tag == 32) {
         parse_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
          set_has_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildUpdateDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildUpdateDetailsRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildUpdateDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildUpdateDetailsRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint64 logo = 2;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logo(), output);
  }

  // optional uint64 base_logo = 3;
  if (has_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 4;
  if (has_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->banner_logo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildUpdateDetailsRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildUpdateDetailsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildUpdateDetailsRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint64 logo = 2;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logo(), target);
  }

  // optional uint64 base_logo = 3;
  if (has_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 4;
  if (has_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->banner_logo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildUpdateDetailsRequest)
  return target;
}

int CMsgDOTAGuildUpdateDetailsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 logo = 2;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 3;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 4;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildUpdateDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildUpdateDetailsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildUpdateDetailsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildUpdateDetailsRequest::MergeFrom(const CMsgDOTAGuildUpdateDetailsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_base_logo()) {
      set_base_logo(from.base_logo());
    }
    if (from.has_banner_logo()) {
      set_banner_logo(from.banner_logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildUpdateDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildUpdateDetailsRequest::CopyFrom(const CMsgDOTAGuildUpdateDetailsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildUpdateDetailsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildUpdateDetailsRequest::Swap(CMsgDOTAGuildUpdateDetailsRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(logo_, other->logo_);
    std::swap(base_logo_, other->base_logo_);
    std::swap(banner_logo_, other->banner_logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildUpdateDetailsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildUpdateDetailsRequest_descriptor_;
  metadata.reflection = CMsgDOTAGuildUpdateDetailsRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor_;
}
bool CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::SUCCESS;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::EResult_MIN;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::EResult_MAX;
const int CMsgDOTAGuildUpdateDetailsResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAGuildUpdateDetailsResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildUpdateDetailsResponse::CMsgDOTAGuildUpdateDetailsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildUpdateDetailsResponse)
}

void CMsgDOTAGuildUpdateDetailsResponse::InitAsDefaultInstance() {
}

CMsgDOTAGuildUpdateDetailsResponse::CMsgDOTAGuildUpdateDetailsResponse(const CMsgDOTAGuildUpdateDetailsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildUpdateDetailsResponse)
}

void CMsgDOTAGuildUpdateDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildUpdateDetailsResponse::~CMsgDOTAGuildUpdateDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildUpdateDetailsResponse)
  SharedDtor();
}

void CMsgDOTAGuildUpdateDetailsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildUpdateDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateDetailsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildUpdateDetailsResponse_descriptor_;
}

const CMsgDOTAGuildUpdateDetailsResponse& CMsgDOTAGuildUpdateDetailsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildUpdateDetailsResponse* CMsgDOTAGuildUpdateDetailsResponse::default_instance_ = NULL;

CMsgDOTAGuildUpdateDetailsResponse* CMsgDOTAGuildUpdateDetailsResponse::New() const {
  return new CMsgDOTAGuildUpdateDetailsResponse;
}

void CMsgDOTAGuildUpdateDetailsResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildUpdateDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildUpdateDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAGuildUpdateDetailsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildUpdateDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildUpdateDetailsResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildUpdateDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildUpdateDetailsResponse)
  // optional .CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildUpdateDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildUpdateDetailsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildUpdateDetailsResponse)
  // optional .CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildUpdateDetailsResponse)
  return target;
}

int CMsgDOTAGuildUpdateDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildUpdateDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildUpdateDetailsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildUpdateDetailsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildUpdateDetailsResponse::MergeFrom(const CMsgDOTAGuildUpdateDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildUpdateDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildUpdateDetailsResponse::CopyFrom(const CMsgDOTAGuildUpdateDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildUpdateDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildUpdateDetailsResponse::Swap(CMsgDOTAGuildUpdateDetailsResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildUpdateDetailsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildUpdateDetailsResponse_descriptor_;
  metadata.reflection = CMsgDOTAGuildUpdateDetailsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kPartyIdFieldNumber;
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kGuildIdFieldNumber;
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kMemberAccountIdsFieldNumber;
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kDescriptionFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CMsgDOTAGCToGCUpdateOpenGuildPartyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::InitAsDefaultInstance() {
}

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CMsgDOTAGCToGCUpdateOpenGuildPartyRequest(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  guild_id_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::~CMsgDOTAGCToGCUpdateOpenGuildPartyRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  SharedDtor();
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_descriptor_;
}

const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance_ = NULL;

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::New() const {
  return new CMsgDOTAGCToGCUpdateOpenGuildPartyRequest;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    party_id_ = GOOGLE_ULONGLONG(0);
    guild_id_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  member_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (tag == 16) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_account_ids;
        break;
      }

      // repeated uint32 member_account_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_member_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_member_account_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_account_ids;
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  // repeated uint32 member_account_ids = 3;
  for (int i = 0; i < this->member_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->member_account_ids(i), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
}

::google::protobuf::uint8* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  // repeated uint32 member_account_ids = 3;
  for (int i = 0; i < this->member_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->member_account_ids(i), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  return target;
}

int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated uint32 member_account_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_account_ids(i));
    }
    total_size += 1 * this->member_account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::MergeFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_account_ids_.MergeFrom(from.member_account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CopyFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::Swap(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(guild_id_, other->guild_id_);
    member_account_ids_.Swap(&other->member_account_ids_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_descriptor_;
  metadata.reflection = CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::kMaintainAssociationFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CMsgDOTAGCToGCUpdateOpenGuildPartyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::InitAsDefaultInstance() {
}

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CMsgDOTAGCToGCUpdateOpenGuildPartyResponse(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SharedCtor() {
  _cached_size_ = 0;
  maintain_association_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::~CMsgDOTAGCToGCUpdateOpenGuildPartyResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  SharedDtor();
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_descriptor_;
}

const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance_ = NULL;

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::New() const {
  return new CMsgDOTAGCToGCUpdateOpenGuildPartyResponse;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::Clear() {
  maintain_association_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool maintain_association = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maintain_association_)));
          set_has_maintain_association();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  // optional bool maintain_association = 1;
  if (has_maintain_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->maintain_association(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
}

::google::protobuf::uint8* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  // optional bool maintain_association = 1;
  if (has_maintain_association()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->maintain_association(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  return target;
}

int CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool maintain_association = 1;
    if (has_maintain_association()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::MergeFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maintain_association()) {
      set_maintain_association(from.maintain_association());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CopyFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::Swap(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* other) {
  if (other != this) {
    std::swap(maintain_association_, other->maintain_association_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_descriptor_;
  metadata.reflection = CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::kPartyIdFieldNumber;
const int CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::kGuildIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CMsgDOTAGCToGCDestroyOpenGuildPartyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::InitAsDefaultInstance() {
}

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CMsgDOTAGCToGCDestroyOpenGuildPartyRequest(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::~CMsgDOTAGCToGCDestroyOpenGuildPartyRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  SharedDtor();
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_descriptor_;
}

const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance_ = NULL;

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::New() const {
  return new CMsgDOTAGCToGCDestroyOpenGuildPartyRequest;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGCToGCDestroyOpenGuildPartyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(party_id_, guild_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (tag == 16) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
}

::google::protobuf::uint8* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  return target;
}

int CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::MergeFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CopyFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::Swap(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_descriptor_;
  metadata.reflection = CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CMsgDOTAGCToGCDestroyOpenGuildPartyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::InitAsDefaultInstance() {
}

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CMsgDOTAGCToGCDestroyOpenGuildPartyResponse(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::~CMsgDOTAGCToGCDestroyOpenGuildPartyResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  SharedDtor();
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_descriptor_;
}

const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance_ = NULL;

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::New() const {
  return new CMsgDOTAGCToGCDestroyOpenGuildPartyResponse;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
}

::google::protobuf::uint8* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  return target;
}

int CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::MergeFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CopyFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::Swap(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_descriptor_;
  metadata.reflection = CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPartySetOpenGuildRequest::kGuildIdFieldNumber;
const int CMsgDOTAPartySetOpenGuildRequest::kDescriptionFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPartySetOpenGuildRequest::CMsgDOTAPartySetOpenGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPartySetOpenGuildRequest)
}

void CMsgDOTAPartySetOpenGuildRequest::InitAsDefaultInstance() {
}

CMsgDOTAPartySetOpenGuildRequest::CMsgDOTAPartySetOpenGuildRequest(const CMsgDOTAPartySetOpenGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPartySetOpenGuildRequest)
}

void CMsgDOTAPartySetOpenGuildRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPartySetOpenGuildRequest::~CMsgDOTAPartySetOpenGuildRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPartySetOpenGuildRequest)
  SharedDtor();
}

void CMsgDOTAPartySetOpenGuildRequest::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAPartySetOpenGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartySetOpenGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPartySetOpenGuildRequest_descriptor_;
}

const CMsgDOTAPartySetOpenGuildRequest& CMsgDOTAPartySetOpenGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAPartySetOpenGuildRequest* CMsgDOTAPartySetOpenGuildRequest::default_instance_ = NULL;

CMsgDOTAPartySetOpenGuildRequest* CMsgDOTAPartySetOpenGuildRequest::New() const {
  return new CMsgDOTAPartySetOpenGuildRequest;
}

void CMsgDOTAPartySetOpenGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    guild_id_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPartySetOpenGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPartySetOpenGuildRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPartySetOpenGuildRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPartySetOpenGuildRequest)
  return false;
#undef DO_
}

void CMsgDOTAPartySetOpenGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPartySetOpenGuildRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPartySetOpenGuildRequest)
}

::google::protobuf::uint8* CMsgDOTAPartySetOpenGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPartySetOpenGuildRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPartySetOpenGuildRequest)
  return target;
}

int CMsgDOTAPartySetOpenGuildRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartySetOpenGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPartySetOpenGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPartySetOpenGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPartySetOpenGuildRequest::MergeFrom(const CMsgDOTAPartySetOpenGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPartySetOpenGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartySetOpenGuildRequest::CopyFrom(const CMsgDOTAPartySetOpenGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartySetOpenGuildRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAPartySetOpenGuildRequest::Swap(CMsgDOTAPartySetOpenGuildRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPartySetOpenGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPartySetOpenGuildRequest_descriptor_;
  metadata.reflection = CMsgDOTAPartySetOpenGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor_;
}
bool CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::SUCCESS;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::ERROR_UNSPECIFIED;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::EResult_MIN;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::EResult_MAX;
const int CMsgDOTAPartySetOpenGuildResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAPartySetOpenGuildResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPartySetOpenGuildResponse::CMsgDOTAPartySetOpenGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPartySetOpenGuildResponse)
}

void CMsgDOTAPartySetOpenGuildResponse::InitAsDefaultInstance() {
}

CMsgDOTAPartySetOpenGuildResponse::CMsgDOTAPartySetOpenGuildResponse(const CMsgDOTAPartySetOpenGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPartySetOpenGuildResponse)
}

void CMsgDOTAPartySetOpenGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPartySetOpenGuildResponse::~CMsgDOTAPartySetOpenGuildResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPartySetOpenGuildResponse)
  SharedDtor();
}

void CMsgDOTAPartySetOpenGuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPartySetOpenGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartySetOpenGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPartySetOpenGuildResponse_descriptor_;
}

const CMsgDOTAPartySetOpenGuildResponse& CMsgDOTAPartySetOpenGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAPartySetOpenGuildResponse* CMsgDOTAPartySetOpenGuildResponse::default_instance_ = NULL;

CMsgDOTAPartySetOpenGuildResponse* CMsgDOTAPartySetOpenGuildResponse::New() const {
  return new CMsgDOTAPartySetOpenGuildResponse;
}

void CMsgDOTAPartySetOpenGuildResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPartySetOpenGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPartySetOpenGuildResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAPartySetOpenGuildResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPartySetOpenGuildResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPartySetOpenGuildResponse)
  return false;
#undef DO_
}

void CMsgDOTAPartySetOpenGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPartySetOpenGuildResponse)
  // optional .CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPartySetOpenGuildResponse)
}

::google::protobuf::uint8* CMsgDOTAPartySetOpenGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPartySetOpenGuildResponse)
  // optional .CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPartySetOpenGuildResponse)
  return target;
}

int CMsgDOTAPartySetOpenGuildResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartySetOpenGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPartySetOpenGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPartySetOpenGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPartySetOpenGuildResponse::MergeFrom(const CMsgDOTAPartySetOpenGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPartySetOpenGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartySetOpenGuildResponse::CopyFrom(const CMsgDOTAPartySetOpenGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartySetOpenGuildResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAPartySetOpenGuildResponse::Swap(CMsgDOTAPartySetOpenGuildResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPartySetOpenGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPartySetOpenGuildResponse_descriptor_;
  metadata.reflection = CMsgDOTAPartySetOpenGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAJoinOpenGuildPartyRequest::kPartyIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAJoinOpenGuildPartyRequest::CMsgDOTAJoinOpenGuildPartyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAJoinOpenGuildPartyRequest)
}

void CMsgDOTAJoinOpenGuildPartyRequest::InitAsDefaultInstance() {
}

CMsgDOTAJoinOpenGuildPartyRequest::CMsgDOTAJoinOpenGuildPartyRequest(const CMsgDOTAJoinOpenGuildPartyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinOpenGuildPartyRequest)
}

void CMsgDOTAJoinOpenGuildPartyRequest::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAJoinOpenGuildPartyRequest::~CMsgDOTAJoinOpenGuildPartyRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinOpenGuildPartyRequest)
  SharedDtor();
}

void CMsgDOTAJoinOpenGuildPartyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAJoinOpenGuildPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinOpenGuildPartyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAJoinOpenGuildPartyRequest_descriptor_;
}

const CMsgDOTAJoinOpenGuildPartyRequest& CMsgDOTAJoinOpenGuildPartyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAJoinOpenGuildPartyRequest* CMsgDOTAJoinOpenGuildPartyRequest::default_instance_ = NULL;

CMsgDOTAJoinOpenGuildPartyRequest* CMsgDOTAJoinOpenGuildPartyRequest::New() const {
  return new CMsgDOTAJoinOpenGuildPartyRequest;
}

void CMsgDOTAJoinOpenGuildPartyRequest::Clear() {
  party_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAJoinOpenGuildPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAJoinOpenGuildPartyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAJoinOpenGuildPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAJoinOpenGuildPartyRequest)
  return false;
#undef DO_
}

void CMsgDOTAJoinOpenGuildPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAJoinOpenGuildPartyRequest)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAJoinOpenGuildPartyRequest)
}

::google::protobuf::uint8* CMsgDOTAJoinOpenGuildPartyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinOpenGuildPartyRequest)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinOpenGuildPartyRequest)
  return target;
}

int CMsgDOTAJoinOpenGuildPartyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinOpenGuildPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAJoinOpenGuildPartyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAJoinOpenGuildPartyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinOpenGuildPartyRequest::MergeFrom(const CMsgDOTAJoinOpenGuildPartyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAJoinOpenGuildPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinOpenGuildPartyRequest::CopyFrom(const CMsgDOTAJoinOpenGuildPartyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinOpenGuildPartyRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAJoinOpenGuildPartyRequest::Swap(CMsgDOTAJoinOpenGuildPartyRequest* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAJoinOpenGuildPartyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAJoinOpenGuildPartyRequest_descriptor_;
  metadata.reflection = CMsgDOTAJoinOpenGuildPartyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor_;
}
bool CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::SUCCESS;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::ERROR_UNSPECIFIED;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::EResult_MIN;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::EResult_MAX;
const int CMsgDOTAJoinOpenGuildPartyResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAJoinOpenGuildPartyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAJoinOpenGuildPartyResponse::CMsgDOTAJoinOpenGuildPartyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAJoinOpenGuildPartyResponse)
}

void CMsgDOTAJoinOpenGuildPartyResponse::InitAsDefaultInstance() {
}

CMsgDOTAJoinOpenGuildPartyResponse::CMsgDOTAJoinOpenGuildPartyResponse(const CMsgDOTAJoinOpenGuildPartyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinOpenGuildPartyResponse)
}

void CMsgDOTAJoinOpenGuildPartyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAJoinOpenGuildPartyResponse::~CMsgDOTAJoinOpenGuildPartyResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinOpenGuildPartyResponse)
  SharedDtor();
}

void CMsgDOTAJoinOpenGuildPartyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAJoinOpenGuildPartyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinOpenGuildPartyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAJoinOpenGuildPartyResponse_descriptor_;
}

const CMsgDOTAJoinOpenGuildPartyResponse& CMsgDOTAJoinOpenGuildPartyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAJoinOpenGuildPartyResponse* CMsgDOTAJoinOpenGuildPartyResponse::default_instance_ = NULL;

CMsgDOTAJoinOpenGuildPartyResponse* CMsgDOTAJoinOpenGuildPartyResponse::New() const {
  return new CMsgDOTAJoinOpenGuildPartyResponse;
}

void CMsgDOTAJoinOpenGuildPartyResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAJoinOpenGuildPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAJoinOpenGuildPartyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAJoinOpenGuildPartyResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAJoinOpenGuildPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAJoinOpenGuildPartyResponse)
  return false;
#undef DO_
}

void CMsgDOTAJoinOpenGuildPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAJoinOpenGuildPartyResponse)
  // optional .CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAJoinOpenGuildPartyResponse)
}

::google::protobuf::uint8* CMsgDOTAJoinOpenGuildPartyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinOpenGuildPartyResponse)
  // optional .CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinOpenGuildPartyResponse)
  return target;
}

int CMsgDOTAJoinOpenGuildPartyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinOpenGuildPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAJoinOpenGuildPartyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAJoinOpenGuildPartyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinOpenGuildPartyResponse::MergeFrom(const CMsgDOTAJoinOpenGuildPartyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAJoinOpenGuildPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinOpenGuildPartyResponse::CopyFrom(const CMsgDOTAJoinOpenGuildPartyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinOpenGuildPartyResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAJoinOpenGuildPartyResponse::Swap(CMsgDOTAJoinOpenGuildPartyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAJoinOpenGuildPartyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAJoinOpenGuildPartyResponse_descriptor_;
  metadata.reflection = CMsgDOTAJoinOpenGuildPartyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kPartyIdFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kMemberAccountIdsFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kTimeCreatedFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kDescriptionFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildOpenPartyRefresh_OpenParty::CMsgDOTAGuildOpenPartyRefresh_OpenParty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::InitAsDefaultInstance() {
}

CMsgDOTAGuildOpenPartyRefresh_OpenParty::CMsgDOTAGuildOpenPartyRefresh_OpenParty(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
  time_created_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildOpenPartyRefresh_OpenParty::~CMsgDOTAGuildOpenPartyRefresh_OpenParty() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  SharedDtor();
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildOpenPartyRefresh_OpenParty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildOpenPartyRefresh_OpenParty_descriptor_;
}

const CMsgDOTAGuildOpenPartyRefresh_OpenParty& CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance_ = NULL;

CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh_OpenParty::New() const {
  return new CMsgDOTAGuildOpenPartyRefresh_OpenParty;
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    party_id_ = GOOGLE_ULONGLONG(0);
    time_created_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  member_account_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
          set_has_party_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_account_ids;
        break;
      }

      // repeated uint32 member_account_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_member_account_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_member_account_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_account_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_account_ids;
        if (input->ExpectTag(24)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (tag == 24) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  return false;
#undef DO_
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // repeated uint32 member_account_ids = 2;
  for (int i = 0; i < this->member_account_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->member_account_ids(i), output);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
}

::google::protobuf::uint8* CMsgDOTAGuildOpenPartyRefresh_OpenParty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // repeated uint32 member_account_ids = 2;
  for (int i = 0; i < this->member_account_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->member_account_ids(i), target);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  return target;
}

int CMsgDOTAGuildOpenPartyRefresh_OpenParty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated uint32 member_account_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_account_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->member_account_ids(i));
    }
    total_size += 1 * this->member_account_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildOpenPartyRefresh_OpenParty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildOpenPartyRefresh_OpenParty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::MergeFrom(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_account_ids_.MergeFrom(from.member_account_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::CopyFrom(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::Swap(CMsgDOTAGuildOpenPartyRefresh_OpenParty* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    member_account_ids_.Swap(&other->member_account_ids_);
    std::swap(time_created_, other->time_created_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildOpenPartyRefresh_OpenParty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildOpenPartyRefresh_OpenParty_descriptor_;
  metadata.reflection = CMsgDOTAGuildOpenPartyRefresh_OpenParty_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAGuildOpenPartyRefresh::kGuildIdFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh::kOpenPartiesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildOpenPartyRefresh::CMsgDOTAGuildOpenPartyRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildOpenPartyRefresh)
}

void CMsgDOTAGuildOpenPartyRefresh::InitAsDefaultInstance() {
}

CMsgDOTAGuildOpenPartyRefresh::CMsgDOTAGuildOpenPartyRefresh(const CMsgDOTAGuildOpenPartyRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildOpenPartyRefresh)
}

void CMsgDOTAGuildOpenPartyRefresh::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildOpenPartyRefresh::~CMsgDOTAGuildOpenPartyRefresh() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildOpenPartyRefresh)
  SharedDtor();
}

void CMsgDOTAGuildOpenPartyRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildOpenPartyRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildOpenPartyRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildOpenPartyRefresh_descriptor_;
}

const CMsgDOTAGuildOpenPartyRefresh& CMsgDOTAGuildOpenPartyRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildOpenPartyRefresh* CMsgDOTAGuildOpenPartyRefresh::default_instance_ = NULL;

CMsgDOTAGuildOpenPartyRefresh* CMsgDOTAGuildOpenPartyRefresh::New() const {
  return new CMsgDOTAGuildOpenPartyRefresh;
}

void CMsgDOTAGuildOpenPartyRefresh::Clear() {
  guild_id_ = 0u;
  open_parties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildOpenPartyRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildOpenPartyRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_parties;
        break;
      }

      // repeated .CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
      case 2: {
        if (tag == 18) {
         parse_open_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_parties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_parties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildOpenPartyRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildOpenPartyRefresh)
  return false;
#undef DO_
}

void CMsgDOTAGuildOpenPartyRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildOpenPartyRefresh)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // repeated .CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  for (int i = 0; i < this->open_parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_parties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildOpenPartyRefresh)
}

::google::protobuf::uint8* CMsgDOTAGuildOpenPartyRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildOpenPartyRefresh)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // repeated .CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  for (int i = 0; i < this->open_parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_parties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildOpenPartyRefresh)
  return target;
}

int CMsgDOTAGuildOpenPartyRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  // repeated .CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  total_size += 1 * this->open_parties_size();
  for (int i = 0; i < this->open_parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_parties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildOpenPartyRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildOpenPartyRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildOpenPartyRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildOpenPartyRefresh::MergeFrom(const CMsgDOTAGuildOpenPartyRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_parties_.MergeFrom(from.open_parties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildOpenPartyRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildOpenPartyRefresh::CopyFrom(const CMsgDOTAGuildOpenPartyRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildOpenPartyRefresh::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildOpenPartyRefresh::Swap(CMsgDOTAGuildOpenPartyRefresh* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    open_parties_.Swap(&other->open_parties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildOpenPartyRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildOpenPartyRefresh_descriptor_;
  metadata.reflection = CMsgDOTAGuildOpenPartyRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTARequestGuildData::CMsgDOTARequestGuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTARequestGuildData)
}

void CMsgDOTARequestGuildData::InitAsDefaultInstance() {
}

CMsgDOTARequestGuildData::CMsgDOTARequestGuildData(const CMsgDOTARequestGuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestGuildData)
}

void CMsgDOTARequestGuildData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTARequestGuildData::~CMsgDOTARequestGuildData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestGuildData)
  SharedDtor();
}

void CMsgDOTARequestGuildData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTARequestGuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestGuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTARequestGuildData_descriptor_;
}

const CMsgDOTARequestGuildData& CMsgDOTARequestGuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTARequestGuildData* CMsgDOTARequestGuildData::default_instance_ = NULL;

CMsgDOTARequestGuildData* CMsgDOTARequestGuildData::New() const {
  return new CMsgDOTARequestGuildData;
}

void CMsgDOTARequestGuildData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTARequestGuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTARequestGuildData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTARequestGuildData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTARequestGuildData)
  return false;
#undef DO_
}

void CMsgDOTARequestGuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTARequestGuildData)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTARequestGuildData)
}

::google::protobuf::uint8* CMsgDOTARequestGuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestGuildData)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestGuildData)
  return target;
}

int CMsgDOTARequestGuildData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestGuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTARequestGuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTARequestGuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTARequestGuildData::MergeFrom(const CMsgDOTARequestGuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTARequestGuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestGuildData::CopyFrom(const CMsgDOTARequestGuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestGuildData::IsInitialized() const {

  return true;
}

void CMsgDOTARequestGuildData::Swap(CMsgDOTARequestGuildData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTARequestGuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTARequestGuildData_descriptor_;
  metadata.reflection = CMsgDOTARequestGuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildInviteData::kInvitedToGuildFieldNumber;
const int CMsgDOTAGuildInviteData::kGuildIdFieldNumber;
const int CMsgDOTAGuildInviteData::kGuildNameFieldNumber;
const int CMsgDOTAGuildInviteData::kGuildTagFieldNumber;
const int CMsgDOTAGuildInviteData::kLogoFieldNumber;
const int CMsgDOTAGuildInviteData::kInviterFieldNumber;
const int CMsgDOTAGuildInviteData::kInviterNameFieldNumber;
const int CMsgDOTAGuildInviteData::kMemberCountFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildInviteData::CMsgDOTAGuildInviteData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildInviteData)
}

void CMsgDOTAGuildInviteData::InitAsDefaultInstance() {
}

CMsgDOTAGuildInviteData::CMsgDOTAGuildInviteData(const CMsgDOTAGuildInviteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildInviteData)
}

void CMsgDOTAGuildInviteData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invited_to_guild_ = false;
  guild_id_ = 0u;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  inviter_ = 0u;
  inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildInviteData::~CMsgDOTAGuildInviteData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildInviteData)
  SharedDtor();
}

void CMsgDOTAGuildInviteData::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_tag_;
  }
  if (inviter_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inviter_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildInviteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildInviteData_descriptor_;
}

const CMsgDOTAGuildInviteData& CMsgDOTAGuildInviteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildInviteData* CMsgDOTAGuildInviteData::default_instance_ = NULL;

CMsgDOTAGuildInviteData* CMsgDOTAGuildInviteData::New() const {
  return new CMsgDOTAGuildInviteData;
}

void CMsgDOTAGuildInviteData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildInviteData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(invited_to_guild_, guild_id_);
    ZR_(inviter_, member_count_);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
    if (has_guild_tag()) {
      if (guild_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_tag_->clear();
      }
    }
    logo_ = GOOGLE_ULONGLONG(0);
    if (has_inviter_name()) {
      if (inviter_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inviter_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildInviteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildInviteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool invited_to_guild = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invited_to_guild_)));
          set_has_invited_to_guild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (tag == 16) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 3;
      case 3: {
        if (tag == 26) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guild_tag;
        break;
      }

      // optional string guild_tag = 4;
      case 4: {
        if (tag == 34) {
         parse_guild_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_tag().data(), this->guild_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 5;
      case 5: {
        if (tag == 40) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_inviter;
        break;
      }

      // optional uint32 inviter = 6;
      case 6: {
        if (tag == 48) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviter_)));
          set_has_inviter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_inviter_name;
        break;
      }

      // optional string inviter_name = 7;
      case 7: {
        if (tag == 58) {
         parse_inviter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inviter_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 8;
      case 8: {
        if (tag == 64) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildInviteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildInviteData)
  return false;
#undef DO_
}

void CMsgDOTAGuildInviteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildInviteData)
  // optional bool invited_to_guild = 1;
  if (has_invited_to_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->invited_to_guild(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guild_name(), output);
  }

  // optional string guild_tag = 4;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guild_tag(), output);
  }

  // optional uint64 logo = 5;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logo(), output);
  }

  // optional uint32 inviter = 6;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inviter(), output);
  }

  // optional string inviter_name = 7;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inviter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->inviter_name(), output);
  }

  // optional uint32 member_count = 8;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->member_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildInviteData)
}

::google::protobuf::uint8* CMsgDOTAGuildInviteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildInviteData)
  // optional bool invited_to_guild = 1;
  if (has_invited_to_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->invited_to_guild(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }

  // optional string guild_tag = 4;
  if (has_guild_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_tag(), target);
  }

  // optional uint64 logo = 5;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logo(), target);
  }

  // optional uint32 inviter = 6;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inviter(), target);
  }

  // optional string inviter_name = 7;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inviter_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->inviter_name(), target);
  }

  // optional uint32 member_count = 8;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->member_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildInviteData)
  return target;
}

int CMsgDOTAGuildInviteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool invited_to_guild = 1;
    if (has_invited_to_guild()) {
      total_size += 1 + 1;
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string guild_tag = 4;
    if (has_guild_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }

    // optional uint64 logo = 5;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 inviter = 6;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviter());
    }

    // optional string inviter_name = 7;
    if (has_inviter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_name());
    }

    // optional uint32 member_count = 8;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildInviteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildInviteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildInviteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildInviteData::MergeFrom(const CMsgDOTAGuildInviteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invited_to_guild()) {
      set_invited_to_guild(from.invited_to_guild());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_tag()) {
      set_guild_tag(from.guild_tag());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
    if (from.has_inviter_name()) {
      set_inviter_name(from.inviter_name());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildInviteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildInviteData::CopyFrom(const CMsgDOTAGuildInviteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildInviteData::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildInviteData::Swap(CMsgDOTAGuildInviteData* other) {
  if (other != this) {
    std::swap(invited_to_guild_, other->invited_to_guild_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_tag_, other->guild_tag_);
    std::swap(logo_, other->logo_);
    std::swap(inviter_, other->inviter_);
    std::swap(inviter_name_, other->inviter_name_);
    std::swap(member_count_, other->member_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildInviteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildInviteData_descriptor_;
  metadata.reflection = CMsgDOTAGuildInviteData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildUpdateMessage::kMessageFieldNumber;
const int CMsgDOTAGuildUpdateMessage::kGuildIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildUpdateMessage::CMsgDOTAGuildUpdateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildUpdateMessage)
}

void CMsgDOTAGuildUpdateMessage::InitAsDefaultInstance() {
}

CMsgDOTAGuildUpdateMessage::CMsgDOTAGuildUpdateMessage(const CMsgDOTAGuildUpdateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildUpdateMessage)
}

void CMsgDOTAGuildUpdateMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildUpdateMessage::~CMsgDOTAGuildUpdateMessage() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildUpdateMessage)
  SharedDtor();
}

void CMsgDOTAGuildUpdateMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildUpdateMessage_descriptor_;
}

const CMsgDOTAGuildUpdateMessage& CMsgDOTAGuildUpdateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildUpdateMessage* CMsgDOTAGuildUpdateMessage::default_instance_ = NULL;

CMsgDOTAGuildUpdateMessage* CMsgDOTAGuildUpdateMessage::New() const {
  return new CMsgDOTAGuildUpdateMessage;
}

void CMsgDOTAGuildUpdateMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (tag == 16) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildUpdateMessage)
  return false;
#undef DO_
}

void CMsgDOTAGuildUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildUpdateMessage)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildUpdateMessage)
}

::google::protobuf::uint8* CMsgDOTAGuildUpdateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildUpdateMessage)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildUpdateMessage)
  return target;
}

int CMsgDOTAGuildUpdateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildUpdateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildUpdateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildUpdateMessage::MergeFrom(const CMsgDOTAGuildUpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildUpdateMessage::CopyFrom(const CMsgDOTAGuildUpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildUpdateMessage::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildUpdateMessage::Swap(CMsgDOTAGuildUpdateMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildUpdateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildUpdateMessage_descriptor_;
  metadata.reflection = CMsgDOTAGuildUpdateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGuildEditLogoRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildEditLogoRequest::kLogoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildEditLogoRequest::CMsgDOTAGuildEditLogoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildEditLogoRequest)
}

void CMsgDOTAGuildEditLogoRequest::InitAsDefaultInstance() {
}

CMsgDOTAGuildEditLogoRequest::CMsgDOTAGuildEditLogoRequest(const CMsgDOTAGuildEditLogoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildEditLogoRequest)
}

void CMsgDOTAGuildEditLogoRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildEditLogoRequest::~CMsgDOTAGuildEditLogoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildEditLogoRequest)
  SharedDtor();
}

void CMsgDOTAGuildEditLogoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildEditLogoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildEditLogoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildEditLogoRequest_descriptor_;
}

const CMsgDOTAGuildEditLogoRequest& CMsgDOTAGuildEditLogoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildEditLogoRequest* CMsgDOTAGuildEditLogoRequest::default_instance_ = NULL;

CMsgDOTAGuildEditLogoRequest* CMsgDOTAGuildEditLogoRequest::New() const {
  return new CMsgDOTAGuildEditLogoRequest;
}

void CMsgDOTAGuildEditLogoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildEditLogoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(logo_, guild_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildEditLogoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildEditLogoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 2;
      case 2: {
        if (tag == 16) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildEditLogoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildEditLogoRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildEditLogoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildEditLogoRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint64 logo = 2;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildEditLogoRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildEditLogoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildEditLogoRequest)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint64 logo = 2;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildEditLogoRequest)
  return target;
}

int CMsgDOTAGuildEditLogoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 logo = 2;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildEditLogoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildEditLogoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildEditLogoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildEditLogoRequest::MergeFrom(const CMsgDOTAGuildEditLogoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildEditLogoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildEditLogoRequest::CopyFrom(const CMsgDOTAGuildEditLogoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildEditLogoRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildEditLogoRequest::Swap(CMsgDOTAGuildEditLogoRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(logo_, other->logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildEditLogoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildEditLogoRequest_descriptor_;
  metadata.reflection = CMsgDOTAGuildEditLogoRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildEditLogoResponse_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildEditLogoResponse_EResult_descriptor_;
}
bool CMsgDOTAGuildEditLogoResponse_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::SUCCESS;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::NO_PERMISSION;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::UNSPECIFIED_ERROR;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::EResult_MIN;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::EResult_MAX;
const int CMsgDOTAGuildEditLogoResponse::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAGuildEditLogoResponse::kGuildIdFieldNumber;
const int CMsgDOTAGuildEditLogoResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGuildEditLogoResponse::CMsgDOTAGuildEditLogoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGuildEditLogoResponse)
}

void CMsgDOTAGuildEditLogoResponse::InitAsDefaultInstance() {
}

CMsgDOTAGuildEditLogoResponse::CMsgDOTAGuildEditLogoResponse(const CMsgDOTAGuildEditLogoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGuildEditLogoResponse)
}

void CMsgDOTAGuildEditLogoResponse::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGuildEditLogoResponse::~CMsgDOTAGuildEditLogoResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGuildEditLogoResponse)
  SharedDtor();
}

void CMsgDOTAGuildEditLogoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGuildEditLogoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildEditLogoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGuildEditLogoResponse_descriptor_;
}

const CMsgDOTAGuildEditLogoResponse& CMsgDOTAGuildEditLogoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fguild_2eproto();
  return *default_instance_;
}

CMsgDOTAGuildEditLogoResponse* CMsgDOTAGuildEditLogoResponse::default_instance_ = NULL;

CMsgDOTAGuildEditLogoResponse* CMsgDOTAGuildEditLogoResponse::New() const {
  return new CMsgDOTAGuildEditLogoResponse;
}

void CMsgDOTAGuildEditLogoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGuildEditLogoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guild_id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGuildEditLogoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGuildEditLogoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAGuildEditLogoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAGuildEditLogoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGuildEditLogoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGuildEditLogoResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildEditLogoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGuildEditLogoResponse)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional .CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGuildEditLogoResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildEditLogoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGuildEditLogoResponse)
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional .CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGuildEditLogoResponse)
  return target;
}

int CMsgDOTAGuildEditLogoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional .CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildEditLogoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGuildEditLogoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGuildEditLogoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildEditLogoResponse::MergeFrom(const CMsgDOTAGuildEditLogoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGuildEditLogoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildEditLogoResponse::CopyFrom(const CMsgDOTAGuildEditLogoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildEditLogoResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGuildEditLogoResponse::Swap(CMsgDOTAGuildEditLogoResponse* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGuildEditLogoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGuildEditLogoResponse_descriptor_;
  metadata.reflection = CMsgDOTAGuildEditLogoResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
