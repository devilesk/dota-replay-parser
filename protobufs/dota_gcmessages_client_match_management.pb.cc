// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgStartFindingMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStartFindingMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStartFindingMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStartFindingMatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgStopFindingMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgStopFindingMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyBuilderOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReadyUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReadyUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgReadyUpStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgReadyUpStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAbandonCurrentGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAbandonCurrentGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbySetDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCreate_SaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyCreate_SaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetTeamSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbySetTeamSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbySetCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoinBroadcastChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyJoinBroadcastChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCloseBroadcastChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyCloseBroadcastChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyKickFromTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyKickFromTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyLaunch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyLaunch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgApplyTeamToPracticeLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgApplyTeamToPracticeLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClearPracticeLobbyTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClearPracticeLobbyTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponseEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyListResponseEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponseEntry_CLobbyMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyListResponseEntry_CLobbyMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLobbyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLobbyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoinResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPracticeLobbyJoinResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFriendPracticeLobbyListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFriendPracticeLobbyListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFriendPracticeLobbyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFriendPracticeLobbyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGuildmatePracticeLobbyListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGuildmatePracticeLobbyListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGuildmatePracticeLobbyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGuildmatePracticeLobbyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinableCustomGameModesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesResponseEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinableCustomGameModesResponseEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinableCustomGameModesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinableCustomLobbiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesResponseEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinableCustomLobbiesResponseEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgJoinableCustomLobbiesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuickJoinCustomLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobby_LegacyRegionPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuickJoinCustomLobby_LegacyRegionPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobbyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuickJoinCustomLobbyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBotGameCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBotGameCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCustomGameCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCustomGameCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEventGameCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEventGameCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAPartyMemberSetCoach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAPartyMemberSetCoach_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASetGroupLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASetGroupLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACancelGroupInvites_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACancelGroupInvites_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTASetGroupOpenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTASetGroupOpenStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGroupMergeInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGroupMergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAGroupMergeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyGameDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectatorLobbyGameDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyGameDetails_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectatorLobbyGameDetails_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSetSpectatorLobbyDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSetSpectatorLobbyDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCreateSpectatorLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCreateSpectatorLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectatorLobbyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectatorLobbyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyListResponse_SpectatorLobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectatorLobbyListResponse_SpectatorLobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCRequestSteamDatagramTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCRequestSteamDatagramTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCRequestSteamDatagramTicketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCRequestSteamDatagramTicketResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EStartFindingMatchResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_match_management.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgStartFindingMatch_descriptor_ = file->message_type(0);
  static const int CMsgStartFindingMatch_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, matchgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, game_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, bot_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, matchlanguages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, map_preference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, game_language_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, game_language_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, ping_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, region_select_flags_),
  };
  CMsgStartFindingMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStartFindingMatch_descriptor_,
      CMsgStartFindingMatch::default_instance_,
      CMsgStartFindingMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStartFindingMatch));
  CMsgStartFindingMatchResult_descriptor_ = file->message_type(1);
  static const int CMsgStartFindingMatchResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, legacy_generic_eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, error_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, debug_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, responsible_party_members_),
  };
  CMsgStartFindingMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStartFindingMatchResult_descriptor_,
      CMsgStartFindingMatchResult::default_instance_,
      CMsgStartFindingMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStartFindingMatchResult));
  CMsgStopFindingMatch_descriptor_ = file->message_type(2);
  static const int CMsgStopFindingMatch_offsets_[1] = {
  };
  CMsgStopFindingMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgStopFindingMatch_descriptor_,
      CMsgStopFindingMatch::default_instance_,
      CMsgStopFindingMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFindingMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFindingMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgStopFindingMatch));
  CMsgPartyBuilderOptions_descriptor_ = file->message_type(3);
  static const int CMsgPartyBuilderOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, additional_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, matchgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, language_),
  };
  CMsgPartyBuilderOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyBuilderOptions_descriptor_,
      CMsgPartyBuilderOptions::default_instance_,
      CMsgPartyBuilderOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyBuilderOptions));
  CMsgReadyUp_descriptor_ = file->message_type(4);
  static const int CMsgReadyUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, ready_up_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, hardware_specs_),
  };
  CMsgReadyUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReadyUp_descriptor_,
      CMsgReadyUp::default_instance_,
      CMsgReadyUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReadyUp));
  CMsgReadyUpStatus_descriptor_ = file->message_type(5);
  static const int CMsgReadyUpStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, accepted_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, declined_ids_),
  };
  CMsgReadyUpStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgReadyUpStatus_descriptor_,
      CMsgReadyUpStatus::default_instance_,
      CMsgReadyUpStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgReadyUpStatus));
  CMsgAbandonCurrentGame_descriptor_ = file->message_type(6);
  static const int CMsgAbandonCurrentGame_offsets_[1] = {
  };
  CMsgAbandonCurrentGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAbandonCurrentGame_descriptor_,
      CMsgAbandonCurrentGame::default_instance_,
      CMsgAbandonCurrentGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAbandonCurrentGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAbandonCurrentGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAbandonCurrentGame));
  CMsgPracticeLobbySetDetails_descriptor_ = file->message_type(7);
  static const int CMsgPracticeLobbySetDetails_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, team_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, cm_pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_difficulty_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, allow_cheats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, fill_with_bots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, intro_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, allow_spectating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, leagueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, penalty_level_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, penalty_level_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, load_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, radiant_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, dire_series_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, allchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, dota_tv_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, lan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_min_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_max_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, lan_host_ping_to_server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, previous_match_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_selection_priority_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_selection_priority_choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_non_selection_priority_choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, pause_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_difficulty_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_dire_),
  };
  CMsgPracticeLobbySetDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbySetDetails_descriptor_,
      CMsgPracticeLobbySetDetails::default_instance_,
      CMsgPracticeLobbySetDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbySetDetails));
  CMsgPracticeLobbyCreate_descriptor_ = file->message_type(8);
  static const int CMsgPracticeLobbyCreate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, lobby_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, save_game_),
  };
  CMsgPracticeLobbyCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyCreate_descriptor_,
      CMsgPracticeLobbyCreate::default_instance_,
      CMsgPracticeLobbyCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyCreate));
  CMsgPracticeLobbyCreate_SaveGame_descriptor_ = CMsgPracticeLobbyCreate_descriptor_->nested_type(0);
  static const int CMsgPracticeLobbyCreate_SaveGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, signature_),
  };
  CMsgPracticeLobbyCreate_SaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyCreate_SaveGame_descriptor_,
      CMsgPracticeLobbyCreate_SaveGame::default_instance_,
      CMsgPracticeLobbyCreate_SaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyCreate_SaveGame));
  CMsgPracticeLobbySetTeamSlot_descriptor_ = file->message_type(9);
  static const int CMsgPracticeLobbySetTeamSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, bot_difficulty_),
  };
  CMsgPracticeLobbySetTeamSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbySetTeamSlot_descriptor_,
      CMsgPracticeLobbySetTeamSlot::default_instance_,
      CMsgPracticeLobbySetTeamSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbySetTeamSlot));
  CMsgPracticeLobbySetCoach_descriptor_ = file->message_type(10);
  static const int CMsgPracticeLobbySetCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetCoach, team_),
  };
  CMsgPracticeLobbySetCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbySetCoach_descriptor_,
      CMsgPracticeLobbySetCoach::default_instance_,
      CMsgPracticeLobbySetCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbySetCoach));
  CMsgPracticeLobbyJoinBroadcastChannel_descriptor_ = file->message_type(11);
  static const int CMsgPracticeLobbyJoinBroadcastChannel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, preferred_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, preferred_country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, preferred_language_code_),
  };
  CMsgPracticeLobbyJoinBroadcastChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyJoinBroadcastChannel_descriptor_,
      CMsgPracticeLobbyJoinBroadcastChannel::default_instance_,
      CMsgPracticeLobbyJoinBroadcastChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyJoinBroadcastChannel));
  CMsgPracticeLobbyCloseBroadcastChannel_descriptor_ = file->message_type(12);
  static const int CMsgPracticeLobbyCloseBroadcastChannel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCloseBroadcastChannel, channel_),
  };
  CMsgPracticeLobbyCloseBroadcastChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyCloseBroadcastChannel_descriptor_,
      CMsgPracticeLobbyCloseBroadcastChannel::default_instance_,
      CMsgPracticeLobbyCloseBroadcastChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCloseBroadcastChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCloseBroadcastChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyCloseBroadcastChannel));
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_descriptor_ = file->message_type(13);
  static const int CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_offsets_[1] = {
  };
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_descriptor_,
      CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance_,
      CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus));
  CMsgPracticeLobbyKick_descriptor_ = file->message_type(14);
  static const int CMsgPracticeLobbyKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKick, account_id_),
  };
  CMsgPracticeLobbyKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyKick_descriptor_,
      CMsgPracticeLobbyKick::default_instance_,
      CMsgPracticeLobbyKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyKick));
  CMsgPracticeLobbyKickFromTeam_descriptor_ = file->message_type(15);
  static const int CMsgPracticeLobbyKickFromTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKickFromTeam, account_id_),
  };
  CMsgPracticeLobbyKickFromTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyKickFromTeam_descriptor_,
      CMsgPracticeLobbyKickFromTeam::default_instance_,
      CMsgPracticeLobbyKickFromTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKickFromTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKickFromTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyKickFromTeam));
  CMsgPracticeLobbyLeave_descriptor_ = file->message_type(16);
  static const int CMsgPracticeLobbyLeave_offsets_[1] = {
  };
  CMsgPracticeLobbyLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyLeave_descriptor_,
      CMsgPracticeLobbyLeave::default_instance_,
      CMsgPracticeLobbyLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyLeave));
  CMsgPracticeLobbyLaunch_descriptor_ = file->message_type(17);
  static const int CMsgPracticeLobbyLaunch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLaunch, client_version_),
  };
  CMsgPracticeLobbyLaunch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyLaunch_descriptor_,
      CMsgPracticeLobbyLaunch::default_instance_,
      CMsgPracticeLobbyLaunch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLaunch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLaunch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyLaunch));
  CMsgApplyTeamToPracticeLobby_descriptor_ = file->message_type(18);
  static const int CMsgApplyTeamToPracticeLobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyTeamToPracticeLobby, team_id_),
  };
  CMsgApplyTeamToPracticeLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgApplyTeamToPracticeLobby_descriptor_,
      CMsgApplyTeamToPracticeLobby::default_instance_,
      CMsgApplyTeamToPracticeLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyTeamToPracticeLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyTeamToPracticeLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgApplyTeamToPracticeLobby));
  CMsgClearPracticeLobbyTeam_descriptor_ = file->message_type(19);
  static const int CMsgClearPracticeLobbyTeam_offsets_[1] = {
  };
  CMsgClearPracticeLobbyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClearPracticeLobbyTeam_descriptor_,
      CMsgClearPracticeLobbyTeam::default_instance_,
      CMsgClearPracticeLobbyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearPracticeLobbyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearPracticeLobbyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClearPracticeLobbyTeam));
  CMsgPracticeLobbyList_descriptor_ = file->message_type(20);
  static const int CMsgPracticeLobbyList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, tournament_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, game_mode_),
  };
  CMsgPracticeLobbyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyList_descriptor_,
      CMsgPracticeLobbyList::default_instance_,
      CMsgPracticeLobbyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyList));
  CMsgPracticeLobbyListResponseEntry_descriptor_ = file->message_type(21);
  static const int CMsgPracticeLobbyListResponseEntry_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, tournament_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, requires_pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, leader_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, guild_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, custom_game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, friend_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, custom_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, max_player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, lan_host_ping_to_server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, league_id_),
  };
  CMsgPracticeLobbyListResponseEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyListResponseEntry_descriptor_,
      CMsgPracticeLobbyListResponseEntry::default_instance_,
      CMsgPracticeLobbyListResponseEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyListResponseEntry));
  CMsgPracticeLobbyListResponseEntry_CLobbyMember_descriptor_ = CMsgPracticeLobbyListResponseEntry_descriptor_->nested_type(0);
  static const int CMsgPracticeLobbyListResponseEntry_CLobbyMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, player_name_),
  };
  CMsgPracticeLobbyListResponseEntry_CLobbyMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyListResponseEntry_CLobbyMember_descriptor_,
      CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance_,
      CMsgPracticeLobbyListResponseEntry_CLobbyMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyListResponseEntry_CLobbyMember));
  CMsgPracticeLobbyListResponse_descriptor_ = file->message_type(22);
  static const int CMsgPracticeLobbyListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, tournament_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, lobbies_),
  };
  CMsgPracticeLobbyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyListResponse_descriptor_,
      CMsgPracticeLobbyListResponse::default_instance_,
      CMsgPracticeLobbyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyListResponse));
  CMsgLobbyList_descriptor_ = file->message_type(23);
  static const int CMsgLobbyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, game_mode_),
  };
  CMsgLobbyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLobbyList_descriptor_,
      CMsgLobbyList::default_instance_,
      CMsgLobbyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLobbyList));
  CMsgLobbyListResponse_descriptor_ = file->message_type(24);
  static const int CMsgLobbyListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyListResponse, lobbies_),
  };
  CMsgLobbyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLobbyListResponse_descriptor_,
      CMsgLobbyListResponse::default_instance_,
      CMsgLobbyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLobbyListResponse));
  CMsgPracticeLobbyJoin_descriptor_ = file->message_type(25);
  static const int CMsgPracticeLobbyJoin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, custom_game_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, custom_game_timestamp_),
  };
  CMsgPracticeLobbyJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyJoin_descriptor_,
      CMsgPracticeLobbyJoin::default_instance_,
      CMsgPracticeLobbyJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyJoin));
  CMsgPracticeLobbyJoinResponse_descriptor_ = file->message_type(26);
  static const int CMsgPracticeLobbyJoinResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinResponse, result_),
  };
  CMsgPracticeLobbyJoinResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPracticeLobbyJoinResponse_descriptor_,
      CMsgPracticeLobbyJoinResponse::default_instance_,
      CMsgPracticeLobbyJoinResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPracticeLobbyJoinResponse));
  CMsgFriendPracticeLobbyListRequest_descriptor_ = file->message_type(27);
  static const int CMsgFriendPracticeLobbyListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListRequest, friends_),
  };
  CMsgFriendPracticeLobbyListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFriendPracticeLobbyListRequest_descriptor_,
      CMsgFriendPracticeLobbyListRequest::default_instance_,
      CMsgFriendPracticeLobbyListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFriendPracticeLobbyListRequest));
  CMsgFriendPracticeLobbyListResponse_descriptor_ = file->message_type(28);
  static const int CMsgFriendPracticeLobbyListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListResponse, lobbies_),
  };
  CMsgFriendPracticeLobbyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFriendPracticeLobbyListResponse_descriptor_,
      CMsgFriendPracticeLobbyListResponse::default_instance_,
      CMsgFriendPracticeLobbyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFriendPracticeLobbyListResponse));
  CMsgGuildmatePracticeLobbyListRequest_descriptor_ = file->message_type(29);
  static const int CMsgGuildmatePracticeLobbyListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListRequest, guilds_),
  };
  CMsgGuildmatePracticeLobbyListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGuildmatePracticeLobbyListRequest_descriptor_,
      CMsgGuildmatePracticeLobbyListRequest::default_instance_,
      CMsgGuildmatePracticeLobbyListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGuildmatePracticeLobbyListRequest));
  CMsgGuildmatePracticeLobbyListResponse_descriptor_ = file->message_type(30);
  static const int CMsgGuildmatePracticeLobbyListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListResponse, lobbies_),
  };
  CMsgGuildmatePracticeLobbyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGuildmatePracticeLobbyListResponse_descriptor_,
      CMsgGuildmatePracticeLobbyListResponse::default_instance_,
      CMsgGuildmatePracticeLobbyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGuildmatePracticeLobbyListResponse));
  CMsgJoinableCustomGameModesRequest_descriptor_ = file->message_type(31);
  static const int CMsgJoinableCustomGameModesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesRequest, server_region_),
  };
  CMsgJoinableCustomGameModesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinableCustomGameModesRequest_descriptor_,
      CMsgJoinableCustomGameModesRequest::default_instance_,
      CMsgJoinableCustomGameModesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinableCustomGameModesRequest));
  CMsgJoinableCustomGameModesResponseEntry_descriptor_ = file->message_type(32);
  static const int CMsgJoinableCustomGameModesResponseEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, lobby_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, player_count_),
  };
  CMsgJoinableCustomGameModesResponseEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinableCustomGameModesResponseEntry_descriptor_,
      CMsgJoinableCustomGameModesResponseEntry::default_instance_,
      CMsgJoinableCustomGameModesResponseEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinableCustomGameModesResponseEntry));
  CMsgJoinableCustomGameModesResponse_descriptor_ = file->message_type(33);
  static const int CMsgJoinableCustomGameModesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponse, game_modes_),
  };
  CMsgJoinableCustomGameModesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinableCustomGameModesResponse_descriptor_,
      CMsgJoinableCustomGameModesResponse::default_instance_,
      CMsgJoinableCustomGameModesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinableCustomGameModesResponse));
  CMsgJoinableCustomLobbiesRequest_descriptor_ = file->message_type(34);
  static const int CMsgJoinableCustomLobbiesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, custom_game_id_),
  };
  CMsgJoinableCustomLobbiesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinableCustomLobbiesRequest_descriptor_,
      CMsgJoinableCustomLobbiesRequest::default_instance_,
      CMsgJoinableCustomLobbiesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinableCustomLobbiesRequest));
  CMsgJoinableCustomLobbiesResponseEntry_descriptor_ = file->message_type(35);
  static const int CMsgJoinableCustomLobbiesResponseEntry_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lobby_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, leader_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, custom_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, max_player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lan_host_ping_to_server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, has_pass_key_),
  };
  CMsgJoinableCustomLobbiesResponseEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinableCustomLobbiesResponseEntry_descriptor_,
      CMsgJoinableCustomLobbiesResponseEntry::default_instance_,
      CMsgJoinableCustomLobbiesResponseEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinableCustomLobbiesResponseEntry));
  CMsgJoinableCustomLobbiesResponse_descriptor_ = file->message_type(36);
  static const int CMsgJoinableCustomLobbiesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponse, lobbies_),
  };
  CMsgJoinableCustomLobbiesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgJoinableCustomLobbiesResponse_descriptor_,
      CMsgJoinableCustomLobbiesResponse::default_instance_,
      CMsgJoinableCustomLobbiesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgJoinableCustomLobbiesResponse));
  CMsgQuickJoinCustomLobby_descriptor_ = file->message_type(37);
  static const int CMsgQuickJoinCustomLobby_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, legacy_server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, custom_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, create_lobby_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, allow_any_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, legacy_region_pings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, ping_data_),
  };
  CMsgQuickJoinCustomLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuickJoinCustomLobby_descriptor_,
      CMsgQuickJoinCustomLobby::default_instance_,
      CMsgQuickJoinCustomLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuickJoinCustomLobby));
  CMsgQuickJoinCustomLobby_LegacyRegionPing_descriptor_ = CMsgQuickJoinCustomLobby_descriptor_->nested_type(0);
  static const int CMsgQuickJoinCustomLobby_LegacyRegionPing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, server_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, region_code_),
  };
  CMsgQuickJoinCustomLobby_LegacyRegionPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuickJoinCustomLobby_LegacyRegionPing_descriptor_,
      CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance_,
      CMsgQuickJoinCustomLobby_LegacyRegionPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuickJoinCustomLobby_LegacyRegionPing));
  CMsgQuickJoinCustomLobbyResponse_descriptor_ = file->message_type(38);
  static const int CMsgQuickJoinCustomLobbyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobbyResponse, result_),
  };
  CMsgQuickJoinCustomLobbyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuickJoinCustomLobbyResponse_descriptor_,
      CMsgQuickJoinCustomLobbyResponse::default_instance_,
      CMsgQuickJoinCustomLobbyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobbyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobbyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuickJoinCustomLobbyResponse));
  CMsgBotGameCreate_descriptor_ = file->message_type(39);
  static const int CMsgBotGameCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, difficulty_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, difficulty_dire_),
  };
  CMsgBotGameCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBotGameCreate_descriptor_,
      CMsgBotGameCreate::default_instance_,
      CMsgBotGameCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBotGameCreate));
  CMsgCustomGameCreate_descriptor_ = file->message_type(40);
  static const int CMsgCustomGameCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, custom_game_id_),
  };
  CMsgCustomGameCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCustomGameCreate_descriptor_,
      CMsgCustomGameCreate::default_instance_,
      CMsgCustomGameCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCustomGameCreate));
  CMsgEventGameCreate_descriptor_ = file->message_type(41);
  static const int CMsgEventGameCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, custom_game_id_),
  };
  CMsgEventGameCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEventGameCreate_descriptor_,
      CMsgEventGameCreate::default_instance_,
      CMsgEventGameCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEventGameCreate));
  CMsgDOTAPartyMemberSetCoach_descriptor_ = file->message_type(42);
  static const int CMsgDOTAPartyMemberSetCoach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, wants_coach_),
  };
  CMsgDOTAPartyMemberSetCoach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAPartyMemberSetCoach_descriptor_,
      CMsgDOTAPartyMemberSetCoach::default_instance_,
      CMsgDOTAPartyMemberSetCoach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAPartyMemberSetCoach));
  CMsgDOTASetGroupLeader_descriptor_ = file->message_type(43);
  static const int CMsgDOTASetGroupLeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupLeader, new_leader_steamid_),
  };
  CMsgDOTASetGroupLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASetGroupLeader_descriptor_,
      CMsgDOTASetGroupLeader::default_instance_,
      CMsgDOTASetGroupLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASetGroupLeader));
  CMsgDOTACancelGroupInvites_descriptor_ = file->message_type(44);
  static const int CMsgDOTACancelGroupInvites_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, invited_steamids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, invited_groupids_),
  };
  CMsgDOTACancelGroupInvites_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTACancelGroupInvites_descriptor_,
      CMsgDOTACancelGroupInvites::default_instance_,
      CMsgDOTACancelGroupInvites_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTACancelGroupInvites));
  CMsgDOTASetGroupOpenStatus_descriptor_ = file->message_type(45);
  static const int CMsgDOTASetGroupOpenStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupOpenStatus, open_),
  };
  CMsgDOTASetGroupOpenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTASetGroupOpenStatus_descriptor_,
      CMsgDOTASetGroupOpenStatus::default_instance_,
      CMsgDOTASetGroupOpenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupOpenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupOpenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTASetGroupOpenStatus));
  CMsgDOTAGroupMergeInvite_descriptor_ = file->message_type(46);
  static const int CMsgDOTAGroupMergeInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeInvite, other_group_id_),
  };
  CMsgDOTAGroupMergeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGroupMergeInvite_descriptor_,
      CMsgDOTAGroupMergeInvite::default_instance_,
      CMsgDOTAGroupMergeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGroupMergeInvite));
  CMsgDOTAGroupMergeResponse_descriptor_ = file->message_type(47);
  static const int CMsgDOTAGroupMergeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, initiator_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, accept_),
  };
  CMsgDOTAGroupMergeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGroupMergeResponse_descriptor_,
      CMsgDOTAGroupMergeResponse::default_instance_,
      CMsgDOTAGroupMergeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGroupMergeResponse));
  CMsgDOTAGroupMergeReply_descriptor_ = file->message_type(48);
  static const int CMsgDOTAGroupMergeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeReply, result_),
  };
  CMsgDOTAGroupMergeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAGroupMergeReply_descriptor_,
      CMsgDOTAGroupMergeReply::default_instance_,
      CMsgDOTAGroupMergeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAGroupMergeReply));
  CMsgSpectatorLobbyGameDetails_descriptor_ = file->message_type(49);
  static const int CMsgSpectatorLobbyGameDetails_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, stream_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, stream_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, series_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, radiant_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, dire_team_),
  };
  CMsgSpectatorLobbyGameDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectatorLobbyGameDetails_descriptor_,
      CMsgSpectatorLobbyGameDetails::default_instance_,
      CMsgSpectatorLobbyGameDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectatorLobbyGameDetails));
  CMsgSpectatorLobbyGameDetails_Team_descriptor_ = CMsgSpectatorLobbyGameDetails_descriptor_->nested_type(0);
  static const int CMsgSpectatorLobbyGameDetails_Team_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_logo_),
  };
  CMsgSpectatorLobbyGameDetails_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectatorLobbyGameDetails_Team_descriptor_,
      CMsgSpectatorLobbyGameDetails_Team::default_instance_,
      CMsgSpectatorLobbyGameDetails_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectatorLobbyGameDetails_Team));
  CMsgSetSpectatorLobbyDetails_descriptor_ = file->message_type(50);
  static const int CMsgSetSpectatorLobbyDetails_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, lobby_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, game_details_),
  };
  CMsgSetSpectatorLobbyDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSetSpectatorLobbyDetails_descriptor_,
      CMsgSetSpectatorLobbyDetails::default_instance_,
      CMsgSetSpectatorLobbyDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSetSpectatorLobbyDetails));
  CMsgCreateSpectatorLobby_descriptor_ = file->message_type(51);
  static const int CMsgCreateSpectatorLobby_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, details_),
  };
  CMsgCreateSpectatorLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCreateSpectatorLobby_descriptor_,
      CMsgCreateSpectatorLobby::default_instance_,
      CMsgCreateSpectatorLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCreateSpectatorLobby));
  CMsgSpectatorLobbyList_descriptor_ = file->message_type(52);
  static const int CMsgSpectatorLobbyList_offsets_[1] = {
  };
  CMsgSpectatorLobbyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectatorLobbyList_descriptor_,
      CMsgSpectatorLobbyList::default_instance_,
      CMsgSpectatorLobbyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectatorLobbyList));
  CMsgSpectatorLobbyListResponse_descriptor_ = file->message_type(53);
  static const int CMsgSpectatorLobbyListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse, lobbies_),
  };
  CMsgSpectatorLobbyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectatorLobbyListResponse_descriptor_,
      CMsgSpectatorLobbyListResponse::default_instance_,
      CMsgSpectatorLobbyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectatorLobbyListResponse));
  CMsgSpectatorLobbyListResponse_SpectatorLobby_descriptor_ = CMsgSpectatorLobbyListResponse_descriptor_->nested_type(0);
  static const int CMsgSpectatorLobbyListResponse_SpectatorLobby_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, requires_pass_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, leader_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, game_details_),
  };
  CMsgSpectatorLobbyListResponse_SpectatorLobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectatorLobbyListResponse_SpectatorLobby_descriptor_,
      CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance_,
      CMsgSpectatorLobbyListResponse_SpectatorLobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectatorLobbyListResponse_SpectatorLobby));
  CMsgClientToGCRequestSteamDatagramTicket_descriptor_ = file->message_type(54);
  static const int CMsgClientToGCRequestSteamDatagramTicket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicket, server_steam_id_),
  };
  CMsgClientToGCRequestSteamDatagramTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCRequestSteamDatagramTicket_descriptor_,
      CMsgClientToGCRequestSteamDatagramTicket::default_instance_,
      CMsgClientToGCRequestSteamDatagramTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCRequestSteamDatagramTicket));
  CMsgClientToGCRequestSteamDatagramTicketResponse_descriptor_ = file->message_type(55);
  static const int CMsgClientToGCRequestSteamDatagramTicketResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, serialized_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, message_),
  };
  CMsgClientToGCRequestSteamDatagramTicketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCRequestSteamDatagramTicketResponse_descriptor_,
      CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance_,
      CMsgClientToGCRequestSteamDatagramTicketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCRequestSteamDatagramTicketResponse));
  EStartFindingMatchResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStartFindingMatch_descriptor_, &CMsgStartFindingMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStartFindingMatchResult_descriptor_, &CMsgStartFindingMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgStopFindingMatch_descriptor_, &CMsgStopFindingMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyBuilderOptions_descriptor_, &CMsgPartyBuilderOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReadyUp_descriptor_, &CMsgReadyUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgReadyUpStatus_descriptor_, &CMsgReadyUpStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAbandonCurrentGame_descriptor_, &CMsgAbandonCurrentGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbySetDetails_descriptor_, &CMsgPracticeLobbySetDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyCreate_descriptor_, &CMsgPracticeLobbyCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyCreate_SaveGame_descriptor_, &CMsgPracticeLobbyCreate_SaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbySetTeamSlot_descriptor_, &CMsgPracticeLobbySetTeamSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbySetCoach_descriptor_, &CMsgPracticeLobbySetCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyJoinBroadcastChannel_descriptor_, &CMsgPracticeLobbyJoinBroadcastChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyCloseBroadcastChannel_descriptor_, &CMsgPracticeLobbyCloseBroadcastChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_descriptor_, &CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyKick_descriptor_, &CMsgPracticeLobbyKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyKickFromTeam_descriptor_, &CMsgPracticeLobbyKickFromTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyLeave_descriptor_, &CMsgPracticeLobbyLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyLaunch_descriptor_, &CMsgPracticeLobbyLaunch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgApplyTeamToPracticeLobby_descriptor_, &CMsgApplyTeamToPracticeLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClearPracticeLobbyTeam_descriptor_, &CMsgClearPracticeLobbyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyList_descriptor_, &CMsgPracticeLobbyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyListResponseEntry_descriptor_, &CMsgPracticeLobbyListResponseEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyListResponseEntry_CLobbyMember_descriptor_, &CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyListResponse_descriptor_, &CMsgPracticeLobbyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLobbyList_descriptor_, &CMsgLobbyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLobbyListResponse_descriptor_, &CMsgLobbyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyJoin_descriptor_, &CMsgPracticeLobbyJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPracticeLobbyJoinResponse_descriptor_, &CMsgPracticeLobbyJoinResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFriendPracticeLobbyListRequest_descriptor_, &CMsgFriendPracticeLobbyListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFriendPracticeLobbyListResponse_descriptor_, &CMsgFriendPracticeLobbyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGuildmatePracticeLobbyListRequest_descriptor_, &CMsgGuildmatePracticeLobbyListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGuildmatePracticeLobbyListResponse_descriptor_, &CMsgGuildmatePracticeLobbyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinableCustomGameModesRequest_descriptor_, &CMsgJoinableCustomGameModesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinableCustomGameModesResponseEntry_descriptor_, &CMsgJoinableCustomGameModesResponseEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinableCustomGameModesResponse_descriptor_, &CMsgJoinableCustomGameModesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinableCustomLobbiesRequest_descriptor_, &CMsgJoinableCustomLobbiesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinableCustomLobbiesResponseEntry_descriptor_, &CMsgJoinableCustomLobbiesResponseEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgJoinableCustomLobbiesResponse_descriptor_, &CMsgJoinableCustomLobbiesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuickJoinCustomLobby_descriptor_, &CMsgQuickJoinCustomLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuickJoinCustomLobby_LegacyRegionPing_descriptor_, &CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuickJoinCustomLobbyResponse_descriptor_, &CMsgQuickJoinCustomLobbyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBotGameCreate_descriptor_, &CMsgBotGameCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCustomGameCreate_descriptor_, &CMsgCustomGameCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEventGameCreate_descriptor_, &CMsgEventGameCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAPartyMemberSetCoach_descriptor_, &CMsgDOTAPartyMemberSetCoach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASetGroupLeader_descriptor_, &CMsgDOTASetGroupLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTACancelGroupInvites_descriptor_, &CMsgDOTACancelGroupInvites::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTASetGroupOpenStatus_descriptor_, &CMsgDOTASetGroupOpenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGroupMergeInvite_descriptor_, &CMsgDOTAGroupMergeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGroupMergeResponse_descriptor_, &CMsgDOTAGroupMergeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAGroupMergeReply_descriptor_, &CMsgDOTAGroupMergeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectatorLobbyGameDetails_descriptor_, &CMsgSpectatorLobbyGameDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectatorLobbyGameDetails_Team_descriptor_, &CMsgSpectatorLobbyGameDetails_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSetSpectatorLobbyDetails_descriptor_, &CMsgSetSpectatorLobbyDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCreateSpectatorLobby_descriptor_, &CMsgCreateSpectatorLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectatorLobbyList_descriptor_, &CMsgSpectatorLobbyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectatorLobbyListResponse_descriptor_, &CMsgSpectatorLobbyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectatorLobbyListResponse_SpectatorLobby_descriptor_, &CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCRequestSteamDatagramTicket_descriptor_, &CMsgClientToGCRequestSteamDatagramTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCRequestSteamDatagramTicketResponse_descriptor_, &CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  delete CMsgStartFindingMatch::default_instance_;
  delete CMsgStartFindingMatch_reflection_;
  delete CMsgStartFindingMatchResult::default_instance_;
  delete CMsgStartFindingMatchResult_reflection_;
  delete CMsgStopFindingMatch::default_instance_;
  delete CMsgStopFindingMatch_reflection_;
  delete CMsgPartyBuilderOptions::default_instance_;
  delete CMsgPartyBuilderOptions_reflection_;
  delete CMsgReadyUp::default_instance_;
  delete CMsgReadyUp_reflection_;
  delete CMsgReadyUpStatus::default_instance_;
  delete CMsgReadyUpStatus_reflection_;
  delete CMsgAbandonCurrentGame::default_instance_;
  delete CMsgAbandonCurrentGame_reflection_;
  delete CMsgPracticeLobbySetDetails::default_instance_;
  delete CMsgPracticeLobbySetDetails_reflection_;
  delete CMsgPracticeLobbyCreate::default_instance_;
  delete CMsgPracticeLobbyCreate_reflection_;
  delete CMsgPracticeLobbyCreate_SaveGame::default_instance_;
  delete CMsgPracticeLobbyCreate_SaveGame_reflection_;
  delete CMsgPracticeLobbySetTeamSlot::default_instance_;
  delete CMsgPracticeLobbySetTeamSlot_reflection_;
  delete CMsgPracticeLobbySetCoach::default_instance_;
  delete CMsgPracticeLobbySetCoach_reflection_;
  delete CMsgPracticeLobbyJoinBroadcastChannel::default_instance_;
  delete CMsgPracticeLobbyJoinBroadcastChannel_reflection_;
  delete CMsgPracticeLobbyCloseBroadcastChannel::default_instance_;
  delete CMsgPracticeLobbyCloseBroadcastChannel_reflection_;
  delete CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance_;
  delete CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_reflection_;
  delete CMsgPracticeLobbyKick::default_instance_;
  delete CMsgPracticeLobbyKick_reflection_;
  delete CMsgPracticeLobbyKickFromTeam::default_instance_;
  delete CMsgPracticeLobbyKickFromTeam_reflection_;
  delete CMsgPracticeLobbyLeave::default_instance_;
  delete CMsgPracticeLobbyLeave_reflection_;
  delete CMsgPracticeLobbyLaunch::default_instance_;
  delete CMsgPracticeLobbyLaunch_reflection_;
  delete CMsgApplyTeamToPracticeLobby::default_instance_;
  delete CMsgApplyTeamToPracticeLobby_reflection_;
  delete CMsgClearPracticeLobbyTeam::default_instance_;
  delete CMsgClearPracticeLobbyTeam_reflection_;
  delete CMsgPracticeLobbyList::default_instance_;
  delete CMsgPracticeLobbyList_reflection_;
  delete CMsgPracticeLobbyListResponseEntry::default_instance_;
  delete CMsgPracticeLobbyListResponseEntry_reflection_;
  delete CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance_;
  delete CMsgPracticeLobbyListResponseEntry_CLobbyMember_reflection_;
  delete CMsgPracticeLobbyListResponse::default_instance_;
  delete CMsgPracticeLobbyListResponse_reflection_;
  delete CMsgLobbyList::default_instance_;
  delete CMsgLobbyList_reflection_;
  delete CMsgLobbyListResponse::default_instance_;
  delete CMsgLobbyListResponse_reflection_;
  delete CMsgPracticeLobbyJoin::default_instance_;
  delete CMsgPracticeLobbyJoin_reflection_;
  delete CMsgPracticeLobbyJoinResponse::default_instance_;
  delete CMsgPracticeLobbyJoinResponse_reflection_;
  delete CMsgFriendPracticeLobbyListRequest::default_instance_;
  delete CMsgFriendPracticeLobbyListRequest_reflection_;
  delete CMsgFriendPracticeLobbyListResponse::default_instance_;
  delete CMsgFriendPracticeLobbyListResponse_reflection_;
  delete CMsgGuildmatePracticeLobbyListRequest::default_instance_;
  delete CMsgGuildmatePracticeLobbyListRequest_reflection_;
  delete CMsgGuildmatePracticeLobbyListResponse::default_instance_;
  delete CMsgGuildmatePracticeLobbyListResponse_reflection_;
  delete CMsgJoinableCustomGameModesRequest::default_instance_;
  delete CMsgJoinableCustomGameModesRequest_reflection_;
  delete CMsgJoinableCustomGameModesResponseEntry::default_instance_;
  delete CMsgJoinableCustomGameModesResponseEntry_reflection_;
  delete CMsgJoinableCustomGameModesResponse::default_instance_;
  delete CMsgJoinableCustomGameModesResponse_reflection_;
  delete CMsgJoinableCustomLobbiesRequest::default_instance_;
  delete CMsgJoinableCustomLobbiesRequest_reflection_;
  delete CMsgJoinableCustomLobbiesResponseEntry::default_instance_;
  delete CMsgJoinableCustomLobbiesResponseEntry_reflection_;
  delete CMsgJoinableCustomLobbiesResponse::default_instance_;
  delete CMsgJoinableCustomLobbiesResponse_reflection_;
  delete CMsgQuickJoinCustomLobby::default_instance_;
  delete CMsgQuickJoinCustomLobby_reflection_;
  delete CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance_;
  delete CMsgQuickJoinCustomLobby_LegacyRegionPing_reflection_;
  delete CMsgQuickJoinCustomLobbyResponse::default_instance_;
  delete CMsgQuickJoinCustomLobbyResponse_reflection_;
  delete CMsgBotGameCreate::default_instance_;
  delete CMsgBotGameCreate_reflection_;
  delete CMsgCustomGameCreate::default_instance_;
  delete CMsgCustomGameCreate_reflection_;
  delete CMsgEventGameCreate::default_instance_;
  delete CMsgEventGameCreate_reflection_;
  delete CMsgDOTAPartyMemberSetCoach::default_instance_;
  delete CMsgDOTAPartyMemberSetCoach_reflection_;
  delete CMsgDOTASetGroupLeader::default_instance_;
  delete CMsgDOTASetGroupLeader_reflection_;
  delete CMsgDOTACancelGroupInvites::default_instance_;
  delete CMsgDOTACancelGroupInvites_reflection_;
  delete CMsgDOTASetGroupOpenStatus::default_instance_;
  delete CMsgDOTASetGroupOpenStatus_reflection_;
  delete CMsgDOTAGroupMergeInvite::default_instance_;
  delete CMsgDOTAGroupMergeInvite_reflection_;
  delete CMsgDOTAGroupMergeResponse::default_instance_;
  delete CMsgDOTAGroupMergeResponse_reflection_;
  delete CMsgDOTAGroupMergeReply::default_instance_;
  delete CMsgDOTAGroupMergeReply_reflection_;
  delete CMsgSpectatorLobbyGameDetails::default_instance_;
  delete CMsgSpectatorLobbyGameDetails_reflection_;
  delete CMsgSpectatorLobbyGameDetails_Team::default_instance_;
  delete CMsgSpectatorLobbyGameDetails_Team_reflection_;
  delete CMsgSetSpectatorLobbyDetails::default_instance_;
  delete CMsgSetSpectatorLobbyDetails_reflection_;
  delete CMsgCreateSpectatorLobby::default_instance_;
  delete CMsgCreateSpectatorLobby_reflection_;
  delete CMsgSpectatorLobbyList::default_instance_;
  delete CMsgSpectatorLobbyList_reflection_;
  delete CMsgSpectatorLobbyListResponse::default_instance_;
  delete CMsgSpectatorLobbyListResponse_reflection_;
  delete CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance_;
  delete CMsgSpectatorLobbyListResponse_SpectatorLobby_reflection_;
  delete CMsgClientToGCRequestSteamDatagramTicket::default_instance_;
  delete CMsgClientToGCRequestSteamDatagramTicket_reflection_;
  delete CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance_;
  delete CMsgClientToGCRequestSteamDatagramTicketResponse_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  ::protobuf_AddDesc_dota_5fclient_5fenums_2eproto();
  ::protobuf_AddDesc_base_5fgcmessages_2eproto();
  ::protobuf_AddDesc_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-dota_gcmessages_client_match_managemen"
    "t.proto\032\023steammessages.proto\032\027dota_share"
    "d_enums.proto\032\027dota_client_enums.proto\032\025"
    "base_gcmessages.proto\032-dota_gcmessages_c"
    "ommon_match_management.proto\"\344\003\n\025CMsgSta"
    "rtFindingMatch\022\013\n\003key\030\001 \001(\t\022\037\n\013matchgrou"
    "ps\030\002 \001(\r:\n4294967295\022\026\n\016client_version\030\003"
    " \001(\r\022\036\n\ngame_modes\030\004 \001(\r:\n4294967295\022\?\n\016"
    "bot_difficulty\030\005 \001(\0162\022.DOTABotDifficulty"
    ":\023BOT_DIFFICULTY_HARD\0221\n\nmatch_type\030\006 \001("
    "\0162\n.MatchType:\021MATCH_TYPE_CASUAL\022\"\n\016matc"
    "hlanguages\030\007 \001(\r:\n4294967295\022\026\n\016map_pref"
    "erence\030\t \001(\r\022\017\n\007team_id\030\010 \001(\r\022C\n\022game_la"
    "nguage_enum\030\n \001(\0162\017.MatchLanguages:\026MATC"
    "H_LANGUAGE_INVALID\022\032\n\022game_language_name"
    "\030\013 \001(\t\022&\n\tping_data\030\014 \001(\0132\023.CMsgClientPi"
    "ngData\022\033\n\023region_select_flags\030\r \001(\r\"\336\001\n\033"
    "CMsgStartFindingMatchResult\022!\n\026legacy_ge"
    "neric_eresult\030\001 \001(\r:\0012\022M\n\006result\030\002 \001(\0162\031"
    ".EStartFindingMatchResult:\"k_EStartFindi"
    "ngMatchResult_Invalid\022\023\n\013error_token\030\003 \001"
    "(\t\022\025\n\rdebug_message\030\004 \001(\t\022!\n\031responsible"
    "_party_members\030\005 \003(\006\"\026\n\024CMsgStopFindingM"
    "atch\"\316\001\n\027CMsgPartyBuilderOptions\022\030\n\020addi"
    "tional_slots\030\001 \001(\r\0221\n\nmatch_type\030\002 \001(\0162\n"
    ".MatchType:\021MATCH_TYPE_CASUAL\022\023\n\013matchgr"
    "oups\030\003 \001(\r\022\026\n\016client_version\030\004 \001(\r\0229\n\010la"
    "nguage\030\005 \001(\0162\017.MatchLanguages:\026MATCH_LAN"
    "GUAGE_INVALID\"\233\001\n\013CMsgReadyUp\022C\n\005state\030\001"
    " \001(\0162\024.DOTALobbyReadyState:\036DOTALobbyRea"
    "dyState_UNDECLARED\022\024\n\014ready_up_key\030\002 \001(\006"
    "\0221\n\016hardware_specs\030\003 \001(\0132\031.CDOTAClientHa"
    "rdwareSpecs\"Q\n\021CMsgReadyUpStatus\022\020\n\010lobb"
    "y_id\030\001 \001(\006\022\024\n\014accepted_ids\030\002 \003(\r\022\024\n\014decl"
    "ined_ids\030\003 \003(\r\"\030\n\026CMsgAbandonCurrentGame"
    "\"\352\013\n\033CMsgPracticeLobbySetDetails\022\020\n\010lobb"
    "y_id\030\001 \001(\004\022\021\n\tgame_name\030\002 \001(\t\022(\n\014team_de"
    "tails\030\003 \003(\0132\022.CLobbyTeamDetails\022\025\n\rserve"
    "r_region\030\004 \001(\r\022\021\n\tgame_mode\030\005 \001(\r\022.\n\007cm_"
    "pick\030\006 \001(\0162\r.DOTA_CM_PICK:\016DOTA_CM_RANDO"
    "M\022J\n\026bot_difficulty_radiant\030\t \001(\0162\022.DOTA"
    "BotDifficulty:\026BOT_DIFFICULTY_PASSIVE\022\024\n"
    "\014allow_cheats\030\n \001(\010\022\026\n\016fill_with_bots\030\013 "
    "\001(\010\022\022\n\nintro_mode\030\014 \001(\010\022\030\n\020allow_spectat"
    "ing\030\r \001(\010\022<\n\014game_version\030\016 \001(\0162\020.DOTAGa"
    "meVersion:\024GAME_VERSION_CURRENT\022\020\n\010pass_"
    "key\030\017 \001(\t\022\020\n\010leagueid\030\020 \001(\r\022\035\n\025penalty_l"
    "evel_radiant\030\021 \001(\r\022\032\n\022penalty_level_dire"
    "\030\022 \001(\r\022\024\n\014load_game_id\030\023 \001(\r\022\023\n\013series_t"
    "ype\030\024 \001(\r\022\033\n\023radiant_series_wins\030\025 \001(\r\022\030"
    "\n\020dire_series_wins\030\026 \001(\r\022\026\n\007allchat\030\027 \001("
    "\010:\005false\0229\n\rdota_tv_delay\030\030 \001(\0162\021.LobbyD"
    "otaTVDelay:\017LobbyDotaTV_120\022\013\n\003lan\030\031 \001(\010"
    "\022\030\n\020custom_game_mode\030\032 \001(\t\022\027\n\017custom_map"
    "_name\030\033 \001(\t\022\031\n\021custom_difficulty\030\034 \001(\r\022\026"
    "\n\016custom_game_id\030\035 \001(\004\022\032\n\022custom_min_pla"
    "yers\030\036 \001(\r\022\032\n\022custom_max_players\030\037 \001(\r\022&"
    "\n\036lan_host_ping_to_server_region\030  \001(\r\022D"
    "\n\nvisibility\030! \001(\0162\024.DOTALobbyVisibility"
    ":\032DOTALobbyVisibility_Public\022\027\n\017custom_g"
    "ame_crc\030\" \001(\006\022\030\n\020league_series_id\030# \001(\r\022"
    "\026\n\016league_game_id\030$ \001(\r\022\035\n\025custom_game_t"
    "imestamp\030% \001(\007\022\037\n\027previous_match_overrid"
    "e\030& \001(\004\022&\n\036league_selection_priority_tea"
    "m\030\' \001(\r\022K\n league_selection_priority_cho"
    "ice\030( \001(\0162\026.SelectionPriorityType:\tUNDEF"
    "INED\022O\n$league_non_selection_priority_ch"
    "oice\030) \001(\0162\026.SelectionPriorityType:\tUNDE"
    "FINED\022N\n\rpause_setting\030* \001(\0162\026.LobbyDota"
    "PauseSetting:\037LobbyDotaPauseSetting_Unli"
    "mited\022G\n\023bot_difficulty_dire\030+ \001(\0162\022.DOT"
    "ABotDifficulty:\026BOT_DIFFICULTY_PASSIVE\022\023"
    "\n\013bot_radiant\030, \001(\004\022\020\n\010bot_dire\030- \001(\004\"\222\002"
    "\n\027CMsgPracticeLobbyCreate\022\022\n\nsearch_key\030"
    "\001 \001(\t\022\020\n\010pass_key\030\005 \001(\t\022\026\n\016client_versio"
    "n\030\006 \001(\r\0223\n\rlobby_details\030\007 \001(\0132\034.CMsgPra"
    "cticeLobbySetDetails\0224\n\tsave_game\030\010 \001(\0132"
    "!.CMsgPracticeLobbyCreate.SaveGame\032N\n\010Sa"
    "veGame\022\014\n\004data\030\001 \001(\014\022\017\n\007version\030\002 \001(\005\022\020\n"
    "\010steam_id\030\003 \001(\006\022\021\n\tsignature\030\004 \001(\006\"\245\001\n\034C"
    "MsgPracticeLobbySetTeamSlot\0223\n\004team\030\001 \001("
    "\0162\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS"
    "\022\014\n\004slot\030\002 \001(\r\022B\n\016bot_difficulty\030\003 \001(\0162\022"
    ".DOTABotDifficulty:\026BOT_DIFFICULTY_PASSI"
    "VE\"P\n\031CMsgPracticeLobbySetCoach\0223\n\004team\030"
    "\001 \001(\0162\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_"
    "GUYS\"\230\001\n%CMsgPracticeLobbyJoinBroadcastC"
    "hannel\022\017\n\007channel\030\001 \001(\r\022\035\n\025preferred_des"
    "cription\030\002 \001(\t\022\036\n\026preferred_country_code"
    "\030\003 \001(\t\022\037\n\027preferred_language_code\030\004 \001(\t\""
    "9\n&CMsgPracticeLobbyCloseBroadcastChanne"
    "l\022\017\n\007channel\030\001 \001(\r\"8\n6CMsgPracticeLobbyT"
    "oggleBroadcastChannelCameramanStatus\"+\n\025"
    "CMsgPracticeLobbyKick\022\022\n\naccount_id\030\003 \001("
    "\r\"3\n\035CMsgPracticeLobbyKickFromTeam\022\022\n\nac"
    "count_id\030\001 \001(\r\"\030\n\026CMsgPracticeLobbyLeave"
    "\"1\n\027CMsgPracticeLobbyLaunch\022\026\n\016client_ve"
    "rsion\030\005 \001(\r\"/\n\034CMsgApplyTeamToPracticeLo"
    "bby\022\017\n\007team_id\030\001 \001(\r\"\034\n\032CMsgClearPractic"
    "eLobbyTeam\"\212\001\n\025CMsgPracticeLobbyList\022\030\n\020"
    "tournament_games\030\001 \001(\010\022\020\n\010pass_key\030\002 \001(\t"
    "\022\016\n\006region\030\003 \001(\r\0225\n\tgame_mode\030\004 \001(\0162\016.DO"
    "TA_GameMode:\022DOTA_GAMEMODE_NONE\"\316\004\n\"CMsg"
    "PracticeLobbyListResponseEntry\022\020\n\002id\030\001 \001"
    "(\004B\004\200\246\035\001\022\025\n\rtournament_id\030\003 \001(\r\022\032\n\022tourn"
    "ament_game_id\030\004 \001(\r\022A\n\007members\030\005 \003(\01320.C"
    "MsgPracticeLobbyListResponseEntry.CLobby"
    "Member\022\031\n\021requires_pass_key\030\006 \001(\010\022\031\n\021lea"
    "der_account_id\030\007 \001(\r\022\020\n\010guild_id\030\010 \001(\r\022\022"
    "\n\nguild_logo\030\t \001(\004\022\014\n\004name\030\n \001(\t\022\030\n\020cust"
    "om_game_mode\030\013 \001(\t\0225\n\tgame_mode\030\014 \001(\0162\016."
    "DOTA_GameMode:\022DOTA_GAMEMODE_NONE\022\026\n\016fri"
    "end_present\030\r \001(\010\022\017\n\007players\030\016 \001(\r\022\027\n\017cu"
    "stom_map_name\030\017 \001(\t\022\030\n\020max_player_count\030"
    "\020 \001(\r\022\025\n\rserver_region\030\021 \001(\r\022&\n\036lan_host"
    "_ping_to_server_region\030\022 \001(\r\022\021\n\tleague_i"
    "d\030\023 \001(\r\0327\n\014CLobbyMember\022\022\n\naccount_id\030\001 "
    "\001(\r\022\023\n\013player_name\030\002 \001(\t\"o\n\035CMsgPractice"
    "LobbyListResponse\022\030\n\020tournament_games\030\001 "
    "\001(\010\0224\n\007lobbies\030\002 \003(\0132#.CMsgPracticeLobby"
    "ListResponseEntry\"`\n\rCMsgLobbyList\022\030\n\rse"
    "rver_region\030\001 \001(\r:\0010\0225\n\tgame_mode\030\002 \001(\0162"
    "\016.DOTA_GameMode:\022DOTA_GAMEMODE_NONE\"M\n\025C"
    "MsgLobbyListResponse\0224\n\007lobbies\030\001 \003(\0132#."
    "CMsgPracticeLobbyListResponseEntry\"\213\001\n\025C"
    "MsgPracticeLobbyJoin\022\020\n\010lobby_id\030\001 \001(\004\022\026"
    "\n\016client_version\030\002 \001(\r\022\020\n\010pass_key\030\003 \001(\t"
    "\022\027\n\017custom_game_crc\030\004 \001(\006\022\035\n\025custom_game"
    "_timestamp\030\005 \001(\007\"_\n\035CMsgPracticeLobbyJoi"
    "nResponse\022>\n\006result\030\001 \001(\0162\024.DOTAJoinLobb"
    "yResult:\030DOTA_JOIN_RESULT_SUCCESS\"5\n\"CMs"
    "gFriendPracticeLobbyListRequest\022\017\n\007frien"
    "ds\030\001 \003(\r\"[\n#CMsgFriendPracticeLobbyListR"
    "esponse\0224\n\007lobbies\030\001 \003(\0132#.CMsgPracticeL"
    "obbyListResponseEntry\"7\n%CMsgGuildmatePr"
    "acticeLobbyListRequest\022\016\n\006guilds\030\001 \003(\r\"^"
    "\n&CMsgGuildmatePracticeLobbyListResponse"
    "\0224\n\007lobbies\030\001 \003(\0132#.CMsgPracticeLobbyLis"
    "tResponseEntry\";\n\"CMsgJoinableCustomGame"
    "ModesRequest\022\025\n\rserver_region\030\001 \001(\r\"m\n(C"
    "MsgJoinableCustomGameModesResponseEntry\022"
    "\026\n\016custom_game_id\030\001 \001(\004\022\023\n\013lobby_count\030\002"
    " \001(\r\022\024\n\014player_count\030\003 \001(\r\"d\n#CMsgJoinab"
    "leCustomGameModesResponse\022=\n\ngame_modes\030"
    "\001 \003(\0132).CMsgJoinableCustomGameModesRespo"
    "nseEntry\"Q\n CMsgJoinableCustomLobbiesReq"
    "uest\022\025\n\rserver_region\030\001 \001(\r\022\026\n\016custom_ga"
    "me_id\030\002 \001(\004\"\264\002\n&CMsgJoinableCustomLobbie"
    "sResponseEntry\022\020\n\010lobby_id\030\001 \001(\006\022\026\n\016cust"
    "om_game_id\030\002 \001(\004\022\022\n\nlobby_name\030\003 \001(\t\022\024\n\014"
    "member_count\030\004 \001(\r\022\031\n\021leader_account_id\030"
    "\005 \001(\r\022\023\n\013leader_name\030\006 \001(\t\022\027\n\017custom_map"
    "_name\030\007 \001(\t\022\030\n\020max_player_count\030\010 \001(\r\022\025\n"
    "\rserver_region\030\t \001(\r\022&\n\036lan_host_ping_to"
    "_server_region\030\n \001(\r\022\024\n\014has_pass_key\030\013 \001"
    "(\010\"]\n!CMsgJoinableCustomLobbiesResponse\022"
    "8\n\007lobbies\030\001 \003(\0132\'.CMsgJoinableCustomLob"
    "biesResponseEntry\"\372\002\n\030CMsgQuickJoinCusto"
    "mLobby\022\034\n\024legacy_server_region\030\001 \001(\r\022\026\n\016"
    "custom_game_id\030\002 \001(\004\022\026\n\016client_version\030\003"
    " \001(\r\022:\n\024create_lobby_details\030\004 \001(\0132\034.CMs"
    "gPracticeLobbySetDetails\022\025\n\rallow_any_ma"
    "p\030\005 \001(\010\022G\n\023legacy_region_pings\030\006 \003(\0132*.C"
    "MsgQuickJoinCustomLobby.LegacyRegionPing"
    "\022&\n\tping_data\030\007 \001(\0132\023.CMsgClientPingData"
    "\032L\n\020LegacyRegionPing\022\025\n\rserver_region\030\001 "
    "\001(\r\022\014\n\004ping\030\002 \001(\r\022\023\n\013region_code\030\003 \001(\007\"b"
    "\n CMsgQuickJoinCustomLobbyResponse\022>\n\006re"
    "sult\030\001 \001(\0162\024.DOTAJoinLobbyResult:\030DOTA_J"
    "OIN_RESULT_SUCCESS\"\224\002\n\021CMsgBotGameCreate"
    "\022\022\n\nsearch_key\030\001 \001(\t\022\026\n\016client_version\030\002"
    " \001(\r\022F\n\022difficulty_radiant\030\003 \001(\0162\022.DOTAB"
    "otDifficulty:\026BOT_DIFFICULTY_PASSIVE\0223\n\004"
    "team\030\004 \001(\0162\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_"
    "GOOD_GUYS\022\021\n\tgame_mode\030\005 \001(\r\022C\n\017difficul"
    "ty_dire\030\006 \001(\0162\022.DOTABotDifficulty:\026BOT_D"
    "IFFICULTY_PASSIVE\"\216\001\n\024CMsgCustomGameCrea"
    "te\022\022\n\nsearch_key\030\001 \001(\t\022\026\n\016client_version"
    "\030\002 \001(\r\022\022\n\ndifficulty\030\003 \001(\r\022\021\n\tgame_mode\030"
    "\004 \001(\t\022\013\n\003map\030\005 \001(\t\022\026\n\016custom_game_id\030\007 \001"
    "(\004\"\215\001\n\023CMsgEventGameCreate\022\022\n\nsearch_key"
    "\030\001 \001(\t\022\026\n\016client_version\030\002 \001(\r\022\022\n\ndiffic"
    "ulty\030\003 \001(\r\022\021\n\tgame_mode\030\004 \001(\t\022\013\n\003map\030\005 \001"
    "(\t\022\026\n\016custom_game_id\030\007 \001(\004\"2\n\033CMsgDOTAPa"
    "rtyMemberSetCoach\022\023\n\013wants_coach\030\001 \001(\010\"4"
    "\n\026CMsgDOTASetGroupLeader\022\032\n\022new_leader_s"
    "teamid\030\001 \001(\006\"P\n\032CMsgDOTACancelGroupInvit"
    "es\022\030\n\020invited_steamids\030\001 \003(\006\022\030\n\020invited_"
    "groupids\030\002 \003(\006\"*\n\032CMsgDOTASetGroupOpenSt"
    "atus\022\014\n\004open\030\001 \001(\010\"2\n\030CMsgDOTAGroupMerge"
    "Invite\022\026\n\016other_group_id\030\001 \001(\006\"H\n\032CMsgDO"
    "TAGroupMergeResponse\022\032\n\022initiator_group_"
    "id\030\001 \001(\006\022\016\n\006accept\030\002 \001(\010\"]\n\027CMsgDOTAGrou"
    "pMergeReply\022B\n\006result\030\001 \001(\0162\026.EDOTAGroup"
    "MergeResult:\032k_EDOTAGroupMergeResult_OK\""
    "\364\002\n\035CMsgSpectatorLobbyGameDetails\022\020\n\010lan"
    "guage\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\027\n\017server_"
    "steam_id\030\003 \001(\006\022\022\n\nstream_url\030\004 \001(\t\022\023\n\013st"
    "ream_name\030\005 \001(\t\022\021\n\tleague_id\030\006 \001(\r\022\023\n\013se"
    "ries_type\030\007 \001(\r\022\023\n\013series_game\030\010 \001(\r\0229\n\014"
    "radiant_team\030\t \001(\0132#.CMsgSpectatorLobbyG"
    "ameDetails.Team\0226\n\tdire_team\030\n \001(\0132#.CMs"
    "gSpectatorLobbyGameDetails.Team\032=\n\004Team\022"
    "\017\n\007team_id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\021\n\tt"
    "eam_logo\030\003 \001(\006\"\214\001\n\034CMsgSetSpectatorLobby"
    "Details\022\020\n\010lobby_id\030\001 \001(\004\022\022\n\nlobby_name\030"
    "\002 \001(\t\022\020\n\010pass_key\030\003 \001(\t\0224\n\014game_details\030"
    "\004 \001(\0132\036.CMsgSpectatorLobbyGameDetails\"b\n"
    "\030CMsgCreateSpectatorLobby\022\026\n\016client_vers"
    "ion\030\001 \001(\r\022.\n\007details\030\002 \001(\0132\035.CMsgSetSpec"
    "tatorLobbyDetails\"\030\n\026CMsgSpectatorLobbyL"
    "ist\"\233\002\n\036CMsgSpectatorLobbyListResponse\022\?"
    "\n\007lobbies\030\001 \003(\0132..CMsgSpectatorLobbyList"
    "Response.SpectatorLobby\032\267\001\n\016SpectatorLob"
    "by\022\020\n\010lobby_id\030\001 \001(\004\022\021\n\tgame_name\030\002 \001(\t\022"
    "\031\n\021requires_pass_key\030\003 \001(\010\022\031\n\021leader_acc"
    "ount_id\030\004 \001(\r\022\024\n\014member_count\030\005 \001(\r\0224\n\014g"
    "ame_details\030\007 \001(\0132\036.CMsgSpectatorLobbyGa"
    "meDetails\"C\n(CMsgClientToGCRequestSteamD"
    "atagramTicket\022\027\n\017server_steam_id\030\001 \001(\006\"^"
    "\n0CMsgClientToGCRequestSteamDatagramTick"
    "etResponse\022\031\n\021serialized_ticket\030\001 \001(\t\022\017\n"
    "\007message\030\002 \001(\t*\254\n\n\030EStartFindingMatchRes"
    "ult\022&\n\"k_EStartFindingMatchResult_Invali"
    "d\020\000\022!\n\035k_EStartFindingMatchResult_OK\020\001\022/"
    "\n+k_EStartFindingMatchResult_AlreadySear"
    "ching\020\002\022*\n&k_EStartFindingMatchResult_Fa"
    "ilGeneric\020d\022+\n\'k_EStartFindingMatchResul"
    "t_FailedIgnore\020e\0222\n.k_EStartFindingMatch"
    "Result_MatchmakingDisabled\020f\022,\n(k_EStart"
    "FindingMatchResult_RegionOffline\020g\0222\n.k_"
    "EStartFindingMatchResult_MatchmakingCool"
    "down\020h\022.\n*k_EStartFindingMatchResult_Cli"
    "entOutOfDate\020i\0227\n3k_EStartFindingMatchRe"
    "sult_CompetitiveNoLowPriority\020j\0225\n1k_ESt"
    "artFindingMatchResult_CompetitiveNotUnlo"
    "cked\020k\0222\n.k_EStartFindingMatchResult_Gam"
    "eModeNotUnlocked\020l\022<\n8k_EStartFindingMat"
    "chResult_CompetitiveNotEnoughSkillData\020m"
    "\0222\n.k_EStartFindingMatchResult_MissingIn"
    "itialSkill\020n\022<\n8k_EStartFindingMatchResu"
    "lt_CompetitiveRankSpreadTooLarge\020o\0223\n/k_"
    "EStartFindingMatchResult_MemberAlreadyIn"
    "Lobby\020p\0223\n/k_EStartFindingMatchResult_Me"
    "mberNotVACVerified\020q\0229\n5k_EStartFindingM"
    "atchResult_WeekendTourneyBadPartySize\020r\022"
    ">\n:k_EStartFindingMatchResult_WeekendTou"
    "rneyTeamBuyInTooSmall\020s\022D\n@k_EStartFindi"
    "ngMatchResult_WeekendTourneyIndividualBu"
    "yInTooLarge\020t\022>\n:k_EStartFindingMatchRes"
    "ult_WeekendTourneyTeamBuyInTooLarge\020u\022:\n"
    "6k_EStartFindingMatchResult_MemberMissin"
    "gEventOwnership\020v\0228\n4k_EStartFindingMatc"
    "hResult_WeekendTourneyNotUnlocked\020w\022@\n<k"
    "_EStartFindingMatchResult_WeekendTourney"
    "RecentParticipation\020xB\005H\001\200\001\000", 10228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_match_management.proto", &protobuf_RegisterTypes);
  CMsgStartFindingMatch::default_instance_ = new CMsgStartFindingMatch();
  CMsgStartFindingMatchResult::default_instance_ = new CMsgStartFindingMatchResult();
  CMsgStopFindingMatch::default_instance_ = new CMsgStopFindingMatch();
  CMsgPartyBuilderOptions::default_instance_ = new CMsgPartyBuilderOptions();
  CMsgReadyUp::default_instance_ = new CMsgReadyUp();
  CMsgReadyUpStatus::default_instance_ = new CMsgReadyUpStatus();
  CMsgAbandonCurrentGame::default_instance_ = new CMsgAbandonCurrentGame();
  CMsgPracticeLobbySetDetails::default_instance_ = new CMsgPracticeLobbySetDetails();
  CMsgPracticeLobbyCreate::default_instance_ = new CMsgPracticeLobbyCreate();
  CMsgPracticeLobbyCreate_SaveGame::default_instance_ = new CMsgPracticeLobbyCreate_SaveGame();
  CMsgPracticeLobbySetTeamSlot::default_instance_ = new CMsgPracticeLobbySetTeamSlot();
  CMsgPracticeLobbySetCoach::default_instance_ = new CMsgPracticeLobbySetCoach();
  CMsgPracticeLobbyJoinBroadcastChannel::default_instance_ = new CMsgPracticeLobbyJoinBroadcastChannel();
  CMsgPracticeLobbyCloseBroadcastChannel::default_instance_ = new CMsgPracticeLobbyCloseBroadcastChannel();
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance_ = new CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus();
  CMsgPracticeLobbyKick::default_instance_ = new CMsgPracticeLobbyKick();
  CMsgPracticeLobbyKickFromTeam::default_instance_ = new CMsgPracticeLobbyKickFromTeam();
  CMsgPracticeLobbyLeave::default_instance_ = new CMsgPracticeLobbyLeave();
  CMsgPracticeLobbyLaunch::default_instance_ = new CMsgPracticeLobbyLaunch();
  CMsgApplyTeamToPracticeLobby::default_instance_ = new CMsgApplyTeamToPracticeLobby();
  CMsgClearPracticeLobbyTeam::default_instance_ = new CMsgClearPracticeLobbyTeam();
  CMsgPracticeLobbyList::default_instance_ = new CMsgPracticeLobbyList();
  CMsgPracticeLobbyListResponseEntry::default_instance_ = new CMsgPracticeLobbyListResponseEntry();
  CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance_ = new CMsgPracticeLobbyListResponseEntry_CLobbyMember();
  CMsgPracticeLobbyListResponse::default_instance_ = new CMsgPracticeLobbyListResponse();
  CMsgLobbyList::default_instance_ = new CMsgLobbyList();
  CMsgLobbyListResponse::default_instance_ = new CMsgLobbyListResponse();
  CMsgPracticeLobbyJoin::default_instance_ = new CMsgPracticeLobbyJoin();
  CMsgPracticeLobbyJoinResponse::default_instance_ = new CMsgPracticeLobbyJoinResponse();
  CMsgFriendPracticeLobbyListRequest::default_instance_ = new CMsgFriendPracticeLobbyListRequest();
  CMsgFriendPracticeLobbyListResponse::default_instance_ = new CMsgFriendPracticeLobbyListResponse();
  CMsgGuildmatePracticeLobbyListRequest::default_instance_ = new CMsgGuildmatePracticeLobbyListRequest();
  CMsgGuildmatePracticeLobbyListResponse::default_instance_ = new CMsgGuildmatePracticeLobbyListResponse();
  CMsgJoinableCustomGameModesRequest::default_instance_ = new CMsgJoinableCustomGameModesRequest();
  CMsgJoinableCustomGameModesResponseEntry::default_instance_ = new CMsgJoinableCustomGameModesResponseEntry();
  CMsgJoinableCustomGameModesResponse::default_instance_ = new CMsgJoinableCustomGameModesResponse();
  CMsgJoinableCustomLobbiesRequest::default_instance_ = new CMsgJoinableCustomLobbiesRequest();
  CMsgJoinableCustomLobbiesResponseEntry::default_instance_ = new CMsgJoinableCustomLobbiesResponseEntry();
  CMsgJoinableCustomLobbiesResponse::default_instance_ = new CMsgJoinableCustomLobbiesResponse();
  CMsgQuickJoinCustomLobby::default_instance_ = new CMsgQuickJoinCustomLobby();
  CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance_ = new CMsgQuickJoinCustomLobby_LegacyRegionPing();
  CMsgQuickJoinCustomLobbyResponse::default_instance_ = new CMsgQuickJoinCustomLobbyResponse();
  CMsgBotGameCreate::default_instance_ = new CMsgBotGameCreate();
  CMsgCustomGameCreate::default_instance_ = new CMsgCustomGameCreate();
  CMsgEventGameCreate::default_instance_ = new CMsgEventGameCreate();
  CMsgDOTAPartyMemberSetCoach::default_instance_ = new CMsgDOTAPartyMemberSetCoach();
  CMsgDOTASetGroupLeader::default_instance_ = new CMsgDOTASetGroupLeader();
  CMsgDOTACancelGroupInvites::default_instance_ = new CMsgDOTACancelGroupInvites();
  CMsgDOTASetGroupOpenStatus::default_instance_ = new CMsgDOTASetGroupOpenStatus();
  CMsgDOTAGroupMergeInvite::default_instance_ = new CMsgDOTAGroupMergeInvite();
  CMsgDOTAGroupMergeResponse::default_instance_ = new CMsgDOTAGroupMergeResponse();
  CMsgDOTAGroupMergeReply::default_instance_ = new CMsgDOTAGroupMergeReply();
  CMsgSpectatorLobbyGameDetails::default_instance_ = new CMsgSpectatorLobbyGameDetails();
  CMsgSpectatorLobbyGameDetails_Team::default_instance_ = new CMsgSpectatorLobbyGameDetails_Team();
  CMsgSetSpectatorLobbyDetails::default_instance_ = new CMsgSetSpectatorLobbyDetails();
  CMsgCreateSpectatorLobby::default_instance_ = new CMsgCreateSpectatorLobby();
  CMsgSpectatorLobbyList::default_instance_ = new CMsgSpectatorLobbyList();
  CMsgSpectatorLobbyListResponse::default_instance_ = new CMsgSpectatorLobbyListResponse();
  CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance_ = new CMsgSpectatorLobbyListResponse_SpectatorLobby();
  CMsgClientToGCRequestSteamDatagramTicket::default_instance_ = new CMsgClientToGCRequestSteamDatagramTicket();
  CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance_ = new CMsgClientToGCRequestSteamDatagramTicketResponse();
  CMsgStartFindingMatch::default_instance_->InitAsDefaultInstance();
  CMsgStartFindingMatchResult::default_instance_->InitAsDefaultInstance();
  CMsgStopFindingMatch::default_instance_->InitAsDefaultInstance();
  CMsgPartyBuilderOptions::default_instance_->InitAsDefaultInstance();
  CMsgReadyUp::default_instance_->InitAsDefaultInstance();
  CMsgReadyUpStatus::default_instance_->InitAsDefaultInstance();
  CMsgAbandonCurrentGame::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbySetDetails::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyCreate::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyCreate_SaveGame::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbySetTeamSlot::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbySetCoach::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyJoinBroadcastChannel::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyCloseBroadcastChannel::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyKick::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyKickFromTeam::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyLeave::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyLaunch::default_instance_->InitAsDefaultInstance();
  CMsgApplyTeamToPracticeLobby::default_instance_->InitAsDefaultInstance();
  CMsgClearPracticeLobbyTeam::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyList::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyListResponseEntry::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyListResponse::default_instance_->InitAsDefaultInstance();
  CMsgLobbyList::default_instance_->InitAsDefaultInstance();
  CMsgLobbyListResponse::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyJoin::default_instance_->InitAsDefaultInstance();
  CMsgPracticeLobbyJoinResponse::default_instance_->InitAsDefaultInstance();
  CMsgFriendPracticeLobbyListRequest::default_instance_->InitAsDefaultInstance();
  CMsgFriendPracticeLobbyListResponse::default_instance_->InitAsDefaultInstance();
  CMsgGuildmatePracticeLobbyListRequest::default_instance_->InitAsDefaultInstance();
  CMsgGuildmatePracticeLobbyListResponse::default_instance_->InitAsDefaultInstance();
  CMsgJoinableCustomGameModesRequest::default_instance_->InitAsDefaultInstance();
  CMsgJoinableCustomGameModesResponseEntry::default_instance_->InitAsDefaultInstance();
  CMsgJoinableCustomGameModesResponse::default_instance_->InitAsDefaultInstance();
  CMsgJoinableCustomLobbiesRequest::default_instance_->InitAsDefaultInstance();
  CMsgJoinableCustomLobbiesResponseEntry::default_instance_->InitAsDefaultInstance();
  CMsgJoinableCustomLobbiesResponse::default_instance_->InitAsDefaultInstance();
  CMsgQuickJoinCustomLobby::default_instance_->InitAsDefaultInstance();
  CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance_->InitAsDefaultInstance();
  CMsgQuickJoinCustomLobbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgBotGameCreate::default_instance_->InitAsDefaultInstance();
  CMsgCustomGameCreate::default_instance_->InitAsDefaultInstance();
  CMsgEventGameCreate::default_instance_->InitAsDefaultInstance();
  CMsgDOTAPartyMemberSetCoach::default_instance_->InitAsDefaultInstance();
  CMsgDOTASetGroupLeader::default_instance_->InitAsDefaultInstance();
  CMsgDOTACancelGroupInvites::default_instance_->InitAsDefaultInstance();
  CMsgDOTASetGroupOpenStatus::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGroupMergeInvite::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGroupMergeResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAGroupMergeReply::default_instance_->InitAsDefaultInstance();
  CMsgSpectatorLobbyGameDetails::default_instance_->InitAsDefaultInstance();
  CMsgSpectatorLobbyGameDetails_Team::default_instance_->InitAsDefaultInstance();
  CMsgSetSpectatorLobbyDetails::default_instance_->InitAsDefaultInstance();
  CMsgCreateSpectatorLobby::default_instance_->InitAsDefaultInstance();
  CMsgSpectatorLobbyList::default_instance_->InitAsDefaultInstance();
  CMsgSpectatorLobbyListResponse::default_instance_->InitAsDefaultInstance();
  CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCRequestSteamDatagramTicket::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_;
const ::google::protobuf::EnumDescriptor* EStartFindingMatchResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStartFindingMatchResult_descriptor_;
}
bool EStartFindingMatchResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStartFindingMatch::kKeyFieldNumber;
const int CMsgStartFindingMatch::kMatchgroupsFieldNumber;
const int CMsgStartFindingMatch::kClientVersionFieldNumber;
const int CMsgStartFindingMatch::kGameModesFieldNumber;
const int CMsgStartFindingMatch::kBotDifficultyFieldNumber;
const int CMsgStartFindingMatch::kMatchTypeFieldNumber;
const int CMsgStartFindingMatch::kMatchlanguagesFieldNumber;
const int CMsgStartFindingMatch::kMapPreferenceFieldNumber;
const int CMsgStartFindingMatch::kTeamIdFieldNumber;
const int CMsgStartFindingMatch::kGameLanguageEnumFieldNumber;
const int CMsgStartFindingMatch::kGameLanguageNameFieldNumber;
const int CMsgStartFindingMatch::kPingDataFieldNumber;
const int CMsgStartFindingMatch::kRegionSelectFlagsFieldNumber;
#endif  // !_MSC_VER

CMsgStartFindingMatch::CMsgStartFindingMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgStartFindingMatch)
}

void CMsgStartFindingMatch::InitAsDefaultInstance() {
  ping_data_ = const_cast< ::CMsgClientPingData*>(&::CMsgClientPingData::default_instance());
}

CMsgStartFindingMatch::CMsgStartFindingMatch(const CMsgStartFindingMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatch)
}

void CMsgStartFindingMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchgroups_ = 4294967295u;
  client_version_ = 0u;
  game_modes_ = 4294967295u;
  bot_difficulty_ = 3;
  match_type_ = 0;
  matchlanguages_ = 4294967295u;
  map_preference_ = 0u;
  team_id_ = 0u;
  game_language_enum_ = 0;
  game_language_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ping_data_ = NULL;
  region_select_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStartFindingMatch::~CMsgStartFindingMatch() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatch)
  SharedDtor();
}

void CMsgStartFindingMatch::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (game_language_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_language_name_;
  }
  if (this != default_instance_) {
    delete ping_data_;
  }
}

void CMsgStartFindingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartFindingMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStartFindingMatch_descriptor_;
}

const CMsgStartFindingMatch& CMsgStartFindingMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgStartFindingMatch* CMsgStartFindingMatch::default_instance_ = NULL;

CMsgStartFindingMatch* CMsgStartFindingMatch::New() const {
  return new CMsgStartFindingMatch;
}

void CMsgStartFindingMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgStartFindingMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    matchgroups_ = 4294967295u;
    client_version_ = 0u;
    game_modes_ = 4294967295u;
    bot_difficulty_ = 3;
    match_type_ = 0;
    matchlanguages_ = 4294967295u;
    map_preference_ = 0u;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(game_language_enum_, region_select_flags_);
    team_id_ = 0u;
    if (has_game_language_name()) {
      if (game_language_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_language_name_->clear();
      }
    }
    if (has_ping_data()) {
      if (ping_data_ != NULL) ping_data_->::CMsgClientPingData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStartFindingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgStartFindingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matchgroups;
        break;
      }

      // optional uint32 matchgroups = 2 [default = 4294967295];
      case 2: {
        if (tag == 16) {
         parse_matchgroups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
          set_has_matchgroups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (tag == 24) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_modes;
        break;
      }

      // optional uint32 game_modes = 4 [default = 4294967295];
      case 4: {
        if (tag == 32) {
         parse_game_modes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
          set_has_game_modes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
      case 5: {
        if (tag == 40) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_match_type;
        break;
      }

      // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
      case 6: {
        if (tag == 48) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_matchlanguages;
        break;
      }

      // optional uint32 matchlanguages = 7 [default = 4294967295];
      case 7: {
        if (tag == 56) {
         parse_matchlanguages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
          set_has_matchlanguages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 8;
      case 8: {
        if (tag == 64) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_map_preference;
        break;
      }

      // optional uint32 map_preference = 9;
      case 9: {
        if (tag == 72) {
         parse_map_preference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_preference_)));
          set_has_map_preference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_game_language_enum;
        break;
      }

      // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
      case 10: {
        if (tag == 80) {
         parse_game_language_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchLanguages_IsValid(value)) {
            set_game_language_enum(static_cast< ::MatchLanguages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_game_language_name;
        break;
      }

      // optional string game_language_name = 11;
      case 11: {
        if (tag == 90) {
         parse_game_language_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_language_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_language_name().data(), this->game_language_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_language_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ping_data;
        break;
      }

      // optional .CMsgClientPingData ping_data = 12;
      case 12: {
        if (tag == 98) {
         parse_ping_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_region_select_flags;
        break;
      }

      // optional uint32 region_select_flags = 13;
      case 13: {
        if (tag == 104) {
         parse_region_select_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_select_flags_)));
          set_has_region_select_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgStartFindingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgStartFindingMatch)
  return false;
#undef DO_
}

void CMsgStartFindingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgStartFindingMatch)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (has_matchgroups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchgroups(), output);
  }

  // optional uint32 client_version = 3;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (has_game_modes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bot_difficulty(), output);
  }

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->match_type(), output);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (has_matchlanguages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->matchlanguages(), output);
  }

  // optional uint32 team_id = 8;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team_id(), output);
  }

  // optional uint32 map_preference = 9;
  if (has_map_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->map_preference(), output);
  }

  // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (has_game_language_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->game_language_enum(), output);
  }

  // optional string game_language_name = 11;
  if (has_game_language_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_language_name().data(), this->game_language_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_language_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->game_language_name(), output);
  }

  // optional .CMsgClientPingData ping_data = 12;
  if (has_ping_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->ping_data(), output);
  }

  // optional uint32 region_select_flags = 13;
  if (has_region_select_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->region_select_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgStartFindingMatch)
}

::google::protobuf::uint8* CMsgStartFindingMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatch)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (has_matchgroups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchgroups(), target);
  }

  // optional uint32 client_version = 3;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (has_game_modes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bot_difficulty(), target);
  }

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->match_type(), target);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (has_matchlanguages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->matchlanguages(), target);
  }

  // optional uint32 team_id = 8;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team_id(), target);
  }

  // optional uint32 map_preference = 9;
  if (has_map_preference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->map_preference(), target);
  }

  // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (has_game_language_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->game_language_enum(), target);
  }

  // optional string game_language_name = 11;
  if (has_game_language_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_language_name().data(), this->game_language_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_language_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->game_language_name(), target);
  }

  // optional .CMsgClientPingData ping_data = 12;
  if (has_ping_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->ping_data(), target);
  }

  // optional uint32 region_select_flags = 13;
  if (has_region_select_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->region_select_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatch)
  return target;
}

int CMsgStartFindingMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 matchgroups = 2 [default = 4294967295];
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 game_modes = 4 [default = 4294967295];
    if (has_game_modes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional uint32 matchlanguages = 7 [default = 4294967295];
    if (has_matchlanguages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }

    // optional uint32 map_preference = 9;
    if (has_map_preference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_preference());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 team_id = 8;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
    if (has_game_language_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_language_enum());
    }

    // optional string game_language_name = 11;
    if (has_game_language_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_language_name());
    }

    // optional .CMsgClientPingData ping_data = 12;
    if (has_ping_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_data());
    }

    // optional uint32 region_select_flags = 13;
    if (has_region_select_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_select_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartFindingMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStartFindingMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStartFindingMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatch::MergeFrom(const CMsgStartFindingMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_matchgroups()) {
      set_matchgroups(from.matchgroups());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_game_modes()) {
      set_game_modes(from.game_modes());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_matchlanguages()) {
      set_matchlanguages(from.matchlanguages());
    }
    if (from.has_map_preference()) {
      set_map_preference(from.map_preference());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_game_language_enum()) {
      set_game_language_enum(from.game_language_enum());
    }
    if (from.has_game_language_name()) {
      set_game_language_name(from.game_language_name());
    }
    if (from.has_ping_data()) {
      mutable_ping_data()->::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (from.has_region_select_flags()) {
      set_region_select_flags(from.region_select_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStartFindingMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatch::CopyFrom(const CMsgStartFindingMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatch::IsInitialized() const {

  return true;
}

void CMsgStartFindingMatch::Swap(CMsgStartFindingMatch* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(matchgroups_, other->matchgroups_);
    std::swap(client_version_, other->client_version_);
    std::swap(game_modes_, other->game_modes_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(match_type_, other->match_type_);
    std::swap(matchlanguages_, other->matchlanguages_);
    std::swap(map_preference_, other->map_preference_);
    std::swap(team_id_, other->team_id_);
    std::swap(game_language_enum_, other->game_language_enum_);
    std::swap(game_language_name_, other->game_language_name_);
    std::swap(ping_data_, other->ping_data_);
    std::swap(region_select_flags_, other->region_select_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStartFindingMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStartFindingMatch_descriptor_;
  metadata.reflection = CMsgStartFindingMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgStartFindingMatchResult::kLegacyGenericEresultFieldNumber;
const int CMsgStartFindingMatchResult::kResultFieldNumber;
const int CMsgStartFindingMatchResult::kErrorTokenFieldNumber;
const int CMsgStartFindingMatchResult::kDebugMessageFieldNumber;
const int CMsgStartFindingMatchResult::kResponsiblePartyMembersFieldNumber;
#endif  // !_MSC_VER

CMsgStartFindingMatchResult::CMsgStartFindingMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgStartFindingMatchResult)
}

void CMsgStartFindingMatchResult::InitAsDefaultInstance() {
}

CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatchResult)
}

void CMsgStartFindingMatchResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  legacy_generic_eresult_ = 2u;
  result_ = 0;
  error_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStartFindingMatchResult::~CMsgStartFindingMatchResult() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatchResult)
  SharedDtor();
}

void CMsgStartFindingMatchResult::SharedDtor() {
  if (error_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_token_;
  }
  if (debug_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgStartFindingMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartFindingMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStartFindingMatchResult_descriptor_;
}

const CMsgStartFindingMatchResult& CMsgStartFindingMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgStartFindingMatchResult* CMsgStartFindingMatchResult::default_instance_ = NULL;

CMsgStartFindingMatchResult* CMsgStartFindingMatchResult::New() const {
  return new CMsgStartFindingMatchResult;
}

void CMsgStartFindingMatchResult::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    legacy_generic_eresult_ = 2u;
    result_ = 0;
    if (has_error_token()) {
      if (error_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_token_->clear();
      }
    }
    if (has_debug_message()) {
      if (debug_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        debug_message_->clear();
      }
    }
  }
  responsible_party_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStartFindingMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgStartFindingMatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_generic_eresult = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_generic_eresult_)));
          set_has_legacy_generic_eresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EStartFindingMatchResult_IsValid(value)) {
            set_result(static_cast< ::EStartFindingMatchResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_token;
        break;
      }

      // optional string error_token = 3;
      case 3: {
        if (tag == 26) {
         parse_error_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_token().data(), this->error_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_debug_message;
        break;
      }

      // optional string debug_message = 4;
      case 4: {
        if (tag == 34) {
         parse_debug_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_message().data(), this->debug_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "debug_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_responsible_party_members;
        break;
      }

      // repeated fixed64 responsible_party_members = 5;
      case 5: {
        if (tag == 41) {
         parse_responsible_party_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41, input, this->mutable_responsible_party_members())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_responsible_party_members())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_responsible_party_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgStartFindingMatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgStartFindingMatchResult)
  return false;
#undef DO_
}

void CMsgStartFindingMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgStartFindingMatchResult)
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (has_legacy_generic_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_generic_eresult(), output);
  }

  // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string error_token = 3;
  if (has_error_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_token().data(), this->error_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_token(), output);
  }

  // optional string debug_message = 4;
  if (has_debug_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message().data(), this->debug_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->debug_message(), output);
  }

  // repeated fixed64 responsible_party_members = 5;
  for (int i = 0; i < this->responsible_party_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->responsible_party_members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgStartFindingMatchResult)
}

::google::protobuf::uint8* CMsgStartFindingMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatchResult)
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (has_legacy_generic_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_generic_eresult(), target);
  }

  // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string error_token = 3;
  if (has_error_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_token().data(), this->error_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_token(), target);
  }

  // optional string debug_message = 4;
  if (has_debug_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message().data(), this->debug_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "debug_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debug_message(), target);
  }

  // repeated fixed64 responsible_party_members = 5;
  for (int i = 0; i < this->responsible_party_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(5, this->responsible_party_members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatchResult)
  return target;
}

int CMsgStartFindingMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 legacy_generic_eresult = 1 [default = 2];
    if (has_legacy_generic_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_generic_eresult());
    }

    // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string error_token = 3;
    if (has_error_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_token());
    }

    // optional string debug_message = 4;
    if (has_debug_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_message());
    }

  }
  // repeated fixed64 responsible_party_members = 5;
  {
    int data_size = 0;
    data_size = 8 * this->responsible_party_members_size();
    total_size += 1 * this->responsible_party_members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartFindingMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStartFindingMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStartFindingMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatchResult::MergeFrom(const CMsgStartFindingMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  responsible_party_members_.MergeFrom(from.responsible_party_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_legacy_generic_eresult()) {
      set_legacy_generic_eresult(from.legacy_generic_eresult());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_token()) {
      set_error_token(from.error_token());
    }
    if (from.has_debug_message()) {
      set_debug_message(from.debug_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStartFindingMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatchResult::CopyFrom(const CMsgStartFindingMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatchResult::IsInitialized() const {

  return true;
}

void CMsgStartFindingMatchResult::Swap(CMsgStartFindingMatchResult* other) {
  if (other != this) {
    std::swap(legacy_generic_eresult_, other->legacy_generic_eresult_);
    std::swap(result_, other->result_);
    std::swap(error_token_, other->error_token_);
    std::swap(debug_message_, other->debug_message_);
    responsible_party_members_.Swap(&other->responsible_party_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStartFindingMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStartFindingMatchResult_descriptor_;
  metadata.reflection = CMsgStartFindingMatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgStopFindingMatch::CMsgStopFindingMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgStopFindingMatch)
}

void CMsgStopFindingMatch::InitAsDefaultInstance() {
}

CMsgStopFindingMatch::CMsgStopFindingMatch(const CMsgStopFindingMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgStopFindingMatch)
}

void CMsgStopFindingMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgStopFindingMatch::~CMsgStopFindingMatch() {
  // @@protoc_insertion_point(destructor:CMsgStopFindingMatch)
  SharedDtor();
}

void CMsgStopFindingMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgStopFindingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStopFindingMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgStopFindingMatch_descriptor_;
}

const CMsgStopFindingMatch& CMsgStopFindingMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgStopFindingMatch* CMsgStopFindingMatch::default_instance_ = NULL;

CMsgStopFindingMatch* CMsgStopFindingMatch::New() const {
  return new CMsgStopFindingMatch;
}

void CMsgStopFindingMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgStopFindingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgStopFindingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgStopFindingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgStopFindingMatch)
  return false;
#undef DO_
}

void CMsgStopFindingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgStopFindingMatch)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgStopFindingMatch)
}

::google::protobuf::uint8* CMsgStopFindingMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStopFindingMatch)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStopFindingMatch)
  return target;
}

int CMsgStopFindingMatch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStopFindingMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgStopFindingMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgStopFindingMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgStopFindingMatch::MergeFrom(const CMsgStopFindingMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgStopFindingMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFindingMatch::CopyFrom(const CMsgStopFindingMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFindingMatch::IsInitialized() const {

  return true;
}

void CMsgStopFindingMatch::Swap(CMsgStopFindingMatch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgStopFindingMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgStopFindingMatch_descriptor_;
  metadata.reflection = CMsgStopFindingMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyBuilderOptions::kAdditionalSlotsFieldNumber;
const int CMsgPartyBuilderOptions::kMatchTypeFieldNumber;
const int CMsgPartyBuilderOptions::kMatchgroupsFieldNumber;
const int CMsgPartyBuilderOptions::kClientVersionFieldNumber;
const int CMsgPartyBuilderOptions::kLanguageFieldNumber;
#endif  // !_MSC_VER

CMsgPartyBuilderOptions::CMsgPartyBuilderOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPartyBuilderOptions)
}

void CMsgPartyBuilderOptions::InitAsDefaultInstance() {
}

CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyBuilderOptions)
}

void CMsgPartyBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  additional_slots_ = 0u;
  match_type_ = 0;
  matchgroups_ = 0u;
  client_version_ = 0u;
  language_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyBuilderOptions::~CMsgPartyBuilderOptions() {
  // @@protoc_insertion_point(destructor:CMsgPartyBuilderOptions)
  SharedDtor();
}

void CMsgPartyBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyBuilderOptions_descriptor_;
}

const CMsgPartyBuilderOptions& CMsgPartyBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPartyBuilderOptions* CMsgPartyBuilderOptions::default_instance_ = NULL;

CMsgPartyBuilderOptions* CMsgPartyBuilderOptions::New() const {
  return new CMsgPartyBuilderOptions;
}

void CMsgPartyBuilderOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPartyBuilderOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(additional_slots_, language_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPartyBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_slots = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_slots_)));
          set_has_additional_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_type;
        break;
      }

      // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
      case 2: {
        if (tag == 16) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_matchgroups;
        break;
      }

      // optional uint32 matchgroups = 3;
      case 3: {
        if (tag == 24) {
         parse_matchgroups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
          set_has_matchgroups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 4;
      case 4: {
        if (tag == 32) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_language;
        break;
      }

      // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
      case 5: {
        if (tag == 40) {
         parse_language:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchLanguages_IsValid(value)) {
            set_language(static_cast< ::MatchLanguages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPartyBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPartyBuilderOptions)
  return false;
#undef DO_
}

void CMsgPartyBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPartyBuilderOptions)
  // optional uint32 additional_slots = 1;
  if (has_additional_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_slots(), output);
  }

  // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_type(), output);
  }

  // optional uint32 matchgroups = 3;
  if (has_matchgroups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchgroups(), output);
  }

  // optional uint32 client_version = 4;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_version(), output);
  }

  // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPartyBuilderOptions)
}

::google::protobuf::uint8* CMsgPartyBuilderOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyBuilderOptions)
  // optional uint32 additional_slots = 1;
  if (has_additional_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_slots(), target);
  }

  // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_type(), target);
  }

  // optional uint32 matchgroups = 3;
  if (has_matchgroups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchgroups(), target);
  }

  // optional uint32 client_version = 4;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_version(), target);
  }

  // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyBuilderOptions)
  return target;
}

int CMsgPartyBuilderOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 additional_slots = 1;
    if (has_additional_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_slots());
    }

    // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional uint32 matchgroups = 3;
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 client_version = 4;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyBuilderOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyBuilderOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyBuilderOptions::MergeFrom(const CMsgPartyBuilderOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_additional_slots()) {
      set_additional_slots(from.additional_slots());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_matchgroups()) {
      set_matchgroups(from.matchgroups());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyBuilderOptions::CopyFrom(const CMsgPartyBuilderOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyBuilderOptions::IsInitialized() const {

  return true;
}

void CMsgPartyBuilderOptions::Swap(CMsgPartyBuilderOptions* other) {
  if (other != this) {
    std::swap(additional_slots_, other->additional_slots_);
    std::swap(match_type_, other->match_type_);
    std::swap(matchgroups_, other->matchgroups_);
    std::swap(client_version_, other->client_version_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyBuilderOptions_descriptor_;
  metadata.reflection = CMsgPartyBuilderOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReadyUp::kStateFieldNumber;
const int CMsgReadyUp::kReadyUpKeyFieldNumber;
const int CMsgReadyUp::kHardwareSpecsFieldNumber;
#endif  // !_MSC_VER

CMsgReadyUp::CMsgReadyUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgReadyUp)
}

void CMsgReadyUp::InitAsDefaultInstance() {
  hardware_specs_ = const_cast< ::CDOTAClientHardwareSpecs*>(&::CDOTAClientHardwareSpecs::default_instance());
}

CMsgReadyUp::CMsgReadyUp(const CMsgReadyUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUp)
}

void CMsgReadyUp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ready_up_key_ = GOOGLE_ULONGLONG(0);
  hardware_specs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReadyUp::~CMsgReadyUp() {
  // @@protoc_insertion_point(destructor:CMsgReadyUp)
  SharedDtor();
}

void CMsgReadyUp::SharedDtor() {
  if (this != default_instance_) {
    delete hardware_specs_;
  }
}

void CMsgReadyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReadyUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReadyUp_descriptor_;
}

const CMsgReadyUp& CMsgReadyUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgReadyUp* CMsgReadyUp::default_instance_ = NULL;

CMsgReadyUp* CMsgReadyUp::New() const {
  return new CMsgReadyUp;
}

void CMsgReadyUp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    state_ = 0;
    ready_up_key_ = GOOGLE_ULONGLONG(0);
    if (has_hardware_specs()) {
      if (hardware_specs_ != NULL) hardware_specs_->::CDOTAClientHardwareSpecs::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReadyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgReadyUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALobbyReadyState_IsValid(value)) {
            set_state(static_cast< ::DOTALobbyReadyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ready_up_key;
        break;
      }

      // optional fixed64 ready_up_key = 2;
      case 2: {
        if (tag == 17) {
         parse_ready_up_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ready_up_key_)));
          set_has_ready_up_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hardware_specs;
        break;
      }

      // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
      case 3: {
        if (tag == 26) {
         parse_hardware_specs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_specs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgReadyUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgReadyUp)
  return false;
#undef DO_
}

void CMsgReadyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgReadyUp)
  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional fixed64 ready_up_key = 2;
  if (has_ready_up_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->ready_up_key(), output);
  }

  // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
  if (has_hardware_specs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hardware_specs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgReadyUp)
}

::google::protobuf::uint8* CMsgReadyUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUp)
  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional fixed64 ready_up_key = 2;
  if (has_ready_up_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->ready_up_key(), target);
  }

  // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
  if (has_hardware_specs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hardware_specs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUp)
  return target;
}

int CMsgReadyUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional fixed64 ready_up_key = 2;
    if (has_ready_up_key()) {
      total_size += 1 + 8;
    }

    // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
    if (has_hardware_specs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hardware_specs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReadyUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReadyUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReadyUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReadyUp::MergeFrom(const CMsgReadyUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ready_up_key()) {
      set_ready_up_key(from.ready_up_key());
    }
    if (from.has_hardware_specs()) {
      mutable_hardware_specs()->::CDOTAClientHardwareSpecs::MergeFrom(from.hardware_specs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReadyUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUp::CopyFrom(const CMsgReadyUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUp::IsInitialized() const {

  return true;
}

void CMsgReadyUp::Swap(CMsgReadyUp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ready_up_key_, other->ready_up_key_);
    std::swap(hardware_specs_, other->hardware_specs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReadyUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReadyUp_descriptor_;
  metadata.reflection = CMsgReadyUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgReadyUpStatus::kLobbyIdFieldNumber;
const int CMsgReadyUpStatus::kAcceptedIdsFieldNumber;
const int CMsgReadyUpStatus::kDeclinedIdsFieldNumber;
#endif  // !_MSC_VER

CMsgReadyUpStatus::CMsgReadyUpStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgReadyUpStatus)
}

void CMsgReadyUpStatus::InitAsDefaultInstance() {
}

CMsgReadyUpStatus::CMsgReadyUpStatus(const CMsgReadyUpStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUpStatus)
}

void CMsgReadyUpStatus::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgReadyUpStatus::~CMsgReadyUpStatus() {
  // @@protoc_insertion_point(destructor:CMsgReadyUpStatus)
  SharedDtor();
}

void CMsgReadyUpStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgReadyUpStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReadyUpStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgReadyUpStatus_descriptor_;
}

const CMsgReadyUpStatus& CMsgReadyUpStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgReadyUpStatus* CMsgReadyUpStatus::default_instance_ = NULL;

CMsgReadyUpStatus* CMsgReadyUpStatus::New() const {
  return new CMsgReadyUpStatus;
}

void CMsgReadyUpStatus::Clear() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  accepted_ids_.Clear();
  declined_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgReadyUpStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgReadyUpStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accepted_ids;
        break;
      }

      // repeated uint32 accepted_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_accepted_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_accepted_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accepted_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accepted_ids;
        if (input->ExpectTag(24)) goto parse_declined_ids;
        break;
      }

      // repeated uint32 declined_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_declined_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_declined_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_declined_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_declined_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgReadyUpStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgReadyUpStatus)
  return false;
#undef DO_
}

void CMsgReadyUpStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgReadyUpStatus)
  // optional fixed64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // repeated uint32 accepted_ids = 2;
  for (int i = 0; i < this->accepted_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->accepted_ids(i), output);
  }

  // repeated uint32 declined_ids = 3;
  for (int i = 0; i < this->declined_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->declined_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgReadyUpStatus)
}

::google::protobuf::uint8* CMsgReadyUpStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUpStatus)
  // optional fixed64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // repeated uint32 accepted_ids = 2;
  for (int i = 0; i < this->accepted_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->accepted_ids(i), target);
  }

  // repeated uint32 declined_ids = 3;
  for (int i = 0; i < this->declined_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->declined_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUpStatus)
  return target;
}

int CMsgReadyUpStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

  }
  // repeated uint32 accepted_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->accepted_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accepted_ids(i));
    }
    total_size += 1 * this->accepted_ids_size() + data_size;
  }

  // repeated uint32 declined_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->declined_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->declined_ids(i));
    }
    total_size += 1 * this->declined_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReadyUpStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgReadyUpStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgReadyUpStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgReadyUpStatus::MergeFrom(const CMsgReadyUpStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  accepted_ids_.MergeFrom(from.accepted_ids_);
  declined_ids_.MergeFrom(from.declined_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgReadyUpStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUpStatus::CopyFrom(const CMsgReadyUpStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUpStatus::IsInitialized() const {

  return true;
}

void CMsgReadyUpStatus::Swap(CMsgReadyUpStatus* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    accepted_ids_.Swap(&other->accepted_ids_);
    declined_ids_.Swap(&other->declined_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgReadyUpStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgReadyUpStatus_descriptor_;
  metadata.reflection = CMsgReadyUpStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgAbandonCurrentGame::CMsgAbandonCurrentGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAbandonCurrentGame)
}

void CMsgAbandonCurrentGame::InitAsDefaultInstance() {
}

CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgAbandonCurrentGame)
}

void CMsgAbandonCurrentGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAbandonCurrentGame::~CMsgAbandonCurrentGame() {
  // @@protoc_insertion_point(destructor:CMsgAbandonCurrentGame)
  SharedDtor();
}

void CMsgAbandonCurrentGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAbandonCurrentGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAbandonCurrentGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAbandonCurrentGame_descriptor_;
}

const CMsgAbandonCurrentGame& CMsgAbandonCurrentGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgAbandonCurrentGame* CMsgAbandonCurrentGame::default_instance_ = NULL;

CMsgAbandonCurrentGame* CMsgAbandonCurrentGame::New() const {
  return new CMsgAbandonCurrentGame;
}

void CMsgAbandonCurrentGame::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAbandonCurrentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAbandonCurrentGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAbandonCurrentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAbandonCurrentGame)
  return false;
#undef DO_
}

void CMsgAbandonCurrentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAbandonCurrentGame)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAbandonCurrentGame)
}

::google::protobuf::uint8* CMsgAbandonCurrentGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAbandonCurrentGame)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAbandonCurrentGame)
  return target;
}

int CMsgAbandonCurrentGame::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAbandonCurrentGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAbandonCurrentGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAbandonCurrentGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAbandonCurrentGame::MergeFrom(const CMsgAbandonCurrentGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAbandonCurrentGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAbandonCurrentGame::CopyFrom(const CMsgAbandonCurrentGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAbandonCurrentGame::IsInitialized() const {

  return true;
}

void CMsgAbandonCurrentGame::Swap(CMsgAbandonCurrentGame* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAbandonCurrentGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAbandonCurrentGame_descriptor_;
  metadata.reflection = CMsgAbandonCurrentGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbySetDetails::kLobbyIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameNameFieldNumber;
const int CMsgPracticeLobbySetDetails::kTeamDetailsFieldNumber;
const int CMsgPracticeLobbySetDetails::kServerRegionFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kCmPickFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDifficultyRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllowCheatsFieldNumber;
const int CMsgPracticeLobbySetDetails::kFillWithBotsFieldNumber;
const int CMsgPracticeLobbySetDetails::kIntroModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllowSpectatingFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameVersionFieldNumber;
const int CMsgPracticeLobbySetDetails::kPassKeyFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueidFieldNumber;
const int CMsgPracticeLobbySetDetails::kPenaltyLevelRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kPenaltyLevelDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kLoadGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kSeriesTypeFieldNumber;
const int CMsgPracticeLobbySetDetails::kRadiantSeriesWinsFieldNumber;
const int CMsgPracticeLobbySetDetails::kDireSeriesWinsFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllchatFieldNumber;
const int CMsgPracticeLobbySetDetails::kDotaTvDelayFieldNumber;
const int CMsgPracticeLobbySetDetails::kLanFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMapNameFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomDifficultyFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMinPlayersFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMaxPlayersFieldNumber;
const int CMsgPracticeLobbySetDetails::kLanHostPingToServerRegionFieldNumber;
const int CMsgPracticeLobbySetDetails::kVisibilityFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameCrcFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueSeriesIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameTimestampFieldNumber;
const int CMsgPracticeLobbySetDetails::kPreviousMatchOverrideFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueSelectionPriorityTeamFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueSelectionPriorityChoiceFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueNonSelectionPriorityChoiceFieldNumber;
const int CMsgPracticeLobbySetDetails::kPauseSettingFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDifficultyDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDireFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbySetDetails)
}

void CMsgPracticeLobbySetDetails::InitAsDefaultInstance() {
}

CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetDetails)
}

void CMsgPracticeLobbySetDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_region_ = 0u;
  game_mode_ = 0u;
  cm_pick_ = 0;
  bot_difficulty_radiant_ = 0;
  allow_cheats_ = false;
  fill_with_bots_ = false;
  intro_mode_ = false;
  allow_spectating_ = false;
  game_version_ = 0;
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leagueid_ = 0u;
  penalty_level_radiant_ = 0u;
  penalty_level_dire_ = 0u;
  load_game_id_ = 0u;
  series_type_ = 0u;
  radiant_series_wins_ = 0u;
  dire_series_wins_ = 0u;
  allchat_ = false;
  dota_tv_delay_ = 1;
  lan_ = false;
  custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_difficulty_ = 0u;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  custom_min_players_ = 0u;
  custom_max_players_ = 0u;
  lan_host_ping_to_server_region_ = 0u;
  visibility_ = 0;
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  league_series_id_ = 0u;
  league_game_id_ = 0u;
  custom_game_timestamp_ = 0u;
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  league_selection_priority_team_ = 0u;
  league_selection_priority_choice_ = 0;
  league_non_selection_priority_choice_ = 0;
  pause_setting_ = 0;
  bot_difficulty_dire_ = 0;
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  bot_dire_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbySetDetails::~CMsgPracticeLobbySetDetails() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetDetails)
  SharedDtor();
}

void CMsgPracticeLobbySetDetails::SharedDtor() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbySetDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbySetDetails_descriptor_;
}

const CMsgPracticeLobbySetDetails& CMsgPracticeLobbySetDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbySetDetails* CMsgPracticeLobbySetDetails::default_instance_ = NULL;

CMsgPracticeLobbySetDetails* CMsgPracticeLobbySetDetails::New() const {
  return new CMsgPracticeLobbySetDetails;
}

void CMsgPracticeLobbySetDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPracticeLobbySetDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(server_region_, allow_cheats_);
    lobby_id_ = GOOGLE_ULONGLONG(0);
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(fill_with_bots_, game_version_);
    ZR_(leagueid_, penalty_level_dire_);
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_key_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(load_game_id_, dire_series_wins_);
    ZR_(allchat_, lan_);
    dota_tv_delay_ = 1;
    if (has_custom_game_mode()) {
      if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_game_mode_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(custom_game_id_, custom_game_crc_);
    if (has_custom_map_name()) {
      if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_map_name_->clear();
      }
    }
    custom_difficulty_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(league_series_id_, pause_setting_);
  }
  ZR_(bot_difficulty_dire_, bot_dire_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  team_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbySetDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbySetDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_name;
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (tag == 18) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_details;
        break;
      }

      // repeated .CLobbyTeamDetails team_details = 3;
      case 3: {
        if (tag == 26) {
         parse_team_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_details;
        if (input->ExpectTag(32)) goto parse_server_region;
        break;
      }

      // optional uint32 server_region = 4;
      case 4: {
        if (tag == 32) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cm_pick;
        break;
      }

      // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
      case 6: {
        if (tag == 48) {
         parse_cm_pick:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bot_difficulty_radiant;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
      case 9: {
        if (tag == 72) {
         parse_bot_difficulty_radiant:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_allow_cheats;
        break;
      }

      // optional bool allow_cheats = 10;
      case 10: {
        if (tag == 80) {
         parse_allow_cheats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
          set_has_allow_cheats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fill_with_bots;
        break;
      }

      // optional bool fill_with_bots = 11;
      case 11: {
        if (tag == 88) {
         parse_fill_with_bots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
          set_has_fill_with_bots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_intro_mode;
        break;
      }

      // optional bool intro_mode = 12;
      case 12: {
        if (tag == 96) {
         parse_intro_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
          set_has_intro_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_allow_spectating;
        break;
      }

      // optional bool allow_spectating = 13;
      case 13: {
        if (tag == 104) {
         parse_allow_spectating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
          set_has_allow_spectating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_game_version;
        break;
      }

      // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
      case 14: {
        if (tag == 112) {
         parse_game_version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 15;
      case 15: {
        if (tag == 122) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_leagueid;
        break;
      }

      // optional uint32 leagueid = 16;
      case 16: {
        if (tag == 128) {
         parse_leagueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
          set_has_leagueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_penalty_level_radiant;
        break;
      }

      // optional uint32 penalty_level_radiant = 17;
      case 17: {
        if (tag == 136) {
         parse_penalty_level_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
          set_has_penalty_level_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_penalty_level_dire;
        break;
      }

      // optional uint32 penalty_level_dire = 18;
      case 18: {
        if (tag == 144) {
         parse_penalty_level_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
          set_has_penalty_level_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_load_game_id;
        break;
      }

      // optional uint32 load_game_id = 19;
      case 19: {
        if (tag == 152) {
         parse_load_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
          set_has_load_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 20;
      case 20: {
        if (tag == 160) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_radiant_series_wins;
        break;
      }

      // optional uint32 radiant_series_wins = 21;
      case 21: {
        if (tag == 168) {
         parse_radiant_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
          set_has_radiant_series_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_dire_series_wins;
        break;
      }

      // optional uint32 dire_series_wins = 22;
      case 22: {
        if (tag == 176) {
         parse_dire_series_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
          set_has_dire_series_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_allchat;
        break;
      }

      // optional bool allchat = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_allchat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
          set_has_allchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_dota_tv_delay;
        break;
      }

      // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
      case 24: {
        if (tag == 192) {
         parse_dota_tv_delay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_lan;
        break;
      }

      // optional bool lan = 25;
      case 25: {
        if (tag == 200) {
         parse_lan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
          set_has_lan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_custom_game_mode;
        break;
      }

      // optional string custom_game_mode = 26;
      case 26: {
        if (tag == 210) {
         parse_custom_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_game_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_custom_map_name;
        break;
      }

      // optional string custom_map_name = 27;
      case 27: {
        if (tag == 218) {
         parse_custom_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_custom_difficulty;
        break;
      }

      // optional uint32 custom_difficulty = 28;
      case 28: {
        if (tag == 224) {
         parse_custom_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
          set_has_custom_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 29;
      case 29: {
        if (tag == 232) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_custom_min_players;
        break;
      }

      // optional uint32 custom_min_players = 30;
      case 30: {
        if (tag == 240) {
         parse_custom_min_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
          set_has_custom_min_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_custom_max_players;
        break;
      }

      // optional uint32 custom_max_players = 31;
      case 31: {
        if (tag == 248) {
         parse_custom_max_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
          set_has_custom_max_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_lan_host_ping_to_server_region;
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 32;
      case 32: {
        if (tag == 256) {
         parse_lan_host_ping_to_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
          set_has_lan_host_ping_to_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_visibility;
        break;
      }

      // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
      case 33: {
        if (tag == 264) {
         parse_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_custom_game_crc;
        break;
      }

      // optional fixed64 custom_game_crc = 34;
      case 34: {
        if (tag == 273) {
         parse_custom_game_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
          set_has_custom_game_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_league_series_id;
        break;
      }

      // optional uint32 league_series_id = 35;
      case 35: {
        if (tag == 280) {
         parse_league_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_series_id_)));
          set_has_league_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_league_game_id;
        break;
      }

      // optional uint32 league_game_id = 36;
      case 36: {
        if (tag == 288) {
         parse_league_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_game_id_)));
          set_has_league_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_custom_game_timestamp;
        break;
      }

      // optional fixed32 custom_game_timestamp = 37;
      case 37: {
        if (tag == 301) {
         parse_custom_game_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
          set_has_custom_game_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_previous_match_override;
        break;
      }

      // optional uint64 previous_match_override = 38;
      case 38: {
        if (tag == 304) {
         parse_previous_match_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previous_match_override_)));
          set_has_previous_match_override();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_league_selection_priority_team;
        break;
      }

      // optional uint32 league_selection_priority_team = 39;
      case 39: {
        if (tag == 312) {
         parse_league_selection_priority_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_selection_priority_team_)));
          set_has_league_selection_priority_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_league_selection_priority_choice;
        break;
      }

      // optional .SelectionPriorityType league_selection_priority_choice = 40 [default = UNDEFINED];
      case 40: {
        if (tag == 320) {
         parse_league_selection_priority_choice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SelectionPriorityType_IsValid(value)) {
            set_league_selection_priority_choice(static_cast< ::SelectionPriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_league_non_selection_priority_choice;
        break;
      }

      // optional .SelectionPriorityType league_non_selection_priority_choice = 41 [default = UNDEFINED];
      case 41: {
        if (tag == 328) {
         parse_league_non_selection_priority_choice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SelectionPriorityType_IsValid(value)) {
            set_league_non_selection_priority_choice(static_cast< ::SelectionPriorityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(41, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_pause_setting;
        break;
      }

      // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
      case 42: {
        if (tag == 336) {
         parse_pause_setting:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LobbyDotaPauseSetting_IsValid(value)) {
            set_pause_setting(static_cast< ::LobbyDotaPauseSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(42, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_bot_difficulty_dire;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
      case 43: {
        if (tag == 344) {
         parse_bot_difficulty_dire:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(43, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_bot_radiant;
        break;
      }

      // optional uint64 bot_radiant = 44;
      case 44: {
        if (tag == 352) {
         parse_bot_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_radiant_)));
          set_has_bot_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_bot_dire;
        break;
      }

      // optional uint64 bot_dire = 45;
      case 45: {
        if (tag == 360) {
         parse_bot_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_dire_)));
          set_has_bot_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbySetDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbySetDetails)
  return false;
#undef DO_
}

void CMsgPracticeLobbySetDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbySetDetails)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string game_name = 2;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // repeated .CLobbyTeamDetails team_details = 3;
  for (int i = 0; i < this->team_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_details(i), output);
  }

  // optional uint32 server_region = 4;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_region(), output);
  }

  // optional uint32 game_mode = 5;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_mode(), output);
  }

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cm_pick(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bot_difficulty_radiant(), output);
  }

  // optional bool allow_cheats = 10;
  if (has_allow_cheats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 11;
  if (has_fill_with_bots()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 12;
  if (has_intro_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->intro_mode(), output);
  }

  // optional bool allow_spectating = 13;
  if (has_allow_spectating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_spectating(), output);
  }

  // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->game_version(), output);
  }

  // optional string pass_key = 15;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pass_key(), output);
  }

  // optional uint32 leagueid = 16;
  if (has_leagueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (has_penalty_level_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 18;
  if (has_penalty_level_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 19;
  if (has_load_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->load_game_id(), output);
  }

  // optional uint32 series_type = 20;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 21;
  if (has_radiant_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->radiant_series_wins(), output);
  }

  // optional uint32 dire_series_wins = 22;
  if (has_dire_series_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->dire_series_wins(), output);
  }

  // optional bool allchat = 23 [default = false];
  if (has_allchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->allchat(), output);
  }

  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (has_dota_tv_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->dota_tv_delay(), output);
  }

  // optional bool lan = 25;
  if (has_lan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->lan(), output);
  }

  // optional string custom_game_mode = 26;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 27;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->custom_map_name(), output);
  }

  // optional uint32 custom_difficulty = 28;
  if (has_custom_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->custom_difficulty(), output);
  }

  // optional uint64 custom_game_id = 29;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->custom_game_id(), output);
  }

  // optional uint32 custom_min_players = 30;
  if (has_custom_min_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 31;
  if (has_custom_max_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->custom_max_players(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 32;
  if (has_lan_host_ping_to_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lan_host_ping_to_server_region(), output);
  }

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 34;
  if (has_custom_game_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(34, this->custom_game_crc(), output);
  }

  // optional uint32 league_series_id = 35;
  if (has_league_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->league_series_id(), output);
  }

  // optional uint32 league_game_id = 36;
  if (has_league_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->league_game_id(), output);
  }

  // optional fixed32 custom_game_timestamp = 37;
  if (has_custom_game_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(37, this->custom_game_timestamp(), output);
  }

  // optional uint64 previous_match_override = 38;
  if (has_previous_match_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->previous_match_override(), output);
  }

  // optional uint32 league_selection_priority_team = 39;
  if (has_league_selection_priority_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->league_selection_priority_team(), output);
  }

  // optional .SelectionPriorityType league_selection_priority_choice = 40 [default = UNDEFINED];
  if (has_league_selection_priority_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->league_selection_priority_choice(), output);
  }

  // optional .SelectionPriorityType league_non_selection_priority_choice = 41 [default = UNDEFINED];
  if (has_league_non_selection_priority_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->league_non_selection_priority_choice(), output);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (has_pause_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->pause_setting(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      43, this->bot_difficulty_dire(), output);
  }

  // optional uint64 bot_radiant = 44;
  if (has_bot_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->bot_radiant(), output);
  }

  // optional uint64 bot_dire = 45;
  if (has_bot_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->bot_dire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbySetDetails)
}

::google::protobuf::uint8* CMsgPracticeLobbySetDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetDetails)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string game_name = 2;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 3;
  for (int i = 0; i < this->team_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team_details(i), target);
  }

  // optional uint32 server_region = 4;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_region(), target);
  }

  // optional uint32 game_mode = 5;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_mode(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (has_cm_pick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cm_pick(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bot_difficulty_radiant(), target);
  }

  // optional bool allow_cheats = 10;
  if (has_allow_cheats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 11;
  if (has_fill_with_bots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 12;
  if (has_intro_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->intro_mode(), target);
  }

  // optional bool allow_spectating = 13;
  if (has_allow_spectating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_spectating(), target);
  }

  // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (has_game_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->game_version(), target);
  }

  // optional string pass_key = 15;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pass_key(), target);
  }

  // optional uint32 leagueid = 16;
  if (has_leagueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (has_penalty_level_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 18;
  if (has_penalty_level_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 19;
  if (has_load_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->load_game_id(), target);
  }

  // optional uint32 series_type = 20;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 21;
  if (has_radiant_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 22;
  if (has_dire_series_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->dire_series_wins(), target);
  }

  // optional bool allchat = 23 [default = false];
  if (has_allchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->allchat(), target);
  }

  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (has_dota_tv_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->dota_tv_delay(), target);
  }

  // optional bool lan = 25;
  if (has_lan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->lan(), target);
  }

  // optional string custom_game_mode = 26;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 27;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 28;
  if (has_custom_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->custom_difficulty(), target);
  }

  // optional uint64 custom_game_id = 29;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->custom_game_id(), target);
  }

  // optional uint32 custom_min_players = 30;
  if (has_custom_min_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 31;
  if (has_custom_max_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->custom_max_players(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 32;
  if (has_lan_host_ping_to_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lan_host_ping_to_server_region(), target);
  }

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 34;
  if (has_custom_game_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(34, this->custom_game_crc(), target);
  }

  // optional uint32 league_series_id = 35;
  if (has_league_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->league_series_id(), target);
  }

  // optional uint32 league_game_id = 36;
  if (has_league_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->league_game_id(), target);
  }

  // optional fixed32 custom_game_timestamp = 37;
  if (has_custom_game_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(37, this->custom_game_timestamp(), target);
  }

  // optional uint64 previous_match_override = 38;
  if (has_previous_match_override()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->previous_match_override(), target);
  }

  // optional uint32 league_selection_priority_team = 39;
  if (has_league_selection_priority_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->league_selection_priority_team(), target);
  }

  // optional .SelectionPriorityType league_selection_priority_choice = 40 [default = UNDEFINED];
  if (has_league_selection_priority_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->league_selection_priority_choice(), target);
  }

  // optional .SelectionPriorityType league_non_selection_priority_choice = 41 [default = UNDEFINED];
  if (has_league_non_selection_priority_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->league_non_selection_priority_choice(), target);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (has_pause_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->pause_setting(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      43, this->bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 44;
  if (has_bot_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->bot_radiant(), target);
  }

  // optional uint64 bot_dire = 45;
  if (has_bot_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->bot_dire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetDetails)
  return target;
}

int CMsgPracticeLobbySetDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional string game_name = 2;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 server_region = 4;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 game_mode = 5;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
    if (has_cm_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

    // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 10;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool fill_with_bots = 11;
    if (has_fill_with_bots()) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 12;
    if (has_intro_mode()) {
      total_size += 1 + 1;
    }

    // optional bool allow_spectating = 13;
    if (has_allow_spectating()) {
      total_size += 1 + 1;
    }

    // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional string pass_key = 15;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint32 leagueid = 16;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 penalty_level_radiant = 17;
    if (has_penalty_level_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 18;
    if (has_penalty_level_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 load_game_id = 19;
    if (has_load_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 20;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 21;
    if (has_radiant_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 22;
    if (has_dire_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

    // optional bool allchat = 23 [default = false];
    if (has_allchat()) {
      total_size += 2 + 1;
    }

    // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
    if (has_dota_tv_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

    // optional bool lan = 25;
    if (has_lan()) {
      total_size += 2 + 1;
    }

    // optional string custom_game_mode = 26;
    if (has_custom_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string custom_map_name = 27;
    if (has_custom_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint32 custom_difficulty = 28;
    if (has_custom_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional uint64 custom_game_id = 29;
    if (has_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 custom_min_players = 30;
    if (has_custom_min_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

    // optional uint32 custom_max_players = 31;
    if (has_custom_max_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional uint32 lan_host_ping_to_server_region = 32;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional fixed64 custom_game_crc = 34;
    if (has_custom_game_crc()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 league_series_id = 35;
    if (has_league_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_series_id());
    }

    // optional uint32 league_game_id = 36;
    if (has_league_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_game_id());
    }

    // optional fixed32 custom_game_timestamp = 37;
    if (has_custom_game_timestamp()) {
      total_size += 2 + 4;
    }

    // optional uint64 previous_match_override = 38;
    if (has_previous_match_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previous_match_override());
    }

    // optional uint32 league_selection_priority_team = 39;
    if (has_league_selection_priority_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_selection_priority_team());
    }

    // optional .SelectionPriorityType league_selection_priority_choice = 40 [default = UNDEFINED];
    if (has_league_selection_priority_choice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->league_selection_priority_choice());
    }

    // optional .SelectionPriorityType league_non_selection_priority_choice = 41 [default = UNDEFINED];
    if (has_league_non_selection_priority_choice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->league_non_selection_priority_choice());
    }

    // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
    if (has_pause_setting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_setting());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

    // optional uint64 bot_radiant = 44;
    if (has_bot_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_radiant());
    }

    // optional uint64 bot_dire = 45;
    if (has_bot_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_dire());
    }

  }
  // repeated .CLobbyTeamDetails team_details = 3;
  total_size += 1 * this->team_details_size();
  for (int i = 0; i < this->team_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbySetDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbySetDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbySetDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetDetails::MergeFrom(const CMsgPracticeLobbySetDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_details_.MergeFrom(from.team_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_cm_pick()) {
      set_cm_pick(from.cm_pick());
    }
    if (from.has_bot_difficulty_radiant()) {
      set_bot_difficulty_radiant(from.bot_difficulty_radiant());
    }
    if (from.has_allow_cheats()) {
      set_allow_cheats(from.allow_cheats());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fill_with_bots()) {
      set_fill_with_bots(from.fill_with_bots());
    }
    if (from.has_intro_mode()) {
      set_intro_mode(from.intro_mode());
    }
    if (from.has_allow_spectating()) {
      set_allow_spectating(from.allow_spectating());
    }
    if (from.has_game_version()) {
      set_game_version(from.game_version());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_leagueid()) {
      set_leagueid(from.leagueid());
    }
    if (from.has_penalty_level_radiant()) {
      set_penalty_level_radiant(from.penalty_level_radiant());
    }
    if (from.has_penalty_level_dire()) {
      set_penalty_level_dire(from.penalty_level_dire());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_load_game_id()) {
      set_load_game_id(from.load_game_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_radiant_series_wins()) {
      set_radiant_series_wins(from.radiant_series_wins());
    }
    if (from.has_dire_series_wins()) {
      set_dire_series_wins(from.dire_series_wins());
    }
    if (from.has_allchat()) {
      set_allchat(from.allchat());
    }
    if (from.has_dota_tv_delay()) {
      set_dota_tv_delay(from.dota_tv_delay());
    }
    if (from.has_lan()) {
      set_lan(from.lan());
    }
    if (from.has_custom_game_mode()) {
      set_custom_game_mode(from.custom_game_mode());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_custom_map_name()) {
      set_custom_map_name(from.custom_map_name());
    }
    if (from.has_custom_difficulty()) {
      set_custom_difficulty(from.custom_difficulty());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_custom_min_players()) {
      set_custom_min_players(from.custom_min_players());
    }
    if (from.has_custom_max_players()) {
      set_custom_max_players(from.custom_max_players());
    }
    if (from.has_lan_host_ping_to_server_region()) {
      set_lan_host_ping_to_server_region(from.lan_host_ping_to_server_region());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_custom_game_crc()) {
      set_custom_game_crc(from.custom_game_crc());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_league_series_id()) {
      set_league_series_id(from.league_series_id());
    }
    if (from.has_league_game_id()) {
      set_league_game_id(from.league_game_id());
    }
    if (from.has_custom_game_timestamp()) {
      set_custom_game_timestamp(from.custom_game_timestamp());
    }
    if (from.has_previous_match_override()) {
      set_previous_match_override(from.previous_match_override());
    }
    if (from.has_league_selection_priority_team()) {
      set_league_selection_priority_team(from.league_selection_priority_team());
    }
    if (from.has_league_selection_priority_choice()) {
      set_league_selection_priority_choice(from.league_selection_priority_choice());
    }
    if (from.has_league_non_selection_priority_choice()) {
      set_league_non_selection_priority_choice(from.league_non_selection_priority_choice());
    }
    if (from.has_pause_setting()) {
      set_pause_setting(from.pause_setting());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_bot_difficulty_dire()) {
      set_bot_difficulty_dire(from.bot_difficulty_dire());
    }
    if (from.has_bot_radiant()) {
      set_bot_radiant(from.bot_radiant());
    }
    if (from.has_bot_dire()) {
      set_bot_dire(from.bot_dire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbySetDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetDetails::CopyFrom(const CMsgPracticeLobbySetDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetDetails::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbySetDetails::Swap(CMsgPracticeLobbySetDetails* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(game_name_, other->game_name_);
    team_details_.Swap(&other->team_details_);
    std::swap(server_region_, other->server_region_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(cm_pick_, other->cm_pick_);
    std::swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
    std::swap(allow_cheats_, other->allow_cheats_);
    std::swap(fill_with_bots_, other->fill_with_bots_);
    std::swap(intro_mode_, other->intro_mode_);
    std::swap(allow_spectating_, other->allow_spectating_);
    std::swap(game_version_, other->game_version_);
    std::swap(pass_key_, other->pass_key_);
    std::swap(leagueid_, other->leagueid_);
    std::swap(penalty_level_radiant_, other->penalty_level_radiant_);
    std::swap(penalty_level_dire_, other->penalty_level_dire_);
    std::swap(load_game_id_, other->load_game_id_);
    std::swap(series_type_, other->series_type_);
    std::swap(radiant_series_wins_, other->radiant_series_wins_);
    std::swap(dire_series_wins_, other->dire_series_wins_);
    std::swap(allchat_, other->allchat_);
    std::swap(dota_tv_delay_, other->dota_tv_delay_);
    std::swap(lan_, other->lan_);
    std::swap(custom_game_mode_, other->custom_game_mode_);
    std::swap(custom_map_name_, other->custom_map_name_);
    std::swap(custom_difficulty_, other->custom_difficulty_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(custom_min_players_, other->custom_min_players_);
    std::swap(custom_max_players_, other->custom_max_players_);
    std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
    std::swap(visibility_, other->visibility_);
    std::swap(custom_game_crc_, other->custom_game_crc_);
    std::swap(league_series_id_, other->league_series_id_);
    std::swap(league_game_id_, other->league_game_id_);
    std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
    std::swap(previous_match_override_, other->previous_match_override_);
    std::swap(league_selection_priority_team_, other->league_selection_priority_team_);
    std::swap(league_selection_priority_choice_, other->league_selection_priority_choice_);
    std::swap(league_non_selection_priority_choice_, other->league_non_selection_priority_choice_);
    std::swap(pause_setting_, other->pause_setting_);
    std::swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
    std::swap(bot_radiant_, other->bot_radiant_);
    std::swap(bot_dire_, other->bot_dire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbySetDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbySetDetails_descriptor_;
  metadata.reflection = CMsgPracticeLobbySetDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyCreate_SaveGame::kDataFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kVersionFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kSteamIdFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyCreate.SaveGame)
}

void CMsgPracticeLobbyCreate_SaveGame::InitAsDefaultInstance() {
}

CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCreate.SaveGame)
}

void CMsgPracticeLobbyCreate_SaveGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  signature_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyCreate_SaveGame::~CMsgPracticeLobbyCreate_SaveGame() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCreate.SaveGame)
  SharedDtor();
}

void CMsgPracticeLobbyCreate_SaveGame::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyCreate_SaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCreate_SaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyCreate_SaveGame_descriptor_;
}

const CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate_SaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate_SaveGame::default_instance_ = NULL;

CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate_SaveGame::New() const {
  return new CMsgPracticeLobbyCreate_SaveGame;
}

void CMsgPracticeLobbyCreate_SaveGame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPracticeLobbyCreate_SaveGame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(steam_id_, version_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyCreate_SaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyCreate.SaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (tag == 25) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_signature;
        break;
      }

      // optional fixed64 signature = 4;
      case 4: {
        if (tag == 33) {
         parse_signature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
          set_has_signature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyCreate.SaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyCreate.SaveGame)
  return false;
#undef DO_
}

void CMsgPracticeLobbyCreate_SaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyCreate.SaveGame)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional fixed64 steam_id = 3;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  // optional fixed64 signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyCreate.SaveGame)
}

::google::protobuf::uint8* CMsgPracticeLobbyCreate_SaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCreate.SaveGame)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional fixed64 steam_id = 3;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  // optional fixed64 signature = 4;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCreate.SaveGame)
  return target;
}

int CMsgPracticeLobbyCreate_SaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional fixed64 steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 4;
    if (has_signature()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate_SaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyCreate_SaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate_SaveGame::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyCreate_SaveGame::Swap(CMsgPracticeLobbyCreate_SaveGame* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(version_, other->version_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyCreate_SaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyCreate_SaveGame_descriptor_;
  metadata.reflection = CMsgPracticeLobbyCreate_SaveGame_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPracticeLobbyCreate::kSearchKeyFieldNumber;
const int CMsgPracticeLobbyCreate::kPassKeyFieldNumber;
const int CMsgPracticeLobbyCreate::kClientVersionFieldNumber;
const int CMsgPracticeLobbyCreate::kLobbyDetailsFieldNumber;
const int CMsgPracticeLobbyCreate::kSaveGameFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyCreate)
}

void CMsgPracticeLobbyCreate::InitAsDefaultInstance() {
  lobby_details_ = const_cast< ::CMsgPracticeLobbySetDetails*>(&::CMsgPracticeLobbySetDetails::default_instance());
  save_game_ = const_cast< ::CMsgPracticeLobbyCreate_SaveGame*>(&::CMsgPracticeLobbyCreate_SaveGame::default_instance());
}

CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCreate)
}

void CMsgPracticeLobbyCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_ = 0u;
  lobby_details_ = NULL;
  save_game_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyCreate::~CMsgPracticeLobbyCreate() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCreate)
  SharedDtor();
}

void CMsgPracticeLobbyCreate::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (this != default_instance_) {
    delete lobby_details_;
    delete save_game_;
  }
}

void CMsgPracticeLobbyCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyCreate_descriptor_;
}

const CMsgPracticeLobbyCreate& CMsgPracticeLobbyCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyCreate* CMsgPracticeLobbyCreate::default_instance_ = NULL;

CMsgPracticeLobbyCreate* CMsgPracticeLobbyCreate::New() const {
  return new CMsgPracticeLobbyCreate;
}

void CMsgPracticeLobbyCreate::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_key_->clear();
      }
    }
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_key_->clear();
      }
    }
    client_version_ = 0u;
    if (has_lobby_details()) {
      if (lobby_details_ != NULL) lobby_details_->::CMsgPracticeLobbySetDetails::Clear();
    }
    if (has_save_game()) {
      if (save_game_ != NULL) save_game_->::CMsgPracticeLobbyCreate_SaveGame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 5;
      case 5: {
        if (tag == 42) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 6;
      case 6: {
        if (tag == 48) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_lobby_details;
        break;
      }

      // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
      case 7: {
        if (tag == 58) {
         parse_lobby_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_save_game;
        break;
      }

      // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
      case 8: {
        if (tag == 66) {
         parse_save_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyCreate)
  return false;
#undef DO_
}

void CMsgPracticeLobbyCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional string pass_key = 5;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pass_key(), output);
  }

  // optional uint32 client_version = 6;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_version(), output);
  }

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  if (has_lobby_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lobby_details(), output);
  }

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (has_save_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->save_game(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyCreate)
}

::google::protobuf::uint8* CMsgPracticeLobbyCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional string pass_key = 5;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pass_key(), target);
  }

  // optional uint32 client_version = 6;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_version(), target);
  }

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  if (has_lobby_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lobby_details(), target);
  }

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (has_save_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->save_game(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCreate)
  return target;
}

int CMsgPracticeLobbyCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string pass_key = 5;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint32 client_version = 6;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
    if (has_lobby_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobby_details());
    }

    // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
    if (has_save_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_game());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate::MergeFrom(const CMsgPracticeLobbyCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_lobby_details()) {
      mutable_lobby_details()->::CMsgPracticeLobbySetDetails::MergeFrom(from.lobby_details());
    }
    if (from.has_save_game()) {
      mutable_save_game()->::CMsgPracticeLobbyCreate_SaveGame::MergeFrom(from.save_game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate::CopyFrom(const CMsgPracticeLobbyCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyCreate::Swap(CMsgPracticeLobbyCreate* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(pass_key_, other->pass_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(lobby_details_, other->lobby_details_);
    std::swap(save_game_, other->save_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyCreate_descriptor_;
  metadata.reflection = CMsgPracticeLobbyCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbySetTeamSlot::kTeamFieldNumber;
const int CMsgPracticeLobbySetTeamSlot::kSlotFieldNumber;
const int CMsgPracticeLobbySetTeamSlot::kBotDifficultyFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbySetTeamSlot)
}

void CMsgPracticeLobbySetTeamSlot::InitAsDefaultInstance() {
}

CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetTeamSlot)
}

void CMsgPracticeLobbySetTeamSlot::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  slot_ = 0u;
  bot_difficulty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbySetTeamSlot::~CMsgPracticeLobbySetTeamSlot() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetTeamSlot)
  SharedDtor();
}

void CMsgPracticeLobbySetTeamSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbySetTeamSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetTeamSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbySetTeamSlot_descriptor_;
}

const CMsgPracticeLobbySetTeamSlot& CMsgPracticeLobbySetTeamSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbySetTeamSlot* CMsgPracticeLobbySetTeamSlot::default_instance_ = NULL;

CMsgPracticeLobbySetTeamSlot* CMsgPracticeLobbySetTeamSlot::New() const {
  return new CMsgPracticeLobbySetTeamSlot;
}

void CMsgPracticeLobbySetTeamSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPracticeLobbySetTeamSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_, bot_difficulty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbySetTeamSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbySetTeamSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional uint32 slot = 2;
      case 2: {
        if (tag == 16) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bot_difficulty;
        break;
      }

      // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (tag == 24) {
         parse_bot_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbySetTeamSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbySetTeamSlot)
  return false;
#undef DO_
}

void CMsgPracticeLobbySetTeamSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbySetTeamSlot)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional uint32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bot_difficulty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbySetTeamSlot)
}

::google::protobuf::uint8* CMsgPracticeLobbySetTeamSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetTeamSlot)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional uint32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_bot_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bot_difficulty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetTeamSlot)
  return target;
}

int CMsgPracticeLobbySetTeamSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbySetTeamSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbySetTeamSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const CMsgPracticeLobbySetTeamSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_bot_difficulty()) {
      set_bot_difficulty(from.bot_difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const CMsgPracticeLobbySetTeamSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetTeamSlot::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbySetTeamSlot::Swap(CMsgPracticeLobbySetTeamSlot* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(slot_, other->slot_);
    std::swap(bot_difficulty_, other->bot_difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbySetTeamSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbySetTeamSlot_descriptor_;
  metadata.reflection = CMsgPracticeLobbySetTeamSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbySetCoach::kTeamFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbySetCoach)
}

void CMsgPracticeLobbySetCoach::InitAsDefaultInstance() {
}

CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetCoach)
}

void CMsgPracticeLobbySetCoach::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbySetCoach::~CMsgPracticeLobbySetCoach() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetCoach)
  SharedDtor();
}

void CMsgPracticeLobbySetCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbySetCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbySetCoach_descriptor_;
}

const CMsgPracticeLobbySetCoach& CMsgPracticeLobbySetCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbySetCoach* CMsgPracticeLobbySetCoach::default_instance_ = NULL;

CMsgPracticeLobbySetCoach* CMsgPracticeLobbySetCoach::New() const {
  return new CMsgPracticeLobbySetCoach;
}

void CMsgPracticeLobbySetCoach::Clear() {
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbySetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbySetCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbySetCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbySetCoach)
  return false;
#undef DO_
}

void CMsgPracticeLobbySetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbySetCoach)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbySetCoach)
}

::google::protobuf::uint8* CMsgPracticeLobbySetCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetCoach)
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetCoach)
  return target;
}

int CMsgPracticeLobbySetCoach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbySetCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbySetCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbySetCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetCoach::MergeFrom(const CMsgPracticeLobbySetCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbySetCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetCoach::CopyFrom(const CMsgPracticeLobbySetCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetCoach::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbySetCoach::Swap(CMsgPracticeLobbySetCoach* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbySetCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbySetCoach_descriptor_;
  metadata.reflection = CMsgPracticeLobbySetCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyJoinBroadcastChannel::kChannelFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredDescriptionFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredCountryCodeFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredLanguageCodeFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyJoinBroadcastChannel)
}

void CMsgPracticeLobbyJoinBroadcastChannel::InitAsDefaultInstance() {
}

CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoinBroadcastChannel)
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = 0u;
  preferred_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyJoinBroadcastChannel::~CMsgPracticeLobbyJoinBroadcastChannel() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoinBroadcastChannel)
  SharedDtor();
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedDtor() {
  if (preferred_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_description_;
  }
  if (preferred_country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_country_code_;
  }
  if (preferred_language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_language_code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoinBroadcastChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyJoinBroadcastChannel_descriptor_;
}

const CMsgPracticeLobbyJoinBroadcastChannel& CMsgPracticeLobbyJoinBroadcastChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyJoinBroadcastChannel* CMsgPracticeLobbyJoinBroadcastChannel::default_instance_ = NULL;

CMsgPracticeLobbyJoinBroadcastChannel* CMsgPracticeLobbyJoinBroadcastChannel::New() const {
  return new CMsgPracticeLobbyJoinBroadcastChannel;
}

void CMsgPracticeLobbyJoinBroadcastChannel::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    channel_ = 0u;
    if (has_preferred_description()) {
      if (preferred_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preferred_description_->clear();
      }
    }
    if (has_preferred_country_code()) {
      if (preferred_country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preferred_country_code_->clear();
      }
    }
    if (has_preferred_language_code()) {
      if (preferred_language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preferred_language_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyJoinBroadcastChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyJoinBroadcastChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_preferred_description;
        break;
      }

      // optional string preferred_description = 2;
      case 2: {
        if (tag == 18) {
         parse_preferred_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_description().data(), this->preferred_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preferred_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_preferred_country_code;
        break;
      }

      // optional string preferred_country_code = 3;
      case 3: {
        if (tag == 26) {
         parse_preferred_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_country_code().data(), this->preferred_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preferred_country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_preferred_language_code;
        break;
      }

      // optional string preferred_language_code = 4;
      case 4: {
        if (tag == 34) {
         parse_preferred_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_language_code().data(), this->preferred_language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preferred_language_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyJoinBroadcastChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyJoinBroadcastChannel)
  return false;
#undef DO_
}

void CMsgPracticeLobbyJoinBroadcastChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyJoinBroadcastChannel)
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional string preferred_description = 2;
  if (has_preferred_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_description().data(), this->preferred_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->preferred_description(), output);
  }

  // optional string preferred_country_code = 3;
  if (has_preferred_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_country_code().data(), this->preferred_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->preferred_country_code(), output);
  }

  // optional string preferred_language_code = 4;
  if (has_preferred_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_language_code().data(), this->preferred_language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preferred_language_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyJoinBroadcastChannel)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoinBroadcastChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoinBroadcastChannel)
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional string preferred_description = 2;
  if (has_preferred_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_description().data(), this->preferred_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->preferred_description(), target);
  }

  // optional string preferred_country_code = 3;
  if (has_preferred_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_country_code().data(), this->preferred_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->preferred_country_code(), target);
  }

  // optional string preferred_language_code = 4;
  if (has_preferred_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_language_code().data(), this->preferred_language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preferred_language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preferred_language_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoinBroadcastChannel)
  return target;
}

int CMsgPracticeLobbyJoinBroadcastChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional string preferred_description = 2;
    if (has_preferred_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_description());
    }

    // optional string preferred_country_code = 3;
    if (has_preferred_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_country_code());
    }

    // optional string preferred_language_code = 4;
    if (has_preferred_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_language_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinBroadcastChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyJoinBroadcastChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_preferred_description()) {
      set_preferred_description(from.preferred_description());
    }
    if (from.has_preferred_country_code()) {
      set_preferred_country_code(from.preferred_country_code());
    }
    if (from.has_preferred_language_code()) {
      set_preferred_language_code(from.preferred_language_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinBroadcastChannel::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyJoinBroadcastChannel::Swap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(preferred_description_, other->preferred_description_);
    std::swap(preferred_country_code_, other->preferred_country_code_);
    std::swap(preferred_language_code_, other->preferred_language_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyJoinBroadcastChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyJoinBroadcastChannel_descriptor_;
  metadata.reflection = CMsgPracticeLobbyJoinBroadcastChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyCloseBroadcastChannel::kChannelFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyCloseBroadcastChannel)
}

void CMsgPracticeLobbyCloseBroadcastChannel::InitAsDefaultInstance() {
}

CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCloseBroadcastChannel)
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyCloseBroadcastChannel::~CMsgPracticeLobbyCloseBroadcastChannel() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCloseBroadcastChannel)
  SharedDtor();
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCloseBroadcastChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyCloseBroadcastChannel_descriptor_;
}

const CMsgPracticeLobbyCloseBroadcastChannel& CMsgPracticeLobbyCloseBroadcastChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyCloseBroadcastChannel* CMsgPracticeLobbyCloseBroadcastChannel::default_instance_ = NULL;

CMsgPracticeLobbyCloseBroadcastChannel* CMsgPracticeLobbyCloseBroadcastChannel::New() const {
  return new CMsgPracticeLobbyCloseBroadcastChannel;
}

void CMsgPracticeLobbyCloseBroadcastChannel::Clear() {
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyCloseBroadcastChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyCloseBroadcastChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyCloseBroadcastChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyCloseBroadcastChannel)
  return false;
#undef DO_
}

void CMsgPracticeLobbyCloseBroadcastChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyCloseBroadcastChannel)
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyCloseBroadcastChannel)
}

::google::protobuf::uint8* CMsgPracticeLobbyCloseBroadcastChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCloseBroadcastChannel)
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCloseBroadcastChannel)
  return target;
}

int CMsgPracticeLobbyCloseBroadcastChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyCloseBroadcastChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyCloseBroadcastChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCloseBroadcastChannel::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyCloseBroadcastChannel::Swap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyCloseBroadcastChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyCloseBroadcastChannel_descriptor_;
  metadata.reflection = CMsgPracticeLobbyCloseBroadcastChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InitAsDefaultInstance() {
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  SharedDtor();
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_descriptor_;
}

const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance_ = NULL;

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::New() const {
  return new CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return false;
#undef DO_
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

::google::protobuf::uint8* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return target;
}

int CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Swap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_descriptor_;
  metadata.reflection = CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyKick::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyKick::CMsgPracticeLobbyKick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyKick)
}

void CMsgPracticeLobbyKick::InitAsDefaultInstance() {
}

CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyKick)
}

void CMsgPracticeLobbyKick::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyKick::~CMsgPracticeLobbyKick() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyKick)
  SharedDtor();
}

void CMsgPracticeLobbyKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyKick_descriptor_;
}

const CMsgPracticeLobbyKick& CMsgPracticeLobbyKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyKick* CMsgPracticeLobbyKick::default_instance_ = NULL;

CMsgPracticeLobbyKick* CMsgPracticeLobbyKick::New() const {
  return new CMsgPracticeLobbyKick;
}

void CMsgPracticeLobbyKick::Clear() {
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyKick)
  return false;
#undef DO_
}

void CMsgPracticeLobbyKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyKick)
  // optional uint32 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyKick)
}

::google::protobuf::uint8* CMsgPracticeLobbyKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyKick)
  // optional uint32 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyKick)
  return target;
}

int CMsgPracticeLobbyKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKick::MergeFrom(const CMsgPracticeLobbyKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKick::CopyFrom(const CMsgPracticeLobbyKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKick::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyKick::Swap(CMsgPracticeLobbyKick* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyKick_descriptor_;
  metadata.reflection = CMsgPracticeLobbyKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyKickFromTeam::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyKickFromTeam)
}

void CMsgPracticeLobbyKickFromTeam::InitAsDefaultInstance() {
}

CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyKickFromTeam)
}

void CMsgPracticeLobbyKickFromTeam::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyKickFromTeam::~CMsgPracticeLobbyKickFromTeam() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyKickFromTeam)
  SharedDtor();
}

void CMsgPracticeLobbyKickFromTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyKickFromTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyKickFromTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyKickFromTeam_descriptor_;
}

const CMsgPracticeLobbyKickFromTeam& CMsgPracticeLobbyKickFromTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyKickFromTeam* CMsgPracticeLobbyKickFromTeam::default_instance_ = NULL;

CMsgPracticeLobbyKickFromTeam* CMsgPracticeLobbyKickFromTeam::New() const {
  return new CMsgPracticeLobbyKickFromTeam;
}

void CMsgPracticeLobbyKickFromTeam::Clear() {
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyKickFromTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyKickFromTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyKickFromTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyKickFromTeam)
  return false;
#undef DO_
}

void CMsgPracticeLobbyKickFromTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyKickFromTeam)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyKickFromTeam)
}

::google::protobuf::uint8* CMsgPracticeLobbyKickFromTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyKickFromTeam)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyKickFromTeam)
  return target;
}

int CMsgPracticeLobbyKickFromTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyKickFromTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyKickFromTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const CMsgPracticeLobbyKickFromTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const CMsgPracticeLobbyKickFromTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKickFromTeam::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyKickFromTeam::Swap(CMsgPracticeLobbyKickFromTeam* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyKickFromTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyKickFromTeam_descriptor_;
  metadata.reflection = CMsgPracticeLobbyKickFromTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyLeave)
}

void CMsgPracticeLobbyLeave::InitAsDefaultInstance() {
}

CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyLeave)
}

void CMsgPracticeLobbyLeave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyLeave::~CMsgPracticeLobbyLeave() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyLeave)
  SharedDtor();
}

void CMsgPracticeLobbyLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyLeave_descriptor_;
}

const CMsgPracticeLobbyLeave& CMsgPracticeLobbyLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyLeave* CMsgPracticeLobbyLeave::default_instance_ = NULL;

CMsgPracticeLobbyLeave* CMsgPracticeLobbyLeave::New() const {
  return new CMsgPracticeLobbyLeave;
}

void CMsgPracticeLobbyLeave::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyLeave)
  return false;
#undef DO_
}

void CMsgPracticeLobbyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyLeave)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyLeave)
}

::google::protobuf::uint8* CMsgPracticeLobbyLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyLeave)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyLeave)
  return target;
}

int CMsgPracticeLobbyLeave::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLeave::MergeFrom(const CMsgPracticeLobbyLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLeave::CopyFrom(const CMsgPracticeLobbyLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLeave::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyLeave::Swap(CMsgPracticeLobbyLeave* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyLeave_descriptor_;
  metadata.reflection = CMsgPracticeLobbyLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyLaunch::kClientVersionFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyLaunch)
}

void CMsgPracticeLobbyLaunch::InitAsDefaultInstance() {
}

CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyLaunch)
}

void CMsgPracticeLobbyLaunch::SharedCtor() {
  _cached_size_ = 0;
  client_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyLaunch::~CMsgPracticeLobbyLaunch() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyLaunch)
  SharedDtor();
}

void CMsgPracticeLobbyLaunch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyLaunch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyLaunch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyLaunch_descriptor_;
}

const CMsgPracticeLobbyLaunch& CMsgPracticeLobbyLaunch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyLaunch* CMsgPracticeLobbyLaunch::default_instance_ = NULL;

CMsgPracticeLobbyLaunch* CMsgPracticeLobbyLaunch::New() const {
  return new CMsgPracticeLobbyLaunch;
}

void CMsgPracticeLobbyLaunch::Clear() {
  client_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyLaunch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 5;
      case 5: {
        if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyLaunch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyLaunch)
  return false;
#undef DO_
}

void CMsgPracticeLobbyLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyLaunch)
  // optional uint32 client_version = 5;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyLaunch)
}

::google::protobuf::uint8* CMsgPracticeLobbyLaunch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyLaunch)
  // optional uint32 client_version = 5;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyLaunch)
  return target;
}

int CMsgPracticeLobbyLaunch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_version = 5;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyLaunch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyLaunch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyLaunch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLaunch::MergeFrom(const CMsgPracticeLobbyLaunch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyLaunch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLaunch::CopyFrom(const CMsgPracticeLobbyLaunch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLaunch::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyLaunch::Swap(CMsgPracticeLobbyLaunch* other) {
  if (other != this) {
    std::swap(client_version_, other->client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyLaunch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyLaunch_descriptor_;
  metadata.reflection = CMsgPracticeLobbyLaunch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgApplyTeamToPracticeLobby::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgApplyTeamToPracticeLobby)
}

void CMsgApplyTeamToPracticeLobby::InitAsDefaultInstance() {
}

CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgApplyTeamToPracticeLobby)
}

void CMsgApplyTeamToPracticeLobby::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgApplyTeamToPracticeLobby::~CMsgApplyTeamToPracticeLobby() {
  // @@protoc_insertion_point(destructor:CMsgApplyTeamToPracticeLobby)
  SharedDtor();
}

void CMsgApplyTeamToPracticeLobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgApplyTeamToPracticeLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyTeamToPracticeLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgApplyTeamToPracticeLobby_descriptor_;
}

const CMsgApplyTeamToPracticeLobby& CMsgApplyTeamToPracticeLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgApplyTeamToPracticeLobby* CMsgApplyTeamToPracticeLobby::default_instance_ = NULL;

CMsgApplyTeamToPracticeLobby* CMsgApplyTeamToPracticeLobby::New() const {
  return new CMsgApplyTeamToPracticeLobby;
}

void CMsgApplyTeamToPracticeLobby::Clear() {
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgApplyTeamToPracticeLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgApplyTeamToPracticeLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgApplyTeamToPracticeLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgApplyTeamToPracticeLobby)
  return false;
#undef DO_
}

void CMsgApplyTeamToPracticeLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgApplyTeamToPracticeLobby)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgApplyTeamToPracticeLobby)
}

::google::protobuf::uint8* CMsgApplyTeamToPracticeLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyTeamToPracticeLobby)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyTeamToPracticeLobby)
  return target;
}

int CMsgApplyTeamToPracticeLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgApplyTeamToPracticeLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgApplyTeamToPracticeLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const CMsgApplyTeamToPracticeLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const CMsgApplyTeamToPracticeLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyTeamToPracticeLobby::IsInitialized() const {

  return true;
}

void CMsgApplyTeamToPracticeLobby::Swap(CMsgApplyTeamToPracticeLobby* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgApplyTeamToPracticeLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgApplyTeamToPracticeLobby_descriptor_;
  metadata.reflection = CMsgApplyTeamToPracticeLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClearPracticeLobbyTeam)
}

void CMsgClearPracticeLobbyTeam::InitAsDefaultInstance() {
}

CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam(const CMsgClearPracticeLobbyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClearPracticeLobbyTeam)
}

void CMsgClearPracticeLobbyTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClearPracticeLobbyTeam::~CMsgClearPracticeLobbyTeam() {
  // @@protoc_insertion_point(destructor:CMsgClearPracticeLobbyTeam)
  SharedDtor();
}

void CMsgClearPracticeLobbyTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClearPracticeLobbyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearPracticeLobbyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClearPracticeLobbyTeam_descriptor_;
}

const CMsgClearPracticeLobbyTeam& CMsgClearPracticeLobbyTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgClearPracticeLobbyTeam* CMsgClearPracticeLobbyTeam::default_instance_ = NULL;

CMsgClearPracticeLobbyTeam* CMsgClearPracticeLobbyTeam::New() const {
  return new CMsgClearPracticeLobbyTeam;
}

void CMsgClearPracticeLobbyTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClearPracticeLobbyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClearPracticeLobbyTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClearPracticeLobbyTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClearPracticeLobbyTeam)
  return false;
#undef DO_
}

void CMsgClearPracticeLobbyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClearPracticeLobbyTeam)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClearPracticeLobbyTeam)
}

::google::protobuf::uint8* CMsgClearPracticeLobbyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearPracticeLobbyTeam)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearPracticeLobbyTeam)
  return target;
}

int CMsgClearPracticeLobbyTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClearPracticeLobbyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClearPracticeLobbyTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const CMsgClearPracticeLobbyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClearPracticeLobbyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearPracticeLobbyTeam::CopyFrom(const CMsgClearPracticeLobbyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearPracticeLobbyTeam::IsInitialized() const {

  return true;
}

void CMsgClearPracticeLobbyTeam::Swap(CMsgClearPracticeLobbyTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClearPracticeLobbyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClearPracticeLobbyTeam_descriptor_;
  metadata.reflection = CMsgClearPracticeLobbyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyList::kTournamentGamesFieldNumber;
const int CMsgPracticeLobbyList::kPassKeyFieldNumber;
const int CMsgPracticeLobbyList::kRegionFieldNumber;
const int CMsgPracticeLobbyList::kGameModeFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyList::CMsgPracticeLobbyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyList)
}

void CMsgPracticeLobbyList::InitAsDefaultInstance() {
}

CMsgPracticeLobbyList::CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyList)
}

void CMsgPracticeLobbyList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tournament_games_ = false;
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = 0u;
  game_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyList::~CMsgPracticeLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyList)
  SharedDtor();
}

void CMsgPracticeLobbyList::SharedDtor() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyList_descriptor_;
}

const CMsgPracticeLobbyList& CMsgPracticeLobbyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyList* CMsgPracticeLobbyList::default_instance_ = NULL;

CMsgPracticeLobbyList* CMsgPracticeLobbyList::New() const {
  return new CMsgPracticeLobbyList;
}

void CMsgPracticeLobbyList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPracticeLobbyList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(tournament_games_, game_mode_);
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool tournament_games = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_games_)));
          set_has_tournament_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 2;
      case 2: {
        if (tag == 18) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_region;
        break;
      }

      // optional uint32 region = 3;
      case 3: {
        if (tag == 24) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_mode;
        break;
      }

      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (tag == 32) {
         parse_game_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyList)
  return false;
#undef DO_
}

void CMsgPracticeLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyList)
  // optional bool tournament_games = 1;
  if (has_tournament_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tournament_games(), output);
  }

  // optional string pass_key = 2;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass_key(), output);
  }

  // optional uint32 region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region(), output);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyList)
}

::google::protobuf::uint8* CMsgPracticeLobbyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyList)
  // optional bool tournament_games = 1;
  if (has_tournament_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tournament_games(), target);
  }

  // optional string pass_key = 2;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass_key(), target);
  }

  // optional uint32 region = 3;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyList)
  return target;
}

int CMsgPracticeLobbyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool tournament_games = 1;
    if (has_tournament_games()) {
      total_size += 1 + 1;
    }

    // optional string pass_key = 2;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyList::MergeFrom(const CMsgPracticeLobbyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_games()) {
      set_tournament_games(from.tournament_games());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyList::CopyFrom(const CMsgPracticeLobbyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyList::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyList::Swap(CMsgPracticeLobbyList* other) {
  if (other != this) {
    std::swap(tournament_games_, other->tournament_games_);
    std::swap(pass_key_, other->pass_key_);
    std::swap(region_, other->region_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyList_descriptor_;
  metadata.reflection = CMsgPracticeLobbyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyListResponseEntry_CLobbyMember::kAccountIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry_CLobbyMember::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::InitAsDefaultInstance() {
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember::~CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  SharedDtor();
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponseEntry_CLobbyMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyListResponseEntry_CLobbyMember_descriptor_;
}

const CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance_ = NULL;

CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry_CLobbyMember::New() const {
  return new CMsgPracticeLobbyListResponseEntry_CLobbyMember;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    account_id_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return false;
#undef DO_
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponseEntry_CLobbyMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return target;
}

int CMsgPracticeLobbyListResponseEntry_CLobbyMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry_CLobbyMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyListResponseEntry_CLobbyMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponseEntry_CLobbyMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyListResponseEntry_CLobbyMember_descriptor_;
  metadata.reflection = CMsgPracticeLobbyListResponseEntry_CLobbyMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPracticeLobbyListResponseEntry::kIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kTournamentIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kTournamentGameIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kMembersFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kRequiresPassKeyFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLeaderAccountIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGuildIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGuildLogoFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kNameFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kCustomGameModeFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGameModeFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kFriendPresentFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kPlayersFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kCustomMapNameFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kMaxPlayerCountFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kServerRegionFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLanHostPingToServerRegionFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyListResponseEntry)
}

void CMsgPracticeLobbyListResponseEntry::InitAsDefaultInstance() {
}

CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponseEntry)
}

void CMsgPracticeLobbyListResponseEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  tournament_id_ = 0u;
  tournament_game_id_ = 0u;
  requires_pass_key_ = false;
  leader_account_id_ = 0u;
  guild_id_ = 0u;
  guild_logo_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_ = 0;
  friend_present_ = false;
  players_ = 0u;
  custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_player_count_ = 0u;
  server_region_ = 0u;
  lan_host_ping_to_server_region_ = 0u;
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyListResponseEntry::~CMsgPracticeLobbyListResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponseEntry)
  SharedDtor();
}

void CMsgPracticeLobbyListResponseEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyListResponseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponseEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyListResponseEntry_descriptor_;
}

const CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponseEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponseEntry::default_instance_ = NULL;

CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponseEntry::New() const {
  return new CMsgPracticeLobbyListResponseEntry;
}

void CMsgPracticeLobbyListResponseEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPracticeLobbyListResponseEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(id_, tournament_game_id_);
    ZR_(leader_account_id_, guild_logo_);
    requires_pass_key_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(friend_present_, game_mode_);
    ZR_(players_, server_region_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_custom_game_mode()) {
      if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_game_mode_->clear();
      }
    }
    if (has_custom_map_name()) {
      if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_map_name_->clear();
      }
    }
  }
  ZR_(lan_host_ping_to_server_region_, league_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyListResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyListResponseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tournament_id;
        break;
      }

      // optional uint32 tournament_id = 3;
      case 3: {
        if (tag == 24) {
         parse_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tournament_game_id;
        break;
      }

      // optional uint32 tournament_game_id = 4;
      case 4: {
        if (tag == 32) {
         parse_tournament_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
          set_has_tournament_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        break;
      }

      // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
      case 5: {
        if (tag == 42) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        if (input->ExpectTag(48)) goto parse_requires_pass_key;
        break;
      }

      // optional bool requires_pass_key = 6;
      case 6: {
        if (tag == 48) {
         parse_requires_pass_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
          set_has_requires_pass_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_leader_account_id;
        break;
      }

      // optional uint32 leader_account_id = 7;
      case 7: {
        if (tag == 56) {
         parse_leader_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
          set_has_leader_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 8;
      case 8: {
        if (tag == 64) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_guild_logo;
        break;
      }

      // optional uint64 guild_logo = 9;
      case 9: {
        if (tag == 72) {
         parse_guild_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
          set_has_guild_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (tag == 82) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_custom_game_mode;
        break;
      }

      // optional string custom_game_mode = 11;
      case 11: {
        if (tag == 90) {
         parse_custom_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_game_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_game_mode;
        break;
      }

      // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
      case 12: {
        if (tag == 96) {
         parse_game_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_friend_present;
        break;
      }

      // optional bool friend_present = 13;
      case 13: {
        if (tag == 104) {
         parse_friend_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_present_)));
          set_has_friend_present();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_players;
        break;
      }

      // optional uint32 players = 14;
      case 14: {
        if (tag == 112) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_custom_map_name;
        break;
      }

      // optional string custom_map_name = 15;
      case 15: {
        if (tag == 122) {
         parse_custom_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_max_player_count;
        break;
      }

      // optional uint32 max_player_count = 16;
      case 16: {
        if (tag == 128) {
         parse_max_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
          set_has_max_player_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_server_region;
        break;
      }

      // optional uint32 server_region = 17;
      case 17: {
        if (tag == 136) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_lan_host_ping_to_server_region;
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 18;
      case 18: {
        if (tag == 144) {
         parse_lan_host_ping_to_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
          set_has_lan_host_ping_to_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 19;
      case 19: {
        if (tag == 152) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyListResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyListResponseEntry)
  return false;
#undef DO_
}

void CMsgPracticeLobbyListResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyListResponseEntry)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 tournament_id = 3;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 4;
  if (has_tournament_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tournament_game_id(), output);
  }

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional bool requires_pass_key = 6;
  if (has_requires_pass_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 7;
  if (has_leader_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leader_account_id(), output);
  }

  // optional uint32 guild_id = 8;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 9;
  if (has_guild_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->guild_logo(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string custom_game_mode = 11;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->custom_game_mode(), output);
  }

  // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->game_mode(), output);
  }

  // optional bool friend_present = 13;
  if (has_friend_present()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->friend_present(), output);
  }

  // optional uint32 players = 14;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->players(), output);
  }

  // optional string custom_map_name = 15;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->custom_map_name(), output);
  }

  // optional uint32 max_player_count = 16;
  if (has_max_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_player_count(), output);
  }

  // optional uint32 server_region = 17;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->server_region(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 18;
  if (has_lan_host_ping_to_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->lan_host_ping_to_server_region(), output);
  }

  // optional uint32 league_id = 19;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->league_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyListResponseEntry)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponseEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponseEntry)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 tournament_id = 3;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 4;
  if (has_tournament_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tournament_game_id(), target);
  }

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->members(i), target);
  }

  // optional bool requires_pass_key = 6;
  if (has_requires_pass_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 7;
  if (has_leader_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leader_account_id(), target);
  }

  // optional uint32 guild_id = 8;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 9;
  if (has_guild_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->guild_logo(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string custom_game_mode = 11;
  if (has_custom_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->custom_game_mode(), target);
  }

  // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->game_mode(), target);
  }

  // optional bool friend_present = 13;
  if (has_friend_present()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->friend_present(), target);
  }

  // optional uint32 players = 14;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->players(), target);
  }

  // optional string custom_map_name = 15;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->custom_map_name(), target);
  }

  // optional uint32 max_player_count = 16;
  if (has_max_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_player_count(), target);
  }

  // optional uint32 server_region = 17;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->server_region(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 18;
  if (has_lan_host_ping_to_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->lan_host_ping_to_server_region(), target);
  }

  // optional uint32 league_id = 19;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->league_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponseEntry)
  return target;
}

int CMsgPracticeLobbyListResponseEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 tournament_id = 3;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 4;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional bool requires_pass_key = 6;
    if (has_requires_pass_key()) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 7;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 guild_id = 8;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 guild_logo = 9;
    if (has_guild_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string custom_game_mode = 11;
    if (has_custom_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional bool friend_present = 13;
    if (has_friend_present()) {
      total_size += 1 + 1;
    }

    // optional uint32 players = 14;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional string custom_map_name = 15;
    if (has_custom_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint32 max_player_count = 16;
    if (has_max_player_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_player_count());
    }

    // optional uint32 server_region = 17;
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 lan_host_ping_to_server_region = 18;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional uint32 league_id = 19;
    if (has_league_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyListResponseEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const CMsgPracticeLobbyListResponseEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_tournament_game_id()) {
      set_tournament_game_id(from.tournament_game_id());
    }
    if (from.has_requires_pass_key()) {
      set_requires_pass_key(from.requires_pass_key());
    }
    if (from.has_leader_account_id()) {
      set_leader_account_id(from.leader_account_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_logo()) {
      set_guild_logo(from.guild_logo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_custom_game_mode()) {
      set_custom_game_mode(from.custom_game_mode());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_friend_present()) {
      set_friend_present(from.friend_present());
    }
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_custom_map_name()) {
      set_custom_map_name(from.custom_map_name());
    }
    if (from.has_max_player_count()) {
      set_max_player_count(from.max_player_count());
    }
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lan_host_ping_to_server_region()) {
      set_lan_host_ping_to_server_region(from.lan_host_ping_to_server_region());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const CMsgPracticeLobbyListResponseEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyListResponseEntry::Swap(CMsgPracticeLobbyListResponseEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(tournament_game_id_, other->tournament_game_id_);
    members_.Swap(&other->members_);
    std::swap(requires_pass_key_, other->requires_pass_key_);
    std::swap(leader_account_id_, other->leader_account_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_logo_, other->guild_logo_);
    std::swap(name_, other->name_);
    std::swap(custom_game_mode_, other->custom_game_mode_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(friend_present_, other->friend_present_);
    std::swap(players_, other->players_);
    std::swap(custom_map_name_, other->custom_map_name_);
    std::swap(max_player_count_, other->max_player_count_);
    std::swap(server_region_, other->server_region_);
    std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
    std::swap(league_id_, other->league_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponseEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyListResponseEntry_descriptor_;
  metadata.reflection = CMsgPracticeLobbyListResponseEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyListResponse::kTournamentGamesFieldNumber;
const int CMsgPracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyListResponse)
}

void CMsgPracticeLobbyListResponse::InitAsDefaultInstance() {
}

CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponse)
}

void CMsgPracticeLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  tournament_games_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyListResponse::~CMsgPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponse)
  SharedDtor();
}

void CMsgPracticeLobbyListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyListResponse_descriptor_;
}

const CMsgPracticeLobbyListResponse& CMsgPracticeLobbyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyListResponse* CMsgPracticeLobbyListResponse::default_instance_ = NULL;

CMsgPracticeLobbyListResponse* CMsgPracticeLobbyListResponse::New() const {
  return new CMsgPracticeLobbyListResponse;
}

void CMsgPracticeLobbyListResponse::Clear() {
  tournament_games_ = false;
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool tournament_games = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_games_)));
          set_has_tournament_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lobbies;
        break;
      }

      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
      case 2: {
        if (tag == 18) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lobbies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyListResponse)
  return false;
#undef DO_
}

void CMsgPracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyListResponse)
  // optional bool tournament_games = 1;
  if (has_tournament_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tournament_games(), output);
  }

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lobbies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponse)
  // optional bool tournament_games = 1;
  if (has_tournament_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tournament_games(), target);
  }

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lobbies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponse)
  return target;
}

int CMsgPracticeLobbyListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool tournament_games = 1;
    if (has_tournament_games()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponse::MergeFrom(const CMsgPracticeLobbyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_games()) {
      set_tournament_games(from.tournament_games());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const CMsgPracticeLobbyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponse::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyListResponse::Swap(CMsgPracticeLobbyListResponse* other) {
  if (other != this) {
    std::swap(tournament_games_, other->tournament_games_);
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyListResponse_descriptor_;
  metadata.reflection = CMsgPracticeLobbyListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLobbyList::kServerRegionFieldNumber;
const int CMsgLobbyList::kGameModeFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyList::CMsgLobbyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyList)
}

void CMsgLobbyList::InitAsDefaultInstance() {
}

CMsgLobbyList::CMsgLobbyList(const CMsgLobbyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyList)
}

void CMsgLobbyList::SharedCtor() {
  _cached_size_ = 0;
  server_region_ = 0u;
  game_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyList::~CMsgLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgLobbyList)
  SharedDtor();
}

void CMsgLobbyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyList_descriptor_;
}

const CMsgLobbyList& CMsgLobbyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgLobbyList* CMsgLobbyList::default_instance_ = NULL;

CMsgLobbyList* CMsgLobbyList::New() const {
  return new CMsgLobbyList;
}

void CMsgLobbyList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgLobbyList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(server_region_, game_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_mode;
        break;
      }

      // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2: {
        if (tag == 16) {
         parse_game_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyList)
  return false;
#undef DO_
}

void CMsgLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyList)
  // optional uint32 server_region = 1 [default = 0];
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyList)
}

::google::protobuf::uint8* CMsgLobbyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyList)
  // optional uint32 server_region = 1 [default = 0];
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyList)
  return target;
}

int CMsgLobbyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_region = 1 [default = 0];
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLobbyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLobbyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyList::MergeFrom(const CMsgLobbyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyList::CopyFrom(const CMsgLobbyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyList::IsInitialized() const {

  return true;
}

void CMsgLobbyList::Swap(CMsgLobbyList* other) {
  if (other != this) {
    std::swap(server_region_, other->server_region_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLobbyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyList_descriptor_;
  metadata.reflection = CMsgLobbyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLobbyListResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgLobbyListResponse::CMsgLobbyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLobbyListResponse)
}

void CMsgLobbyListResponse::InitAsDefaultInstance() {
}

CMsgLobbyListResponse::CMsgLobbyListResponse(const CMsgLobbyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyListResponse)
}

void CMsgLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLobbyListResponse::~CMsgLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgLobbyListResponse)
  SharedDtor();
}

void CMsgLobbyListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLobbyListResponse_descriptor_;
}

const CMsgLobbyListResponse& CMsgLobbyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgLobbyListResponse* CMsgLobbyListResponse::default_instance_ = NULL;

CMsgLobbyListResponse* CMsgLobbyListResponse::New() const {
  return new CMsgLobbyListResponse;
}

void CMsgLobbyListResponse::Clear() {
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (tag == 10) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lobbies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLobbyListResponse)
  return false;
#undef DO_
}

void CMsgLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLobbyListResponse)
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLobbyListResponse)
}

::google::protobuf::uint8* CMsgLobbyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyListResponse)
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lobbies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyListResponse)
  return target;
}

int CMsgLobbyListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLobbyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLobbyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLobbyListResponse::MergeFrom(const CMsgLobbyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyListResponse::CopyFrom(const CMsgLobbyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyListResponse::IsInitialized() const {

  return true;
}

void CMsgLobbyListResponse::Swap(CMsgLobbyListResponse* other) {
  if (other != this) {
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLobbyListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLobbyListResponse_descriptor_;
  metadata.reflection = CMsgLobbyListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyJoin::kLobbyIdFieldNumber;
const int CMsgPracticeLobbyJoin::kClientVersionFieldNumber;
const int CMsgPracticeLobbyJoin::kPassKeyFieldNumber;
const int CMsgPracticeLobbyJoin::kCustomGameCrcFieldNumber;
const int CMsgPracticeLobbyJoin::kCustomGameTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyJoin)
}

void CMsgPracticeLobbyJoin::InitAsDefaultInstance() {
}

CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoin)
}

void CMsgPracticeLobbyJoin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  client_version_ = 0u;
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  custom_game_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyJoin::~CMsgPracticeLobbyJoin() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoin)
  SharedDtor();
}

void CMsgPracticeLobbyJoin::SharedDtor() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyJoin_descriptor_;
}

const CMsgPracticeLobbyJoin& CMsgPracticeLobbyJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyJoin* CMsgPracticeLobbyJoin::default_instance_ = NULL;

CMsgPracticeLobbyJoin* CMsgPracticeLobbyJoin::New() const {
  return new CMsgPracticeLobbyJoin;
}

void CMsgPracticeLobbyJoin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPracticeLobbyJoin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(client_version_, custom_game_crc_);
    lobby_id_ = GOOGLE_ULONGLONG(0);
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (tag == 16) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 3;
      case 3: {
        if (tag == 26) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_custom_game_crc;
        break;
      }

      // optional fixed64 custom_game_crc = 4;
      case 4: {
        if (tag == 33) {
         parse_custom_game_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
          set_has_custom_game_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_custom_game_timestamp;
        break;
      }

      // optional fixed32 custom_game_timestamp = 5;
      case 5: {
        if (tag == 45) {
         parse_custom_game_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
          set_has_custom_game_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyJoin)
  return false;
#undef DO_
}

void CMsgPracticeLobbyJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyJoin)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional string pass_key = 3;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_key(), output);
  }

  // optional fixed64 custom_game_crc = 4;
  if (has_custom_game_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (has_custom_game_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->custom_game_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyJoin)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoin)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional string pass_key = 3;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_key(), target);
  }

  // optional fixed64 custom_game_crc = 4;
  if (has_custom_game_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (has_custom_game_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->custom_game_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoin)
  return target;
}

int CMsgPracticeLobbyJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional string pass_key = 3;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional fixed64 custom_game_crc = 4;
    if (has_custom_game_crc()) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 5;
    if (has_custom_game_timestamp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoin::MergeFrom(const CMsgPracticeLobbyJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_custom_game_crc()) {
      set_custom_game_crc(from.custom_game_crc());
    }
    if (from.has_custom_game_timestamp()) {
      set_custom_game_timestamp(from.custom_game_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoin::CopyFrom(const CMsgPracticeLobbyJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoin::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyJoin::Swap(CMsgPracticeLobbyJoin* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(client_version_, other->client_version_);
    std::swap(pass_key_, other->pass_key_);
    std::swap(custom_game_crc_, other->custom_game_crc_);
    std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyJoin_descriptor_;
  metadata.reflection = CMsgPracticeLobbyJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPracticeLobbyJoinResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPracticeLobbyJoinResponse)
}

void CMsgPracticeLobbyJoinResponse::InitAsDefaultInstance() {
}

CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoinResponse)
}

void CMsgPracticeLobbyJoinResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPracticeLobbyJoinResponse::~CMsgPracticeLobbyJoinResponse() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoinResponse)
  SharedDtor();
}

void CMsgPracticeLobbyJoinResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPracticeLobbyJoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoinResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPracticeLobbyJoinResponse_descriptor_;
}

const CMsgPracticeLobbyJoinResponse& CMsgPracticeLobbyJoinResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgPracticeLobbyJoinResponse* CMsgPracticeLobbyJoinResponse::default_instance_ = NULL;

CMsgPracticeLobbyJoinResponse* CMsgPracticeLobbyJoinResponse::New() const {
  return new CMsgPracticeLobbyJoinResponse;
}

void CMsgPracticeLobbyJoinResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPracticeLobbyJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPracticeLobbyJoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAJoinLobbyResult_IsValid(value)) {
            set_result(static_cast< ::DOTAJoinLobbyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPracticeLobbyJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPracticeLobbyJoinResponse)
  return false;
#undef DO_
}

void CMsgPracticeLobbyJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPracticeLobbyJoinResponse)
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPracticeLobbyJoinResponse)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoinResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoinResponse)
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoinResponse)
  return target;
}

int CMsgPracticeLobbyJoinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPracticeLobbyJoinResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const CMsgPracticeLobbyJoinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const CMsgPracticeLobbyJoinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinResponse::IsInitialized() const {

  return true;
}

void CMsgPracticeLobbyJoinResponse::Swap(CMsgPracticeLobbyJoinResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPracticeLobbyJoinResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPracticeLobbyJoinResponse_descriptor_;
  metadata.reflection = CMsgPracticeLobbyJoinResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFriendPracticeLobbyListRequest::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFriendPracticeLobbyListRequest)
}

void CMsgFriendPracticeLobbyListRequest::InitAsDefaultInstance() {
}

CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFriendPracticeLobbyListRequest)
}

void CMsgFriendPracticeLobbyListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFriendPracticeLobbyListRequest::~CMsgFriendPracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:CMsgFriendPracticeLobbyListRequest)
  SharedDtor();
}

void CMsgFriendPracticeLobbyListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFriendPracticeLobbyListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFriendPracticeLobbyListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFriendPracticeLobbyListRequest_descriptor_;
}

const CMsgFriendPracticeLobbyListRequest& CMsgFriendPracticeLobbyListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgFriendPracticeLobbyListRequest* CMsgFriendPracticeLobbyListRequest::default_instance_ = NULL;

CMsgFriendPracticeLobbyListRequest* CMsgFriendPracticeLobbyListRequest::New() const {
  return new CMsgFriendPracticeLobbyListRequest;
}

void CMsgFriendPracticeLobbyListRequest::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFriendPracticeLobbyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFriendPracticeLobbyListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 friends = 1;
      case 1: {
        if (tag == 8) {
         parse_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_friends())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_friends())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_friends;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFriendPracticeLobbyListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFriendPracticeLobbyListRequest)
  return false;
#undef DO_
}

void CMsgFriendPracticeLobbyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFriendPracticeLobbyListRequest)
  // repeated uint32 friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFriendPracticeLobbyListRequest)
}

::google::protobuf::uint8* CMsgFriendPracticeLobbyListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFriendPracticeLobbyListRequest)
  // repeated uint32 friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFriendPracticeLobbyListRequest)
  return target;
}

int CMsgFriendPracticeLobbyListRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint32 friends = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friends_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->friends(i));
    }
    total_size += 1 * this->friends_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFriendPracticeLobbyListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const CMsgFriendPracticeLobbyListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const CMsgFriendPracticeLobbyListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListRequest::IsInitialized() const {

  return true;
}

void CMsgFriendPracticeLobbyListRequest::Swap(CMsgFriendPracticeLobbyListRequest* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFriendPracticeLobbyListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFriendPracticeLobbyListRequest_descriptor_;
  metadata.reflection = CMsgFriendPracticeLobbyListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFriendPracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFriendPracticeLobbyListResponse)
}

void CMsgFriendPracticeLobbyListResponse::InitAsDefaultInstance() {
}

CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFriendPracticeLobbyListResponse)
}

void CMsgFriendPracticeLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFriendPracticeLobbyListResponse::~CMsgFriendPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgFriendPracticeLobbyListResponse)
  SharedDtor();
}

void CMsgFriendPracticeLobbyListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFriendPracticeLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFriendPracticeLobbyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFriendPracticeLobbyListResponse_descriptor_;
}

const CMsgFriendPracticeLobbyListResponse& CMsgFriendPracticeLobbyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgFriendPracticeLobbyListResponse* CMsgFriendPracticeLobbyListResponse::default_instance_ = NULL;

CMsgFriendPracticeLobbyListResponse* CMsgFriendPracticeLobbyListResponse::New() const {
  return new CMsgFriendPracticeLobbyListResponse;
}

void CMsgFriendPracticeLobbyListResponse::Clear() {
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFriendPracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFriendPracticeLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (tag == 10) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lobbies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFriendPracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFriendPracticeLobbyListResponse)
  return false;
#undef DO_
}

void CMsgFriendPracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFriendPracticeLobbyListResponse)
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFriendPracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgFriendPracticeLobbyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFriendPracticeLobbyListResponse)
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lobbies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFriendPracticeLobbyListResponse)
  return target;
}

int CMsgFriendPracticeLobbyListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFriendPracticeLobbyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const CMsgFriendPracticeLobbyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const CMsgFriendPracticeLobbyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListResponse::IsInitialized() const {

  return true;
}

void CMsgFriendPracticeLobbyListResponse::Swap(CMsgFriendPracticeLobbyListResponse* other) {
  if (other != this) {
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFriendPracticeLobbyListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFriendPracticeLobbyListResponse_descriptor_;
  metadata.reflection = CMsgFriendPracticeLobbyListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGuildmatePracticeLobbyListRequest::kGuildsFieldNumber;
#endif  // !_MSC_VER

CMsgGuildmatePracticeLobbyListRequest::CMsgGuildmatePracticeLobbyListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGuildmatePracticeLobbyListRequest)
}

void CMsgGuildmatePracticeLobbyListRequest::InitAsDefaultInstance() {
}

CMsgGuildmatePracticeLobbyListRequest::CMsgGuildmatePracticeLobbyListRequest(const CMsgGuildmatePracticeLobbyListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGuildmatePracticeLobbyListRequest)
}

void CMsgGuildmatePracticeLobbyListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGuildmatePracticeLobbyListRequest::~CMsgGuildmatePracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:CMsgGuildmatePracticeLobbyListRequest)
  SharedDtor();
}

void CMsgGuildmatePracticeLobbyListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGuildmatePracticeLobbyListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGuildmatePracticeLobbyListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGuildmatePracticeLobbyListRequest_descriptor_;
}

const CMsgGuildmatePracticeLobbyListRequest& CMsgGuildmatePracticeLobbyListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgGuildmatePracticeLobbyListRequest* CMsgGuildmatePracticeLobbyListRequest::default_instance_ = NULL;

CMsgGuildmatePracticeLobbyListRequest* CMsgGuildmatePracticeLobbyListRequest::New() const {
  return new CMsgGuildmatePracticeLobbyListRequest;
}

void CMsgGuildmatePracticeLobbyListRequest::Clear() {
  guilds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGuildmatePracticeLobbyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGuildmatePracticeLobbyListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 guilds = 1;
      case 1: {
        if (tag == 8) {
         parse_guilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_guilds())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guilds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_guilds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGuildmatePracticeLobbyListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGuildmatePracticeLobbyListRequest)
  return false;
#undef DO_
}

void CMsgGuildmatePracticeLobbyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGuildmatePracticeLobbyListRequest)
  // repeated uint32 guilds = 1;
  for (int i = 0; i < this->guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->guilds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGuildmatePracticeLobbyListRequest)
}

::google::protobuf::uint8* CMsgGuildmatePracticeLobbyListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildmatePracticeLobbyListRequest)
  // repeated uint32 guilds = 1;
  for (int i = 0; i < this->guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->guilds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildmatePracticeLobbyListRequest)
  return target;
}

int CMsgGuildmatePracticeLobbyListRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint32 guilds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guilds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guilds(i));
    }
    total_size += 1 * this->guilds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGuildmatePracticeLobbyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGuildmatePracticeLobbyListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGuildmatePracticeLobbyListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGuildmatePracticeLobbyListRequest::MergeFrom(const CMsgGuildmatePracticeLobbyListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilds_.MergeFrom(from.guilds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGuildmatePracticeLobbyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildmatePracticeLobbyListRequest::CopyFrom(const CMsgGuildmatePracticeLobbyListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildmatePracticeLobbyListRequest::IsInitialized() const {

  return true;
}

void CMsgGuildmatePracticeLobbyListRequest::Swap(CMsgGuildmatePracticeLobbyListRequest* other) {
  if (other != this) {
    guilds_.Swap(&other->guilds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGuildmatePracticeLobbyListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGuildmatePracticeLobbyListRequest_descriptor_;
  metadata.reflection = CMsgGuildmatePracticeLobbyListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGuildmatePracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgGuildmatePracticeLobbyListResponse::CMsgGuildmatePracticeLobbyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGuildmatePracticeLobbyListResponse)
}

void CMsgGuildmatePracticeLobbyListResponse::InitAsDefaultInstance() {
}

CMsgGuildmatePracticeLobbyListResponse::CMsgGuildmatePracticeLobbyListResponse(const CMsgGuildmatePracticeLobbyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGuildmatePracticeLobbyListResponse)
}

void CMsgGuildmatePracticeLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGuildmatePracticeLobbyListResponse::~CMsgGuildmatePracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgGuildmatePracticeLobbyListResponse)
  SharedDtor();
}

void CMsgGuildmatePracticeLobbyListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGuildmatePracticeLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGuildmatePracticeLobbyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGuildmatePracticeLobbyListResponse_descriptor_;
}

const CMsgGuildmatePracticeLobbyListResponse& CMsgGuildmatePracticeLobbyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgGuildmatePracticeLobbyListResponse* CMsgGuildmatePracticeLobbyListResponse::default_instance_ = NULL;

CMsgGuildmatePracticeLobbyListResponse* CMsgGuildmatePracticeLobbyListResponse::New() const {
  return new CMsgGuildmatePracticeLobbyListResponse;
}

void CMsgGuildmatePracticeLobbyListResponse::Clear() {
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGuildmatePracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGuildmatePracticeLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (tag == 10) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lobbies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGuildmatePracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGuildmatePracticeLobbyListResponse)
  return false;
#undef DO_
}

void CMsgGuildmatePracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGuildmatePracticeLobbyListResponse)
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGuildmatePracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgGuildmatePracticeLobbyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGuildmatePracticeLobbyListResponse)
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lobbies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGuildmatePracticeLobbyListResponse)
  return target;
}

int CMsgGuildmatePracticeLobbyListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGuildmatePracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGuildmatePracticeLobbyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGuildmatePracticeLobbyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGuildmatePracticeLobbyListResponse::MergeFrom(const CMsgGuildmatePracticeLobbyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGuildmatePracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildmatePracticeLobbyListResponse::CopyFrom(const CMsgGuildmatePracticeLobbyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildmatePracticeLobbyListResponse::IsInitialized() const {

  return true;
}

void CMsgGuildmatePracticeLobbyListResponse::Swap(CMsgGuildmatePracticeLobbyListResponse* other) {
  if (other != this) {
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGuildmatePracticeLobbyListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGuildmatePracticeLobbyListResponse_descriptor_;
  metadata.reflection = CMsgGuildmatePracticeLobbyListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJoinableCustomGameModesRequest::kServerRegionFieldNumber;
#endif  // !_MSC_VER

CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgJoinableCustomGameModesRequest)
}

void CMsgJoinableCustomGameModesRequest::InitAsDefaultInstance() {
}

CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesRequest)
}

void CMsgJoinableCustomGameModesRequest::SharedCtor() {
  _cached_size_ = 0;
  server_region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinableCustomGameModesRequest::~CMsgJoinableCustomGameModesRequest() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesRequest)
  SharedDtor();
}

void CMsgJoinableCustomGameModesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinableCustomGameModesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinableCustomGameModesRequest_descriptor_;
}

const CMsgJoinableCustomGameModesRequest& CMsgJoinableCustomGameModesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgJoinableCustomGameModesRequest* CMsgJoinableCustomGameModesRequest::default_instance_ = NULL;

CMsgJoinableCustomGameModesRequest* CMsgJoinableCustomGameModesRequest::New() const {
  return new CMsgJoinableCustomGameModesRequest;
}

void CMsgJoinableCustomGameModesRequest::Clear() {
  server_region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinableCustomGameModesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgJoinableCustomGameModesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgJoinableCustomGameModesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgJoinableCustomGameModesRequest)
  return false;
#undef DO_
}

void CMsgJoinableCustomGameModesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgJoinableCustomGameModesRequest)
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgJoinableCustomGameModesRequest)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesRequest)
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesRequest)
  return target;
}

int CMsgJoinableCustomGameModesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_region = 1;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinableCustomGameModesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const CMsgJoinableCustomGameModesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const CMsgJoinableCustomGameModesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesRequest::IsInitialized() const {

  return true;
}

void CMsgJoinableCustomGameModesRequest::Swap(CMsgJoinableCustomGameModesRequest* other) {
  if (other != this) {
    std::swap(server_region_, other->server_region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinableCustomGameModesRequest_descriptor_;
  metadata.reflection = CMsgJoinableCustomGameModesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJoinableCustomGameModesResponseEntry::kCustomGameIdFieldNumber;
const int CMsgJoinableCustomGameModesResponseEntry::kLobbyCountFieldNumber;
const int CMsgJoinableCustomGameModesResponseEntry::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgJoinableCustomGameModesResponseEntry)
}

void CMsgJoinableCustomGameModesResponseEntry::InitAsDefaultInstance() {
}

CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesResponseEntry)
}

void CMsgJoinableCustomGameModesResponseEntry::SharedCtor() {
  _cached_size_ = 0;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  lobby_count_ = 0u;
  player_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinableCustomGameModesResponseEntry::~CMsgJoinableCustomGameModesResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesResponseEntry)
  SharedDtor();
}

void CMsgJoinableCustomGameModesResponseEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinableCustomGameModesResponseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesResponseEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinableCustomGameModesResponseEntry_descriptor_;
}

const CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponseEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponseEntry::default_instance_ = NULL;

CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponseEntry::New() const {
  return new CMsgJoinableCustomGameModesResponseEntry;
}

void CMsgJoinableCustomGameModesResponseEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgJoinableCustomGameModesResponseEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(custom_game_id_, player_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinableCustomGameModesResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgJoinableCustomGameModesResponseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lobby_count;
        break;
      }

      // optional uint32 lobby_count = 2;
      case 2: {
        if (tag == 16) {
         parse_lobby_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_count_)));
          set_has_lobby_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }

      // optional uint32 player_count = 3;
      case 3: {
        if (tag == 24) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgJoinableCustomGameModesResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgJoinableCustomGameModesResponseEntry)
  return false;
#undef DO_
}

void CMsgJoinableCustomGameModesResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgJoinableCustomGameModesResponseEntry)
  // optional uint64 custom_game_id = 1;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->custom_game_id(), output);
  }

  // optional uint32 lobby_count = 2;
  if (has_lobby_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lobby_count(), output);
  }

  // optional uint32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgJoinableCustomGameModesResponseEntry)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesResponseEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesResponseEntry)
  // optional uint64 custom_game_id = 1;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->custom_game_id(), target);
  }

  // optional uint32 lobby_count = 2;
  if (has_lobby_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lobby_count(), target);
  }

  // optional uint32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesResponseEntry)
  return target;
}

int CMsgJoinableCustomGameModesResponseEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 custom_game_id = 1;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 lobby_count = 2;
    if (has_lobby_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_count());
    }

    // optional uint32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponseEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinableCustomGameModesResponseEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_lobby_count()) {
      set_lobby_count(from.lobby_count());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponseEntry::IsInitialized() const {

  return true;
}

void CMsgJoinableCustomGameModesResponseEntry::Swap(CMsgJoinableCustomGameModesResponseEntry* other) {
  if (other != this) {
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(lobby_count_, other->lobby_count_);
    std::swap(player_count_, other->player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesResponseEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinableCustomGameModesResponseEntry_descriptor_;
  metadata.reflection = CMsgJoinableCustomGameModesResponseEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJoinableCustomGameModesResponse::kGameModesFieldNumber;
#endif  // !_MSC_VER

CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgJoinableCustomGameModesResponse)
}

void CMsgJoinableCustomGameModesResponse::InitAsDefaultInstance() {
}

CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesResponse)
}

void CMsgJoinableCustomGameModesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinableCustomGameModesResponse::~CMsgJoinableCustomGameModesResponse() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesResponse)
  SharedDtor();
}

void CMsgJoinableCustomGameModesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinableCustomGameModesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinableCustomGameModesResponse_descriptor_;
}

const CMsgJoinableCustomGameModesResponse& CMsgJoinableCustomGameModesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgJoinableCustomGameModesResponse* CMsgJoinableCustomGameModesResponse::default_instance_ = NULL;

CMsgJoinableCustomGameModesResponse* CMsgJoinableCustomGameModesResponse::New() const {
  return new CMsgJoinableCustomGameModesResponse;
}

void CMsgJoinableCustomGameModesResponse::Clear() {
  game_modes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinableCustomGameModesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgJoinableCustomGameModesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
      case 1: {
        if (tag == 10) {
         parse_game_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_game_modes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgJoinableCustomGameModesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgJoinableCustomGameModesResponse)
  return false;
#undef DO_
}

void CMsgJoinableCustomGameModesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgJoinableCustomGameModesResponse)
  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (int i = 0; i < this->game_modes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_modes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgJoinableCustomGameModesResponse)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesResponse)
  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (int i = 0; i < this->game_modes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_modes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesResponse)
  return target;
}

int CMsgJoinableCustomGameModesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  total_size += 1 * this->game_modes_size();
  for (int i = 0; i < this->game_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_modes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinableCustomGameModesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const CMsgJoinableCustomGameModesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_modes_.MergeFrom(from.game_modes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const CMsgJoinableCustomGameModesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponse::IsInitialized() const {

  return true;
}

void CMsgJoinableCustomGameModesResponse::Swap(CMsgJoinableCustomGameModesResponse* other) {
  if (other != this) {
    game_modes_.Swap(&other->game_modes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinableCustomGameModesResponse_descriptor_;
  metadata.reflection = CMsgJoinableCustomGameModesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJoinableCustomLobbiesRequest::kServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesRequest::kCustomGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgJoinableCustomLobbiesRequest)
}

void CMsgJoinableCustomLobbiesRequest::InitAsDefaultInstance() {
}

CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesRequest)
}

void CMsgJoinableCustomLobbiesRequest::SharedCtor() {
  _cached_size_ = 0;
  server_region_ = 0u;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinableCustomLobbiesRequest::~CMsgJoinableCustomLobbiesRequest() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesRequest)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinableCustomLobbiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinableCustomLobbiesRequest_descriptor_;
}

const CMsgJoinableCustomLobbiesRequest& CMsgJoinableCustomLobbiesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgJoinableCustomLobbiesRequest* CMsgJoinableCustomLobbiesRequest::default_instance_ = NULL;

CMsgJoinableCustomLobbiesRequest* CMsgJoinableCustomLobbiesRequest::New() const {
  return new CMsgJoinableCustomLobbiesRequest;
}

void CMsgJoinableCustomLobbiesRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgJoinableCustomLobbiesRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(custom_game_id_, server_region_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinableCustomLobbiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgJoinableCustomLobbiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgJoinableCustomLobbiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgJoinableCustomLobbiesRequest)
  return false;
#undef DO_
}

void CMsgJoinableCustomLobbiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgJoinableCustomLobbiesRequest)
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgJoinableCustomLobbiesRequest)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesRequest)
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesRequest)
  return target;
}

int CMsgJoinableCustomLobbiesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_region = 1;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint64 custom_game_id = 2;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinableCustomLobbiesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const CMsgJoinableCustomLobbiesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const CMsgJoinableCustomLobbiesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesRequest::IsInitialized() const {

  return true;
}

void CMsgJoinableCustomLobbiesRequest::Swap(CMsgJoinableCustomLobbiesRequest* other) {
  if (other != this) {
    std::swap(server_region_, other->server_region_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinableCustomLobbiesRequest_descriptor_;
  metadata.reflection = CMsgJoinableCustomLobbiesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJoinableCustomLobbiesResponseEntry::kLobbyIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kCustomGameIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLobbyNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kMemberCountFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLeaderAccountIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLeaderNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kCustomMapNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kMaxPlayerCountFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLanHostPingToServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kHasPassKeyFieldNumber;
#endif  // !_MSC_VER

CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgJoinableCustomLobbiesResponseEntry)
}

void CMsgJoinableCustomLobbiesResponseEntry::InitAsDefaultInstance() {
}

CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesResponseEntry)
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_count_ = 0u;
  leader_account_id_ = 0u;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_player_count_ = 0u;
  server_region_ = 0u;
  lan_host_ping_to_server_region_ = 0u;
  has_pass_key_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinableCustomLobbiesResponseEntry::~CMsgJoinableCustomLobbiesResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesResponseEntry)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedDtor() {
  if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lobby_name_;
  }
  if (leader_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_name_;
  }
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesResponseEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinableCustomLobbiesResponseEntry_descriptor_;
}

const CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponseEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponseEntry::default_instance_ = NULL;

CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponseEntry::New() const {
  return new CMsgJoinableCustomLobbiesResponseEntry;
}

void CMsgJoinableCustomLobbiesResponseEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgJoinableCustomLobbiesResponseEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lobby_id_, custom_game_id_);
    ZR_(member_count_, leader_account_id_);
    if (has_lobby_name()) {
      if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lobby_name_->clear();
      }
    }
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_name_->clear();
      }
    }
    if (has_custom_map_name()) {
      if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_map_name_->clear();
      }
    }
    max_player_count_ = 0u;
  }
  ZR_(server_region_, has_pass_key_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinableCustomLobbiesResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgJoinableCustomLobbiesResponseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lobby_name;
        break;
      }

      // optional string lobby_name = 3;
      case 3: {
        if (tag == 26) {
         parse_lobby_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby_name().data(), this->lobby_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lobby_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 4;
      case 4: {
        if (tag == 32) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leader_account_id;
        break;
      }

      // optional uint32 leader_account_id = 5;
      case 5: {
        if (tag == 40) {
         parse_leader_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
          set_has_leader_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_leader_name;
        break;
      }

      // optional string leader_name = 6;
      case 6: {
        if (tag == 50) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom_map_name;
        break;
      }

      // optional string custom_map_name = 7;
      case 7: {
        if (tag == 58) {
         parse_custom_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_player_count;
        break;
      }

      // optional uint32 max_player_count = 8;
      case 8: {
        if (tag == 64) {
         parse_max_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
          set_has_max_player_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_server_region;
        break;
      }

      // optional uint32 server_region = 9;
      case 9: {
        if (tag == 72) {
         parse_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lan_host_ping_to_server_region;
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 10;
      case 10: {
        if (tag == 80) {
         parse_lan_host_ping_to_server_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
          set_has_lan_host_ping_to_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_has_pass_key;
        break;
      }

      // optional bool has_pass_key = 11;
      case 11: {
        if (tag == 88) {
         parse_has_pass_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pass_key_)));
          set_has_has_pass_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgJoinableCustomLobbiesResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgJoinableCustomLobbiesResponseEntry)
  return false;
#undef DO_
}

void CMsgJoinableCustomLobbiesResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgJoinableCustomLobbiesResponseEntry)
  // optional fixed64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  // optional string lobby_name = 3;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lobby_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lobby_name(), output);
  }

  // optional uint32 member_count = 4;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->member_count(), output);
  }

  // optional uint32 leader_account_id = 5;
  if (has_leader_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leader_account_id(), output);
  }

  // optional string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leader_name(), output);
  }

  // optional string custom_map_name = 7;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom_map_name(), output);
  }

  // optional uint32 max_player_count = 8;
  if (has_max_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_player_count(), output);
  }

  // optional uint32 server_region = 9;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_region(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 10;
  if (has_lan_host_ping_to_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lan_host_ping_to_server_region(), output);
  }

  // optional bool has_pass_key = 11;
  if (has_has_pass_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_pass_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgJoinableCustomLobbiesResponseEntry)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesResponseEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesResponseEntry)
  // optional fixed64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  // optional string lobby_name = 3;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lobby_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lobby_name(), target);
  }

  // optional uint32 member_count = 4;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->member_count(), target);
  }

  // optional uint32 leader_account_id = 5;
  if (has_leader_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leader_account_id(), target);
  }

  // optional string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leader_name(), target);
  }

  // optional string custom_map_name = 7;
  if (has_custom_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom_map_name(), target);
  }

  // optional uint32 max_player_count = 8;
  if (has_max_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_player_count(), target);
  }

  // optional uint32 server_region = 9;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_region(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 10;
  if (has_lan_host_ping_to_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lan_host_ping_to_server_region(), target);
  }

  // optional bool has_pass_key = 11;
  if (has_has_pass_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->has_pass_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesResponseEntry)
  return target;
}

int CMsgJoinableCustomLobbiesResponseEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 2;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional string lobby_name = 3;
    if (has_lobby_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }

    // optional uint32 member_count = 4;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional uint32 leader_account_id = 5;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional string leader_name = 6;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

    // optional string custom_map_name = 7;
    if (has_custom_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint32 max_player_count = 8;
    if (has_max_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_player_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 server_region = 9;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 lan_host_ping_to_server_region = 10;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional bool has_pass_key = 11;
    if (has_has_pass_key()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponseEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinableCustomLobbiesResponseEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_lobby_name()) {
      set_lobby_name(from.lobby_name());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_leader_account_id()) {
      set_leader_account_id(from.leader_account_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_custom_map_name()) {
      set_custom_map_name(from.custom_map_name());
    }
    if (from.has_max_player_count()) {
      set_max_player_count(from.max_player_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_lan_host_ping_to_server_region()) {
      set_lan_host_ping_to_server_region(from.lan_host_ping_to_server_region());
    }
    if (from.has_has_pass_key()) {
      set_has_pass_key(from.has_pass_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponseEntry::IsInitialized() const {

  return true;
}

void CMsgJoinableCustomLobbiesResponseEntry::Swap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(lobby_name_, other->lobby_name_);
    std::swap(member_count_, other->member_count_);
    std::swap(leader_account_id_, other->leader_account_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(custom_map_name_, other->custom_map_name_);
    std::swap(max_player_count_, other->max_player_count_);
    std::swap(server_region_, other->server_region_);
    std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
    std::swap(has_pass_key_, other->has_pass_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesResponseEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinableCustomLobbiesResponseEntry_descriptor_;
  metadata.reflection = CMsgJoinableCustomLobbiesResponseEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgJoinableCustomLobbiesResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgJoinableCustomLobbiesResponse)
}

void CMsgJoinableCustomLobbiesResponse::InitAsDefaultInstance() {
}

CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesResponse)
}

void CMsgJoinableCustomLobbiesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgJoinableCustomLobbiesResponse::~CMsgJoinableCustomLobbiesResponse() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesResponse)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgJoinableCustomLobbiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgJoinableCustomLobbiesResponse_descriptor_;
}

const CMsgJoinableCustomLobbiesResponse& CMsgJoinableCustomLobbiesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgJoinableCustomLobbiesResponse* CMsgJoinableCustomLobbiesResponse::default_instance_ = NULL;

CMsgJoinableCustomLobbiesResponse* CMsgJoinableCustomLobbiesResponse::New() const {
  return new CMsgJoinableCustomLobbiesResponse;
}

void CMsgJoinableCustomLobbiesResponse::Clear() {
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgJoinableCustomLobbiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgJoinableCustomLobbiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
      case 1: {
        if (tag == 10) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lobbies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgJoinableCustomLobbiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgJoinableCustomLobbiesResponse)
  return false;
#undef DO_
}

void CMsgJoinableCustomLobbiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgJoinableCustomLobbiesResponse)
  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgJoinableCustomLobbiesResponse)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesResponse)
  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lobbies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesResponse)
  return target;
}

int CMsgJoinableCustomLobbiesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgJoinableCustomLobbiesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const CMsgJoinableCustomLobbiesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const CMsgJoinableCustomLobbiesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponse::IsInitialized() const {

  return true;
}

void CMsgJoinableCustomLobbiesResponse::Swap(CMsgJoinableCustomLobbiesResponse* other) {
  if (other != this) {
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgJoinableCustomLobbiesResponse_descriptor_;
  metadata.reflection = CMsgJoinableCustomLobbiesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kServerRegionFieldNumber;
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kPingFieldNumber;
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kRegionCodeFieldNumber;
#endif  // !_MSC_VER

CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::InitAsDefaultInstance() {
}

CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedCtor() {
  _cached_size_ = 0;
  server_region_ = 0u;
  ping_ = 0u;
  region_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuickJoinCustomLobby_LegacyRegionPing::~CMsgQuickJoinCustomLobby_LegacyRegionPing() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  SharedDtor();
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobby_LegacyRegionPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuickJoinCustomLobby_LegacyRegionPing_descriptor_;
}

const CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance_ = NULL;

CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby_LegacyRegionPing::New() const {
  return new CMsgQuickJoinCustomLobby_LegacyRegionPing;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuickJoinCustomLobby_LegacyRegionPing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(server_region_, region_code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
          set_has_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ping;
        break;
      }

      // optional uint32 ping = 2;
      case 2: {
        if (tag == 16) {
         parse_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
          set_has_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_region_code;
        break;
      }

      // optional fixed32 region_code = 3;
      case 3: {
        if (tag == 29) {
         parse_region_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &region_code_)));
          set_has_region_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return false;
#undef DO_
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional uint32 ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping(), output);
  }

  // optional fixed32 region_code = 3;
  if (has_region_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->region_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobby_LegacyRegionPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional uint32 ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping(), target);
  }

  // optional fixed32 region_code = 3;
  if (has_region_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->region_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return target;
}

int CMsgQuickJoinCustomLobby_LegacyRegionPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_region = 1;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional fixed32 region_code = 3;
    if (has_region_code()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby_LegacyRegionPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuickJoinCustomLobby_LegacyRegionPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_region()) {
      set_server_region(from.server_region());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_region_code()) {
      set_region_code(from.region_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::IsInitialized() const {

  return true;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Swap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  if (other != this) {
    std::swap(server_region_, other->server_region_);
    std::swap(ping_, other->ping_);
    std::swap(region_code_, other->region_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobby_LegacyRegionPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuickJoinCustomLobby_LegacyRegionPing_descriptor_;
  metadata.reflection = CMsgQuickJoinCustomLobby_LegacyRegionPing_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgQuickJoinCustomLobby::kLegacyServerRegionFieldNumber;
const int CMsgQuickJoinCustomLobby::kCustomGameIdFieldNumber;
const int CMsgQuickJoinCustomLobby::kClientVersionFieldNumber;
const int CMsgQuickJoinCustomLobby::kCreateLobbyDetailsFieldNumber;
const int CMsgQuickJoinCustomLobby::kAllowAnyMapFieldNumber;
const int CMsgQuickJoinCustomLobby::kLegacyRegionPingsFieldNumber;
const int CMsgQuickJoinCustomLobby::kPingDataFieldNumber;
#endif  // !_MSC_VER

CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuickJoinCustomLobby)
}

void CMsgQuickJoinCustomLobby::InitAsDefaultInstance() {
  create_lobby_details_ = const_cast< ::CMsgPracticeLobbySetDetails*>(&::CMsgPracticeLobbySetDetails::default_instance());
  ping_data_ = const_cast< ::CMsgClientPingData*>(&::CMsgClientPingData::default_instance());
}

CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobby)
}

void CMsgQuickJoinCustomLobby::SharedCtor() {
  _cached_size_ = 0;
  legacy_server_region_ = 0u;
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  client_version_ = 0u;
  create_lobby_details_ = NULL;
  allow_any_map_ = false;
  ping_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuickJoinCustomLobby::~CMsgQuickJoinCustomLobby() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobby)
  SharedDtor();
}

void CMsgQuickJoinCustomLobby::SharedDtor() {
  if (this != default_instance_) {
    delete create_lobby_details_;
    delete ping_data_;
  }
}

void CMsgQuickJoinCustomLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuickJoinCustomLobby_descriptor_;
}

const CMsgQuickJoinCustomLobby& CMsgQuickJoinCustomLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgQuickJoinCustomLobby* CMsgQuickJoinCustomLobby::default_instance_ = NULL;

CMsgQuickJoinCustomLobby* CMsgQuickJoinCustomLobby::New() const {
  return new CMsgQuickJoinCustomLobby;
}

void CMsgQuickJoinCustomLobby::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuickJoinCustomLobby*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(custom_game_id_, client_version_);
    if (has_create_lobby_details()) {
      if (create_lobby_details_ != NULL) create_lobby_details_->::CMsgPracticeLobbySetDetails::Clear();
    }
    allow_any_map_ = false;
    if (has_ping_data()) {
      if (ping_data_ != NULL) ping_data_->::CMsgClientPingData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  legacy_region_pings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuickJoinCustomLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuickJoinCustomLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_server_region = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_server_region_)));
          set_has_legacy_server_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (tag == 24) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_create_lobby_details;
        break;
      }

      // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
      case 4: {
        if (tag == 34) {
         parse_create_lobby_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_lobby_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allow_any_map;
        break;
      }

      // optional bool allow_any_map = 5;
      case 5: {
        if (tag == 40) {
         parse_allow_any_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_any_map_)));
          set_has_allow_any_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_legacy_region_pings;
        break;
      }

      // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
      case 6: {
        if (tag == 50) {
         parse_legacy_region_pings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legacy_region_pings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_legacy_region_pings;
        if (input->ExpectTag(58)) goto parse_ping_data;
        break;
      }

      // optional .CMsgClientPingData ping_data = 7;
      case 7: {
        if (tag == 58) {
         parse_ping_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuickJoinCustomLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuickJoinCustomLobby)
  return false;
#undef DO_
}

void CMsgQuickJoinCustomLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuickJoinCustomLobby)
  // optional uint32 legacy_server_region = 1;
  if (has_legacy_server_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_server_region(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  // optional uint32 client_version = 3;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (has_create_lobby_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->create_lobby_details(), output);
  }

  // optional bool allow_any_map = 5;
  if (has_allow_any_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_any_map(), output);
  }

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (int i = 0; i < this->legacy_region_pings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->legacy_region_pings(i), output);
  }

  // optional .CMsgClientPingData ping_data = 7;
  if (has_ping_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ping_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuickJoinCustomLobby)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobby)
  // optional uint32 legacy_server_region = 1;
  if (has_legacy_server_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  // optional uint32 client_version = 3;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (has_create_lobby_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->create_lobby_details(), target);
  }

  // optional bool allow_any_map = 5;
  if (has_allow_any_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_any_map(), target);
  }

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (int i = 0; i < this->legacy_region_pings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->legacy_region_pings(i), target);
  }

  // optional .CMsgClientPingData ping_data = 7;
  if (has_ping_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ping_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobby)
  return target;
}

int CMsgQuickJoinCustomLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 legacy_server_region = 1;
    if (has_legacy_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_server_region());
    }

    // optional uint64 custom_game_id = 2;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
    if (has_create_lobby_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_lobby_details());
    }

    // optional bool allow_any_map = 5;
    if (has_allow_any_map()) {
      total_size += 1 + 1;
    }

    // optional .CMsgClientPingData ping_data = 7;
    if (has_ping_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_data());
    }

  }
  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  total_size += 1 * this->legacy_region_pings_size();
  for (int i = 0; i < this->legacy_region_pings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legacy_region_pings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuickJoinCustomLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuickJoinCustomLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby::MergeFrom(const CMsgQuickJoinCustomLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  legacy_region_pings_.MergeFrom(from.legacy_region_pings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_legacy_server_region()) {
      set_legacy_server_region(from.legacy_server_region());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_create_lobby_details()) {
      mutable_create_lobby_details()->::CMsgPracticeLobbySetDetails::MergeFrom(from.create_lobby_details());
    }
    if (from.has_allow_any_map()) {
      set_allow_any_map(from.allow_any_map());
    }
    if (from.has_ping_data()) {
      mutable_ping_data()->::CMsgClientPingData::MergeFrom(from.ping_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuickJoinCustomLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby::CopyFrom(const CMsgQuickJoinCustomLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby::IsInitialized() const {

  return true;
}

void CMsgQuickJoinCustomLobby::Swap(CMsgQuickJoinCustomLobby* other) {
  if (other != this) {
    std::swap(legacy_server_region_, other->legacy_server_region_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(client_version_, other->client_version_);
    std::swap(create_lobby_details_, other->create_lobby_details_);
    std::swap(allow_any_map_, other->allow_any_map_);
    legacy_region_pings_.Swap(&other->legacy_region_pings_);
    std::swap(ping_data_, other->ping_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuickJoinCustomLobby_descriptor_;
  metadata.reflection = CMsgQuickJoinCustomLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuickJoinCustomLobbyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuickJoinCustomLobbyResponse)
}

void CMsgQuickJoinCustomLobbyResponse::InitAsDefaultInstance() {
}

CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobbyResponse)
}

void CMsgQuickJoinCustomLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuickJoinCustomLobbyResponse::~CMsgQuickJoinCustomLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobbyResponse)
  SharedDtor();
}

void CMsgQuickJoinCustomLobbyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQuickJoinCustomLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobbyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuickJoinCustomLobbyResponse_descriptor_;
}

const CMsgQuickJoinCustomLobbyResponse& CMsgQuickJoinCustomLobbyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgQuickJoinCustomLobbyResponse* CMsgQuickJoinCustomLobbyResponse::default_instance_ = NULL;

CMsgQuickJoinCustomLobbyResponse* CMsgQuickJoinCustomLobbyResponse::New() const {
  return new CMsgQuickJoinCustomLobbyResponse;
}

void CMsgQuickJoinCustomLobbyResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuickJoinCustomLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuickJoinCustomLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTAJoinLobbyResult_IsValid(value)) {
            set_result(static_cast< ::DOTAJoinLobbyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuickJoinCustomLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuickJoinCustomLobbyResponse)
  return false;
#undef DO_
}

void CMsgQuickJoinCustomLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuickJoinCustomLobbyResponse)
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuickJoinCustomLobbyResponse)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobbyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobbyResponse)
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobbyResponse)
  return target;
}

int CMsgQuickJoinCustomLobbyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobbyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuickJoinCustomLobbyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobbyResponse::IsInitialized() const {

  return true;
}

void CMsgQuickJoinCustomLobbyResponse::Swap(CMsgQuickJoinCustomLobbyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobbyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuickJoinCustomLobbyResponse_descriptor_;
  metadata.reflection = CMsgQuickJoinCustomLobbyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBotGameCreate::kSearchKeyFieldNumber;
const int CMsgBotGameCreate::kClientVersionFieldNumber;
const int CMsgBotGameCreate::kDifficultyRadiantFieldNumber;
const int CMsgBotGameCreate::kTeamFieldNumber;
const int CMsgBotGameCreate::kGameModeFieldNumber;
const int CMsgBotGameCreate::kDifficultyDireFieldNumber;
#endif  // !_MSC_VER

CMsgBotGameCreate::CMsgBotGameCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBotGameCreate)
}

void CMsgBotGameCreate::InitAsDefaultInstance() {
}

CMsgBotGameCreate::CMsgBotGameCreate(const CMsgBotGameCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBotGameCreate)
}

void CMsgBotGameCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_ = 0u;
  difficulty_radiant_ = 0;
  team_ = 0;
  game_mode_ = 0u;
  difficulty_dire_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBotGameCreate::~CMsgBotGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgBotGameCreate)
  SharedDtor();
}

void CMsgBotGameCreate::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgBotGameCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotGameCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBotGameCreate_descriptor_;
}

const CMsgBotGameCreate& CMsgBotGameCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgBotGameCreate* CMsgBotGameCreate::default_instance_ = NULL;

CMsgBotGameCreate* CMsgBotGameCreate::New() const {
  return new CMsgBotGameCreate;
}

void CMsgBotGameCreate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgBotGameCreate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(client_version_, difficulty_dire_);
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBotGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBotGameCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (tag == 16) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty_radiant;
        break;
      }

      // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (tag == 24) {
         parse_difficulty_radiant:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_difficulty_radiant(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 4: {
        if (tag == 32) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_difficulty_dire;
        break;
      }

      // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
      case 6: {
        if (tag == 48) {
         parse_difficulty_dire:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTABotDifficulty_IsValid(value)) {
            set_difficulty_dire(static_cast< ::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBotGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBotGameCreate)
  return false;
#undef DO_
}

void CMsgBotGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBotGameCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_difficulty_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->difficulty_radiant(), output);
  }

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team(), output);
  }

  // optional uint32 game_mode = 5;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_mode(), output);
  }

  // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_difficulty_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->difficulty_dire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBotGameCreate)
}

::google::protobuf::uint8* CMsgBotGameCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotGameCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_difficulty_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty_radiant(), target);
  }

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team(), target);
  }

  // optional uint32 game_mode = 5;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_mode(), target);
  }

  // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (has_difficulty_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->difficulty_dire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotGameCreate)
  return target;
}

int CMsgBotGameCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_difficulty_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty_radiant());
    }

    // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 game_mode = 5;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_difficulty_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty_dire());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBotGameCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBotGameCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBotGameCreate::MergeFrom(const CMsgBotGameCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_difficulty_radiant()) {
      set_difficulty_radiant(from.difficulty_radiant());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_difficulty_dire()) {
      set_difficulty_dire(from.difficulty_dire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBotGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotGameCreate::CopyFrom(const CMsgBotGameCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotGameCreate::IsInitialized() const {

  return true;
}

void CMsgBotGameCreate::Swap(CMsgBotGameCreate* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(difficulty_radiant_, other->difficulty_radiant_);
    std::swap(team_, other->team_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(difficulty_dire_, other->difficulty_dire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBotGameCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBotGameCreate_descriptor_;
  metadata.reflection = CMsgBotGameCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCustomGameCreate::kSearchKeyFieldNumber;
const int CMsgCustomGameCreate::kClientVersionFieldNumber;
const int CMsgCustomGameCreate::kDifficultyFieldNumber;
const int CMsgCustomGameCreate::kGameModeFieldNumber;
const int CMsgCustomGameCreate::kMapFieldNumber;
const int CMsgCustomGameCreate::kCustomGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgCustomGameCreate::CMsgCustomGameCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCustomGameCreate)
}

void CMsgCustomGameCreate::InitAsDefaultInstance() {
}

CMsgCustomGameCreate::CMsgCustomGameCreate(const CMsgCustomGameCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameCreate)
}

void CMsgCustomGameCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_ = 0u;
  difficulty_ = 0u;
  game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCustomGameCreate::~CMsgCustomGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameCreate)
  SharedDtor();
}

void CMsgCustomGameCreate::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_mode_;
  }
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void CMsgCustomGameCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCustomGameCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCustomGameCreate_descriptor_;
}

const CMsgCustomGameCreate& CMsgCustomGameCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgCustomGameCreate* CMsgCustomGameCreate::default_instance_ = NULL;

CMsgCustomGameCreate* CMsgCustomGameCreate::New() const {
  return new CMsgCustomGameCreate;
}

void CMsgCustomGameCreate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgCustomGameCreate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(client_version_, difficulty_);
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_key_->clear();
      }
    }
    if (has_game_mode()) {
      if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_mode_->clear();
      }
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_->clear();
      }
    }
    custom_game_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCustomGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCustomGameCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (tag == 16) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_mode;
        break;
      }

      // optional string game_mode = 4;
      case 4: {
        if (tag == 34) {
         parse_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), this->game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map;
        break;
      }

      // optional string map = 5;
      case 5: {
        if (tag == 42) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 7;
      case 7: {
        if (tag == 56) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCustomGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCustomGameCreate)
  return false;
#undef DO_
}

void CMsgCustomGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCustomGameCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional string game_mode = 4;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_mode(), output);
  }

  // optional string map = 5;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map(), output);
  }

  // optional uint64 custom_game_id = 7;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->custom_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCustomGameCreate)
}

::google::protobuf::uint8* CMsgCustomGameCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional string game_mode = 4;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_mode(), target);
  }

  // optional string map = 5;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->custom_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameCreate)
  return target;
}

int CMsgCustomGameCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional string game_mode = 4;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string map = 5;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint64 custom_game_id = 7;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCustomGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCustomGameCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCustomGameCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCustomGameCreate::MergeFrom(const CMsgCustomGameCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCustomGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameCreate::CopyFrom(const CMsgCustomGameCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameCreate::IsInitialized() const {

  return true;
}

void CMsgCustomGameCreate::Swap(CMsgCustomGameCreate* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(map_, other->map_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCustomGameCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCustomGameCreate_descriptor_;
  metadata.reflection = CMsgCustomGameCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgEventGameCreate::kSearchKeyFieldNumber;
const int CMsgEventGameCreate::kClientVersionFieldNumber;
const int CMsgEventGameCreate::kDifficultyFieldNumber;
const int CMsgEventGameCreate::kGameModeFieldNumber;
const int CMsgEventGameCreate::kMapFieldNumber;
const int CMsgEventGameCreate::kCustomGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgEventGameCreate::CMsgEventGameCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgEventGameCreate)
}

void CMsgEventGameCreate::InitAsDefaultInstance() {
}

CMsgEventGameCreate::CMsgEventGameCreate(const CMsgEventGameCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgEventGameCreate)
}

void CMsgEventGameCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_ = 0u;
  difficulty_ = 0u;
  game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEventGameCreate::~CMsgEventGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgEventGameCreate)
  SharedDtor();
}

void CMsgEventGameCreate::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_mode_;
  }
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void CMsgEventGameCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEventGameCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEventGameCreate_descriptor_;
}

const CMsgEventGameCreate& CMsgEventGameCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgEventGameCreate* CMsgEventGameCreate::default_instance_ = NULL;

CMsgEventGameCreate* CMsgEventGameCreate::New() const {
  return new CMsgEventGameCreate;
}

void CMsgEventGameCreate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgEventGameCreate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(client_version_, difficulty_);
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_key_->clear();
      }
    }
    if (has_game_mode()) {
      if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_mode_->clear();
      }
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_->clear();
      }
    }
    custom_game_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEventGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgEventGameCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (tag == 16) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_mode;
        break;
      }

      // optional string game_mode = 4;
      case 4: {
        if (tag == 34) {
         parse_game_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), this->game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map;
        break;
      }

      // optional string map = 5;
      case 5: {
        if (tag == 42) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_custom_game_id;
        break;
      }

      // optional uint64 custom_game_id = 7;
      case 7: {
        if (tag == 56) {
         parse_custom_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
          set_has_custom_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgEventGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgEventGameCreate)
  return false;
#undef DO_
}

void CMsgEventGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgEventGameCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional string game_mode = 4;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_mode(), output);
  }

  // optional string map = 5;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map(), output);
  }

  // optional uint64 custom_game_id = 7;
  if (has_custom_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->custom_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgEventGameCreate)
}

::google::protobuf::uint8* CMsgEventGameCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEventGameCreate)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional string game_mode = 4;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_mode(), target);
  }

  // optional string map = 5;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (has_custom_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->custom_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEventGameCreate)
  return target;
}

int CMsgEventGameCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional string game_mode = 4;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string map = 5;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint64 custom_game_id = 7;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEventGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEventGameCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEventGameCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEventGameCreate::MergeFrom(const CMsgEventGameCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_custom_game_id()) {
      set_custom_game_id(from.custom_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEventGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEventGameCreate::CopyFrom(const CMsgEventGameCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEventGameCreate::IsInitialized() const {

  return true;
}

void CMsgEventGameCreate::Swap(CMsgEventGameCreate* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(map_, other->map_);
    std::swap(custom_game_id_, other->custom_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEventGameCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEventGameCreate_descriptor_;
  metadata.reflection = CMsgEventGameCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAPartyMemberSetCoach::kWantsCoachFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAPartyMemberSetCoach)
}

void CMsgDOTAPartyMemberSetCoach::InitAsDefaultInstance() {
}

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPartyMemberSetCoach)
}

void CMsgDOTAPartyMemberSetCoach::SharedCtor() {
  _cached_size_ = 0;
  wants_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAPartyMemberSetCoach::~CMsgDOTAPartyMemberSetCoach() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPartyMemberSetCoach)
  SharedDtor();
}

void CMsgDOTAPartyMemberSetCoach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAPartyMemberSetCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartyMemberSetCoach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAPartyMemberSetCoach_descriptor_;
}

const CMsgDOTAPartyMemberSetCoach& CMsgDOTAPartyMemberSetCoach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTAPartyMemberSetCoach* CMsgDOTAPartyMemberSetCoach::default_instance_ = NULL;

CMsgDOTAPartyMemberSetCoach* CMsgDOTAPartyMemberSetCoach::New() const {
  return new CMsgDOTAPartyMemberSetCoach;
}

void CMsgDOTAPartyMemberSetCoach::Clear() {
  wants_coach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAPartyMemberSetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAPartyMemberSetCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool wants_coach = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_coach_)));
          set_has_wants_coach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAPartyMemberSetCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAPartyMemberSetCoach)
  return false;
#undef DO_
}

void CMsgDOTAPartyMemberSetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAPartyMemberSetCoach)
  // optional bool wants_coach = 1;
  if (has_wants_coach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wants_coach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAPartyMemberSetCoach)
}

::google::protobuf::uint8* CMsgDOTAPartyMemberSetCoach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPartyMemberSetCoach)
  // optional bool wants_coach = 1;
  if (has_wants_coach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wants_coach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPartyMemberSetCoach)
  return target;
}

int CMsgDOTAPartyMemberSetCoach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool wants_coach = 1;
    if (has_wants_coach()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAPartyMemberSetCoach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAPartyMemberSetCoach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const CMsgDOTAPartyMemberSetCoach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wants_coach()) {
      set_wants_coach(from.wants_coach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const CMsgDOTAPartyMemberSetCoach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartyMemberSetCoach::IsInitialized() const {

  return true;
}

void CMsgDOTAPartyMemberSetCoach::Swap(CMsgDOTAPartyMemberSetCoach* other) {
  if (other != this) {
    std::swap(wants_coach_, other->wants_coach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAPartyMemberSetCoach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAPartyMemberSetCoach_descriptor_;
  metadata.reflection = CMsgDOTAPartyMemberSetCoach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTASetGroupLeader::kNewLeaderSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASetGroupLeader)
}

void CMsgDOTASetGroupLeader::InitAsDefaultInstance() {
}

CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASetGroupLeader)
}

void CMsgDOTASetGroupLeader::SharedCtor() {
  _cached_size_ = 0;
  new_leader_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASetGroupLeader::~CMsgDOTASetGroupLeader() {
  // @@protoc_insertion_point(destructor:CMsgDOTASetGroupLeader)
  SharedDtor();
}

void CMsgDOTASetGroupLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASetGroupLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASetGroupLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASetGroupLeader_descriptor_;
}

const CMsgDOTASetGroupLeader& CMsgDOTASetGroupLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTASetGroupLeader* CMsgDOTASetGroupLeader::default_instance_ = NULL;

CMsgDOTASetGroupLeader* CMsgDOTASetGroupLeader::New() const {
  return new CMsgDOTASetGroupLeader;
}

void CMsgDOTASetGroupLeader::Clear() {
  new_leader_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASetGroupLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASetGroupLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 new_leader_steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &new_leader_steamid_)));
          set_has_new_leader_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASetGroupLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASetGroupLeader)
  return false;
#undef DO_
}

void CMsgDOTASetGroupLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASetGroupLeader)
  // optional fixed64 new_leader_steamid = 1;
  if (has_new_leader_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->new_leader_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASetGroupLeader)
}

::google::protobuf::uint8* CMsgDOTASetGroupLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASetGroupLeader)
  // optional fixed64 new_leader_steamid = 1;
  if (has_new_leader_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->new_leader_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASetGroupLeader)
  return target;
}

int CMsgDOTASetGroupLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 new_leader_steamid = 1;
    if (has_new_leader_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASetGroupLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASetGroupLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASetGroupLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupLeader::MergeFrom(const CMsgDOTASetGroupLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_leader_steamid()) {
      set_new_leader_steamid(from.new_leader_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASetGroupLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupLeader::CopyFrom(const CMsgDOTASetGroupLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupLeader::IsInitialized() const {

  return true;
}

void CMsgDOTASetGroupLeader::Swap(CMsgDOTASetGroupLeader* other) {
  if (other != this) {
    std::swap(new_leader_steamid_, other->new_leader_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASetGroupLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASetGroupLeader_descriptor_;
  metadata.reflection = CMsgDOTASetGroupLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTACancelGroupInvites::kInvitedSteamidsFieldNumber;
const int CMsgDOTACancelGroupInvites::kInvitedGroupidsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACancelGroupInvites)
}

void CMsgDOTACancelGroupInvites::InitAsDefaultInstance() {
}

CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACancelGroupInvites)
}

void CMsgDOTACancelGroupInvites::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACancelGroupInvites::~CMsgDOTACancelGroupInvites() {
  // @@protoc_insertion_point(destructor:CMsgDOTACancelGroupInvites)
  SharedDtor();
}

void CMsgDOTACancelGroupInvites::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTACancelGroupInvites::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACancelGroupInvites::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACancelGroupInvites_descriptor_;
}

const CMsgDOTACancelGroupInvites& CMsgDOTACancelGroupInvites::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTACancelGroupInvites* CMsgDOTACancelGroupInvites::default_instance_ = NULL;

CMsgDOTACancelGroupInvites* CMsgDOTACancelGroupInvites::New() const {
  return new CMsgDOTACancelGroupInvites;
}

void CMsgDOTACancelGroupInvites::Clear() {
  invited_steamids_.Clear();
  invited_groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTACancelGroupInvites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACancelGroupInvites)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 invited_steamids = 1;
      case 1: {
        if (tag == 9) {
         parse_invited_steamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_invited_steamids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_invited_steamids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_invited_steamids;
        if (input->ExpectTag(17)) goto parse_invited_groupids;
        break;
      }

      // repeated fixed64 invited_groupids = 2;
      case 2: {
        if (tag == 17) {
         parse_invited_groupids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_invited_groupids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_invited_groupids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_invited_groupids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACancelGroupInvites)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACancelGroupInvites)
  return false;
#undef DO_
}

void CMsgDOTACancelGroupInvites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACancelGroupInvites)
  // repeated fixed64 invited_steamids = 1;
  for (int i = 0; i < this->invited_steamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->invited_steamids(i), output);
  }

  // repeated fixed64 invited_groupids = 2;
  for (int i = 0; i < this->invited_groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->invited_groupids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACancelGroupInvites)
}

::google::protobuf::uint8* CMsgDOTACancelGroupInvites::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACancelGroupInvites)
  // repeated fixed64 invited_steamids = 1;
  for (int i = 0; i < this->invited_steamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->invited_steamids(i), target);
  }

  // repeated fixed64 invited_groupids = 2;
  for (int i = 0; i < this->invited_groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->invited_groupids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACancelGroupInvites)
  return target;
}

int CMsgDOTACancelGroupInvites::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 invited_steamids = 1;
  {
    int data_size = 0;
    data_size = 8 * this->invited_steamids_size();
    total_size += 1 * this->invited_steamids_size() + data_size;
  }

  // repeated fixed64 invited_groupids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->invited_groupids_size();
    total_size += 1 * this->invited_groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACancelGroupInvites::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTACancelGroupInvites* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTACancelGroupInvites*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACancelGroupInvites::MergeFrom(const CMsgDOTACancelGroupInvites& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_steamids_.MergeFrom(from.invited_steamids_);
  invited_groupids_.MergeFrom(from.invited_groupids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTACancelGroupInvites::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const CMsgDOTACancelGroupInvites& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACancelGroupInvites::IsInitialized() const {

  return true;
}

void CMsgDOTACancelGroupInvites::Swap(CMsgDOTACancelGroupInvites* other) {
  if (other != this) {
    invited_steamids_.Swap(&other->invited_steamids_);
    invited_groupids_.Swap(&other->invited_groupids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTACancelGroupInvites::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACancelGroupInvites_descriptor_;
  metadata.reflection = CMsgDOTACancelGroupInvites_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTASetGroupOpenStatus::kOpenFieldNumber;
#endif  // !_MSC_VER

CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTASetGroupOpenStatus)
}

void CMsgDOTASetGroupOpenStatus::InitAsDefaultInstance() {
}

CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASetGroupOpenStatus)
}

void CMsgDOTASetGroupOpenStatus::SharedCtor() {
  _cached_size_ = 0;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTASetGroupOpenStatus::~CMsgDOTASetGroupOpenStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTASetGroupOpenStatus)
  SharedDtor();
}

void CMsgDOTASetGroupOpenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTASetGroupOpenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASetGroupOpenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTASetGroupOpenStatus_descriptor_;
}

const CMsgDOTASetGroupOpenStatus& CMsgDOTASetGroupOpenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTASetGroupOpenStatus* CMsgDOTASetGroupOpenStatus::default_instance_ = NULL;

CMsgDOTASetGroupOpenStatus* CMsgDOTASetGroupOpenStatus::New() const {
  return new CMsgDOTASetGroupOpenStatus;
}

void CMsgDOTASetGroupOpenStatus::Clear() {
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTASetGroupOpenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTASetGroupOpenStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool open = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTASetGroupOpenStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTASetGroupOpenStatus)
  return false;
#undef DO_
}

void CMsgDOTASetGroupOpenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTASetGroupOpenStatus)
  // optional bool open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTASetGroupOpenStatus)
}

::google::protobuf::uint8* CMsgDOTASetGroupOpenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASetGroupOpenStatus)
  // optional bool open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASetGroupOpenStatus)
  return target;
}

int CMsgDOTASetGroupOpenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool open = 1;
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTASetGroupOpenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTASetGroupOpenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const CMsgDOTASetGroupOpenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const CMsgDOTASetGroupOpenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupOpenStatus::IsInitialized() const {

  return true;
}

void CMsgDOTASetGroupOpenStatus::Swap(CMsgDOTASetGroupOpenStatus* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTASetGroupOpenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTASetGroupOpenStatus_descriptor_;
  metadata.reflection = CMsgDOTASetGroupOpenStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGroupMergeInvite::kOtherGroupIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGroupMergeInvite)
}

void CMsgDOTAGroupMergeInvite::InitAsDefaultInstance() {
}

CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeInvite)
}

void CMsgDOTAGroupMergeInvite::SharedCtor() {
  _cached_size_ = 0;
  other_group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGroupMergeInvite::~CMsgDOTAGroupMergeInvite() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeInvite)
  SharedDtor();
}

void CMsgDOTAGroupMergeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGroupMergeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGroupMergeInvite_descriptor_;
}

const CMsgDOTAGroupMergeInvite& CMsgDOTAGroupMergeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTAGroupMergeInvite* CMsgDOTAGroupMergeInvite::default_instance_ = NULL;

CMsgDOTAGroupMergeInvite* CMsgDOTAGroupMergeInvite::New() const {
  return new CMsgDOTAGroupMergeInvite;
}

void CMsgDOTAGroupMergeInvite::Clear() {
  other_group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGroupMergeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGroupMergeInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 other_group_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &other_group_id_)));
          set_has_other_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGroupMergeInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGroupMergeInvite)
  return false;
#undef DO_
}

void CMsgDOTAGroupMergeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGroupMergeInvite)
  // optional fixed64 other_group_id = 1;
  if (has_other_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->other_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGroupMergeInvite)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeInvite)
  // optional fixed64 other_group_id = 1;
  if (has_other_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->other_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeInvite)
  return target;
}

int CMsgDOTAGroupMergeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 other_group_id = 1;
    if (has_other_group_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGroupMergeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGroupMergeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const CMsgDOTAGroupMergeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_group_id()) {
      set_other_group_id(from.other_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const CMsgDOTAGroupMergeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeInvite::IsInitialized() const {

  return true;
}

void CMsgDOTAGroupMergeInvite::Swap(CMsgDOTAGroupMergeInvite* other) {
  if (other != this) {
    std::swap(other_group_id_, other->other_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGroupMergeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGroupMergeInvite_descriptor_;
  metadata.reflection = CMsgDOTAGroupMergeInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGroupMergeResponse::kInitiatorGroupIdFieldNumber;
const int CMsgDOTAGroupMergeResponse::kAcceptFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGroupMergeResponse)
}

void CMsgDOTAGroupMergeResponse::InitAsDefaultInstance() {
}

CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeResponse)
}

void CMsgDOTAGroupMergeResponse::SharedCtor() {
  _cached_size_ = 0;
  initiator_group_id_ = GOOGLE_ULONGLONG(0);
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGroupMergeResponse::~CMsgDOTAGroupMergeResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeResponse)
  SharedDtor();
}

void CMsgDOTAGroupMergeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGroupMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGroupMergeResponse_descriptor_;
}

const CMsgDOTAGroupMergeResponse& CMsgDOTAGroupMergeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTAGroupMergeResponse* CMsgDOTAGroupMergeResponse::default_instance_ = NULL;

CMsgDOTAGroupMergeResponse* CMsgDOTAGroupMergeResponse::New() const {
  return new CMsgDOTAGroupMergeResponse;
}

void CMsgDOTAGroupMergeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAGroupMergeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(initiator_group_id_, accept_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGroupMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGroupMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 initiator_group_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &initiator_group_id_)));
          set_has_initiator_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (tag == 16) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGroupMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGroupMergeResponse)
  return false;
#undef DO_
}

void CMsgDOTAGroupMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGroupMergeResponse)
  // optional fixed64 initiator_group_id = 1;
  if (has_initiator_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->initiator_group_id(), output);
  }

  // optional bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGroupMergeResponse)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeResponse)
  // optional fixed64 initiator_group_id = 1;
  if (has_initiator_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->initiator_group_id(), target);
  }

  // optional bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeResponse)
  return target;
}

int CMsgDOTAGroupMergeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 initiator_group_id = 1;
    if (has_initiator_group_id()) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGroupMergeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGroupMergeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const CMsgDOTAGroupMergeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initiator_group_id()) {
      set_initiator_group_id(from.initiator_group_id());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const CMsgDOTAGroupMergeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAGroupMergeResponse::Swap(CMsgDOTAGroupMergeResponse* other) {
  if (other != this) {
    std::swap(initiator_group_id_, other->initiator_group_id_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGroupMergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGroupMergeResponse_descriptor_;
  metadata.reflection = CMsgDOTAGroupMergeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAGroupMergeReply::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAGroupMergeReply)
}

void CMsgDOTAGroupMergeReply::InitAsDefaultInstance() {
}

CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeReply)
}

void CMsgDOTAGroupMergeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAGroupMergeReply::~CMsgDOTAGroupMergeReply() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeReply)
  SharedDtor();
}

void CMsgDOTAGroupMergeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAGroupMergeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAGroupMergeReply_descriptor_;
}

const CMsgDOTAGroupMergeReply& CMsgDOTAGroupMergeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgDOTAGroupMergeReply* CMsgDOTAGroupMergeReply::default_instance_ = NULL;

CMsgDOTAGroupMergeReply* CMsgDOTAGroupMergeReply::New() const {
  return new CMsgDOTAGroupMergeReply;
}

void CMsgDOTAGroupMergeReply::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAGroupMergeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAGroupMergeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EDOTAGroupMergeResult_IsValid(value)) {
            set_result(static_cast< ::EDOTAGroupMergeResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAGroupMergeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAGroupMergeReply)
  return false;
#undef DO_
}

void CMsgDOTAGroupMergeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAGroupMergeReply)
  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAGroupMergeReply)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeReply)
  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeReply)
  return target;
}

int CMsgDOTAGroupMergeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGroupMergeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAGroupMergeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAGroupMergeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeReply::MergeFrom(const CMsgDOTAGroupMergeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAGroupMergeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeReply::CopyFrom(const CMsgDOTAGroupMergeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeReply::IsInitialized() const {

  return true;
}

void CMsgDOTAGroupMergeReply::Swap(CMsgDOTAGroupMergeReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAGroupMergeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAGroupMergeReply_descriptor_;
  metadata.reflection = CMsgDOTAGroupMergeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSpectatorLobbyGameDetails_Team::kTeamIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails_Team::kTeamNameFieldNumber;
const int CMsgSpectatorLobbyGameDetails_Team::kTeamLogoFieldNumber;
#endif  // !_MSC_VER

CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectatorLobbyGameDetails.Team)
}

void CMsgSpectatorLobbyGameDetails_Team::InitAsDefaultInstance() {
}

CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyGameDetails.Team)
}

void CMsgSpectatorLobbyGameDetails_Team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectatorLobbyGameDetails_Team::~CMsgSpectatorLobbyGameDetails_Team() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyGameDetails.Team)
  SharedDtor();
}

void CMsgSpectatorLobbyGameDetails_Team::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSpectatorLobbyGameDetails_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyGameDetails_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectatorLobbyGameDetails_Team_descriptor_;
}

const CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails_Team::default_instance_ = NULL;

CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails_Team::New() const {
  return new CMsgSpectatorLobbyGameDetails_Team;
}

void CMsgSpectatorLobbyGameDetails_Team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSpectatorLobbyGameDetails_Team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(team_logo_, team_id_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectatorLobbyGameDetails_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectatorLobbyGameDetails.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (tag == 18) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_team_logo;
        break;
      }

      // optional fixed64 team_logo = 3;
      case 3: {
        if (tag == 25) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectatorLobbyGameDetails.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectatorLobbyGameDetails.Team)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyGameDetails_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectatorLobbyGameDetails.Team)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional fixed64 team_logo = 3;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->team_logo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectatorLobbyGameDetails.Team)
}

::google::protobuf::uint8* CMsgSpectatorLobbyGameDetails_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyGameDetails.Team)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional fixed64 team_logo = 3;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->team_logo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyGameDetails.Team)
  return target;
}

int CMsgSpectatorLobbyGameDetails_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 3;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectatorLobbyGameDetails_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails_Team::IsInitialized() const {

  return true;
}

void CMsgSpectatorLobbyGameDetails_Team::Swap(CMsgSpectatorLobbyGameDetails_Team* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_logo_, other->team_logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectatorLobbyGameDetails_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectatorLobbyGameDetails_Team_descriptor_;
  metadata.reflection = CMsgSpectatorLobbyGameDetails_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSpectatorLobbyGameDetails::kLanguageFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kMatchIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kServerSteamIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kStreamUrlFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kStreamNameFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kLeagueIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kSeriesTypeFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kSeriesGameFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kRadiantTeamFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kDireTeamFieldNumber;
#endif  // !_MSC_VER

CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectatorLobbyGameDetails)
}

void CMsgSpectatorLobbyGameDetails::InitAsDefaultInstance() {
  radiant_team_ = const_cast< ::CMsgSpectatorLobbyGameDetails_Team*>(&::CMsgSpectatorLobbyGameDetails_Team::default_instance());
  dire_team_ = const_cast< ::CMsgSpectatorLobbyGameDetails_Team*>(&::CMsgSpectatorLobbyGameDetails_Team::default_instance());
}

CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyGameDetails)
}

void CMsgSpectatorLobbyGameDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  language_ = 0u;
  match_id_ = GOOGLE_ULONGLONG(0);
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  stream_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  league_id_ = 0u;
  series_type_ = 0u;
  series_game_ = 0u;
  radiant_team_ = NULL;
  dire_team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectatorLobbyGameDetails::~CMsgSpectatorLobbyGameDetails() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyGameDetails)
  SharedDtor();
}

void CMsgSpectatorLobbyGameDetails::SharedDtor() {
  if (stream_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_url_;
  }
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (this != default_instance_) {
    delete radiant_team_;
    delete dire_team_;
  }
}

void CMsgSpectatorLobbyGameDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyGameDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectatorLobbyGameDetails_descriptor_;
}

const CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyGameDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyGameDetails::default_instance_ = NULL;

CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyGameDetails::New() const {
  return new CMsgSpectatorLobbyGameDetails;
}

void CMsgSpectatorLobbyGameDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSpectatorLobbyGameDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(match_id_, league_id_);
    ZR_(series_type_, series_game_);
    if (has_stream_url()) {
      if (stream_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stream_url_->clear();
      }
    }
    if (has_stream_name()) {
      if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stream_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_radiant_team()) {
      if (radiant_team_ != NULL) radiant_team_->::CMsgSpectatorLobbyGameDetails_Team::Clear();
    }
    if (has_dire_team()) {
      if (dire_team_ != NULL) dire_team_->::CMsgSpectatorLobbyGameDetails_Team::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectatorLobbyGameDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectatorLobbyGameDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (tag == 16) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_server_steam_id;
        break;
      }

      // optional fixed64 server_steam_id = 3;
      case 3: {
        if (tag == 25) {
         parse_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stream_url;
        break;
      }

      // optional string stream_url = 4;
      case 4: {
        if (tag == 34) {
         parse_stream_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_url().data(), this->stream_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stream_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stream_name;
        break;
      }

      // optional string stream_name = 5;
      case 5: {
        if (tag == 42) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stream_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 6;
      case 6: {
        if (tag == 48) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 7;
      case 7: {
        if (tag == 56) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_series_game;
        break;
      }

      // optional uint32 series_game = 8;
      case 8: {
        if (tag == 64) {
         parse_series_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
          set_has_series_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_radiant_team;
        break;
      }

      // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
      case 9: {
        if (tag == 74) {
         parse_radiant_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radiant_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_dire_team;
        break;
      }

      // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
      case 10: {
        if (tag == 82) {
         parse_dire_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dire_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectatorLobbyGameDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectatorLobbyGameDetails)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyGameDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectatorLobbyGameDetails)
  // optional uint32 language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional fixed64 server_steam_id = 3;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->server_steam_id(), output);
  }

  // optional string stream_url = 4;
  if (has_stream_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), this->stream_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stream_url(), output);
  }

  // optional string stream_name = 5;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stream_name(), output);
  }

  // optional uint32 league_id = 6;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->league_id(), output);
  }

  // optional uint32 series_type = 7;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_type(), output);
  }

  // optional uint32 series_game = 8;
  if (has_series_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_game(), output);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (has_radiant_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->radiant_team(), output);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (has_dire_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dire_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectatorLobbyGameDetails)
}

::google::protobuf::uint8* CMsgSpectatorLobbyGameDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyGameDetails)
  // optional uint32 language = 1;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional uint64 match_id = 2;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional fixed64 server_steam_id = 3;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->server_steam_id(), target);
  }

  // optional string stream_url = 4;
  if (has_stream_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), this->stream_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stream_url(), target);
  }

  // optional string stream_name = 5;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stream_name(), target);
  }

  // optional uint32 league_id = 6;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->league_id(), target);
  }

  // optional uint32 series_type = 7;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_type(), target);
  }

  // optional uint32 series_game = 8;
  if (has_series_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_game(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (has_radiant_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->radiant_team(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (has_dire_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dire_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyGameDetails)
  return target;
}

int CMsgSpectatorLobbyGameDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed64 server_steam_id = 3;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional string stream_url = 4;
    if (has_stream_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_url());
    }

    // optional string stream_name = 5;
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

    // optional uint32 league_id = 6;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 series_type = 7;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 series_game = 8;
    if (has_series_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
    if (has_radiant_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radiant_team());
    }

    // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
    if (has_dire_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dire_team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectatorLobbyGameDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const CMsgSpectatorLobbyGameDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_stream_url()) {
      set_stream_url(from.stream_url());
    }
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_series_game()) {
      set_series_game(from.series_game());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radiant_team()) {
      mutable_radiant_team()->::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from.radiant_team());
    }
    if (from.has_dire_team()) {
      mutable_dire_team()->::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from.dire_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const CMsgSpectatorLobbyGameDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails::IsInitialized() const {

  return true;
}

void CMsgSpectatorLobbyGameDetails::Swap(CMsgSpectatorLobbyGameDetails* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(match_id_, other->match_id_);
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(stream_url_, other->stream_url_);
    std::swap(stream_name_, other->stream_name_);
    std::swap(league_id_, other->league_id_);
    std::swap(series_type_, other->series_type_);
    std::swap(series_game_, other->series_game_);
    std::swap(radiant_team_, other->radiant_team_);
    std::swap(dire_team_, other->dire_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectatorLobbyGameDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectatorLobbyGameDetails_descriptor_;
  metadata.reflection = CMsgSpectatorLobbyGameDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSetSpectatorLobbyDetails::kLobbyIdFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kLobbyNameFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kPassKeyFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kGameDetailsFieldNumber;
#endif  // !_MSC_VER

CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSetSpectatorLobbyDetails)
}

void CMsgSetSpectatorLobbyDetails::InitAsDefaultInstance() {
  game_details_ = const_cast< ::CMsgSpectatorLobbyGameDetails*>(&::CMsgSpectatorLobbyGameDetails::default_instance());
}

CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSetSpectatorLobbyDetails)
}

void CMsgSetSpectatorLobbyDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSetSpectatorLobbyDetails::~CMsgSetSpectatorLobbyDetails() {
  // @@protoc_insertion_point(destructor:CMsgSetSpectatorLobbyDetails)
  SharedDtor();
}

void CMsgSetSpectatorLobbyDetails::SharedDtor() {
  if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lobby_name_;
  }
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (this != default_instance_) {
    delete game_details_;
  }
}

void CMsgSetSpectatorLobbyDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetSpectatorLobbyDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSetSpectatorLobbyDetails_descriptor_;
}

const CMsgSetSpectatorLobbyDetails& CMsgSetSpectatorLobbyDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgSetSpectatorLobbyDetails* CMsgSetSpectatorLobbyDetails::default_instance_ = NULL;

CMsgSetSpectatorLobbyDetails* CMsgSetSpectatorLobbyDetails::New() const {
  return new CMsgSetSpectatorLobbyDetails;
}

void CMsgSetSpectatorLobbyDetails::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    lobby_id_ = GOOGLE_ULONGLONG(0);
    if (has_lobby_name()) {
      if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lobby_name_->clear();
      }
    }
    if (has_pass_key()) {
      if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pass_key_->clear();
      }
    }
    if (has_game_details()) {
      if (game_details_ != NULL) game_details_->::CMsgSpectatorLobbyGameDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSetSpectatorLobbyDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSetSpectatorLobbyDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lobby_name;
        break;
      }

      // optional string lobby_name = 2;
      case 2: {
        if (tag == 18) {
         parse_lobby_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby_name().data(), this->lobby_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lobby_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pass_key;
        break;
      }

      // optional string pass_key = 3;
      case 3: {
        if (tag == 26) {
         parse_pass_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pass_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_details;
        break;
      }

      // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
      case 4: {
        if (tag == 34) {
         parse_game_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSetSpectatorLobbyDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSetSpectatorLobbyDetails)
  return false;
#undef DO_
}

void CMsgSetSpectatorLobbyDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSetSpectatorLobbyDetails)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string lobby_name = 2;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lobby_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lobby_name(), output);
  }

  // optional string pass_key = 3;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_key(), output);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
  if (has_game_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->game_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSetSpectatorLobbyDetails)
}

::google::protobuf::uint8* CMsgSetSpectatorLobbyDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetSpectatorLobbyDetails)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string lobby_name = 2;
  if (has_lobby_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lobby_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lobby_name(), target);
  }

  // optional string pass_key = 3;
  if (has_pass_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_key(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
  if (has_game_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->game_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetSpectatorLobbyDetails)
  return target;
}

int CMsgSetSpectatorLobbyDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional string lobby_name = 2;
    if (has_lobby_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }

    // optional string pass_key = 3;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
    if (has_game_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSetSpectatorLobbyDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSetSpectatorLobbyDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const CMsgSetSpectatorLobbyDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_lobby_name()) {
      set_lobby_name(from.lobby_name());
    }
    if (from.has_pass_key()) {
      set_pass_key(from.pass_key());
    }
    if (from.has_game_details()) {
      mutable_game_details()->::CMsgSpectatorLobbyGameDetails::MergeFrom(from.game_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const CMsgSetSpectatorLobbyDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSpectatorLobbyDetails::IsInitialized() const {

  return true;
}

void CMsgSetSpectatorLobbyDetails::Swap(CMsgSetSpectatorLobbyDetails* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(lobby_name_, other->lobby_name_);
    std::swap(pass_key_, other->pass_key_);
    std::swap(game_details_, other->game_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSetSpectatorLobbyDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSetSpectatorLobbyDetails_descriptor_;
  metadata.reflection = CMsgSetSpectatorLobbyDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCreateSpectatorLobby::kClientVersionFieldNumber;
const int CMsgCreateSpectatorLobby::kDetailsFieldNumber;
#endif  // !_MSC_VER

CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCreateSpectatorLobby)
}

void CMsgCreateSpectatorLobby::InitAsDefaultInstance() {
  details_ = const_cast< ::CMsgSetSpectatorLobbyDetails*>(&::CMsgSetSpectatorLobbyDetails::default_instance());
}

CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgCreateSpectatorLobby)
}

void CMsgCreateSpectatorLobby::SharedCtor() {
  _cached_size_ = 0;
  client_version_ = 0u;
  details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCreateSpectatorLobby::~CMsgCreateSpectatorLobby() {
  // @@protoc_insertion_point(destructor:CMsgCreateSpectatorLobby)
  SharedDtor();
}

void CMsgCreateSpectatorLobby::SharedDtor() {
  if (this != default_instance_) {
    delete details_;
  }
}

void CMsgCreateSpectatorLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCreateSpectatorLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCreateSpectatorLobby_descriptor_;
}

const CMsgCreateSpectatorLobby& CMsgCreateSpectatorLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgCreateSpectatorLobby* CMsgCreateSpectatorLobby::default_instance_ = NULL;

CMsgCreateSpectatorLobby* CMsgCreateSpectatorLobby::New() const {
  return new CMsgCreateSpectatorLobby;
}

void CMsgCreateSpectatorLobby::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    client_version_ = 0u;
    if (has_details()) {
      if (details_ != NULL) details_->::CMsgSetSpectatorLobbyDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCreateSpectatorLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCreateSpectatorLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // optional .CMsgSetSpectatorLobbyDetails details = 2;
      case 2: {
        if (tag == 18) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCreateSpectatorLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCreateSpectatorLobby)
  return false;
#undef DO_
}

void CMsgCreateSpectatorLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCreateSpectatorLobby)
  // optional uint32 client_version = 1;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }

  // optional .CMsgSetSpectatorLobbyDetails details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCreateSpectatorLobby)
}

::google::protobuf::uint8* CMsgCreateSpectatorLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCreateSpectatorLobby)
  // optional uint32 client_version = 1;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }

  // optional .CMsgSetSpectatorLobbyDetails details = 2;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCreateSpectatorLobby)
  return target;
}

int CMsgCreateSpectatorLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_version = 1;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .CMsgSetSpectatorLobbyDetails details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCreateSpectatorLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCreateSpectatorLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCreateSpectatorLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCreateSpectatorLobby::MergeFrom(const CMsgCreateSpectatorLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_details()) {
      mutable_details()->::CMsgSetSpectatorLobbyDetails::MergeFrom(from.details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCreateSpectatorLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCreateSpectatorLobby::CopyFrom(const CMsgCreateSpectatorLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateSpectatorLobby::IsInitialized() const {

  return true;
}

void CMsgCreateSpectatorLobby::Swap(CMsgCreateSpectatorLobby* other) {
  if (other != this) {
    std::swap(client_version_, other->client_version_);
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCreateSpectatorLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCreateSpectatorLobby_descriptor_;
  metadata.reflection = CMsgCreateSpectatorLobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgSpectatorLobbyList::CMsgSpectatorLobbyList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectatorLobbyList)
}

void CMsgSpectatorLobbyList::InitAsDefaultInstance() {
}

CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyList)
}

void CMsgSpectatorLobbyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectatorLobbyList::~CMsgSpectatorLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyList)
  SharedDtor();
}

void CMsgSpectatorLobbyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSpectatorLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectatorLobbyList_descriptor_;
}

const CMsgSpectatorLobbyList& CMsgSpectatorLobbyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgSpectatorLobbyList* CMsgSpectatorLobbyList::default_instance_ = NULL;

CMsgSpectatorLobbyList* CMsgSpectatorLobbyList::New() const {
  return new CMsgSpectatorLobbyList;
}

void CMsgSpectatorLobbyList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectatorLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectatorLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectatorLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectatorLobbyList)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectatorLobbyList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectatorLobbyList)
}

::google::protobuf::uint8* CMsgSpectatorLobbyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyList)
  return target;
}

int CMsgSpectatorLobbyList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectatorLobbyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectatorLobbyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyList::MergeFrom(const CMsgSpectatorLobbyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectatorLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyList::CopyFrom(const CMsgSpectatorLobbyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyList::IsInitialized() const {

  return true;
}

void CMsgSpectatorLobbyList::Swap(CMsgSpectatorLobbyList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectatorLobbyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectatorLobbyList_descriptor_;
  metadata.reflection = CMsgSpectatorLobbyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kLobbyIdFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kGameNameFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kRequiresPassKeyFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kLeaderAccountIdFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kMemberCountFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kGameDetailsFieldNumber;
#endif  // !_MSC_VER

CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::InitAsDefaultInstance() {
  game_details_ = const_cast< ::CMsgSpectatorLobbyGameDetails*>(&::CMsgSpectatorLobbyGameDetails::default_instance());
}

CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requires_pass_key_ = false;
  leader_account_id_ = 0u;
  member_count_ = 0u;
  game_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectatorLobbyListResponse_SpectatorLobby::~CMsgSpectatorLobbyListResponse_SpectatorLobby() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  SharedDtor();
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedDtor() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (this != default_instance_) {
    delete game_details_;
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyListResponse_SpectatorLobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectatorLobbyListResponse_SpectatorLobby_descriptor_;
}

const CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance_ = NULL;

CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse_SpectatorLobby::New() const {
  return new CMsgSpectatorLobbyListResponse_SpectatorLobby;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSpectatorLobbyListResponse_SpectatorLobby*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(requires_pass_key_, leader_account_id_);
    lobby_id_ = GOOGLE_ULONGLONG(0);
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_name_->clear();
      }
    }
    member_count_ = 0u;
    if (has_game_details()) {
      if (game_details_ != NULL) game_details_->::CMsgSpectatorLobbyGameDetails::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_name;
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (tag == 18) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_requires_pass_key;
        break;
      }

      // optional bool requires_pass_key = 3;
      case 3: {
        if (tag == 24) {
         parse_requires_pass_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
          set_has_requires_pass_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leader_account_id;
        break;
      }

      // optional uint32 leader_account_id = 4;
      case 4: {
        if (tag == 32) {
         parse_leader_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
          set_has_leader_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 5;
      case 5: {
        if (tag == 40) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_details;
        break;
      }

      // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
      case 7: {
        if (tag == 58) {
         parse_game_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string game_name = 2;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional bool requires_pass_key = 3;
  if (has_requires_pass_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 4;
  if (has_leader_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leader_account_id(), output);
  }

  // optional uint32 member_count = 5;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_count(), output);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
  if (has_game_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

::google::protobuf::uint8* CMsgSpectatorLobbyListResponse_SpectatorLobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  // optional uint64 lobby_id = 1;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string game_name = 2;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional bool requires_pass_key = 3;
  if (has_requires_pass_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 4;
  if (has_leader_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leader_account_id(), target);
  }

  // optional uint32 member_count = 5;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->member_count(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
  if (has_game_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->game_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return target;
}

int CMsgSpectatorLobbyListResponse_SpectatorLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional string game_name = 2;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional bool requires_pass_key = 3;
    if (has_requires_pass_key()) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 4;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 member_count = 5;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
    if (has_game_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse_SpectatorLobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectatorLobbyListResponse_SpectatorLobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_requires_pass_key()) {
      set_requires_pass_key(from.requires_pass_key());
    }
    if (from.has_leader_account_id()) {
      set_leader_account_id(from.leader_account_id());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_game_details()) {
      mutable_game_details()->::CMsgSpectatorLobbyGameDetails::MergeFrom(from.game_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::IsInitialized() const {

  return true;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Swap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  if (other != this) {
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(game_name_, other->game_name_);
    std::swap(requires_pass_key_, other->requires_pass_key_);
    std::swap(leader_account_id_, other->leader_account_id_);
    std::swap(member_count_, other->member_count_);
    std::swap(game_details_, other->game_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectatorLobbyListResponse_SpectatorLobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectatorLobbyListResponse_SpectatorLobby_descriptor_;
  metadata.reflection = CMsgSpectatorLobbyListResponse_SpectatorLobby_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSpectatorLobbyListResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectatorLobbyListResponse)
}

void CMsgSpectatorLobbyListResponse::InitAsDefaultInstance() {
}

CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyListResponse)
}

void CMsgSpectatorLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectatorLobbyListResponse::~CMsgSpectatorLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyListResponse)
  SharedDtor();
}

void CMsgSpectatorLobbyListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSpectatorLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectatorLobbyListResponse_descriptor_;
}

const CMsgSpectatorLobbyListResponse& CMsgSpectatorLobbyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgSpectatorLobbyListResponse* CMsgSpectatorLobbyListResponse::default_instance_ = NULL;

CMsgSpectatorLobbyListResponse* CMsgSpectatorLobbyListResponse::New() const {
  return new CMsgSpectatorLobbyListResponse;
}

void CMsgSpectatorLobbyListResponse::Clear() {
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectatorLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectatorLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
      case 1: {
        if (tag == 10) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lobbies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectatorLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectatorLobbyListResponse)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectatorLobbyListResponse)
  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectatorLobbyListResponse)
}

::google::protobuf::uint8* CMsgSpectatorLobbyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyListResponse)
  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (int i = 0; i < this->lobbies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lobbies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyListResponse)
  return target;
}

int CMsgSpectatorLobbyListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectatorLobbyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const CMsgSpectatorLobbyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const CMsgSpectatorLobbyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse::IsInitialized() const {

  return true;
}

void CMsgSpectatorLobbyListResponse::Swap(CMsgSpectatorLobbyListResponse* other) {
  if (other != this) {
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectatorLobbyListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectatorLobbyListResponse_descriptor_;
  metadata.reflection = CMsgSpectatorLobbyListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCRequestSteamDatagramTicket::kServerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCRequestSteamDatagramTicket)
}

void CMsgClientToGCRequestSteamDatagramTicket::InitAsDefaultInstance() {
}

CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSteamDatagramTicket)
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCRequestSteamDatagramTicket::~CMsgClientToGCRequestSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSteamDatagramTicket)
  SharedDtor();
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRequestSteamDatagramTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCRequestSteamDatagramTicket_descriptor_;
}

const CMsgClientToGCRequestSteamDatagramTicket& CMsgClientToGCRequestSteamDatagramTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgClientToGCRequestSteamDatagramTicket* CMsgClientToGCRequestSteamDatagramTicket::default_instance_ = NULL;

CMsgClientToGCRequestSteamDatagramTicket* CMsgClientToGCRequestSteamDatagramTicket::New() const {
  return new CMsgClientToGCRequestSteamDatagramTicket;
}

void CMsgClientToGCRequestSteamDatagramTicket::Clear() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCRequestSteamDatagramTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCRequestSteamDatagramTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCRequestSteamDatagramTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCRequestSteamDatagramTicket)
  return false;
#undef DO_
}

void CMsgClientToGCRequestSteamDatagramTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCRequestSteamDatagramTicket)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCRequestSteamDatagramTicket)
}

::google::protobuf::uint8* CMsgClientToGCRequestSteamDatagramTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSteamDatagramTicket)
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSteamDatagramTicket)
  return target;
}

int CMsgClientToGCRequestSteamDatagramTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCRequestSteamDatagramTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicket::IsInitialized() const {

  return true;
}

void CMsgClientToGCRequestSteamDatagramTicket::Swap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  if (other != this) {
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCRequestSteamDatagramTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCRequestSteamDatagramTicket_descriptor_;
  metadata.reflection = CMsgClientToGCRequestSteamDatagramTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCRequestSteamDatagramTicketResponse::kSerializedTicketFieldNumber;
const int CMsgClientToGCRequestSteamDatagramTicketResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::InitAsDefaultInstance() {
}

CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialized_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCRequestSteamDatagramTicketResponse::~CMsgClientToGCRequestSteamDatagramTicketResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
  SharedDtor();
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedDtor() {
  if (serialized_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_ticket_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRequestSteamDatagramTicketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCRequestSteamDatagramTicketResponse_descriptor_;
}

const CMsgClientToGCRequestSteamDatagramTicketResponse& CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  return *default_instance_;
}

CMsgClientToGCRequestSteamDatagramTicketResponse* CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance_ = NULL;

CMsgClientToGCRequestSteamDatagramTicketResponse* CMsgClientToGCRequestSteamDatagramTicketResponse::New() const {
  return new CMsgClientToGCRequestSteamDatagramTicketResponse;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_serialized_ticket()) {
      if (serialized_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_ticket_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serialized_ticket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serialized_ticket().data(), this->serialized_ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serialized_ticket");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCRequestSteamDatagramTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCRequestSteamDatagramTicketResponse)
  return false;
#undef DO_
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  // optional string serialized_ticket = 1;
  if (has_serialized_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialized_ticket().data(), this->serialized_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serialized_ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serialized_ticket(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCRequestSteamDatagramTicketResponse)
}

::google::protobuf::uint8* CMsgClientToGCRequestSteamDatagramTicketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  // optional string serialized_ticket = 1;
  if (has_serialized_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialized_ticket().data(), this->serialized_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serialized_ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serialized_ticket(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSteamDatagramTicketResponse)
  return target;
}

int CMsgClientToGCRequestSteamDatagramTicketResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serialized_ticket = 1;
    if (has_serialized_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialized_ticket());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCRequestSteamDatagramTicketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_ticket()) {
      set_serialized_ticket(from.serialized_ticket());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::IsInitialized() const {

  return true;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Swap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  if (other != this) {
    std::swap(serialized_ticket_, other->serialized_ticket_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCRequestSteamDatagramTicketResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCRequestSteamDatagramTicketResponse_descriptor_;
  metadata.reflection = CMsgClientToGCRequestSteamDatagramTicketResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
