// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_client_enums.pb.h"
#include "base_gcmessages.pb.h"
#include "dota_gcmessages_common_match_management.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

class CMsgStartFindingMatch;
class CMsgStartFindingMatchResult;
class CMsgStopFindingMatch;
class CMsgPartyBuilderOptions;
class CMsgReadyUp;
class CMsgReadyUpStatus;
class CMsgAbandonCurrentGame;
class CMsgPracticeLobbySetDetails;
class CMsgPracticeLobbyCreate;
class CMsgPracticeLobbyCreate_SaveGame;
class CMsgPracticeLobbySetTeamSlot;
class CMsgPracticeLobbySetCoach;
class CMsgPracticeLobbyJoinBroadcastChannel;
class CMsgPracticeLobbyCloseBroadcastChannel;
class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus;
class CMsgPracticeLobbyKick;
class CMsgPracticeLobbyKickFromTeam;
class CMsgPracticeLobbyLeave;
class CMsgPracticeLobbyLaunch;
class CMsgApplyTeamToPracticeLobby;
class CMsgClearPracticeLobbyTeam;
class CMsgPracticeLobbyList;
class CMsgPracticeLobbyListResponseEntry;
class CMsgPracticeLobbyListResponseEntry_CLobbyMember;
class CMsgPracticeLobbyListResponse;
class CMsgLobbyList;
class CMsgLobbyListResponse;
class CMsgPracticeLobbyJoin;
class CMsgPracticeLobbyJoinResponse;
class CMsgFriendPracticeLobbyListRequest;
class CMsgFriendPracticeLobbyListResponse;
class CMsgGuildmatePracticeLobbyListRequest;
class CMsgGuildmatePracticeLobbyListResponse;
class CMsgJoinableCustomGameModesRequest;
class CMsgJoinableCustomGameModesResponseEntry;
class CMsgJoinableCustomGameModesResponse;
class CMsgJoinableCustomLobbiesRequest;
class CMsgJoinableCustomLobbiesResponseEntry;
class CMsgJoinableCustomLobbiesResponse;
class CMsgQuickJoinCustomLobby;
class CMsgQuickJoinCustomLobby_LegacyRegionPing;
class CMsgQuickJoinCustomLobbyResponse;
class CMsgBotGameCreate;
class CMsgCustomGameCreate;
class CMsgEventGameCreate;
class CMsgDOTAPartyMemberSetCoach;
class CMsgDOTASetGroupLeader;
class CMsgDOTACancelGroupInvites;
class CMsgDOTASetGroupOpenStatus;
class CMsgDOTAGroupMergeInvite;
class CMsgDOTAGroupMergeResponse;
class CMsgDOTAGroupMergeReply;
class CMsgSpectatorLobbyGameDetails;
class CMsgSpectatorLobbyGameDetails_Team;
class CMsgSetSpectatorLobbyDetails;
class CMsgCreateSpectatorLobby;
class CMsgSpectatorLobbyList;
class CMsgSpectatorLobbyListResponse;
class CMsgSpectatorLobbyListResponse_SpectatorLobby;
class CMsgClientToGCRequestSteamDatagramTicket;
class CMsgClientToGCRequestSteamDatagramTicketResponse;

enum EStartFindingMatchResult {
  k_EStartFindingMatchResult_Invalid = 0,
  k_EStartFindingMatchResult_OK = 1,
  k_EStartFindingMatchResult_AlreadySearching = 2,
  k_EStartFindingMatchResult_FailGeneric = 100,
  k_EStartFindingMatchResult_FailedIgnore = 101,
  k_EStartFindingMatchResult_MatchmakingDisabled = 102,
  k_EStartFindingMatchResult_RegionOffline = 103,
  k_EStartFindingMatchResult_MatchmakingCooldown = 104,
  k_EStartFindingMatchResult_ClientOutOfDate = 105,
  k_EStartFindingMatchResult_CompetitiveNoLowPriority = 106,
  k_EStartFindingMatchResult_CompetitiveNotUnlocked = 107,
  k_EStartFindingMatchResult_GameModeNotUnlocked = 108,
  k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData = 109,
  k_EStartFindingMatchResult_MissingInitialSkill = 110,
  k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge = 111,
  k_EStartFindingMatchResult_MemberAlreadyInLobby = 112,
  k_EStartFindingMatchResult_MemberNotVACVerified = 113,
  k_EStartFindingMatchResult_WeekendTourneyBadPartySize = 114,
  k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall = 115,
  k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge = 116,
  k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge = 117,
  k_EStartFindingMatchResult_MemberMissingEventOwnership = 118,
  k_EStartFindingMatchResult_WeekendTourneyNotUnlocked = 119,
  k_EStartFindingMatchResult_WeekendTourneyRecentParticipation = 120
};
bool EStartFindingMatchResult_IsValid(int value);
const EStartFindingMatchResult EStartFindingMatchResult_MIN = k_EStartFindingMatchResult_Invalid;
const EStartFindingMatchResult EStartFindingMatchResult_MAX = k_EStartFindingMatchResult_WeekendTourneyRecentParticipation;
const int EStartFindingMatchResult_ARRAYSIZE = EStartFindingMatchResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EStartFindingMatchResult_descriptor();
inline const ::std::string& EStartFindingMatchResult_Name(EStartFindingMatchResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EStartFindingMatchResult_descriptor(), value);
}
inline bool EStartFindingMatchResult_Parse(
    const ::std::string& name, EStartFindingMatchResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EStartFindingMatchResult>(
    EStartFindingMatchResult_descriptor(), name, value);
}
// ===================================================================

class CMsgStartFindingMatch : public ::google::protobuf::Message {
 public:
  CMsgStartFindingMatch();
  virtual ~CMsgStartFindingMatch();

  CMsgStartFindingMatch(const CMsgStartFindingMatch& from);

  inline CMsgStartFindingMatch& operator=(const CMsgStartFindingMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStartFindingMatch& default_instance();

  void Swap(CMsgStartFindingMatch* other);

  // implements Message ----------------------------------------------

  CMsgStartFindingMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStartFindingMatch& from);
  void MergeFrom(const CMsgStartFindingMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional uint32 matchgroups = 2 [default = 4294967295];
  inline bool has_matchgroups() const;
  inline void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 2;
  inline ::google::protobuf::uint32 matchgroups() const;
  inline void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 client_version = 3;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional uint32 game_modes = 4 [default = 4294967295];
  inline bool has_game_modes() const;
  inline void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  inline ::google::protobuf::uint32 game_modes() const;
  inline void set_game_modes(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 5;
  inline ::DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(::DOTABotDifficulty value);

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  inline ::MatchType match_type() const;
  inline void set_match_type(::MatchType value);

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  inline bool has_matchlanguages() const;
  inline void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 7;
  inline ::google::protobuf::uint32 matchlanguages() const;
  inline void set_matchlanguages(::google::protobuf::uint32 value);

  // optional uint32 map_preference = 9;
  inline bool has_map_preference() const;
  inline void clear_map_preference();
  static const int kMapPreferenceFieldNumber = 9;
  inline ::google::protobuf::uint32 map_preference() const;
  inline void set_map_preference(::google::protobuf::uint32 value);

  // optional uint32 team_id = 8;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 8;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  inline bool has_game_language_enum() const;
  inline void clear_game_language_enum();
  static const int kGameLanguageEnumFieldNumber = 10;
  inline ::MatchLanguages game_language_enum() const;
  inline void set_game_language_enum(::MatchLanguages value);

  // optional string game_language_name = 11;
  inline bool has_game_language_name() const;
  inline void clear_game_language_name();
  static const int kGameLanguageNameFieldNumber = 11;
  inline const ::std::string& game_language_name() const;
  inline void set_game_language_name(const ::std::string& value);
  inline void set_game_language_name(const char* value);
  inline void set_game_language_name(const char* value, size_t size);
  inline ::std::string* mutable_game_language_name();
  inline ::std::string* release_game_language_name();
  inline void set_allocated_game_language_name(::std::string* game_language_name);

  // optional .CMsgClientPingData ping_data = 12;
  inline bool has_ping_data() const;
  inline void clear_ping_data();
  static const int kPingDataFieldNumber = 12;
  inline const ::CMsgClientPingData& ping_data() const;
  inline ::CMsgClientPingData* mutable_ping_data();
  inline ::CMsgClientPingData* release_ping_data();
  inline void set_allocated_ping_data(::CMsgClientPingData* ping_data);

  // optional uint32 region_select_flags = 13;
  inline bool has_region_select_flags() const;
  inline void clear_region_select_flags();
  static const int kRegionSelectFlagsFieldNumber = 13;
  inline ::google::protobuf::uint32 region_select_flags() const;
  inline void set_region_select_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgStartFindingMatch)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_matchgroups();
  inline void clear_has_matchgroups();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_game_modes();
  inline void clear_has_game_modes();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_matchlanguages();
  inline void clear_has_matchlanguages();
  inline void set_has_map_preference();
  inline void clear_has_map_preference();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_game_language_enum();
  inline void clear_has_game_language_enum();
  inline void set_has_game_language_name();
  inline void clear_has_game_language_name();
  inline void set_has_ping_data();
  inline void clear_has_ping_data();
  inline void set_has_region_select_flags();
  inline void clear_has_region_select_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 client_version_;
  ::google::protobuf::uint32 game_modes_;
  int bot_difficulty_;
  int match_type_;
  ::google::protobuf::uint32 matchlanguages_;
  ::google::protobuf::uint32 map_preference_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* game_language_name_;
  int game_language_enum_;
  ::google::protobuf::uint32 region_select_flags_;
  ::CMsgClientPingData* ping_data_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgStartFindingMatch* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStartFindingMatchResult : public ::google::protobuf::Message {
 public:
  CMsgStartFindingMatchResult();
  virtual ~CMsgStartFindingMatchResult();

  CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from);

  inline CMsgStartFindingMatchResult& operator=(const CMsgStartFindingMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStartFindingMatchResult& default_instance();

  void Swap(CMsgStartFindingMatchResult* other);

  // implements Message ----------------------------------------------

  CMsgStartFindingMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStartFindingMatchResult& from);
  void MergeFrom(const CMsgStartFindingMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  inline bool has_legacy_generic_eresult() const;
  inline void clear_legacy_generic_eresult();
  static const int kLegacyGenericEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 legacy_generic_eresult() const;
  inline void set_legacy_generic_eresult(::google::protobuf::uint32 value);

  // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::EStartFindingMatchResult result() const;
  inline void set_result(::EStartFindingMatchResult value);

  // optional string error_token = 3;
  inline bool has_error_token() const;
  inline void clear_error_token();
  static const int kErrorTokenFieldNumber = 3;
  inline const ::std::string& error_token() const;
  inline void set_error_token(const ::std::string& value);
  inline void set_error_token(const char* value);
  inline void set_error_token(const char* value, size_t size);
  inline ::std::string* mutable_error_token();
  inline ::std::string* release_error_token();
  inline void set_allocated_error_token(::std::string* error_token);

  // optional string debug_message = 4;
  inline bool has_debug_message() const;
  inline void clear_debug_message();
  static const int kDebugMessageFieldNumber = 4;
  inline const ::std::string& debug_message() const;
  inline void set_debug_message(const ::std::string& value);
  inline void set_debug_message(const char* value);
  inline void set_debug_message(const char* value, size_t size);
  inline ::std::string* mutable_debug_message();
  inline ::std::string* release_debug_message();
  inline void set_allocated_debug_message(::std::string* debug_message);

  // repeated fixed64 responsible_party_members = 5;
  inline int responsible_party_members_size() const;
  inline void clear_responsible_party_members();
  static const int kResponsiblePartyMembersFieldNumber = 5;
  inline ::google::protobuf::uint64 responsible_party_members(int index) const;
  inline void set_responsible_party_members(int index, ::google::protobuf::uint64 value);
  inline void add_responsible_party_members(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      responsible_party_members() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_responsible_party_members();

  // @@protoc_insertion_point(class_scope:CMsgStartFindingMatchResult)
 private:
  inline void set_has_legacy_generic_eresult();
  inline void clear_has_legacy_generic_eresult();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_token();
  inline void clear_has_error_token();
  inline void set_has_debug_message();
  inline void clear_has_debug_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 legacy_generic_eresult_;
  int result_;
  ::std::string* error_token_;
  ::std::string* debug_message_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > responsible_party_members_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgStartFindingMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStopFindingMatch : public ::google::protobuf::Message {
 public:
  CMsgStopFindingMatch();
  virtual ~CMsgStopFindingMatch();

  CMsgStopFindingMatch(const CMsgStopFindingMatch& from);

  inline CMsgStopFindingMatch& operator=(const CMsgStopFindingMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStopFindingMatch& default_instance();

  void Swap(CMsgStopFindingMatch* other);

  // implements Message ----------------------------------------------

  CMsgStopFindingMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStopFindingMatch& from);
  void MergeFrom(const CMsgStopFindingMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgStopFindingMatch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgStopFindingMatch* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPartyBuilderOptions : public ::google::protobuf::Message {
 public:
  CMsgPartyBuilderOptions();
  virtual ~CMsgPartyBuilderOptions();

  CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from);

  inline CMsgPartyBuilderOptions& operator=(const CMsgPartyBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPartyBuilderOptions& default_instance();

  void Swap(CMsgPartyBuilderOptions* other);

  // implements Message ----------------------------------------------

  CMsgPartyBuilderOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPartyBuilderOptions& from);
  void MergeFrom(const CMsgPartyBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 additional_slots = 1;
  inline bool has_additional_slots() const;
  inline void clear_additional_slots();
  static const int kAdditionalSlotsFieldNumber = 1;
  inline ::google::protobuf::uint32 additional_slots() const;
  inline void set_additional_slots(::google::protobuf::uint32 value);

  // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 2;
  inline ::MatchType match_type() const;
  inline void set_match_type(::MatchType value);

  // optional uint32 matchgroups = 3;
  inline bool has_matchgroups() const;
  inline void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 3;
  inline ::google::protobuf::uint32 matchgroups() const;
  inline void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 client_version = 4;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 5;
  inline ::MatchLanguages language() const;
  inline void set_language(::MatchLanguages value);

  // @@protoc_insertion_point(class_scope:CMsgPartyBuilderOptions)
 private:
  inline void set_has_additional_slots();
  inline void clear_has_additional_slots();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_matchgroups();
  inline void clear_has_matchgroups();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_language();
  inline void clear_has_language();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 additional_slots_;
  int match_type_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 client_version_;
  int language_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPartyBuilderOptions* default_instance_;
};
// -------------------------------------------------------------------

class CMsgReadyUp : public ::google::protobuf::Message {
 public:
  CMsgReadyUp();
  virtual ~CMsgReadyUp();

  CMsgReadyUp(const CMsgReadyUp& from);

  inline CMsgReadyUp& operator=(const CMsgReadyUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgReadyUp& default_instance();

  void Swap(CMsgReadyUp* other);

  // implements Message ----------------------------------------------

  CMsgReadyUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgReadyUp& from);
  void MergeFrom(const CMsgReadyUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::DOTALobbyReadyState state() const;
  inline void set_state(::DOTALobbyReadyState value);

  // optional fixed64 ready_up_key = 2;
  inline bool has_ready_up_key() const;
  inline void clear_ready_up_key();
  static const int kReadyUpKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 ready_up_key() const;
  inline void set_ready_up_key(::google::protobuf::uint64 value);

  // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
  inline bool has_hardware_specs() const;
  inline void clear_hardware_specs();
  static const int kHardwareSpecsFieldNumber = 3;
  inline const ::CDOTAClientHardwareSpecs& hardware_specs() const;
  inline ::CDOTAClientHardwareSpecs* mutable_hardware_specs();
  inline ::CDOTAClientHardwareSpecs* release_hardware_specs();
  inline void set_allocated_hardware_specs(::CDOTAClientHardwareSpecs* hardware_specs);

  // @@protoc_insertion_point(class_scope:CMsgReadyUp)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_ready_up_key();
  inline void clear_has_ready_up_key();
  inline void set_has_hardware_specs();
  inline void clear_has_hardware_specs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ready_up_key_;
  ::CDOTAClientHardwareSpecs* hardware_specs_;
  int state_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgReadyUp* default_instance_;
};
// -------------------------------------------------------------------

class CMsgReadyUpStatus : public ::google::protobuf::Message {
 public:
  CMsgReadyUpStatus();
  virtual ~CMsgReadyUpStatus();

  CMsgReadyUpStatus(const CMsgReadyUpStatus& from);

  inline CMsgReadyUpStatus& operator=(const CMsgReadyUpStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgReadyUpStatus& default_instance();

  void Swap(CMsgReadyUpStatus* other);

  // implements Message ----------------------------------------------

  CMsgReadyUpStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgReadyUpStatus& from);
  void MergeFrom(const CMsgReadyUpStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // repeated uint32 accepted_ids = 2;
  inline int accepted_ids_size() const;
  inline void clear_accepted_ids();
  static const int kAcceptedIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 accepted_ids(int index) const;
  inline void set_accepted_ids(int index, ::google::protobuf::uint32 value);
  inline void add_accepted_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      accepted_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_accepted_ids();

  // repeated uint32 declined_ids = 3;
  inline int declined_ids_size() const;
  inline void clear_declined_ids();
  static const int kDeclinedIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 declined_ids(int index) const;
  inline void set_declined_ids(int index, ::google::protobuf::uint32 value);
  inline void add_declined_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      declined_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_declined_ids();

  // @@protoc_insertion_point(class_scope:CMsgReadyUpStatus)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > accepted_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > declined_ids_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgReadyUpStatus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAbandonCurrentGame : public ::google::protobuf::Message {
 public:
  CMsgAbandonCurrentGame();
  virtual ~CMsgAbandonCurrentGame();

  CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from);

  inline CMsgAbandonCurrentGame& operator=(const CMsgAbandonCurrentGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAbandonCurrentGame& default_instance();

  void Swap(CMsgAbandonCurrentGame* other);

  // implements Message ----------------------------------------------

  CMsgAbandonCurrentGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAbandonCurrentGame& from);
  void MergeFrom(const CMsgAbandonCurrentGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgAbandonCurrentGame)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgAbandonCurrentGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetDetails : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbySetDetails();
  virtual ~CMsgPracticeLobbySetDetails();

  CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from);

  inline CMsgPracticeLobbySetDetails& operator=(const CMsgPracticeLobbySetDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbySetDetails& default_instance();

  void Swap(CMsgPracticeLobbySetDetails* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbySetDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbySetDetails& from);
  void MergeFrom(const CMsgPracticeLobbySetDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional string game_name = 2;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 2;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // repeated .CLobbyTeamDetails team_details = 3;
  inline int team_details_size() const;
  inline void clear_team_details();
  static const int kTeamDetailsFieldNumber = 3;
  inline const ::CLobbyTeamDetails& team_details(int index) const;
  inline ::CLobbyTeamDetails* mutable_team_details(int index);
  inline ::CLobbyTeamDetails* add_team_details();
  inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();

  // optional uint32 server_region = 4;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 4;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 5;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 5;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  inline bool has_cm_pick() const;
  inline void clear_cm_pick();
  static const int kCmPickFieldNumber = 6;
  inline ::DOTA_CM_PICK cm_pick() const;
  inline void set_cm_pick(::DOTA_CM_PICK value);

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_bot_difficulty_radiant() const;
  inline void clear_bot_difficulty_radiant();
  static const int kBotDifficultyRadiantFieldNumber = 9;
  inline ::DOTABotDifficulty bot_difficulty_radiant() const;
  inline void set_bot_difficulty_radiant(::DOTABotDifficulty value);

  // optional bool allow_cheats = 10;
  inline bool has_allow_cheats() const;
  inline void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 10;
  inline bool allow_cheats() const;
  inline void set_allow_cheats(bool value);

  // optional bool fill_with_bots = 11;
  inline bool has_fill_with_bots() const;
  inline void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 11;
  inline bool fill_with_bots() const;
  inline void set_fill_with_bots(bool value);

  // optional bool intro_mode = 12;
  inline bool has_intro_mode() const;
  inline void clear_intro_mode();
  static const int kIntroModeFieldNumber = 12;
  inline bool intro_mode() const;
  inline void set_intro_mode(bool value);

  // optional bool allow_spectating = 13;
  inline bool has_allow_spectating() const;
  inline void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 13;
  inline bool allow_spectating() const;
  inline void set_allow_spectating(bool value);

  // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  inline bool has_game_version() const;
  inline void clear_game_version();
  static const int kGameVersionFieldNumber = 14;
  inline ::DOTAGameVersion game_version() const;
  inline void set_game_version(::DOTAGameVersion value);

  // optional string pass_key = 15;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 15;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // optional uint32 leagueid = 16;
  inline bool has_leagueid() const;
  inline void clear_leagueid();
  static const int kLeagueidFieldNumber = 16;
  inline ::google::protobuf::uint32 leagueid() const;
  inline void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_radiant = 17;
  inline bool has_penalty_level_radiant() const;
  inline void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 17;
  inline ::google::protobuf::uint32 penalty_level_radiant() const;
  inline void set_penalty_level_radiant(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_dire = 18;
  inline bool has_penalty_level_dire() const;
  inline void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 18;
  inline ::google::protobuf::uint32 penalty_level_dire() const;
  inline void set_penalty_level_dire(::google::protobuf::uint32 value);

  // optional uint32 load_game_id = 19;
  inline bool has_load_game_id() const;
  inline void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 19;
  inline ::google::protobuf::uint32 load_game_id() const;
  inline void set_load_game_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 20;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 20;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 radiant_series_wins = 21;
  inline bool has_radiant_series_wins() const;
  inline void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 21;
  inline ::google::protobuf::uint32 radiant_series_wins() const;
  inline void set_radiant_series_wins(::google::protobuf::uint32 value);

  // optional uint32 dire_series_wins = 22;
  inline bool has_dire_series_wins() const;
  inline void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 22;
  inline ::google::protobuf::uint32 dire_series_wins() const;
  inline void set_dire_series_wins(::google::protobuf::uint32 value);

  // optional bool allchat = 23 [default = false];
  inline bool has_allchat() const;
  inline void clear_allchat();
  static const int kAllchatFieldNumber = 23;
  inline bool allchat() const;
  inline void set_allchat(bool value);

  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  inline bool has_dota_tv_delay() const;
  inline void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 24;
  inline ::LobbyDotaTVDelay dota_tv_delay() const;
  inline void set_dota_tv_delay(::LobbyDotaTVDelay value);

  // optional bool lan = 25;
  inline bool has_lan() const;
  inline void clear_lan();
  static const int kLanFieldNumber = 25;
  inline bool lan() const;
  inline void set_lan(bool value);

  // optional string custom_game_mode = 26;
  inline bool has_custom_game_mode() const;
  inline void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 26;
  inline const ::std::string& custom_game_mode() const;
  inline void set_custom_game_mode(const ::std::string& value);
  inline void set_custom_game_mode(const char* value);
  inline void set_custom_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_custom_game_mode();
  inline ::std::string* release_custom_game_mode();
  inline void set_allocated_custom_game_mode(::std::string* custom_game_mode);

  // optional string custom_map_name = 27;
  inline bool has_custom_map_name() const;
  inline void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 27;
  inline const ::std::string& custom_map_name() const;
  inline void set_custom_map_name(const ::std::string& value);
  inline void set_custom_map_name(const char* value);
  inline void set_custom_map_name(const char* value, size_t size);
  inline ::std::string* mutable_custom_map_name();
  inline ::std::string* release_custom_map_name();
  inline void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional uint32 custom_difficulty = 28;
  inline bool has_custom_difficulty() const;
  inline void clear_custom_difficulty();
  static const int kCustomDifficultyFieldNumber = 28;
  inline ::google::protobuf::uint32 custom_difficulty() const;
  inline void set_custom_difficulty(::google::protobuf::uint32 value);

  // optional uint64 custom_game_id = 29;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 29;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional uint32 custom_min_players = 30;
  inline bool has_custom_min_players() const;
  inline void clear_custom_min_players();
  static const int kCustomMinPlayersFieldNumber = 30;
  inline ::google::protobuf::uint32 custom_min_players() const;
  inline void set_custom_min_players(::google::protobuf::uint32 value);

  // optional uint32 custom_max_players = 31;
  inline bool has_custom_max_players() const;
  inline void clear_custom_max_players();
  static const int kCustomMaxPlayersFieldNumber = 31;
  inline ::google::protobuf::uint32 custom_max_players() const;
  inline void set_custom_max_players(::google::protobuf::uint32 value);

  // optional uint32 lan_host_ping_to_server_region = 32;
  inline bool has_lan_host_ping_to_server_region() const;
  inline void clear_lan_host_ping_to_server_region();
  static const int kLanHostPingToServerRegionFieldNumber = 32;
  inline ::google::protobuf::uint32 lan_host_ping_to_server_region() const;
  inline void set_lan_host_ping_to_server_region(::google::protobuf::uint32 value);

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  inline bool has_visibility() const;
  inline void clear_visibility();
  static const int kVisibilityFieldNumber = 33;
  inline ::DOTALobbyVisibility visibility() const;
  inline void set_visibility(::DOTALobbyVisibility value);

  // optional fixed64 custom_game_crc = 34;
  inline bool has_custom_game_crc() const;
  inline void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 34;
  inline ::google::protobuf::uint64 custom_game_crc() const;
  inline void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional uint32 league_series_id = 35;
  inline bool has_league_series_id() const;
  inline void clear_league_series_id();
  static const int kLeagueSeriesIdFieldNumber = 35;
  inline ::google::protobuf::uint32 league_series_id() const;
  inline void set_league_series_id(::google::protobuf::uint32 value);

  // optional uint32 league_game_id = 36;
  inline bool has_league_game_id() const;
  inline void clear_league_game_id();
  static const int kLeagueGameIdFieldNumber = 36;
  inline ::google::protobuf::uint32 league_game_id() const;
  inline void set_league_game_id(::google::protobuf::uint32 value);

  // optional fixed32 custom_game_timestamp = 37;
  inline bool has_custom_game_timestamp() const;
  inline void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 37;
  inline ::google::protobuf::uint32 custom_game_timestamp() const;
  inline void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // optional uint64 previous_match_override = 38;
  inline bool has_previous_match_override() const;
  inline void clear_previous_match_override();
  static const int kPreviousMatchOverrideFieldNumber = 38;
  inline ::google::protobuf::uint64 previous_match_override() const;
  inline void set_previous_match_override(::google::protobuf::uint64 value);

  // optional uint32 league_selection_priority_team = 39;
  inline bool has_league_selection_priority_team() const;
  inline void clear_league_selection_priority_team();
  static const int kLeagueSelectionPriorityTeamFieldNumber = 39;
  inline ::google::protobuf::uint32 league_selection_priority_team() const;
  inline void set_league_selection_priority_team(::google::protobuf::uint32 value);

  // optional .SelectionPriorityType league_selection_priority_choice = 40 [default = UNDEFINED];
  inline bool has_league_selection_priority_choice() const;
  inline void clear_league_selection_priority_choice();
  static const int kLeagueSelectionPriorityChoiceFieldNumber = 40;
  inline ::SelectionPriorityType league_selection_priority_choice() const;
  inline void set_league_selection_priority_choice(::SelectionPriorityType value);

  // optional .SelectionPriorityType league_non_selection_priority_choice = 41 [default = UNDEFINED];
  inline bool has_league_non_selection_priority_choice() const;
  inline void clear_league_non_selection_priority_choice();
  static const int kLeagueNonSelectionPriorityChoiceFieldNumber = 41;
  inline ::SelectionPriorityType league_non_selection_priority_choice() const;
  inline void set_league_non_selection_priority_choice(::SelectionPriorityType value);

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  inline bool has_pause_setting() const;
  inline void clear_pause_setting();
  static const int kPauseSettingFieldNumber = 42;
  inline ::LobbyDotaPauseSetting pause_setting() const;
  inline void set_pause_setting(::LobbyDotaPauseSetting value);

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_bot_difficulty_dire() const;
  inline void clear_bot_difficulty_dire();
  static const int kBotDifficultyDireFieldNumber = 43;
  inline ::DOTABotDifficulty bot_difficulty_dire() const;
  inline void set_bot_difficulty_dire(::DOTABotDifficulty value);

  // optional uint64 bot_radiant = 44;
  inline bool has_bot_radiant() const;
  inline void clear_bot_radiant();
  static const int kBotRadiantFieldNumber = 44;
  inline ::google::protobuf::uint64 bot_radiant() const;
  inline void set_bot_radiant(::google::protobuf::uint64 value);

  // optional uint64 bot_dire = 45;
  inline bool has_bot_dire() const;
  inline void clear_bot_dire();
  static const int kBotDireFieldNumber = 45;
  inline ::google::protobuf::uint64 bot_dire() const;
  inline void set_bot_dire(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetDetails)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_cm_pick();
  inline void clear_has_cm_pick();
  inline void set_has_bot_difficulty_radiant();
  inline void clear_has_bot_difficulty_radiant();
  inline void set_has_allow_cheats();
  inline void clear_has_allow_cheats();
  inline void set_has_fill_with_bots();
  inline void clear_has_fill_with_bots();
  inline void set_has_intro_mode();
  inline void clear_has_intro_mode();
  inline void set_has_allow_spectating();
  inline void clear_has_allow_spectating();
  inline void set_has_game_version();
  inline void clear_has_game_version();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_leagueid();
  inline void clear_has_leagueid();
  inline void set_has_penalty_level_radiant();
  inline void clear_has_penalty_level_radiant();
  inline void set_has_penalty_level_dire();
  inline void clear_has_penalty_level_dire();
  inline void set_has_load_game_id();
  inline void clear_has_load_game_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_radiant_series_wins();
  inline void clear_has_radiant_series_wins();
  inline void set_has_dire_series_wins();
  inline void clear_has_dire_series_wins();
  inline void set_has_allchat();
  inline void clear_has_allchat();
  inline void set_has_dota_tv_delay();
  inline void clear_has_dota_tv_delay();
  inline void set_has_lan();
  inline void clear_has_lan();
  inline void set_has_custom_game_mode();
  inline void clear_has_custom_game_mode();
  inline void set_has_custom_map_name();
  inline void clear_has_custom_map_name();
  inline void set_has_custom_difficulty();
  inline void clear_has_custom_difficulty();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_custom_min_players();
  inline void clear_has_custom_min_players();
  inline void set_has_custom_max_players();
  inline void clear_has_custom_max_players();
  inline void set_has_lan_host_ping_to_server_region();
  inline void clear_has_lan_host_ping_to_server_region();
  inline void set_has_visibility();
  inline void clear_has_visibility();
  inline void set_has_custom_game_crc();
  inline void clear_has_custom_game_crc();
  inline void set_has_league_series_id();
  inline void clear_has_league_series_id();
  inline void set_has_league_game_id();
  inline void clear_has_league_game_id();
  inline void set_has_custom_game_timestamp();
  inline void clear_has_custom_game_timestamp();
  inline void set_has_previous_match_override();
  inline void clear_has_previous_match_override();
  inline void set_has_league_selection_priority_team();
  inline void clear_has_league_selection_priority_team();
  inline void set_has_league_selection_priority_choice();
  inline void clear_has_league_selection_priority_choice();
  inline void set_has_league_non_selection_priority_choice();
  inline void clear_has_league_non_selection_priority_choice();
  inline void set_has_pause_setting();
  inline void clear_has_pause_setting();
  inline void set_has_bot_difficulty_dire();
  inline void clear_has_bot_difficulty_dire();
  inline void set_has_bot_radiant();
  inline void clear_has_bot_radiant();
  inline void set_has_bot_dire();
  inline void clear_has_bot_dire();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint64 lobby_id_;
  ::std::string* game_name_;
  ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::google::protobuf::uint32 server_region_;
  ::google::protobuf::uint32 game_mode_;
  int cm_pick_;
  int bot_difficulty_radiant_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allow_spectating_;
  int game_version_;
  ::std::string* pass_key_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  int dota_tv_delay_;
  bool allchat_;
  bool lan_;
  ::google::protobuf::uint32 custom_difficulty_;
  ::std::string* custom_game_mode_;
  ::std::string* custom_map_name_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint32 custom_min_players_;
  ::google::protobuf::uint32 custom_max_players_;
  ::google::protobuf::uint32 lan_host_ping_to_server_region_;
  int visibility_;
  ::google::protobuf::uint64 custom_game_crc_;
  ::google::protobuf::uint32 league_series_id_;
  ::google::protobuf::uint32 league_game_id_;
  ::google::protobuf::uint64 previous_match_override_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  ::google::protobuf::uint32 league_selection_priority_team_;
  int league_selection_priority_choice_;
  int league_non_selection_priority_choice_;
  int pause_setting_;
  int bot_difficulty_dire_;
  ::google::protobuf::uint64 bot_radiant_;
  ::google::protobuf::uint64 bot_dire_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbySetDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCreate_SaveGame : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyCreate_SaveGame();
  virtual ~CMsgPracticeLobbyCreate_SaveGame();

  CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from);

  inline CMsgPracticeLobbyCreate_SaveGame& operator=(const CMsgPracticeLobbyCreate_SaveGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyCreate_SaveGame& default_instance();

  void Swap(CMsgPracticeLobbyCreate_SaveGame* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyCreate_SaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from);
  void MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional fixed64 steam_id = 3;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 signature = 4;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 4;
  inline ::google::protobuf::uint64 signature() const;
  inline void set_signature(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCreate.SaveGame)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 signature_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyCreate_SaveGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCreate : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyCreate();
  virtual ~CMsgPracticeLobbyCreate();

  CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from);

  inline CMsgPracticeLobbyCreate& operator=(const CMsgPracticeLobbyCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyCreate& default_instance();

  void Swap(CMsgPracticeLobbyCreate* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyCreate& from);
  void MergeFrom(const CMsgPracticeLobbyCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPracticeLobbyCreate_SaveGame SaveGame;

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  inline void set_allocated_search_key(::std::string* search_key);

  // optional string pass_key = 5;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 5;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // optional uint32 client_version = 6;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 6;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  inline bool has_lobby_details() const;
  inline void clear_lobby_details();
  static const int kLobbyDetailsFieldNumber = 7;
  inline const ::CMsgPracticeLobbySetDetails& lobby_details() const;
  inline ::CMsgPracticeLobbySetDetails* mutable_lobby_details();
  inline ::CMsgPracticeLobbySetDetails* release_lobby_details();
  inline void set_allocated_lobby_details(::CMsgPracticeLobbySetDetails* lobby_details);

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  inline bool has_save_game() const;
  inline void clear_save_game();
  static const int kSaveGameFieldNumber = 8;
  inline const ::CMsgPracticeLobbyCreate_SaveGame& save_game() const;
  inline ::CMsgPracticeLobbyCreate_SaveGame* mutable_save_game();
  inline ::CMsgPracticeLobbyCreate_SaveGame* release_save_game();
  inline void set_allocated_save_game(::CMsgPracticeLobbyCreate_SaveGame* save_game);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCreate)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_lobby_details();
  inline void clear_has_lobby_details();
  inline void set_has_save_game();
  inline void clear_has_save_game();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* search_key_;
  ::std::string* pass_key_;
  ::CMsgPracticeLobbySetDetails* lobby_details_;
  ::CMsgPracticeLobbyCreate_SaveGame* save_game_;
  ::google::protobuf::uint32 client_version_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyCreate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetTeamSlot : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbySetTeamSlot();
  virtual ~CMsgPracticeLobbySetTeamSlot();

  CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from);

  inline CMsgPracticeLobbySetTeamSlot& operator=(const CMsgPracticeLobbySetTeamSlot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbySetTeamSlot& default_instance();

  void Swap(CMsgPracticeLobbySetTeamSlot* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbySetTeamSlot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbySetTeamSlot& from);
  void MergeFrom(const CMsgPracticeLobbySetTeamSlot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // optional uint32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_bot_difficulty() const;
  inline void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 3;
  inline ::DOTABotDifficulty bot_difficulty() const;
  inline void set_bot_difficulty(::DOTABotDifficulty value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetTeamSlot)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_bot_difficulty();
  inline void clear_has_bot_difficulty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int team_;
  ::google::protobuf::uint32 slot_;
  int bot_difficulty_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbySetTeamSlot* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetCoach : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbySetCoach();
  virtual ~CMsgPracticeLobbySetCoach();

  CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from);

  inline CMsgPracticeLobbySetCoach& operator=(const CMsgPracticeLobbySetCoach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbySetCoach& default_instance();

  void Swap(CMsgPracticeLobbySetCoach* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbySetCoach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbySetCoach& from);
  void MergeFrom(const CMsgPracticeLobbySetCoach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetCoach)
 private:
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int team_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbySetCoach* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoinBroadcastChannel : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyJoinBroadcastChannel();
  virtual ~CMsgPracticeLobbyJoinBroadcastChannel();

  CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from);

  inline CMsgPracticeLobbyJoinBroadcastChannel& operator=(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyJoinBroadcastChannel& default_instance();

  void Swap(CMsgPracticeLobbyJoinBroadcastChannel* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyJoinBroadcastChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  void MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional string preferred_description = 2;
  inline bool has_preferred_description() const;
  inline void clear_preferred_description();
  static const int kPreferredDescriptionFieldNumber = 2;
  inline const ::std::string& preferred_description() const;
  inline void set_preferred_description(const ::std::string& value);
  inline void set_preferred_description(const char* value);
  inline void set_preferred_description(const char* value, size_t size);
  inline ::std::string* mutable_preferred_description();
  inline ::std::string* release_preferred_description();
  inline void set_allocated_preferred_description(::std::string* preferred_description);

  // optional string preferred_country_code = 3;
  inline bool has_preferred_country_code() const;
  inline void clear_preferred_country_code();
  static const int kPreferredCountryCodeFieldNumber = 3;
  inline const ::std::string& preferred_country_code() const;
  inline void set_preferred_country_code(const ::std::string& value);
  inline void set_preferred_country_code(const char* value);
  inline void set_preferred_country_code(const char* value, size_t size);
  inline ::std::string* mutable_preferred_country_code();
  inline ::std::string* release_preferred_country_code();
  inline void set_allocated_preferred_country_code(::std::string* preferred_country_code);

  // optional string preferred_language_code = 4;
  inline bool has_preferred_language_code() const;
  inline void clear_preferred_language_code();
  static const int kPreferredLanguageCodeFieldNumber = 4;
  inline const ::std::string& preferred_language_code() const;
  inline void set_preferred_language_code(const ::std::string& value);
  inline void set_preferred_language_code(const char* value);
  inline void set_preferred_language_code(const char* value, size_t size);
  inline ::std::string* mutable_preferred_language_code();
  inline ::std::string* release_preferred_language_code();
  inline void set_allocated_preferred_language_code(::std::string* preferred_language_code);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoinBroadcastChannel)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_preferred_description();
  inline void clear_has_preferred_description();
  inline void set_has_preferred_country_code();
  inline void clear_has_preferred_country_code();
  inline void set_has_preferred_language_code();
  inline void clear_has_preferred_language_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* preferred_description_;
  ::std::string* preferred_country_code_;
  ::std::string* preferred_language_code_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyJoinBroadcastChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCloseBroadcastChannel : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyCloseBroadcastChannel();
  virtual ~CMsgPracticeLobbyCloseBroadcastChannel();

  CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from);

  inline CMsgPracticeLobbyCloseBroadcastChannel& operator=(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyCloseBroadcastChannel& default_instance();

  void Swap(CMsgPracticeLobbyCloseBroadcastChannel* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyCloseBroadcastChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from);
  void MergeFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCloseBroadcastChannel)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyCloseBroadcastChannel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus();
  virtual ~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus();

  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from);

  inline CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& operator=(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& default_instance();

  void Swap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from);
  void MergeFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyKick : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyKick();
  virtual ~CMsgPracticeLobbyKick();

  CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from);

  inline CMsgPracticeLobbyKick& operator=(const CMsgPracticeLobbyKick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyKick& default_instance();

  void Swap(CMsgPracticeLobbyKick* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyKick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyKick& from);
  void MergeFrom(const CMsgPracticeLobbyKick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyKick)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyKick* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyKickFromTeam : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyKickFromTeam();
  virtual ~CMsgPracticeLobbyKickFromTeam();

  CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from);

  inline CMsgPracticeLobbyKickFromTeam& operator=(const CMsgPracticeLobbyKickFromTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyKickFromTeam& default_instance();

  void Swap(CMsgPracticeLobbyKickFromTeam* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyKickFromTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyKickFromTeam& from);
  void MergeFrom(const CMsgPracticeLobbyKickFromTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyKickFromTeam)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyKickFromTeam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyLeave : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyLeave();
  virtual ~CMsgPracticeLobbyLeave();

  CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from);

  inline CMsgPracticeLobbyLeave& operator=(const CMsgPracticeLobbyLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyLeave& default_instance();

  void Swap(CMsgPracticeLobbyLeave* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyLeave& from);
  void MergeFrom(const CMsgPracticeLobbyLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyLeave)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyLeave* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyLaunch : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyLaunch();
  virtual ~CMsgPracticeLobbyLaunch();

  CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from);

  inline CMsgPracticeLobbyLaunch& operator=(const CMsgPracticeLobbyLaunch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyLaunch& default_instance();

  void Swap(CMsgPracticeLobbyLaunch* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyLaunch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyLaunch& from);
  void MergeFrom(const CMsgPracticeLobbyLaunch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 client_version = 5;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyLaunch)
 private:
  inline void set_has_client_version();
  inline void clear_has_client_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 client_version_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyLaunch* default_instance_;
};
// -------------------------------------------------------------------

class CMsgApplyTeamToPracticeLobby : public ::google::protobuf::Message {
 public:
  CMsgApplyTeamToPracticeLobby();
  virtual ~CMsgApplyTeamToPracticeLobby();

  CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from);

  inline CMsgApplyTeamToPracticeLobby& operator=(const CMsgApplyTeamToPracticeLobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgApplyTeamToPracticeLobby& default_instance();

  void Swap(CMsgApplyTeamToPracticeLobby* other);

  // implements Message ----------------------------------------------

  CMsgApplyTeamToPracticeLobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgApplyTeamToPracticeLobby& from);
  void MergeFrom(const CMsgApplyTeamToPracticeLobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgApplyTeamToPracticeLobby)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgApplyTeamToPracticeLobby* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClearPracticeLobbyTeam : public ::google::protobuf::Message {
 public:
  CMsgClearPracticeLobbyTeam();
  virtual ~CMsgClearPracticeLobbyTeam();

  CMsgClearPracticeLobbyTeam(const CMsgClearPracticeLobbyTeam& from);

  inline CMsgClearPracticeLobbyTeam& operator=(const CMsgClearPracticeLobbyTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClearPracticeLobbyTeam& default_instance();

  void Swap(CMsgClearPracticeLobbyTeam* other);

  // implements Message ----------------------------------------------

  CMsgClearPracticeLobbyTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClearPracticeLobbyTeam& from);
  void MergeFrom(const CMsgClearPracticeLobbyTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClearPracticeLobbyTeam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgClearPracticeLobbyTeam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyList : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyList();
  virtual ~CMsgPracticeLobbyList();

  CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from);

  inline CMsgPracticeLobbyList& operator=(const CMsgPracticeLobbyList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyList& default_instance();

  void Swap(CMsgPracticeLobbyList* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyList& from);
  void MergeFrom(const CMsgPracticeLobbyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool tournament_games = 1;
  inline bool has_tournament_games() const;
  inline void clear_tournament_games();
  static const int kTournamentGamesFieldNumber = 1;
  inline bool tournament_games() const;
  inline void set_tournament_games(bool value);

  // optional string pass_key = 2;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 2;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // optional uint32 region = 3;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 3;
  inline ::google::protobuf::uint32 region() const;
  inline void set_region(::google::protobuf::uint32 value);

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 4;
  inline ::DOTA_GameMode game_mode() const;
  inline void set_game_mode(::DOTA_GameMode value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyList)
 private:
  inline void set_has_tournament_games();
  inline void clear_has_tournament_games();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pass_key_;
  bool tournament_games_;
  ::google::protobuf::uint32 region_;
  int game_mode_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponseEntry_CLobbyMember : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyListResponseEntry_CLobbyMember();
  virtual ~CMsgPracticeLobbyListResponseEntry_CLobbyMember();

  CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);

  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember& operator=(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyListResponseEntry_CLobbyMember& default_instance();

  void Swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyListResponseEntry_CLobbyMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  void MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyListResponseEntry_CLobbyMember* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponseEntry : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyListResponseEntry();
  virtual ~CMsgPracticeLobbyListResponseEntry();

  CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from);

  inline CMsgPracticeLobbyListResponseEntry& operator=(const CMsgPracticeLobbyListResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyListResponseEntry& default_instance();

  void Swap(CMsgPracticeLobbyListResponseEntry* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyListResponseEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyListResponseEntry& from);
  void MergeFrom(const CMsgPracticeLobbyListResponseEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPracticeLobbyListResponseEntry_CLobbyMember CLobbyMember;

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 tournament_id = 3;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 3;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 4;
  inline bool has_tournament_game_id() const;
  inline void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 4;
  inline ::google::protobuf::uint32 tournament_game_id() const;
  inline void set_tournament_game_id(::google::protobuf::uint32 value);

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 5;
  inline const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& members(int index) const;
  inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* mutable_members(int index);
  inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
      mutable_members();

  // optional bool requires_pass_key = 6;
  inline bool has_requires_pass_key() const;
  inline void clear_requires_pass_key();
  static const int kRequiresPassKeyFieldNumber = 6;
  inline bool requires_pass_key() const;
  inline void set_requires_pass_key(bool value);

  // optional uint32 leader_account_id = 7;
  inline bool has_leader_account_id() const;
  inline void clear_leader_account_id();
  static const int kLeaderAccountIdFieldNumber = 7;
  inline ::google::protobuf::uint32 leader_account_id() const;
  inline void set_leader_account_id(::google::protobuf::uint32 value);

  // optional uint32 guild_id = 8;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 8;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional uint64 guild_logo = 9;
  inline bool has_guild_logo() const;
  inline void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 9;
  inline ::google::protobuf::uint64 guild_logo() const;
  inline void set_guild_logo(::google::protobuf::uint64 value);

  // optional string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string custom_game_mode = 11;
  inline bool has_custom_game_mode() const;
  inline void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 11;
  inline const ::std::string& custom_game_mode() const;
  inline void set_custom_game_mode(const ::std::string& value);
  inline void set_custom_game_mode(const char* value);
  inline void set_custom_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_custom_game_mode();
  inline ::std::string* release_custom_game_mode();
  inline void set_allocated_custom_game_mode(::std::string* custom_game_mode);

  // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 12;
  inline ::DOTA_GameMode game_mode() const;
  inline void set_game_mode(::DOTA_GameMode value);

  // optional bool friend_present = 13;
  inline bool has_friend_present() const;
  inline void clear_friend_present();
  static const int kFriendPresentFieldNumber = 13;
  inline bool friend_present() const;
  inline void set_friend_present(bool value);

  // optional uint32 players = 14;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 14;
  inline ::google::protobuf::uint32 players() const;
  inline void set_players(::google::protobuf::uint32 value);

  // optional string custom_map_name = 15;
  inline bool has_custom_map_name() const;
  inline void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 15;
  inline const ::std::string& custom_map_name() const;
  inline void set_custom_map_name(const ::std::string& value);
  inline void set_custom_map_name(const char* value);
  inline void set_custom_map_name(const char* value, size_t size);
  inline ::std::string* mutable_custom_map_name();
  inline ::std::string* release_custom_map_name();
  inline void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional uint32 max_player_count = 16;
  inline bool has_max_player_count() const;
  inline void clear_max_player_count();
  static const int kMaxPlayerCountFieldNumber = 16;
  inline ::google::protobuf::uint32 max_player_count() const;
  inline void set_max_player_count(::google::protobuf::uint32 value);

  // optional uint32 server_region = 17;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 17;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional uint32 lan_host_ping_to_server_region = 18;
  inline bool has_lan_host_ping_to_server_region() const;
  inline void clear_lan_host_ping_to_server_region();
  static const int kLanHostPingToServerRegionFieldNumber = 18;
  inline ::google::protobuf::uint32 lan_host_ping_to_server_region() const;
  inline void set_lan_host_ping_to_server_region(::google::protobuf::uint32 value);

  // optional uint32 league_id = 19;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 19;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponseEntry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_tournament_game_id();
  inline void clear_has_tournament_game_id();
  inline void set_has_requires_pass_key();
  inline void clear_has_requires_pass_key();
  inline void set_has_leader_account_id();
  inline void clear_has_leader_account_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_logo();
  inline void clear_has_guild_logo();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_custom_game_mode();
  inline void clear_has_custom_game_mode();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_friend_present();
  inline void clear_has_friend_present();
  inline void set_has_players();
  inline void clear_has_players();
  inline void set_has_custom_map_name();
  inline void clear_has_custom_map_name();
  inline void set_has_max_player_count();
  inline void clear_has_max_player_count();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_lan_host_ping_to_server_region();
  inline void clear_has_lan_host_ping_to_server_region();
  inline void set_has_league_id();
  inline void clear_has_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember > members_;
  ::google::protobuf::uint32 leader_account_id_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint64 guild_logo_;
  ::std::string* name_;
  bool requires_pass_key_;
  bool friend_present_;
  int game_mode_;
  ::std::string* custom_game_mode_;
  ::std::string* custom_map_name_;
  ::google::protobuf::uint32 players_;
  ::google::protobuf::uint32 max_player_count_;
  ::google::protobuf::uint32 server_region_;
  ::google::protobuf::uint32 lan_host_ping_to_server_region_;
  ::google::protobuf::uint32 league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyListResponseEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponse : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyListResponse();
  virtual ~CMsgPracticeLobbyListResponse();

  CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from);

  inline CMsgPracticeLobbyListResponse& operator=(const CMsgPracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyListResponse& default_instance();

  void Swap(CMsgPracticeLobbyListResponse* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyListResponse& from);
  void MergeFrom(const CMsgPracticeLobbyListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool tournament_games = 1;
  inline bool has_tournament_games() const;
  inline void clear_tournament_games();
  static const int kTournamentGamesFieldNumber = 1;
  inline bool tournament_games() const;
  inline void set_tournament_games(bool value);

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 2;
  inline const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  inline ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  inline ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponse)
 private:
  inline void set_has_tournament_games();
  inline void clear_has_tournament_games();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  bool tournament_games_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyList : public ::google::protobuf::Message {
 public:
  CMsgLobbyList();
  virtual ~CMsgLobbyList();

  CMsgLobbyList(const CMsgLobbyList& from);

  inline CMsgLobbyList& operator=(const CMsgLobbyList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyList& default_instance();

  void Swap(CMsgLobbyList* other);

  // implements Message ----------------------------------------------

  CMsgLobbyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyList& from);
  void MergeFrom(const CMsgLobbyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_region = 1 [default = 0];
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 1;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 2;
  inline ::DOTA_GameMode game_mode() const;
  inline void set_game_mode(::DOTA_GameMode value);

  // @@protoc_insertion_point(class_scope:CMsgLobbyList)
 private:
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_region_;
  int game_mode_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLobbyListResponse : public ::google::protobuf::Message {
 public:
  CMsgLobbyListResponse();
  virtual ~CMsgLobbyListResponse();

  CMsgLobbyListResponse(const CMsgLobbyListResponse& from);

  inline CMsgLobbyListResponse& operator=(const CMsgLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLobbyListResponse& default_instance();

  void Swap(CMsgLobbyListResponse* other);

  // implements Message ----------------------------------------------

  CMsgLobbyListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLobbyListResponse& from);
  void MergeFrom(const CMsgLobbyListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  inline const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  inline ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  inline ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();

  // @@protoc_insertion_point(class_scope:CMsgLobbyListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgLobbyListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoin : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyJoin();
  virtual ~CMsgPracticeLobbyJoin();

  CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from);

  inline CMsgPracticeLobbyJoin& operator=(const CMsgPracticeLobbyJoin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyJoin& default_instance();

  void Swap(CMsgPracticeLobbyJoin* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyJoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyJoin& from);
  void MergeFrom(const CMsgPracticeLobbyJoin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 client_version = 2;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional string pass_key = 3;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 3;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // optional fixed64 custom_game_crc = 4;
  inline bool has_custom_game_crc() const;
  inline void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 4;
  inline ::google::protobuf::uint64 custom_game_crc() const;
  inline void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional fixed32 custom_game_timestamp = 5;
  inline bool has_custom_game_timestamp() const;
  inline void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 custom_game_timestamp() const;
  inline void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoin)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_custom_game_crc();
  inline void clear_has_custom_game_crc();
  inline void set_has_custom_game_timestamp();
  inline void clear_has_custom_game_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::std::string* pass_key_;
  ::google::protobuf::uint32 client_version_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  ::google::protobuf::uint64 custom_game_crc_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyJoin* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoinResponse : public ::google::protobuf::Message {
 public:
  CMsgPracticeLobbyJoinResponse();
  virtual ~CMsgPracticeLobbyJoinResponse();

  CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from);

  inline CMsgPracticeLobbyJoinResponse& operator=(const CMsgPracticeLobbyJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPracticeLobbyJoinResponse& default_instance();

  void Swap(CMsgPracticeLobbyJoinResponse* other);

  // implements Message ----------------------------------------------

  CMsgPracticeLobbyJoinResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPracticeLobbyJoinResponse& from);
  void MergeFrom(const CMsgPracticeLobbyJoinResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::DOTAJoinLobbyResult result() const;
  inline void set_result(::DOTAJoinLobbyResult value);

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoinResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgPracticeLobbyJoinResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFriendPracticeLobbyListRequest : public ::google::protobuf::Message {
 public:
  CMsgFriendPracticeLobbyListRequest();
  virtual ~CMsgFriendPracticeLobbyListRequest();

  CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from);

  inline CMsgFriendPracticeLobbyListRequest& operator=(const CMsgFriendPracticeLobbyListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFriendPracticeLobbyListRequest& default_instance();

  void Swap(CMsgFriendPracticeLobbyListRequest* other);

  // implements Message ----------------------------------------------

  CMsgFriendPracticeLobbyListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFriendPracticeLobbyListRequest& from);
  void MergeFrom(const CMsgFriendPracticeLobbyListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline ::google::protobuf::uint32 friends(int index) const;
  inline void set_friends(int index, ::google::protobuf::uint32 value);
  inline void add_friends(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      friends() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:CMsgFriendPracticeLobbyListRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > friends_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgFriendPracticeLobbyListRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFriendPracticeLobbyListResponse : public ::google::protobuf::Message {
 public:
  CMsgFriendPracticeLobbyListResponse();
  virtual ~CMsgFriendPracticeLobbyListResponse();

  CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from);

  inline CMsgFriendPracticeLobbyListResponse& operator=(const CMsgFriendPracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFriendPracticeLobbyListResponse& default_instance();

  void Swap(CMsgFriendPracticeLobbyListResponse* other);

  // implements Message ----------------------------------------------

  CMsgFriendPracticeLobbyListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFriendPracticeLobbyListResponse& from);
  void MergeFrom(const CMsgFriendPracticeLobbyListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  inline const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  inline ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  inline ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();

  // @@protoc_insertion_point(class_scope:CMsgFriendPracticeLobbyListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgFriendPracticeLobbyListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGuildmatePracticeLobbyListRequest : public ::google::protobuf::Message {
 public:
  CMsgGuildmatePracticeLobbyListRequest();
  virtual ~CMsgGuildmatePracticeLobbyListRequest();

  CMsgGuildmatePracticeLobbyListRequest(const CMsgGuildmatePracticeLobbyListRequest& from);

  inline CMsgGuildmatePracticeLobbyListRequest& operator=(const CMsgGuildmatePracticeLobbyListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGuildmatePracticeLobbyListRequest& default_instance();

  void Swap(CMsgGuildmatePracticeLobbyListRequest* other);

  // implements Message ----------------------------------------------

  CMsgGuildmatePracticeLobbyListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGuildmatePracticeLobbyListRequest& from);
  void MergeFrom(const CMsgGuildmatePracticeLobbyListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 guilds = 1;
  inline int guilds_size() const;
  inline void clear_guilds();
  static const int kGuildsFieldNumber = 1;
  inline ::google::protobuf::uint32 guilds(int index) const;
  inline void set_guilds(int index, ::google::protobuf::uint32 value);
  inline void add_guilds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      guilds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_guilds();

  // @@protoc_insertion_point(class_scope:CMsgGuildmatePracticeLobbyListRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > guilds_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgGuildmatePracticeLobbyListRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGuildmatePracticeLobbyListResponse : public ::google::protobuf::Message {
 public:
  CMsgGuildmatePracticeLobbyListResponse();
  virtual ~CMsgGuildmatePracticeLobbyListResponse();

  CMsgGuildmatePracticeLobbyListResponse(const CMsgGuildmatePracticeLobbyListResponse& from);

  inline CMsgGuildmatePracticeLobbyListResponse& operator=(const CMsgGuildmatePracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGuildmatePracticeLobbyListResponse& default_instance();

  void Swap(CMsgGuildmatePracticeLobbyListResponse* other);

  // implements Message ----------------------------------------------

  CMsgGuildmatePracticeLobbyListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGuildmatePracticeLobbyListResponse& from);
  void MergeFrom(const CMsgGuildmatePracticeLobbyListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  inline const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  inline ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  inline ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();

  // @@protoc_insertion_point(class_scope:CMsgGuildmatePracticeLobbyListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgGuildmatePracticeLobbyListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomGameModesRequest : public ::google::protobuf::Message {
 public:
  CMsgJoinableCustomGameModesRequest();
  virtual ~CMsgJoinableCustomGameModesRequest();

  CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from);

  inline CMsgJoinableCustomGameModesRequest& operator=(const CMsgJoinableCustomGameModesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJoinableCustomGameModesRequest& default_instance();

  void Swap(CMsgJoinableCustomGameModesRequest* other);

  // implements Message ----------------------------------------------

  CMsgJoinableCustomGameModesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJoinableCustomGameModesRequest& from);
  void MergeFrom(const CMsgJoinableCustomGameModesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_region = 1;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 1;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomGameModesRequest)
 private:
  inline void set_has_server_region();
  inline void clear_has_server_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_region_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgJoinableCustomGameModesRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomGameModesResponseEntry : public ::google::protobuf::Message {
 public:
  CMsgJoinableCustomGameModesResponseEntry();
  virtual ~CMsgJoinableCustomGameModesResponseEntry();

  CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from);

  inline CMsgJoinableCustomGameModesResponseEntry& operator=(const CMsgJoinableCustomGameModesResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJoinableCustomGameModesResponseEntry& default_instance();

  void Swap(CMsgJoinableCustomGameModesResponseEntry* other);

  // implements Message ----------------------------------------------

  CMsgJoinableCustomGameModesResponseEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from);
  void MergeFrom(const CMsgJoinableCustomGameModesResponseEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 custom_game_id = 1;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 1;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional uint32 lobby_count = 2;
  inline bool has_lobby_count() const;
  inline void clear_lobby_count();
  static const int kLobbyCountFieldNumber = 2;
  inline ::google::protobuf::uint32 lobby_count() const;
  inline void set_lobby_count(::google::protobuf::uint32 value);

  // optional uint32 player_count = 3;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 3;
  inline ::google::protobuf::uint32 player_count() const;
  inline void set_player_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomGameModesResponseEntry)
 private:
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_lobby_count();
  inline void clear_has_lobby_count();
  inline void set_has_player_count();
  inline void clear_has_player_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint32 lobby_count_;
  ::google::protobuf::uint32 player_count_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgJoinableCustomGameModesResponseEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomGameModesResponse : public ::google::protobuf::Message {
 public:
  CMsgJoinableCustomGameModesResponse();
  virtual ~CMsgJoinableCustomGameModesResponse();

  CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from);

  inline CMsgJoinableCustomGameModesResponse& operator=(const CMsgJoinableCustomGameModesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJoinableCustomGameModesResponse& default_instance();

  void Swap(CMsgJoinableCustomGameModesResponse* other);

  // implements Message ----------------------------------------------

  CMsgJoinableCustomGameModesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJoinableCustomGameModesResponse& from);
  void MergeFrom(const CMsgJoinableCustomGameModesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  inline int game_modes_size() const;
  inline void clear_game_modes();
  static const int kGameModesFieldNumber = 1;
  inline const ::CMsgJoinableCustomGameModesResponseEntry& game_modes(int index) const;
  inline ::CMsgJoinableCustomGameModesResponseEntry* mutable_game_modes(int index);
  inline ::CMsgJoinableCustomGameModesResponseEntry* add_game_modes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >&
      game_modes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >*
      mutable_game_modes();

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomGameModesResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry > game_modes_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgJoinableCustomGameModesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomLobbiesRequest : public ::google::protobuf::Message {
 public:
  CMsgJoinableCustomLobbiesRequest();
  virtual ~CMsgJoinableCustomLobbiesRequest();

  CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from);

  inline CMsgJoinableCustomLobbiesRequest& operator=(const CMsgJoinableCustomLobbiesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJoinableCustomLobbiesRequest& default_instance();

  void Swap(CMsgJoinableCustomLobbiesRequest* other);

  // implements Message ----------------------------------------------

  CMsgJoinableCustomLobbiesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJoinableCustomLobbiesRequest& from);
  void MergeFrom(const CMsgJoinableCustomLobbiesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_region = 1;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 1;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional uint64 custom_game_id = 2;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomLobbiesRequest)
 private:
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint32 server_region_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgJoinableCustomLobbiesRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomLobbiesResponseEntry : public ::google::protobuf::Message {
 public:
  CMsgJoinableCustomLobbiesResponseEntry();
  virtual ~CMsgJoinableCustomLobbiesResponseEntry();

  CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from);

  inline CMsgJoinableCustomLobbiesResponseEntry& operator=(const CMsgJoinableCustomLobbiesResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJoinableCustomLobbiesResponseEntry& default_instance();

  void Swap(CMsgJoinableCustomLobbiesResponseEntry* other);

  // implements Message ----------------------------------------------

  CMsgJoinableCustomLobbiesResponseEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from);
  void MergeFrom(const CMsgJoinableCustomLobbiesResponseEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint64 custom_game_id = 2;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional string lobby_name = 3;
  inline bool has_lobby_name() const;
  inline void clear_lobby_name();
  static const int kLobbyNameFieldNumber = 3;
  inline const ::std::string& lobby_name() const;
  inline void set_lobby_name(const ::std::string& value);
  inline void set_lobby_name(const char* value);
  inline void set_lobby_name(const char* value, size_t size);
  inline ::std::string* mutable_lobby_name();
  inline ::std::string* release_lobby_name();
  inline void set_allocated_lobby_name(::std::string* lobby_name);

  // optional uint32 member_count = 4;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 4;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // optional uint32 leader_account_id = 5;
  inline bool has_leader_account_id() const;
  inline void clear_leader_account_id();
  static const int kLeaderAccountIdFieldNumber = 5;
  inline ::google::protobuf::uint32 leader_account_id() const;
  inline void set_leader_account_id(::google::protobuf::uint32 value);

  // optional string leader_name = 6;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 6;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const char* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional string custom_map_name = 7;
  inline bool has_custom_map_name() const;
  inline void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 7;
  inline const ::std::string& custom_map_name() const;
  inline void set_custom_map_name(const ::std::string& value);
  inline void set_custom_map_name(const char* value);
  inline void set_custom_map_name(const char* value, size_t size);
  inline ::std::string* mutable_custom_map_name();
  inline ::std::string* release_custom_map_name();
  inline void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional uint32 max_player_count = 8;
  inline bool has_max_player_count() const;
  inline void clear_max_player_count();
  static const int kMaxPlayerCountFieldNumber = 8;
  inline ::google::protobuf::uint32 max_player_count() const;
  inline void set_max_player_count(::google::protobuf::uint32 value);

  // optional uint32 server_region = 9;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 9;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional uint32 lan_host_ping_to_server_region = 10;
  inline bool has_lan_host_ping_to_server_region() const;
  inline void clear_lan_host_ping_to_server_region();
  static const int kLanHostPingToServerRegionFieldNumber = 10;
  inline ::google::protobuf::uint32 lan_host_ping_to_server_region() const;
  inline void set_lan_host_ping_to_server_region(::google::protobuf::uint32 value);

  // optional bool has_pass_key = 11;
  inline bool has_has_pass_key() const;
  inline void clear_has_pass_key();
  static const int kHasPassKeyFieldNumber = 11;
  inline bool has_pass_key() const;
  inline void set_has_pass_key(bool value);

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomLobbiesResponseEntry)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_lobby_name();
  inline void clear_has_lobby_name();
  inline void set_has_member_count();
  inline void clear_has_member_count();
  inline void set_has_leader_account_id();
  inline void clear_has_leader_account_id();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_custom_map_name();
  inline void clear_has_custom_map_name();
  inline void set_has_max_player_count();
  inline void clear_has_max_player_count();
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_lan_host_ping_to_server_region();
  inline void clear_has_lan_host_ping_to_server_region();
  inline void set_has_has_pass_key();
  inline void clear_has_has_pass_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint64 custom_game_id_;
  ::std::string* lobby_name_;
  ::google::protobuf::uint32 member_count_;
  ::google::protobuf::uint32 leader_account_id_;
  ::std::string* leader_name_;
  ::std::string* custom_map_name_;
  ::google::protobuf::uint32 max_player_count_;
  ::google::protobuf::uint32 server_region_;
  ::google::protobuf::uint32 lan_host_ping_to_server_region_;
  bool has_pass_key_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgJoinableCustomLobbiesResponseEntry* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomLobbiesResponse : public ::google::protobuf::Message {
 public:
  CMsgJoinableCustomLobbiesResponse();
  virtual ~CMsgJoinableCustomLobbiesResponse();

  CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from);

  inline CMsgJoinableCustomLobbiesResponse& operator=(const CMsgJoinableCustomLobbiesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJoinableCustomLobbiesResponse& default_instance();

  void Swap(CMsgJoinableCustomLobbiesResponse* other);

  // implements Message ----------------------------------------------

  CMsgJoinableCustomLobbiesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJoinableCustomLobbiesResponse& from);
  void MergeFrom(const CMsgJoinableCustomLobbiesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  inline const ::CMsgJoinableCustomLobbiesResponseEntry& lobbies(int index) const;
  inline ::CMsgJoinableCustomLobbiesResponseEntry* mutable_lobbies(int index);
  inline ::CMsgJoinableCustomLobbiesResponseEntry* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >*
      mutable_lobbies();

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomLobbiesResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry > lobbies_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgJoinableCustomLobbiesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuickJoinCustomLobby_LegacyRegionPing : public ::google::protobuf::Message {
 public:
  CMsgQuickJoinCustomLobby_LegacyRegionPing();
  virtual ~CMsgQuickJoinCustomLobby_LegacyRegionPing();

  CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from);

  inline CMsgQuickJoinCustomLobby_LegacyRegionPing& operator=(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuickJoinCustomLobby_LegacyRegionPing& default_instance();

  void Swap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other);

  // implements Message ----------------------------------------------

  CMsgQuickJoinCustomLobby_LegacyRegionPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from);
  void MergeFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_region = 1;
  inline bool has_server_region() const;
  inline void clear_server_region();
  static const int kServerRegionFieldNumber = 1;
  inline ::google::protobuf::uint32 server_region() const;
  inline void set_server_region(::google::protobuf::uint32 value);

  // optional uint32 ping = 2;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 2;
  inline ::google::protobuf::uint32 ping() const;
  inline void set_ping(::google::protobuf::uint32 value);

  // optional fixed32 region_code = 3;
  inline bool has_region_code() const;
  inline void clear_region_code();
  static const int kRegionCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 region_code() const;
  inline void set_region_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuickJoinCustomLobby.LegacyRegionPing)
 private:
  inline void set_has_server_region();
  inline void clear_has_server_region();
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_region_code();
  inline void clear_has_region_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_region_;
  ::google::protobuf::uint32 ping_;
  ::google::protobuf::uint32 region_code_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuickJoinCustomLobby_LegacyRegionPing* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuickJoinCustomLobby : public ::google::protobuf::Message {
 public:
  CMsgQuickJoinCustomLobby();
  virtual ~CMsgQuickJoinCustomLobby();

  CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from);

  inline CMsgQuickJoinCustomLobby& operator=(const CMsgQuickJoinCustomLobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuickJoinCustomLobby& default_instance();

  void Swap(CMsgQuickJoinCustomLobby* other);

  // implements Message ----------------------------------------------

  CMsgQuickJoinCustomLobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuickJoinCustomLobby& from);
  void MergeFrom(const CMsgQuickJoinCustomLobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgQuickJoinCustomLobby_LegacyRegionPing LegacyRegionPing;

  // accessors -------------------------------------------------------

  // optional uint32 legacy_server_region = 1;
  inline bool has_legacy_server_region() const;
  inline void clear_legacy_server_region();
  static const int kLegacyServerRegionFieldNumber = 1;
  inline ::google::protobuf::uint32 legacy_server_region() const;
  inline void set_legacy_server_region(::google::protobuf::uint32 value);

  // optional uint64 custom_game_id = 2;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // optional uint32 client_version = 3;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
  inline bool has_create_lobby_details() const;
  inline void clear_create_lobby_details();
  static const int kCreateLobbyDetailsFieldNumber = 4;
  inline const ::CMsgPracticeLobbySetDetails& create_lobby_details() const;
  inline ::CMsgPracticeLobbySetDetails* mutable_create_lobby_details();
  inline ::CMsgPracticeLobbySetDetails* release_create_lobby_details();
  inline void set_allocated_create_lobby_details(::CMsgPracticeLobbySetDetails* create_lobby_details);

  // optional bool allow_any_map = 5;
  inline bool has_allow_any_map() const;
  inline void clear_allow_any_map();
  static const int kAllowAnyMapFieldNumber = 5;
  inline bool allow_any_map() const;
  inline void set_allow_any_map(bool value);

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  inline int legacy_region_pings_size() const;
  inline void clear_legacy_region_pings();
  static const int kLegacyRegionPingsFieldNumber = 6;
  inline const ::CMsgQuickJoinCustomLobby_LegacyRegionPing& legacy_region_pings(int index) const;
  inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* mutable_legacy_region_pings(int index);
  inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* add_legacy_region_pings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >&
      legacy_region_pings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >*
      mutable_legacy_region_pings();

  // optional .CMsgClientPingData ping_data = 7;
  inline bool has_ping_data() const;
  inline void clear_ping_data();
  static const int kPingDataFieldNumber = 7;
  inline const ::CMsgClientPingData& ping_data() const;
  inline ::CMsgClientPingData* mutable_ping_data();
  inline ::CMsgClientPingData* release_ping_data();
  inline void set_allocated_ping_data(::CMsgClientPingData* ping_data);

  // @@protoc_insertion_point(class_scope:CMsgQuickJoinCustomLobby)
 private:
  inline void set_has_legacy_server_region();
  inline void clear_has_legacy_server_region();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_create_lobby_details();
  inline void clear_has_create_lobby_details();
  inline void set_has_allow_any_map();
  inline void clear_has_allow_any_map();
  inline void set_has_ping_data();
  inline void clear_has_ping_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint32 legacy_server_region_;
  ::google::protobuf::uint32 client_version_;
  ::CMsgPracticeLobbySetDetails* create_lobby_details_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing > legacy_region_pings_;
  ::CMsgClientPingData* ping_data_;
  bool allow_any_map_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuickJoinCustomLobby* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuickJoinCustomLobbyResponse : public ::google::protobuf::Message {
 public:
  CMsgQuickJoinCustomLobbyResponse();
  virtual ~CMsgQuickJoinCustomLobbyResponse();

  CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from);

  inline CMsgQuickJoinCustomLobbyResponse& operator=(const CMsgQuickJoinCustomLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuickJoinCustomLobbyResponse& default_instance();

  void Swap(CMsgQuickJoinCustomLobbyResponse* other);

  // implements Message ----------------------------------------------

  CMsgQuickJoinCustomLobbyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from);
  void MergeFrom(const CMsgQuickJoinCustomLobbyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::DOTAJoinLobbyResult result() const;
  inline void set_result(::DOTAJoinLobbyResult value);

  // @@protoc_insertion_point(class_scope:CMsgQuickJoinCustomLobbyResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuickJoinCustomLobbyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBotGameCreate : public ::google::protobuf::Message {
 public:
  CMsgBotGameCreate();
  virtual ~CMsgBotGameCreate();

  CMsgBotGameCreate(const CMsgBotGameCreate& from);

  inline CMsgBotGameCreate& operator=(const CMsgBotGameCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotGameCreate& default_instance();

  void Swap(CMsgBotGameCreate* other);

  // implements Message ----------------------------------------------

  CMsgBotGameCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBotGameCreate& from);
  void MergeFrom(const CMsgBotGameCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  inline void set_allocated_search_key(::std::string* search_key);

  // optional uint32 client_version = 2;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_difficulty_radiant() const;
  inline void clear_difficulty_radiant();
  static const int kDifficultyRadiantFieldNumber = 3;
  inline ::DOTABotDifficulty difficulty_radiant() const;
  inline void set_difficulty_radiant(::DOTABotDifficulty value);

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 4;
  inline ::DOTA_GC_TEAM team() const;
  inline void set_team(::DOTA_GC_TEAM value);

  // optional uint32 game_mode = 5;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 5;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  inline bool has_difficulty_dire() const;
  inline void clear_difficulty_dire();
  static const int kDifficultyDireFieldNumber = 6;
  inline ::DOTABotDifficulty difficulty_dire() const;
  inline void set_difficulty_dire(::DOTABotDifficulty value);

  // @@protoc_insertion_point(class_scope:CMsgBotGameCreate)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_difficulty_radiant();
  inline void clear_has_difficulty_radiant();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_difficulty_dire();
  inline void clear_has_difficulty_dire();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* search_key_;
  ::google::protobuf::uint32 client_version_;
  int difficulty_radiant_;
  int team_;
  ::google::protobuf::uint32 game_mode_;
  int difficulty_dire_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgBotGameCreate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCustomGameCreate : public ::google::protobuf::Message {
 public:
  CMsgCustomGameCreate();
  virtual ~CMsgCustomGameCreate();

  CMsgCustomGameCreate(const CMsgCustomGameCreate& from);

  inline CMsgCustomGameCreate& operator=(const CMsgCustomGameCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCustomGameCreate& default_instance();

  void Swap(CMsgCustomGameCreate* other);

  // implements Message ----------------------------------------------

  CMsgCustomGameCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCustomGameCreate& from);
  void MergeFrom(const CMsgCustomGameCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  inline void set_allocated_search_key(::std::string* search_key);

  // optional uint32 client_version = 2;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional uint32 difficulty = 3;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // optional string game_mode = 4;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 4;
  inline const ::std::string& game_mode() const;
  inline void set_game_mode(const ::std::string& value);
  inline void set_game_mode(const char* value);
  inline void set_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_game_mode();
  inline ::std::string* release_game_mode();
  inline void set_allocated_game_mode(::std::string* game_mode);

  // optional string map = 5;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 5;
  inline const ::std::string& map() const;
  inline void set_map(const ::std::string& value);
  inline void set_map(const char* value);
  inline void set_map(const char* value, size_t size);
  inline ::std::string* mutable_map();
  inline ::std::string* release_map();
  inline void set_allocated_map(::std::string* map);

  // optional uint64 custom_game_id = 7;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 7;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgCustomGameCreate)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* search_key_;
  ::google::protobuf::uint32 client_version_;
  ::google::protobuf::uint32 difficulty_;
  ::std::string* game_mode_;
  ::std::string* map_;
  ::google::protobuf::uint64 custom_game_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgCustomGameCreate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgEventGameCreate : public ::google::protobuf::Message {
 public:
  CMsgEventGameCreate();
  virtual ~CMsgEventGameCreate();

  CMsgEventGameCreate(const CMsgEventGameCreate& from);

  inline CMsgEventGameCreate& operator=(const CMsgEventGameCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgEventGameCreate& default_instance();

  void Swap(CMsgEventGameCreate* other);

  // implements Message ----------------------------------------------

  CMsgEventGameCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgEventGameCreate& from);
  void MergeFrom(const CMsgEventGameCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  inline void set_allocated_search_key(::std::string* search_key);

  // optional uint32 client_version = 2;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional uint32 difficulty = 3;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 3;
  inline ::google::protobuf::uint32 difficulty() const;
  inline void set_difficulty(::google::protobuf::uint32 value);

  // optional string game_mode = 4;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 4;
  inline const ::std::string& game_mode() const;
  inline void set_game_mode(const ::std::string& value);
  inline void set_game_mode(const char* value);
  inline void set_game_mode(const char* value, size_t size);
  inline ::std::string* mutable_game_mode();
  inline ::std::string* release_game_mode();
  inline void set_allocated_game_mode(::std::string* game_mode);

  // optional string map = 5;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 5;
  inline const ::std::string& map() const;
  inline void set_map(const ::std::string& value);
  inline void set_map(const char* value);
  inline void set_map(const char* value, size_t size);
  inline ::std::string* mutable_map();
  inline ::std::string* release_map();
  inline void set_allocated_map(::std::string* map);

  // optional uint64 custom_game_id = 7;
  inline bool has_custom_game_id() const;
  inline void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 7;
  inline ::google::protobuf::uint64 custom_game_id() const;
  inline void set_custom_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgEventGameCreate)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_custom_game_id();
  inline void clear_has_custom_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* search_key_;
  ::google::protobuf::uint32 client_version_;
  ::google::protobuf::uint32 difficulty_;
  ::std::string* game_mode_;
  ::std::string* map_;
  ::google::protobuf::uint64 custom_game_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgEventGameCreate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAPartyMemberSetCoach : public ::google::protobuf::Message {
 public:
  CMsgDOTAPartyMemberSetCoach();
  virtual ~CMsgDOTAPartyMemberSetCoach();

  CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from);

  inline CMsgDOTAPartyMemberSetCoach& operator=(const CMsgDOTAPartyMemberSetCoach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAPartyMemberSetCoach& default_instance();

  void Swap(CMsgDOTAPartyMemberSetCoach* other);

  // implements Message ----------------------------------------------

  CMsgDOTAPartyMemberSetCoach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAPartyMemberSetCoach& from);
  void MergeFrom(const CMsgDOTAPartyMemberSetCoach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool wants_coach = 1;
  inline bool has_wants_coach() const;
  inline void clear_wants_coach();
  static const int kWantsCoachFieldNumber = 1;
  inline bool wants_coach() const;
  inline void set_wants_coach(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAPartyMemberSetCoach)
 private:
  inline void set_has_wants_coach();
  inline void clear_has_wants_coach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool wants_coach_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAPartyMemberSetCoach* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASetGroupLeader : public ::google::protobuf::Message {
 public:
  CMsgDOTASetGroupLeader();
  virtual ~CMsgDOTASetGroupLeader();

  CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from);

  inline CMsgDOTASetGroupLeader& operator=(const CMsgDOTASetGroupLeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASetGroupLeader& default_instance();

  void Swap(CMsgDOTASetGroupLeader* other);

  // implements Message ----------------------------------------------

  CMsgDOTASetGroupLeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASetGroupLeader& from);
  void MergeFrom(const CMsgDOTASetGroupLeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 new_leader_steamid = 1;
  inline bool has_new_leader_steamid() const;
  inline void clear_new_leader_steamid();
  static const int kNewLeaderSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 new_leader_steamid() const;
  inline void set_new_leader_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASetGroupLeader)
 private:
  inline void set_has_new_leader_steamid();
  inline void clear_has_new_leader_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 new_leader_steamid_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASetGroupLeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTACancelGroupInvites : public ::google::protobuf::Message {
 public:
  CMsgDOTACancelGroupInvites();
  virtual ~CMsgDOTACancelGroupInvites();

  CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from);

  inline CMsgDOTACancelGroupInvites& operator=(const CMsgDOTACancelGroupInvites& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTACancelGroupInvites& default_instance();

  void Swap(CMsgDOTACancelGroupInvites* other);

  // implements Message ----------------------------------------------

  CMsgDOTACancelGroupInvites* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTACancelGroupInvites& from);
  void MergeFrom(const CMsgDOTACancelGroupInvites& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 invited_steamids = 1;
  inline int invited_steamids_size() const;
  inline void clear_invited_steamids();
  static const int kInvitedSteamidsFieldNumber = 1;
  inline ::google::protobuf::uint64 invited_steamids(int index) const;
  inline void set_invited_steamids(int index, ::google::protobuf::uint64 value);
  inline void add_invited_steamids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      invited_steamids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_invited_steamids();

  // repeated fixed64 invited_groupids = 2;
  inline int invited_groupids_size() const;
  inline void clear_invited_groupids();
  static const int kInvitedGroupidsFieldNumber = 2;
  inline ::google::protobuf::uint64 invited_groupids(int index) const;
  inline void set_invited_groupids(int index, ::google::protobuf::uint64 value);
  inline void add_invited_groupids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      invited_groupids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_invited_groupids();

  // @@protoc_insertion_point(class_scope:CMsgDOTACancelGroupInvites)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > invited_steamids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > invited_groupids_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTACancelGroupInvites* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTASetGroupOpenStatus : public ::google::protobuf::Message {
 public:
  CMsgDOTASetGroupOpenStatus();
  virtual ~CMsgDOTASetGroupOpenStatus();

  CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from);

  inline CMsgDOTASetGroupOpenStatus& operator=(const CMsgDOTASetGroupOpenStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTASetGroupOpenStatus& default_instance();

  void Swap(CMsgDOTASetGroupOpenStatus* other);

  // implements Message ----------------------------------------------

  CMsgDOTASetGroupOpenStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTASetGroupOpenStatus& from);
  void MergeFrom(const CMsgDOTASetGroupOpenStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool open = 1;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 1;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTASetGroupOpenStatus)
 private:
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool open_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTASetGroupOpenStatus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGroupMergeInvite : public ::google::protobuf::Message {
 public:
  CMsgDOTAGroupMergeInvite();
  virtual ~CMsgDOTAGroupMergeInvite();

  CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from);

  inline CMsgDOTAGroupMergeInvite& operator=(const CMsgDOTAGroupMergeInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGroupMergeInvite& default_instance();

  void Swap(CMsgDOTAGroupMergeInvite* other);

  // implements Message ----------------------------------------------

  CMsgDOTAGroupMergeInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGroupMergeInvite& from);
  void MergeFrom(const CMsgDOTAGroupMergeInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 other_group_id = 1;
  inline bool has_other_group_id() const;
  inline void clear_other_group_id();
  static const int kOtherGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 other_group_id() const;
  inline void set_other_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGroupMergeInvite)
 private:
  inline void set_has_other_group_id();
  inline void clear_has_other_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 other_group_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAGroupMergeInvite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGroupMergeResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTAGroupMergeResponse();
  virtual ~CMsgDOTAGroupMergeResponse();

  CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from);

  inline CMsgDOTAGroupMergeResponse& operator=(const CMsgDOTAGroupMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGroupMergeResponse& default_instance();

  void Swap(CMsgDOTAGroupMergeResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTAGroupMergeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGroupMergeResponse& from);
  void MergeFrom(const CMsgDOTAGroupMergeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 initiator_group_id = 1;
  inline bool has_initiator_group_id() const;
  inline void clear_initiator_group_id();
  static const int kInitiatorGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint64 initiator_group_id() const;
  inline void set_initiator_group_id(::google::protobuf::uint64 value);

  // optional bool accept = 2;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 2;
  inline bool accept() const;
  inline void set_accept(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGroupMergeResponse)
 private:
  inline void set_has_initiator_group_id();
  inline void clear_has_initiator_group_id();
  inline void set_has_accept();
  inline void clear_has_accept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 initiator_group_id_;
  bool accept_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAGroupMergeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAGroupMergeReply : public ::google::protobuf::Message {
 public:
  CMsgDOTAGroupMergeReply();
  virtual ~CMsgDOTAGroupMergeReply();

  CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from);

  inline CMsgDOTAGroupMergeReply& operator=(const CMsgDOTAGroupMergeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAGroupMergeReply& default_instance();

  void Swap(CMsgDOTAGroupMergeReply* other);

  // implements Message ----------------------------------------------

  CMsgDOTAGroupMergeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAGroupMergeReply& from);
  void MergeFrom(const CMsgDOTAGroupMergeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::EDOTAGroupMergeResult result() const;
  inline void set_result(::EDOTAGroupMergeResult value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAGroupMergeReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAGroupMergeReply* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyGameDetails_Team : public ::google::protobuf::Message {
 public:
  CMsgSpectatorLobbyGameDetails_Team();
  virtual ~CMsgSpectatorLobbyGameDetails_Team();

  CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from);

  inline CMsgSpectatorLobbyGameDetails_Team& operator=(const CMsgSpectatorLobbyGameDetails_Team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorLobbyGameDetails_Team& default_instance();

  void Swap(CMsgSpectatorLobbyGameDetails_Team* other);

  // implements Message ----------------------------------------------

  CMsgSpectatorLobbyGameDetails_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from);
  void MergeFrom(const CMsgSpectatorLobbyGameDetails_Team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 2;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional fixed64 team_logo = 3;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 3;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyGameDetails.Team)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint32 team_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectatorLobbyGameDetails_Team* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyGameDetails : public ::google::protobuf::Message {
 public:
  CMsgSpectatorLobbyGameDetails();
  virtual ~CMsgSpectatorLobbyGameDetails();

  CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from);

  inline CMsgSpectatorLobbyGameDetails& operator=(const CMsgSpectatorLobbyGameDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorLobbyGameDetails& default_instance();

  void Swap(CMsgSpectatorLobbyGameDetails* other);

  // implements Message ----------------------------------------------

  CMsgSpectatorLobbyGameDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectatorLobbyGameDetails& from);
  void MergeFrom(const CMsgSpectatorLobbyGameDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSpectatorLobbyGameDetails_Team Team;

  // accessors -------------------------------------------------------

  // optional uint32 language = 1;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);

  // optional uint64 match_id = 2;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 2;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional fixed64 server_steam_id = 3;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional string stream_url = 4;
  inline bool has_stream_url() const;
  inline void clear_stream_url();
  static const int kStreamUrlFieldNumber = 4;
  inline const ::std::string& stream_url() const;
  inline void set_stream_url(const ::std::string& value);
  inline void set_stream_url(const char* value);
  inline void set_stream_url(const char* value, size_t size);
  inline ::std::string* mutable_stream_url();
  inline ::std::string* release_stream_url();
  inline void set_allocated_stream_url(::std::string* stream_url);

  // optional string stream_name = 5;
  inline bool has_stream_name() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 5;
  inline const ::std::string& stream_name() const;
  inline void set_stream_name(const ::std::string& value);
  inline void set_stream_name(const char* value);
  inline void set_stream_name(const char* value, size_t size);
  inline ::std::string* mutable_stream_name();
  inline ::std::string* release_stream_name();
  inline void set_allocated_stream_name(::std::string* stream_name);

  // optional uint32 league_id = 6;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 6;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 7;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 series_game = 8;
  inline bool has_series_game() const;
  inline void clear_series_game();
  static const int kSeriesGameFieldNumber = 8;
  inline ::google::protobuf::uint32 series_game() const;
  inline void set_series_game(::google::protobuf::uint32 value);

  // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  inline bool has_radiant_team() const;
  inline void clear_radiant_team();
  static const int kRadiantTeamFieldNumber = 9;
  inline const ::CMsgSpectatorLobbyGameDetails_Team& radiant_team() const;
  inline ::CMsgSpectatorLobbyGameDetails_Team* mutable_radiant_team();
  inline ::CMsgSpectatorLobbyGameDetails_Team* release_radiant_team();
  inline void set_allocated_radiant_team(::CMsgSpectatorLobbyGameDetails_Team* radiant_team);

  // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  inline bool has_dire_team() const;
  inline void clear_dire_team();
  static const int kDireTeamFieldNumber = 10;
  inline const ::CMsgSpectatorLobbyGameDetails_Team& dire_team() const;
  inline ::CMsgSpectatorLobbyGameDetails_Team* mutable_dire_team();
  inline ::CMsgSpectatorLobbyGameDetails_Team* release_dire_team();
  inline void set_allocated_dire_team(::CMsgSpectatorLobbyGameDetails_Team* dire_team);

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyGameDetails)
 private:
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_stream_url();
  inline void clear_has_stream_url();
  inline void set_has_stream_name();
  inline void clear_has_stream_name();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_series_game();
  inline void clear_has_series_game();
  inline void set_has_radiant_team();
  inline void clear_has_radiant_team();
  inline void set_has_dire_team();
  inline void clear_has_dire_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint32 language_;
  ::google::protobuf::uint32 league_id_;
  ::std::string* stream_url_;
  ::std::string* stream_name_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 series_game_;
  ::CMsgSpectatorLobbyGameDetails_Team* radiant_team_;
  ::CMsgSpectatorLobbyGameDetails_Team* dire_team_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectatorLobbyGameDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetSpectatorLobbyDetails : public ::google::protobuf::Message {
 public:
  CMsgSetSpectatorLobbyDetails();
  virtual ~CMsgSetSpectatorLobbyDetails();

  CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from);

  inline CMsgSetSpectatorLobbyDetails& operator=(const CMsgSetSpectatorLobbyDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetSpectatorLobbyDetails& default_instance();

  void Swap(CMsgSetSpectatorLobbyDetails* other);

  // implements Message ----------------------------------------------

  CMsgSetSpectatorLobbyDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetSpectatorLobbyDetails& from);
  void MergeFrom(const CMsgSetSpectatorLobbyDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional string lobby_name = 2;
  inline bool has_lobby_name() const;
  inline void clear_lobby_name();
  static const int kLobbyNameFieldNumber = 2;
  inline const ::std::string& lobby_name() const;
  inline void set_lobby_name(const ::std::string& value);
  inline void set_lobby_name(const char* value);
  inline void set_lobby_name(const char* value, size_t size);
  inline ::std::string* mutable_lobby_name();
  inline ::std::string* release_lobby_name();
  inline void set_allocated_lobby_name(::std::string* lobby_name);

  // optional string pass_key = 3;
  inline bool has_pass_key() const;
  inline void clear_pass_key();
  static const int kPassKeyFieldNumber = 3;
  inline const ::std::string& pass_key() const;
  inline void set_pass_key(const ::std::string& value);
  inline void set_pass_key(const char* value);
  inline void set_pass_key(const char* value, size_t size);
  inline ::std::string* mutable_pass_key();
  inline ::std::string* release_pass_key();
  inline void set_allocated_pass_key(::std::string* pass_key);

  // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
  inline bool has_game_details() const;
  inline void clear_game_details();
  static const int kGameDetailsFieldNumber = 4;
  inline const ::CMsgSpectatorLobbyGameDetails& game_details() const;
  inline ::CMsgSpectatorLobbyGameDetails* mutable_game_details();
  inline ::CMsgSpectatorLobbyGameDetails* release_game_details();
  inline void set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details);

  // @@protoc_insertion_point(class_scope:CMsgSetSpectatorLobbyDetails)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_lobby_name();
  inline void clear_has_lobby_name();
  inline void set_has_pass_key();
  inline void clear_has_pass_key();
  inline void set_has_game_details();
  inline void clear_has_game_details();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::std::string* lobby_name_;
  ::std::string* pass_key_;
  ::CMsgSpectatorLobbyGameDetails* game_details_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgSetSpectatorLobbyDetails* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCreateSpectatorLobby : public ::google::protobuf::Message {
 public:
  CMsgCreateSpectatorLobby();
  virtual ~CMsgCreateSpectatorLobby();

  CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from);

  inline CMsgCreateSpectatorLobby& operator=(const CMsgCreateSpectatorLobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCreateSpectatorLobby& default_instance();

  void Swap(CMsgCreateSpectatorLobby* other);

  // implements Message ----------------------------------------------

  CMsgCreateSpectatorLobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCreateSpectatorLobby& from);
  void MergeFrom(const CMsgCreateSpectatorLobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 client_version = 1;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional .CMsgSetSpectatorLobbyDetails details = 2;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::CMsgSetSpectatorLobbyDetails& details() const;
  inline ::CMsgSetSpectatorLobbyDetails* mutable_details();
  inline ::CMsgSetSpectatorLobbyDetails* release_details();
  inline void set_allocated_details(::CMsgSetSpectatorLobbyDetails* details);

  // @@protoc_insertion_point(class_scope:CMsgCreateSpectatorLobby)
 private:
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_details();
  inline void clear_has_details();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgSetSpectatorLobbyDetails* details_;
  ::google::protobuf::uint32 client_version_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgCreateSpectatorLobby* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyList : public ::google::protobuf::Message {
 public:
  CMsgSpectatorLobbyList();
  virtual ~CMsgSpectatorLobbyList();

  CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from);

  inline CMsgSpectatorLobbyList& operator=(const CMsgSpectatorLobbyList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorLobbyList& default_instance();

  void Swap(CMsgSpectatorLobbyList* other);

  // implements Message ----------------------------------------------

  CMsgSpectatorLobbyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectatorLobbyList& from);
  void MergeFrom(const CMsgSpectatorLobbyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectatorLobbyList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyListResponse_SpectatorLobby : public ::google::protobuf::Message {
 public:
  CMsgSpectatorLobbyListResponse_SpectatorLobby();
  virtual ~CMsgSpectatorLobbyListResponse_SpectatorLobby();

  CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from);

  inline CMsgSpectatorLobbyListResponse_SpectatorLobby& operator=(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorLobbyListResponse_SpectatorLobby& default_instance();

  void Swap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other);

  // implements Message ----------------------------------------------

  CMsgSpectatorLobbyListResponse_SpectatorLobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from);
  void MergeFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lobby_id = 1;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional string game_name = 2;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 2;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // optional bool requires_pass_key = 3;
  inline bool has_requires_pass_key() const;
  inline void clear_requires_pass_key();
  static const int kRequiresPassKeyFieldNumber = 3;
  inline bool requires_pass_key() const;
  inline void set_requires_pass_key(bool value);

  // optional uint32 leader_account_id = 4;
  inline bool has_leader_account_id() const;
  inline void clear_leader_account_id();
  static const int kLeaderAccountIdFieldNumber = 4;
  inline ::google::protobuf::uint32 leader_account_id() const;
  inline void set_leader_account_id(::google::protobuf::uint32 value);

  // optional uint32 member_count = 5;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 5;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
  inline bool has_game_details() const;
  inline void clear_game_details();
  static const int kGameDetailsFieldNumber = 7;
  inline const ::CMsgSpectatorLobbyGameDetails& game_details() const;
  inline ::CMsgSpectatorLobbyGameDetails* mutable_game_details();
  inline ::CMsgSpectatorLobbyGameDetails* release_game_details();
  inline void set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details);

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyListResponse.SpectatorLobby)
 private:
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_requires_pass_key();
  inline void clear_has_requires_pass_key();
  inline void set_has_leader_account_id();
  inline void clear_has_leader_account_id();
  inline void set_has_member_count();
  inline void clear_has_member_count();
  inline void set_has_game_details();
  inline void clear_has_game_details();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::std::string* game_name_;
  bool requires_pass_key_;
  ::google::protobuf::uint32 leader_account_id_;
  ::CMsgSpectatorLobbyGameDetails* game_details_;
  ::google::protobuf::uint32 member_count_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectatorLobbyListResponse_SpectatorLobby* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyListResponse : public ::google::protobuf::Message {
 public:
  CMsgSpectatorLobbyListResponse();
  virtual ~CMsgSpectatorLobbyListResponse();

  CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from);

  inline CMsgSpectatorLobbyListResponse& operator=(const CMsgSpectatorLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectatorLobbyListResponse& default_instance();

  void Swap(CMsgSpectatorLobbyListResponse* other);

  // implements Message ----------------------------------------------

  CMsgSpectatorLobbyListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectatorLobbyListResponse& from);
  void MergeFrom(const CMsgSpectatorLobbyListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSpectatorLobbyListResponse_SpectatorLobby SpectatorLobby;

  // accessors -------------------------------------------------------

  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  inline int lobbies_size() const;
  inline void clear_lobbies();
  static const int kLobbiesFieldNumber = 1;
  inline const ::CMsgSpectatorLobbyListResponse_SpectatorLobby& lobbies(int index) const;
  inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* mutable_lobbies(int index);
  inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* add_lobbies();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >&
      lobbies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >*
      mutable_lobbies();

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby > lobbies_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectatorLobbyListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCRequestSteamDatagramTicket : public ::google::protobuf::Message {
 public:
  CMsgClientToGCRequestSteamDatagramTicket();
  virtual ~CMsgClientToGCRequestSteamDatagramTicket();

  CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from);

  inline CMsgClientToGCRequestSteamDatagramTicket& operator=(const CMsgClientToGCRequestSteamDatagramTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCRequestSteamDatagramTicket& default_instance();

  void Swap(CMsgClientToGCRequestSteamDatagramTicket* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCRequestSteamDatagramTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from);
  void MergeFrom(const CMsgClientToGCRequestSteamDatagramTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steam_id = 1;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRequestSteamDatagramTicket)
 private:
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steam_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCRequestSteamDatagramTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCRequestSteamDatagramTicketResponse : public ::google::protobuf::Message {
 public:
  CMsgClientToGCRequestSteamDatagramTicketResponse();
  virtual ~CMsgClientToGCRequestSteamDatagramTicketResponse();

  CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from);

  inline CMsgClientToGCRequestSteamDatagramTicketResponse& operator=(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCRequestSteamDatagramTicketResponse& default_instance();

  void Swap(CMsgClientToGCRequestSteamDatagramTicketResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCRequestSteamDatagramTicketResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from);
  void MergeFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serialized_ticket = 1;
  inline bool has_serialized_ticket() const;
  inline void clear_serialized_ticket();
  static const int kSerializedTicketFieldNumber = 1;
  inline const ::std::string& serialized_ticket() const;
  inline void set_serialized_ticket(const ::std::string& value);
  inline void set_serialized_ticket(const char* value);
  inline void set_serialized_ticket(const char* value, size_t size);
  inline ::std::string* mutable_serialized_ticket();
  inline ::std::string* release_serialized_ticket();
  inline void set_allocated_serialized_ticket(::std::string* serialized_ticket);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRequestSteamDatagramTicketResponse)
 private:
  inline void set_has_serialized_ticket();
  inline void clear_has_serialized_ticket();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serialized_ticket_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCRequestSteamDatagramTicketResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgStartFindingMatch

// optional string key = 1;
inline bool CMsgStartFindingMatch::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgStartFindingMatch::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgStartFindingMatch::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgStartFindingMatch::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CMsgStartFindingMatch::key() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.key)
  return *key_;
}
inline void CMsgStartFindingMatch::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.key)
}
inline void CMsgStartFindingMatch::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatch.key)
}
inline void CMsgStartFindingMatch::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatch.key)
}
inline ::std::string* CMsgStartFindingMatch::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.key)
  return key_;
}
inline ::std::string* CMsgStartFindingMatch::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgStartFindingMatch::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.key)
}

// optional uint32 matchgroups = 2 [default = 4294967295];
inline bool CMsgStartFindingMatch::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgStartFindingMatch::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgStartFindingMatch::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgStartFindingMatch::clear_matchgroups() {
  matchgroups_ = 4294967295u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::matchgroups() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.matchgroups)
  return matchgroups_;
}
inline void CMsgStartFindingMatch::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.matchgroups)
}

// optional uint32 client_version = 3;
inline bool CMsgStartFindingMatch::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgStartFindingMatch::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgStartFindingMatch::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgStartFindingMatch::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.client_version)
  return client_version_;
}
inline void CMsgStartFindingMatch::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.client_version)
}

// optional uint32 game_modes = 4 [default = 4294967295];
inline bool CMsgStartFindingMatch::has_game_modes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgStartFindingMatch::set_has_game_modes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgStartFindingMatch::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgStartFindingMatch::clear_game_modes() {
  game_modes_ = 4294967295u;
  clear_has_game_modes();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::game_modes() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_modes)
  return game_modes_;
}
inline void CMsgStartFindingMatch::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_modes)
}

// optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
inline bool CMsgStartFindingMatch::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgStartFindingMatch::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgStartFindingMatch::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgStartFindingMatch::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CMsgStartFindingMatch::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CMsgStartFindingMatch::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.bot_difficulty)
}

// optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
inline bool CMsgStartFindingMatch::has_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgStartFindingMatch::set_has_match_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgStartFindingMatch::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgStartFindingMatch::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CMsgStartFindingMatch::match_type() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CMsgStartFindingMatch::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.match_type)
}

// optional uint32 matchlanguages = 7 [default = 4294967295];
inline bool CMsgStartFindingMatch::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgStartFindingMatch::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgStartFindingMatch::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgStartFindingMatch::clear_matchlanguages() {
  matchlanguages_ = 4294967295u;
  clear_has_matchlanguages();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.matchlanguages)
  return matchlanguages_;
}
inline void CMsgStartFindingMatch::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.matchlanguages)
}

// optional uint32 map_preference = 9;
inline bool CMsgStartFindingMatch::has_map_preference() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgStartFindingMatch::set_has_map_preference() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgStartFindingMatch::clear_has_map_preference() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgStartFindingMatch::clear_map_preference() {
  map_preference_ = 0u;
  clear_has_map_preference();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::map_preference() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.map_preference)
  return map_preference_;
}
inline void CMsgStartFindingMatch::set_map_preference(::google::protobuf::uint32 value) {
  set_has_map_preference();
  map_preference_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.map_preference)
}

// optional uint32 team_id = 8;
inline bool CMsgStartFindingMatch::has_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgStartFindingMatch::set_has_team_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgStartFindingMatch::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgStartFindingMatch::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.team_id)
  return team_id_;
}
inline void CMsgStartFindingMatch::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.team_id)
}

// optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
inline bool CMsgStartFindingMatch::has_game_language_enum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgStartFindingMatch::set_has_game_language_enum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgStartFindingMatch::clear_has_game_language_enum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgStartFindingMatch::clear_game_language_enum() {
  game_language_enum_ = 0;
  clear_has_game_language_enum();
}
inline ::MatchLanguages CMsgStartFindingMatch::game_language_enum() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_language_enum)
  return static_cast< ::MatchLanguages >(game_language_enum_);
}
inline void CMsgStartFindingMatch::set_game_language_enum(::MatchLanguages value) {
  assert(::MatchLanguages_IsValid(value));
  set_has_game_language_enum();
  game_language_enum_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_language_enum)
}

// optional string game_language_name = 11;
inline bool CMsgStartFindingMatch::has_game_language_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgStartFindingMatch::set_has_game_language_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgStartFindingMatch::clear_has_game_language_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgStartFindingMatch::clear_game_language_name() {
  if (game_language_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_language_name_->clear();
  }
  clear_has_game_language_name();
}
inline const ::std::string& CMsgStartFindingMatch::game_language_name() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_language_name)
  return *game_language_name_;
}
inline void CMsgStartFindingMatch::set_game_language_name(const ::std::string& value) {
  set_has_game_language_name();
  if (game_language_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_language_name_ = new ::std::string;
  }
  game_language_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_language_name)
}
inline void CMsgStartFindingMatch::set_game_language_name(const char* value) {
  set_has_game_language_name();
  if (game_language_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_language_name_ = new ::std::string;
  }
  game_language_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatch.game_language_name)
}
inline void CMsgStartFindingMatch::set_game_language_name(const char* value, size_t size) {
  set_has_game_language_name();
  if (game_language_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_language_name_ = new ::std::string;
  }
  game_language_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatch.game_language_name)
}
inline ::std::string* CMsgStartFindingMatch::mutable_game_language_name() {
  set_has_game_language_name();
  if (game_language_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_language_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.game_language_name)
  return game_language_name_;
}
inline ::std::string* CMsgStartFindingMatch::release_game_language_name() {
  clear_has_game_language_name();
  if (game_language_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_language_name_;
    game_language_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgStartFindingMatch::set_allocated_game_language_name(::std::string* game_language_name) {
  if (game_language_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_language_name_;
  }
  if (game_language_name) {
    set_has_game_language_name();
    game_language_name_ = game_language_name;
  } else {
    clear_has_game_language_name();
    game_language_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.game_language_name)
}

// optional .CMsgClientPingData ping_data = 12;
inline bool CMsgStartFindingMatch::has_ping_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgStartFindingMatch::set_has_ping_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgStartFindingMatch::clear_has_ping_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgStartFindingMatch::clear_ping_data() {
  if (ping_data_ != NULL) ping_data_->::CMsgClientPingData::Clear();
  clear_has_ping_data();
}
inline const ::CMsgClientPingData& CMsgStartFindingMatch::ping_data() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.ping_data)
  return ping_data_ != NULL ? *ping_data_ : *default_instance_->ping_data_;
}
inline ::CMsgClientPingData* CMsgStartFindingMatch::mutable_ping_data() {
  set_has_ping_data();
  if (ping_data_ == NULL) ping_data_ = new ::CMsgClientPingData;
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.ping_data)
  return ping_data_;
}
inline ::CMsgClientPingData* CMsgStartFindingMatch::release_ping_data() {
  clear_has_ping_data();
  ::CMsgClientPingData* temp = ping_data_;
  ping_data_ = NULL;
  return temp;
}
inline void CMsgStartFindingMatch::set_allocated_ping_data(::CMsgClientPingData* ping_data) {
  delete ping_data_;
  ping_data_ = ping_data;
  if (ping_data) {
    set_has_ping_data();
  } else {
    clear_has_ping_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.ping_data)
}

// optional uint32 region_select_flags = 13;
inline bool CMsgStartFindingMatch::has_region_select_flags() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgStartFindingMatch::set_has_region_select_flags() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgStartFindingMatch::clear_has_region_select_flags() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgStartFindingMatch::clear_region_select_flags() {
  region_select_flags_ = 0u;
  clear_has_region_select_flags();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatch::region_select_flags() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.region_select_flags)
  return region_select_flags_;
}
inline void CMsgStartFindingMatch::set_region_select_flags(::google::protobuf::uint32 value) {
  set_has_region_select_flags();
  region_select_flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.region_select_flags)
}

// -------------------------------------------------------------------

// CMsgStartFindingMatchResult

// optional uint32 legacy_generic_eresult = 1 [default = 2];
inline bool CMsgStartFindingMatchResult::has_legacy_generic_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgStartFindingMatchResult::set_has_legacy_generic_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgStartFindingMatchResult::clear_has_legacy_generic_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgStartFindingMatchResult::clear_legacy_generic_eresult() {
  legacy_generic_eresult_ = 2u;
  clear_has_legacy_generic_eresult();
}
inline ::google::protobuf::uint32 CMsgStartFindingMatchResult::legacy_generic_eresult() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.legacy_generic_eresult)
  return legacy_generic_eresult_;
}
inline void CMsgStartFindingMatchResult::set_legacy_generic_eresult(::google::protobuf::uint32 value) {
  set_has_legacy_generic_eresult();
  legacy_generic_eresult_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.legacy_generic_eresult)
}

// optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
inline bool CMsgStartFindingMatchResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgStartFindingMatchResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgStartFindingMatchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgStartFindingMatchResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::EStartFindingMatchResult CMsgStartFindingMatchResult::result() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.result)
  return static_cast< ::EStartFindingMatchResult >(result_);
}
inline void CMsgStartFindingMatchResult::set_result(::EStartFindingMatchResult value) {
  assert(::EStartFindingMatchResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.result)
}

// optional string error_token = 3;
inline bool CMsgStartFindingMatchResult::has_error_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgStartFindingMatchResult::set_has_error_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgStartFindingMatchResult::clear_has_error_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgStartFindingMatchResult::clear_error_token() {
  if (error_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_token_->clear();
  }
  clear_has_error_token();
}
inline const ::std::string& CMsgStartFindingMatchResult::error_token() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.error_token)
  return *error_token_;
}
inline void CMsgStartFindingMatchResult::set_error_token(const ::std::string& value) {
  set_has_error_token();
  if (error_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_token_ = new ::std::string;
  }
  error_token_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.error_token)
}
inline void CMsgStartFindingMatchResult::set_error_token(const char* value) {
  set_has_error_token();
  if (error_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_token_ = new ::std::string;
  }
  error_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatchResult.error_token)
}
inline void CMsgStartFindingMatchResult::set_error_token(const char* value, size_t size) {
  set_has_error_token();
  if (error_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_token_ = new ::std::string;
  }
  error_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatchResult.error_token)
}
inline ::std::string* CMsgStartFindingMatchResult::mutable_error_token() {
  set_has_error_token();
  if (error_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatchResult.error_token)
  return error_token_;
}
inline ::std::string* CMsgStartFindingMatchResult::release_error_token() {
  clear_has_error_token();
  if (error_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_token_;
    error_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgStartFindingMatchResult::set_allocated_error_token(::std::string* error_token) {
  if (error_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_token_;
  }
  if (error_token) {
    set_has_error_token();
    error_token_ = error_token;
  } else {
    clear_has_error_token();
    error_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatchResult.error_token)
}

// optional string debug_message = 4;
inline bool CMsgStartFindingMatchResult::has_debug_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgStartFindingMatchResult::set_has_debug_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgStartFindingMatchResult::clear_has_debug_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgStartFindingMatchResult::clear_debug_message() {
  if (debug_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_message_->clear();
  }
  clear_has_debug_message();
}
inline const ::std::string& CMsgStartFindingMatchResult::debug_message() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.debug_message)
  return *debug_message_;
}
inline void CMsgStartFindingMatchResult::set_debug_message(const ::std::string& value) {
  set_has_debug_message();
  if (debug_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_message_ = new ::std::string;
  }
  debug_message_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.debug_message)
}
inline void CMsgStartFindingMatchResult::set_debug_message(const char* value) {
  set_has_debug_message();
  if (debug_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_message_ = new ::std::string;
  }
  debug_message_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatchResult.debug_message)
}
inline void CMsgStartFindingMatchResult::set_debug_message(const char* value, size_t size) {
  set_has_debug_message();
  if (debug_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_message_ = new ::std::string;
  }
  debug_message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatchResult.debug_message)
}
inline ::std::string* CMsgStartFindingMatchResult::mutable_debug_message() {
  set_has_debug_message();
  if (debug_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    debug_message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatchResult.debug_message)
  return debug_message_;
}
inline ::std::string* CMsgStartFindingMatchResult::release_debug_message() {
  clear_has_debug_message();
  if (debug_message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = debug_message_;
    debug_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgStartFindingMatchResult::set_allocated_debug_message(::std::string* debug_message) {
  if (debug_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete debug_message_;
  }
  if (debug_message) {
    set_has_debug_message();
    debug_message_ = debug_message;
  } else {
    clear_has_debug_message();
    debug_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatchResult.debug_message)
}

// repeated fixed64 responsible_party_members = 5;
inline int CMsgStartFindingMatchResult::responsible_party_members_size() const {
  return responsible_party_members_.size();
}
inline void CMsgStartFindingMatchResult::clear_responsible_party_members() {
  responsible_party_members_.Clear();
}
inline ::google::protobuf::uint64 CMsgStartFindingMatchResult::responsible_party_members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.responsible_party_members)
  return responsible_party_members_.Get(index);
}
inline void CMsgStartFindingMatchResult::set_responsible_party_members(int index, ::google::protobuf::uint64 value) {
  responsible_party_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.responsible_party_members)
}
inline void CMsgStartFindingMatchResult::add_responsible_party_members(::google::protobuf::uint64 value) {
  responsible_party_members_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgStartFindingMatchResult.responsible_party_members)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgStartFindingMatchResult::responsible_party_members() const {
  // @@protoc_insertion_point(field_list:CMsgStartFindingMatchResult.responsible_party_members)
  return responsible_party_members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgStartFindingMatchResult::mutable_responsible_party_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStartFindingMatchResult.responsible_party_members)
  return &responsible_party_members_;
}

// -------------------------------------------------------------------

// CMsgStopFindingMatch

// -------------------------------------------------------------------

// CMsgPartyBuilderOptions

// optional uint32 additional_slots = 1;
inline bool CMsgPartyBuilderOptions::has_additional_slots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPartyBuilderOptions::set_has_additional_slots() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPartyBuilderOptions::clear_has_additional_slots() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPartyBuilderOptions::clear_additional_slots() {
  additional_slots_ = 0u;
  clear_has_additional_slots();
}
inline ::google::protobuf::uint32 CMsgPartyBuilderOptions::additional_slots() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.additional_slots)
  return additional_slots_;
}
inline void CMsgPartyBuilderOptions::set_additional_slots(::google::protobuf::uint32 value) {
  set_has_additional_slots();
  additional_slots_ = value;
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.additional_slots)
}

// optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
inline bool CMsgPartyBuilderOptions::has_match_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPartyBuilderOptions::set_has_match_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPartyBuilderOptions::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPartyBuilderOptions::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::MatchType CMsgPartyBuilderOptions::match_type() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.match_type)
  return static_cast< ::MatchType >(match_type_);
}
inline void CMsgPartyBuilderOptions::set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.match_type)
}

// optional uint32 matchgroups = 3;
inline bool CMsgPartyBuilderOptions::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPartyBuilderOptions::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPartyBuilderOptions::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPartyBuilderOptions::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
inline ::google::protobuf::uint32 CMsgPartyBuilderOptions::matchgroups() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.matchgroups)
  return matchgroups_;
}
inline void CMsgPartyBuilderOptions::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.matchgroups)
}

// optional uint32 client_version = 4;
inline bool CMsgPartyBuilderOptions::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPartyBuilderOptions::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPartyBuilderOptions::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPartyBuilderOptions::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPartyBuilderOptions::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.client_version)
  return client_version_;
}
inline void CMsgPartyBuilderOptions::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.client_version)
}

// optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
inline bool CMsgPartyBuilderOptions::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPartyBuilderOptions::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPartyBuilderOptions::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPartyBuilderOptions::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::MatchLanguages CMsgPartyBuilderOptions::language() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.language)
  return static_cast< ::MatchLanguages >(language_);
}
inline void CMsgPartyBuilderOptions::set_language(::MatchLanguages value) {
  assert(::MatchLanguages_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.language)
}

// -------------------------------------------------------------------

// CMsgReadyUp

// optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
inline bool CMsgReadyUp::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgReadyUp::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgReadyUp::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgReadyUp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::DOTALobbyReadyState CMsgReadyUp::state() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.state)
  return static_cast< ::DOTALobbyReadyState >(state_);
}
inline void CMsgReadyUp::set_state(::DOTALobbyReadyState value) {
  assert(::DOTALobbyReadyState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CMsgReadyUp.state)
}

// optional fixed64 ready_up_key = 2;
inline bool CMsgReadyUp::has_ready_up_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgReadyUp::set_has_ready_up_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgReadyUp::clear_has_ready_up_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgReadyUp::clear_ready_up_key() {
  ready_up_key_ = GOOGLE_ULONGLONG(0);
  clear_has_ready_up_key();
}
inline ::google::protobuf::uint64 CMsgReadyUp::ready_up_key() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.ready_up_key)
  return ready_up_key_;
}
inline void CMsgReadyUp::set_ready_up_key(::google::protobuf::uint64 value) {
  set_has_ready_up_key();
  ready_up_key_ = value;
  // @@protoc_insertion_point(field_set:CMsgReadyUp.ready_up_key)
}

// optional .CDOTAClientHardwareSpecs hardware_specs = 3;
inline bool CMsgReadyUp::has_hardware_specs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgReadyUp::set_has_hardware_specs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgReadyUp::clear_has_hardware_specs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgReadyUp::clear_hardware_specs() {
  if (hardware_specs_ != NULL) hardware_specs_->::CDOTAClientHardwareSpecs::Clear();
  clear_has_hardware_specs();
}
inline const ::CDOTAClientHardwareSpecs& CMsgReadyUp::hardware_specs() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.hardware_specs)
  return hardware_specs_ != NULL ? *hardware_specs_ : *default_instance_->hardware_specs_;
}
inline ::CDOTAClientHardwareSpecs* CMsgReadyUp::mutable_hardware_specs() {
  set_has_hardware_specs();
  if (hardware_specs_ == NULL) hardware_specs_ = new ::CDOTAClientHardwareSpecs;
  // @@protoc_insertion_point(field_mutable:CMsgReadyUp.hardware_specs)
  return hardware_specs_;
}
inline ::CDOTAClientHardwareSpecs* CMsgReadyUp::release_hardware_specs() {
  clear_has_hardware_specs();
  ::CDOTAClientHardwareSpecs* temp = hardware_specs_;
  hardware_specs_ = NULL;
  return temp;
}
inline void CMsgReadyUp::set_allocated_hardware_specs(::CDOTAClientHardwareSpecs* hardware_specs) {
  delete hardware_specs_;
  hardware_specs_ = hardware_specs;
  if (hardware_specs) {
    set_has_hardware_specs();
  } else {
    clear_has_hardware_specs();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgReadyUp.hardware_specs)
}

// -------------------------------------------------------------------

// CMsgReadyUpStatus

// optional fixed64 lobby_id = 1;
inline bool CMsgReadyUpStatus::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgReadyUpStatus::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgReadyUpStatus::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgReadyUpStatus::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgReadyUpStatus::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.lobby_id)
  return lobby_id_;
}
inline void CMsgReadyUpStatus::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.lobby_id)
}

// repeated uint32 accepted_ids = 2;
inline int CMsgReadyUpStatus::accepted_ids_size() const {
  return accepted_ids_.size();
}
inline void CMsgReadyUpStatus::clear_accepted_ids() {
  accepted_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgReadyUpStatus::accepted_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.accepted_ids)
  return accepted_ids_.Get(index);
}
inline void CMsgReadyUpStatus::set_accepted_ids(int index, ::google::protobuf::uint32 value) {
  accepted_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.accepted_ids)
}
inline void CMsgReadyUpStatus::add_accepted_ids(::google::protobuf::uint32 value) {
  accepted_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgReadyUpStatus.accepted_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgReadyUpStatus::accepted_ids() const {
  // @@protoc_insertion_point(field_list:CMsgReadyUpStatus.accepted_ids)
  return accepted_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgReadyUpStatus::mutable_accepted_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyUpStatus.accepted_ids)
  return &accepted_ids_;
}

// repeated uint32 declined_ids = 3;
inline int CMsgReadyUpStatus::declined_ids_size() const {
  return declined_ids_.size();
}
inline void CMsgReadyUpStatus::clear_declined_ids() {
  declined_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgReadyUpStatus::declined_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.declined_ids)
  return declined_ids_.Get(index);
}
inline void CMsgReadyUpStatus::set_declined_ids(int index, ::google::protobuf::uint32 value) {
  declined_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.declined_ids)
}
inline void CMsgReadyUpStatus::add_declined_ids(::google::protobuf::uint32 value) {
  declined_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgReadyUpStatus.declined_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgReadyUpStatus::declined_ids() const {
  // @@protoc_insertion_point(field_list:CMsgReadyUpStatus.declined_ids)
  return declined_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgReadyUpStatus::mutable_declined_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyUpStatus.declined_ids)
  return &declined_ids_;
}

// -------------------------------------------------------------------

// CMsgAbandonCurrentGame

// -------------------------------------------------------------------

// CMsgPracticeLobbySetDetails

// optional uint64 lobby_id = 1;
inline bool CMsgPracticeLobbySetDetails::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lobby_id)
  return lobby_id_;
}
inline void CMsgPracticeLobbySetDetails::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lobby_id)
}

// optional string game_name = 2;
inline bool CMsgPracticeLobbySetDetails::has_game_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_game_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_name)
  return *game_name_;
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_name)
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.game_name)
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.game_name)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.game_name)
  return game_name_;
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbySetDetails::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.game_name)
}

// repeated .CLobbyTeamDetails team_details = 3;
inline int CMsgPracticeLobbySetDetails::team_details_size() const {
  return team_details_.size();
}
inline void CMsgPracticeLobbySetDetails::clear_team_details() {
  team_details_.Clear();
}
inline const ::CLobbyTeamDetails& CMsgPracticeLobbySetDetails::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Get(index);
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Mutable(index);
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::add_team_details() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >&
CMsgPracticeLobbySetDetails::team_details() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbySetDetails.team_details)
  return team_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::CLobbyTeamDetails >*
CMsgPracticeLobbySetDetails::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbySetDetails.team_details)
  return &team_details_;
}

// optional uint32 server_region = 4;
inline bool CMsgPracticeLobbySetDetails::has_server_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_server_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.server_region)
  return server_region_;
}
inline void CMsgPracticeLobbySetDetails::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.server_region)
}

// optional uint32 game_mode = 5;
inline bool CMsgPracticeLobbySetDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_mode)
  return game_mode_;
}
inline void CMsgPracticeLobbySetDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_mode)
}

// optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
inline bool CMsgPracticeLobbySetDetails::has_cm_pick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_cm_pick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
inline ::DOTA_CM_PICK CMsgPracticeLobbySetDetails::cm_pick() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.cm_pick)
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline void CMsgPracticeLobbySetDetails::set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.cm_pick)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetDetails::has_bot_difficulty_radiant() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_difficulty_radiant() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_difficulty_radiant() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 0;
  clear_has_bot_difficulty_radiant();
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_radiant_);
}
inline void CMsgPracticeLobbySetDetails::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_radiant();
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
}

// optional bool allow_cheats = 10;
inline bool CMsgPracticeLobbySetDetails::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
inline bool CMsgPracticeLobbySetDetails::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allow_cheats)
  return allow_cheats_;
}
inline void CMsgPracticeLobbySetDetails::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allow_cheats)
}

// optional bool fill_with_bots = 11;
inline bool CMsgPracticeLobbySetDetails::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPracticeLobbySetDetails::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
inline bool CMsgPracticeLobbySetDetails::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.fill_with_bots)
  return fill_with_bots_;
}
inline void CMsgPracticeLobbySetDetails::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.fill_with_bots)
}

// optional bool intro_mode = 12;
inline bool CMsgPracticeLobbySetDetails::has_intro_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_intro_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPracticeLobbySetDetails::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
inline bool CMsgPracticeLobbySetDetails::intro_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.intro_mode)
  return intro_mode_;
}
inline void CMsgPracticeLobbySetDetails::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.intro_mode)
}

// optional bool allow_spectating = 13;
inline bool CMsgPracticeLobbySetDetails::has_allow_spectating() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_allow_spectating() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgPracticeLobbySetDetails::clear_allow_spectating() {
  allow_spectating_ = false;
  clear_has_allow_spectating();
}
inline bool CMsgPracticeLobbySetDetails::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allow_spectating)
  return allow_spectating_;
}
inline void CMsgPracticeLobbySetDetails::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allow_spectating)
}

// optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
inline bool CMsgPracticeLobbySetDetails::has_game_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_game_version() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_game_version() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgPracticeLobbySetDetails::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
inline ::DOTAGameVersion CMsgPracticeLobbySetDetails::game_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_version)
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline void CMsgPracticeLobbySetDetails::set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_version)
}

// optional string pass_key = 15;
inline bool CMsgPracticeLobbySetDetails::has_pass_key() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_pass_key() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgPracticeLobbySetDetails::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.pass_key)
  return *pass_key_;
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.pass_key)
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.pass_key)
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.pass_key)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.pass_key)
  return pass_key_;
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbySetDetails::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.pass_key)
}

// optional uint32 leagueid = 16;
inline bool CMsgPracticeLobbySetDetails::has_leagueid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_leagueid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgPracticeLobbySetDetails::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.leagueid)
  return leagueid_;
}
inline void CMsgPracticeLobbySetDetails::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.leagueid)
}

// optional uint32 penalty_level_radiant = 17;
inline bool CMsgPracticeLobbySetDetails::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgPracticeLobbySetDetails::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.penalty_level_radiant)
  return penalty_level_radiant_;
}
inline void CMsgPracticeLobbySetDetails::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 18;
inline bool CMsgPracticeLobbySetDetails::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_penalty_level_dire() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_penalty_level_dire() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgPracticeLobbySetDetails::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.penalty_level_dire)
  return penalty_level_dire_;
}
inline void CMsgPracticeLobbySetDetails::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.penalty_level_dire)
}

// optional uint32 load_game_id = 19;
inline bool CMsgPracticeLobbySetDetails::has_load_game_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_load_game_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_load_game_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgPracticeLobbySetDetails::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::load_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.load_game_id)
  return load_game_id_;
}
inline void CMsgPracticeLobbySetDetails::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.load_game_id)
}

// optional uint32 series_type = 20;
inline bool CMsgPracticeLobbySetDetails::has_series_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_series_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_series_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgPracticeLobbySetDetails::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.series_type)
  return series_type_;
}
inline void CMsgPracticeLobbySetDetails::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.series_type)
}

// optional uint32 radiant_series_wins = 21;
inline bool CMsgPracticeLobbySetDetails::has_radiant_series_wins() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_radiant_series_wins() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_radiant_series_wins() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgPracticeLobbySetDetails::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.radiant_series_wins)
  return radiant_series_wins_;
}
inline void CMsgPracticeLobbySetDetails::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.radiant_series_wins)
}

// optional uint32 dire_series_wins = 22;
inline bool CMsgPracticeLobbySetDetails::has_dire_series_wins() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_dire_series_wins() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_dire_series_wins() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgPracticeLobbySetDetails::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.dire_series_wins)
  return dire_series_wins_;
}
inline void CMsgPracticeLobbySetDetails::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.dire_series_wins)
}

// optional bool allchat = 23 [default = false];
inline bool CMsgPracticeLobbySetDetails::has_allchat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_allchat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_allchat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgPracticeLobbySetDetails::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
inline bool CMsgPracticeLobbySetDetails::allchat() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allchat)
  return allchat_;
}
inline void CMsgPracticeLobbySetDetails::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
inline bool CMsgPracticeLobbySetDetails::has_dota_tv_delay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_dota_tv_delay() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_dota_tv_delay() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgPracticeLobbySetDetails::clear_dota_tv_delay() {
  dota_tv_delay_ = 1;
  clear_has_dota_tv_delay();
}
inline ::LobbyDotaTVDelay CMsgPracticeLobbySetDetails::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.dota_tv_delay)
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CMsgPracticeLobbySetDetails::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.dota_tv_delay)
}

// optional bool lan = 25;
inline bool CMsgPracticeLobbySetDetails::has_lan() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_lan() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_lan() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgPracticeLobbySetDetails::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
inline bool CMsgPracticeLobbySetDetails::lan() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lan)
  return lan_;
}
inline void CMsgPracticeLobbySetDetails::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lan)
}

// optional string custom_game_mode = 26;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_mode() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_mode() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_mode() {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_->clear();
  }
  clear_has_custom_game_mode();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_mode)
  return *custom_game_mode_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.custom_game_mode)
  return custom_game_mode_;
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_custom_game_mode() {
  clear_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_game_mode_;
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbySetDetails::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_game_mode) {
    set_has_custom_game_mode();
    custom_game_mode_ = custom_game_mode;
  } else {
    clear_has_custom_game_mode();
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.custom_game_mode)
}

// optional string custom_map_name = 27;
inline bool CMsgPracticeLobbySetDetails::has_custom_map_name() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_map_name() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_map_name() {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_->clear();
  }
  clear_has_custom_map_name();
}
inline const ::std::string& CMsgPracticeLobbySetDetails::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_map_name)
  return *custom_map_name_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline ::std::string* CMsgPracticeLobbySetDetails::mutable_custom_map_name() {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.custom_map_name)
  return custom_map_name_;
}
inline ::std::string* CMsgPracticeLobbySetDetails::release_custom_map_name() {
  clear_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_map_name_;
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbySetDetails::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (custom_map_name) {
    set_has_custom_map_name();
    custom_map_name_ = custom_map_name;
  } else {
    clear_has_custom_map_name();
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.custom_map_name)
}

// optional uint32 custom_difficulty = 28;
inline bool CMsgPracticeLobbySetDetails::has_custom_difficulty() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_difficulty() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_difficulty() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_difficulty)
  return custom_difficulty_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_difficulty)
}

// optional uint64 custom_game_id = 29;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_id() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_id)
  return custom_game_id_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_id)
}

// optional uint32 custom_min_players = 30;
inline bool CMsgPracticeLobbySetDetails::has_custom_min_players() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_min_players() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_min_players() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_min_players)
  return custom_min_players_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_min_players)
}

// optional uint32 custom_max_players = 31;
inline bool CMsgPracticeLobbySetDetails::has_custom_max_players() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_max_players() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_max_players() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_max_players)
  return custom_max_players_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_max_players)
}

// optional uint32 lan_host_ping_to_server_region = 32;
inline bool CMsgPracticeLobbySetDetails::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_lan_host_ping_to_server_region() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lan_host_ping_to_server_region)
}

// optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
inline bool CMsgPracticeLobbySetDetails::has_visibility() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_visibility() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_visibility() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline ::DOTALobbyVisibility CMsgPracticeLobbySetDetails::visibility() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.visibility)
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
inline void CMsgPracticeLobbySetDetails::set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.visibility)
}

// optional fixed64 custom_game_crc = 34;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_crc)
  return custom_game_crc_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_crc)
}

// optional uint32 league_series_id = 35;
inline bool CMsgPracticeLobbySetDetails::has_league_series_id() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_league_series_id() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_league_series_id() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetDetails::clear_league_series_id() {
  league_series_id_ = 0u;
  clear_has_league_series_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::league_series_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_series_id)
  return league_series_id_;
}
inline void CMsgPracticeLobbySetDetails::set_league_series_id(::google::protobuf::uint32 value) {
  set_has_league_series_id();
  league_series_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_series_id)
}

// optional uint32 league_game_id = 36;
inline bool CMsgPracticeLobbySetDetails::has_league_game_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_league_game_id() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_league_game_id() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgPracticeLobbySetDetails::clear_league_game_id() {
  league_game_id_ = 0u;
  clear_has_league_game_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::league_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_game_id)
  return league_game_id_;
}
inline void CMsgPracticeLobbySetDetails::set_league_game_id(::google::protobuf::uint32 value) {
  set_has_league_game_id();
  league_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_game_id)
}

// optional fixed32 custom_game_timestamp = 37;
inline bool CMsgPracticeLobbySetDetails::has_custom_game_timestamp() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_custom_game_timestamp() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_custom_game_timestamp() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_timestamp)
}

// optional uint64 previous_match_override = 38;
inline bool CMsgPracticeLobbySetDetails::has_previous_match_override() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_previous_match_override() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_previous_match_override() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgPracticeLobbySetDetails::clear_previous_match_override() {
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  clear_has_previous_match_override();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::previous_match_override() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.previous_match_override)
  return previous_match_override_;
}
inline void CMsgPracticeLobbySetDetails::set_previous_match_override(::google::protobuf::uint64 value) {
  set_has_previous_match_override();
  previous_match_override_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.previous_match_override)
}

// optional uint32 league_selection_priority_team = 39;
inline bool CMsgPracticeLobbySetDetails::has_league_selection_priority_team() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_league_selection_priority_team() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_league_selection_priority_team() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgPracticeLobbySetDetails::clear_league_selection_priority_team() {
  league_selection_priority_team_ = 0u;
  clear_has_league_selection_priority_team();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetDetails::league_selection_priority_team() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_selection_priority_team)
  return league_selection_priority_team_;
}
inline void CMsgPracticeLobbySetDetails::set_league_selection_priority_team(::google::protobuf::uint32 value) {
  set_has_league_selection_priority_team();
  league_selection_priority_team_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_selection_priority_team)
}

// optional .SelectionPriorityType league_selection_priority_choice = 40 [default = UNDEFINED];
inline bool CMsgPracticeLobbySetDetails::has_league_selection_priority_choice() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_league_selection_priority_choice() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_league_selection_priority_choice() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgPracticeLobbySetDetails::clear_league_selection_priority_choice() {
  league_selection_priority_choice_ = 0;
  clear_has_league_selection_priority_choice();
}
inline ::SelectionPriorityType CMsgPracticeLobbySetDetails::league_selection_priority_choice() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_selection_priority_choice)
  return static_cast< ::SelectionPriorityType >(league_selection_priority_choice_);
}
inline void CMsgPracticeLobbySetDetails::set_league_selection_priority_choice(::SelectionPriorityType value) {
  assert(::SelectionPriorityType_IsValid(value));
  set_has_league_selection_priority_choice();
  league_selection_priority_choice_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_selection_priority_choice)
}

// optional .SelectionPriorityType league_non_selection_priority_choice = 41 [default = UNDEFINED];
inline bool CMsgPracticeLobbySetDetails::has_league_non_selection_priority_choice() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_league_non_selection_priority_choice() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_league_non_selection_priority_choice() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgPracticeLobbySetDetails::clear_league_non_selection_priority_choice() {
  league_non_selection_priority_choice_ = 0;
  clear_has_league_non_selection_priority_choice();
}
inline ::SelectionPriorityType CMsgPracticeLobbySetDetails::league_non_selection_priority_choice() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_non_selection_priority_choice)
  return static_cast< ::SelectionPriorityType >(league_non_selection_priority_choice_);
}
inline void CMsgPracticeLobbySetDetails::set_league_non_selection_priority_choice(::SelectionPriorityType value) {
  assert(::SelectionPriorityType_IsValid(value));
  set_has_league_non_selection_priority_choice();
  league_non_selection_priority_choice_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_non_selection_priority_choice)
}

// optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CMsgPracticeLobbySetDetails::has_pause_setting() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_pause_setting() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_pause_setting() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgPracticeLobbySetDetails::clear_pause_setting() {
  pause_setting_ = 0;
  clear_has_pause_setting();
}
inline ::LobbyDotaPauseSetting CMsgPracticeLobbySetDetails::pause_setting() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.pause_setting)
  return static_cast< ::LobbyDotaPauseSetting >(pause_setting_);
}
inline void CMsgPracticeLobbySetDetails::set_pause_setting(::LobbyDotaPauseSetting value) {
  assert(::LobbyDotaPauseSetting_IsValid(value));
  set_has_pause_setting();
  pause_setting_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.pause_setting)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetDetails::has_bot_difficulty_dire() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_difficulty_dire() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_difficulty_dire() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 0;
  clear_has_bot_difficulty_dire();
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_difficulty_dire)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_dire_);
}
inline void CMsgPracticeLobbySetDetails::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_dire();
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 44;
inline bool CMsgPracticeLobbySetDetails::has_bot_radiant() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_radiant() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_radiant() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_radiant() {
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_radiant();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::bot_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_radiant)
  return bot_radiant_;
}
inline void CMsgPracticeLobbySetDetails::set_bot_radiant(::google::protobuf::uint64 value) {
  set_has_bot_radiant();
  bot_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_radiant)
}

// optional uint64 bot_dire = 45;
inline bool CMsgPracticeLobbySetDetails::has_bot_dire() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgPracticeLobbySetDetails::set_has_bot_dire() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgPracticeLobbySetDetails::clear_has_bot_dire() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgPracticeLobbySetDetails::clear_bot_dire() {
  bot_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_dire();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbySetDetails::bot_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_dire)
  return bot_dire_;
}
inline void CMsgPracticeLobbySetDetails::set_bot_dire(::google::protobuf::uint64 value) {
  set_has_bot_dire();
  bot_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_dire)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCreate_SaveGame

// optional bytes data = 1;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CMsgPracticeLobbyCreate_SaveGame::data() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.data)
  return *data_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline ::std::string* CMsgPracticeLobbyCreate_SaveGame::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.SaveGame.data)
  return data_;
}
inline ::std::string* CMsgPracticeLobbyCreate_SaveGame::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.SaveGame.data)
}

// optional int32 version = 2;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CMsgPracticeLobbyCreate_SaveGame::version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.version)
  return version_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.version)
}

// optional fixed64 steam_id = 3;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyCreate_SaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.steam_id)
  return steam_id_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.steam_id)
}

// optional fixed64 signature = 4;
inline bool CMsgPracticeLobbyCreate_SaveGame::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyCreate_SaveGame::signature() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.signature)
  return signature_;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.signature)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCreate

// optional string search_key = 1;
inline bool CMsgPracticeLobbyCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyCreate::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CMsgPracticeLobbyCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.search_key)
  return *search_key_;
}
inline void CMsgPracticeLobbyCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.search_key)
}
inline void CMsgPracticeLobbyCreate::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.search_key)
}
inline void CMsgPracticeLobbyCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.search_key)
}
inline ::std::string* CMsgPracticeLobbyCreate::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.search_key)
  return search_key_;
}
inline ::std::string* CMsgPracticeLobbyCreate::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (search_key) {
    set_has_search_key();
    search_key_ = search_key;
  } else {
    clear_has_search_key();
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.search_key)
}

// optional string pass_key = 5;
inline bool CMsgPracticeLobbyCreate::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyCreate::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyCreate::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbyCreate::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.pass_key)
  return *pass_key_;
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.pass_key)
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.pass_key)
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.pass_key)
}
inline ::std::string* CMsgPracticeLobbyCreate::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.pass_key)
  return pass_key_;
}
inline ::std::string* CMsgPracticeLobbyCreate::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyCreate::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.pass_key)
}

// optional uint32 client_version = 6;
inline bool CMsgPracticeLobbyCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.client_version)
  return client_version_;
}
inline void CMsgPracticeLobbyCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.client_version)
}

// optional .CMsgPracticeLobbySetDetails lobby_details = 7;
inline bool CMsgPracticeLobbyCreate::has_lobby_details() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_lobby_details() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyCreate::clear_has_lobby_details() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyCreate::clear_lobby_details() {
  if (lobby_details_ != NULL) lobby_details_->::CMsgPracticeLobbySetDetails::Clear();
  clear_has_lobby_details();
}
inline const ::CMsgPracticeLobbySetDetails& CMsgPracticeLobbyCreate::lobby_details() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.lobby_details)
  return lobby_details_ != NULL ? *lobby_details_ : *default_instance_->lobby_details_;
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::mutable_lobby_details() {
  set_has_lobby_details();
  if (lobby_details_ == NULL) lobby_details_ = new ::CMsgPracticeLobbySetDetails;
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.lobby_details)
  return lobby_details_;
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::release_lobby_details() {
  clear_has_lobby_details();
  ::CMsgPracticeLobbySetDetails* temp = lobby_details_;
  lobby_details_ = NULL;
  return temp;
}
inline void CMsgPracticeLobbyCreate::set_allocated_lobby_details(::CMsgPracticeLobbySetDetails* lobby_details) {
  delete lobby_details_;
  lobby_details_ = lobby_details;
  if (lobby_details) {
    set_has_lobby_details();
  } else {
    clear_has_lobby_details();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.lobby_details)
}

// optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
inline bool CMsgPracticeLobbyCreate::has_save_game() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbyCreate::set_has_save_game() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbyCreate::clear_has_save_game() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbyCreate::clear_save_game() {
  if (save_game_ != NULL) save_game_->::CMsgPracticeLobbyCreate_SaveGame::Clear();
  clear_has_save_game();
}
inline const ::CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate::save_game() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.save_game)
  return save_game_ != NULL ? *save_game_ : *default_instance_->save_game_;
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) save_game_ = new ::CMsgPracticeLobbyCreate_SaveGame;
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.save_game)
  return save_game_;
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::release_save_game() {
  clear_has_save_game();
  ::CMsgPracticeLobbyCreate_SaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
inline void CMsgPracticeLobbyCreate::set_allocated_save_game(::CMsgPracticeLobbyCreate_SaveGame* save_game) {
  delete save_game_;
  save_game_ = save_game;
  if (save_game) {
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.save_game)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetTeamSlot

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgPracticeLobbySetTeamSlot::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetTeamSlot::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetTeamSlot::team() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CMsgPracticeLobbySetTeamSlot::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.team)
}

// optional uint32 slot = 2;
inline bool CMsgPracticeLobbySetTeamSlot::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbySetTeamSlot::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbySetTeamSlot::slot() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.slot)
  return slot_;
}
inline void CMsgPracticeLobbySetTeamSlot::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.slot)
}

// optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetTeamSlot::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbySetTeamSlot::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbySetTeamSlot::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetTeamSlot::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.bot_difficulty)
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline void CMsgPracticeLobbySetTeamSlot::set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.bot_difficulty)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetCoach

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgPracticeLobbySetCoach::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbySetCoach::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbySetCoach::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbySetCoach::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetCoach::team() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetCoach.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CMsgPracticeLobbySetCoach::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetCoach.team)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoinBroadcastChannel

// optional uint32 channel = 1;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyJoinBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.channel)
  return channel_;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.channel)
}

// optional string preferred_description = 2;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_has_preferred_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_preferred_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_description() {
  if (preferred_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_description_->clear();
  }
  clear_has_preferred_description();
}
inline const ::std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_description() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  return *preferred_description_;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const ::std::string& value) {
  set_has_preferred_description();
  if (preferred_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_description_ = new ::std::string;
  }
  preferred_description_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const char* value) {
  set_has_preferred_description();
  if (preferred_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_description_ = new ::std::string;
  }
  preferred_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const char* value, size_t size) {
  set_has_preferred_description();
  if (preferred_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_description_ = new ::std::string;
  }
  preferred_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline ::std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_description() {
  set_has_preferred_description();
  if (preferred_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  return preferred_description_;
}
inline ::std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_description() {
  clear_has_preferred_description();
  if (preferred_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preferred_description_;
    preferred_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_description(::std::string* preferred_description) {
  if (preferred_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_description_;
  }
  if (preferred_description) {
    set_has_preferred_description();
    preferred_description_ = preferred_description;
  } else {
    clear_has_preferred_description();
    preferred_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}

// optional string preferred_country_code = 3;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_country_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_has_preferred_country_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_preferred_country_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_country_code() {
  if (preferred_country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_country_code_->clear();
  }
  clear_has_preferred_country_code();
}
inline const ::std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_country_code() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  return *preferred_country_code_;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const ::std::string& value) {
  set_has_preferred_country_code();
  if (preferred_country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_country_code_ = new ::std::string;
  }
  preferred_country_code_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const char* value) {
  set_has_preferred_country_code();
  if (preferred_country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_country_code_ = new ::std::string;
  }
  preferred_country_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const char* value, size_t size) {
  set_has_preferred_country_code();
  if (preferred_country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_country_code_ = new ::std::string;
  }
  preferred_country_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline ::std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_country_code() {
  set_has_preferred_country_code();
  if (preferred_country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_country_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  return preferred_country_code_;
}
inline ::std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_country_code() {
  clear_has_preferred_country_code();
  if (preferred_country_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preferred_country_code_;
    preferred_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_country_code(::std::string* preferred_country_code) {
  if (preferred_country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_country_code_;
  }
  if (preferred_country_code) {
    set_has_preferred_country_code();
    preferred_country_code_ = preferred_country_code;
  } else {
    clear_has_preferred_country_code();
    preferred_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}

// optional string preferred_language_code = 4;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_language_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_has_preferred_language_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_preferred_language_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_language_code() {
  if (preferred_language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_language_code_->clear();
  }
  clear_has_preferred_language_code();
}
inline const ::std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_language_code() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  return *preferred_language_code_;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const ::std::string& value) {
  set_has_preferred_language_code();
  if (preferred_language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_language_code_ = new ::std::string;
  }
  preferred_language_code_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const char* value) {
  set_has_preferred_language_code();
  if (preferred_language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_language_code_ = new ::std::string;
  }
  preferred_language_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const char* value, size_t size) {
  set_has_preferred_language_code();
  if (preferred_language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_language_code_ = new ::std::string;
  }
  preferred_language_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline ::std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_language_code() {
  set_has_preferred_language_code();
  if (preferred_language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preferred_language_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  return preferred_language_code_;
}
inline ::std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_language_code() {
  clear_has_preferred_language_code();
  if (preferred_language_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preferred_language_code_;
    preferred_language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_language_code(::std::string* preferred_language_code) {
  if (preferred_language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preferred_language_code_;
  }
  if (preferred_language_code) {
    set_has_preferred_language_code();
    preferred_language_code_ = preferred_language_code;
  } else {
    clear_has_preferred_language_code();
    preferred_language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCloseBroadcastChannel

// optional uint32 channel = 1;
inline bool CMsgPracticeLobbyCloseBroadcastChannel::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyCloseBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCloseBroadcastChannel.channel)
  return channel_;
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCloseBroadcastChannel.channel)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus

// -------------------------------------------------------------------

// CMsgPracticeLobbyKick

// optional uint32 account_id = 3;
inline bool CMsgPracticeLobbyKick::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyKick::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyKick::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyKick::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyKick::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyKick.account_id)
  return account_id_;
}
inline void CMsgPracticeLobbyKick::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyKick.account_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyKickFromTeam

// optional uint32 account_id = 1;
inline bool CMsgPracticeLobbyKickFromTeam::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyKickFromTeam::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyKickFromTeam::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyKickFromTeam::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyKickFromTeam::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyKickFromTeam.account_id)
  return account_id_;
}
inline void CMsgPracticeLobbyKickFromTeam::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyKickFromTeam.account_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyLeave

// -------------------------------------------------------------------

// CMsgPracticeLobbyLaunch

// optional uint32 client_version = 5;
inline bool CMsgPracticeLobbyLaunch::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyLaunch::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyLaunch::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyLaunch::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyLaunch::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyLaunch.client_version)
  return client_version_;
}
inline void CMsgPracticeLobbyLaunch::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyLaunch.client_version)
}

// -------------------------------------------------------------------

// CMsgApplyTeamToPracticeLobby

// optional uint32 team_id = 1;
inline bool CMsgApplyTeamToPracticeLobby::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgApplyTeamToPracticeLobby::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgApplyTeamToPracticeLobby::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgApplyTeamToPracticeLobby::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgApplyTeamToPracticeLobby::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgApplyTeamToPracticeLobby.team_id)
  return team_id_;
}
inline void CMsgApplyTeamToPracticeLobby::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgApplyTeamToPracticeLobby.team_id)
}

// -------------------------------------------------------------------

// CMsgClearPracticeLobbyTeam

// -------------------------------------------------------------------

// CMsgPracticeLobbyList

// optional bool tournament_games = 1;
inline bool CMsgPracticeLobbyList::has_tournament_games() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyList::set_has_tournament_games() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyList::clear_has_tournament_games() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyList::clear_tournament_games() {
  tournament_games_ = false;
  clear_has_tournament_games();
}
inline bool CMsgPracticeLobbyList::tournament_games() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.tournament_games)
  return tournament_games_;
}
inline void CMsgPracticeLobbyList::set_tournament_games(bool value) {
  set_has_tournament_games();
  tournament_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.tournament_games)
}

// optional string pass_key = 2;
inline bool CMsgPracticeLobbyList::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyList::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyList::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyList::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbyList::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.pass_key)
  return *pass_key_;
}
inline void CMsgPracticeLobbyList::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.pass_key)
}
inline void CMsgPracticeLobbyList::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyList.pass_key)
}
inline void CMsgPracticeLobbyList::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyList.pass_key)
}
inline ::std::string* CMsgPracticeLobbyList::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyList.pass_key)
  return pass_key_;
}
inline ::std::string* CMsgPracticeLobbyList::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyList::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyList.pass_key)
}

// optional uint32 region = 3;
inline bool CMsgPracticeLobbyList::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyList::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyList::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyList::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyList::region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.region)
  return region_;
}
inline void CMsgPracticeLobbyList::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.region)
}

// optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgPracticeLobbyList::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyList::set_has_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyList::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyList::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CMsgPracticeLobbyList::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CMsgPracticeLobbyList::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.game_mode)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponseEntry_CLobbyMember

// optional uint32 account_id = 1;
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
  return account_id_;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
}

// optional string player_name = 2;
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CMsgPracticeLobbyListResponseEntry_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return *player_name_;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return player_name_;
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponseEntry

// optional uint64 id = 1;
inline bool CMsgPracticeLobbyListResponseEntry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyListResponseEntry::id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.id)
  return id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.id)
}

// optional uint32 tournament_id = 3;
inline bool CMsgPracticeLobbyListResponseEntry::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.tournament_id)
  return tournament_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.tournament_id)
}

// optional uint32 tournament_game_id = 4;
inline bool CMsgPracticeLobbyListResponseEntry::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.tournament_game_id)
  return tournament_game_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.tournament_game_id)
}

// repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
inline int CMsgPracticeLobbyListResponseEntry::members_size() const {
  return members_.size();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_members() {
  members_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::add_members() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
CMsgPracticeLobbyListResponseEntry::members() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbyListResponseEntry.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
CMsgPracticeLobbyListResponseEntry::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbyListResponseEntry.members)
  return &members_;
}

// optional bool requires_pass_key = 6;
inline bool CMsgPracticeLobbyListResponseEntry::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
inline bool CMsgPracticeLobbyListResponseEntry::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.requires_pass_key)
  return requires_pass_key_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.requires_pass_key)
}

// optional uint32 leader_account_id = 7;
inline bool CMsgPracticeLobbyListResponseEntry::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.leader_account_id)
  return leader_account_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.leader_account_id)
}

// optional uint32 guild_id = 8;
inline bool CMsgPracticeLobbyListResponseEntry::has_guild_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_guild_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.guild_id)
  return guild_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.guild_id)
}

// optional uint64 guild_logo = 9;
inline bool CMsgPracticeLobbyListResponseEntry::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyListResponseEntry::guild_logo() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.guild_logo)
  return guild_logo_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.guild_logo)
}

// optional string name = 10;
inline bool CMsgPracticeLobbyListResponseEntry::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgPracticeLobbyListResponseEntry::name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.name)
  return *name_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.name)
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.name)
  return name_;
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.name)
}

// optional string custom_game_mode = 11;
inline bool CMsgPracticeLobbyListResponseEntry::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_custom_game_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_custom_game_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_custom_game_mode() {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_->clear();
  }
  clear_has_custom_game_mode();
}
inline const ::std::string& CMsgPracticeLobbyListResponseEntry::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  return *custom_game_mode_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const char* value) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  custom_game_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_game_mode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  return custom_game_mode_;
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry::release_custom_game_mode() {
  clear_has_custom_game_mode();
  if (custom_game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_game_mode_;
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_game_mode_;
  }
  if (custom_game_mode) {
    set_has_custom_game_mode();
    custom_game_mode_ = custom_game_mode;
  } else {
    clear_has_custom_game_mode();
    custom_game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}

// optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgPracticeLobbyListResponseEntry::has_game_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_game_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CMsgPracticeLobbyListResponseEntry::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CMsgPracticeLobbyListResponseEntry::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.game_mode)
}

// optional bool friend_present = 13;
inline bool CMsgPracticeLobbyListResponseEntry::has_friend_present() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_friend_present() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_friend_present() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_friend_present() {
  friend_present_ = false;
  clear_has_friend_present();
}
inline bool CMsgPracticeLobbyListResponseEntry::friend_present() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.friend_present)
  return friend_present_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_friend_present(bool value) {
  set_has_friend_present();
  friend_present_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.friend_present)
}

// optional uint32 players = 14;
inline bool CMsgPracticeLobbyListResponseEntry::has_players() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_players() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_players() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_players() {
  players_ = 0u;
  clear_has_players();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.players)
  return players_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.players)
}

// optional string custom_map_name = 15;
inline bool CMsgPracticeLobbyListResponseEntry::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_custom_map_name() {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_->clear();
  }
  clear_has_custom_map_name();
}
inline const ::std::string& CMsgPracticeLobbyListResponseEntry::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.custom_map_name)
  return *custom_map_name_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry::mutable_custom_map_name() {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.custom_map_name)
  return custom_map_name_;
}
inline ::std::string* CMsgPracticeLobbyListResponseEntry::release_custom_map_name() {
  clear_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_map_name_;
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (custom_map_name) {
    set_has_custom_map_name();
    custom_map_name_ = custom_map_name;
  } else {
    clear_has_custom_map_name();
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}

// optional uint32 max_player_count = 16;
inline bool CMsgPracticeLobbyListResponseEntry::has_max_player_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_max_player_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_max_player_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_max_player_count() {
  max_player_count_ = 0u;
  clear_has_max_player_count();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::max_player_count() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.max_player_count)
  return max_player_count_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_max_player_count(::google::protobuf::uint32 value) {
  set_has_max_player_count();
  max_player_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.max_player_count)
}

// optional uint32 server_region = 17;
inline bool CMsgPracticeLobbyListResponseEntry::has_server_region() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_server_region() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_server_region() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.server_region)
  return server_region_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.server_region)
}

// optional uint32 lan_host_ping_to_server_region = 18;
inline bool CMsgPracticeLobbyListResponseEntry::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_lan_host_ping_to_server_region() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.lan_host_ping_to_server_region)
}

// optional uint32 league_id = 19;
inline bool CMsgPracticeLobbyListResponseEntry::has_league_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgPracticeLobbyListResponseEntry::set_has_league_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_has_league_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgPracticeLobbyListResponseEntry::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.league_id)
  return league_id_;
}
inline void CMsgPracticeLobbyListResponseEntry::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.league_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponse

// optional bool tournament_games = 1;
inline bool CMsgPracticeLobbyListResponse::has_tournament_games() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyListResponse::set_has_tournament_games() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyListResponse::clear_has_tournament_games() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyListResponse::clear_tournament_games() {
  tournament_games_ = false;
  clear_has_tournament_games();
}
inline bool CMsgPracticeLobbyListResponse::tournament_games() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponse.tournament_games)
  return tournament_games_;
}
inline void CMsgPracticeLobbyListResponse::set_tournament_games(bool value) {
  set_has_tournament_games();
  tournament_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponse.tournament_games)
}

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
inline int CMsgPracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}

// -------------------------------------------------------------------

// CMsgLobbyList

// optional uint32 server_region = 1 [default = 0];
inline bool CMsgLobbyList::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyList::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgLobbyList::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgLobbyList::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgLobbyList::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyList.server_region)
  return server_region_;
}
inline void CMsgLobbyList::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyList.server_region)
}

// optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgLobbyList::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLobbyList::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgLobbyList::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgLobbyList::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CMsgLobbyList::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyList.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CMsgLobbyList::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgLobbyList.game_mode)
}

// -------------------------------------------------------------------

// CMsgLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyListResponse.lobbies)
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyListResponse.lobbies)
  return &lobbies_;
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoin

// optional uint64 lobby_id = 1;
inline bool CMsgPracticeLobbyJoin::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyJoin::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyJoin::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyJoin::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.lobby_id)
  return lobby_id_;
}
inline void CMsgPracticeLobbyJoin::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.lobby_id)
}

// optional uint32 client_version = 2;
inline bool CMsgPracticeLobbyJoin::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPracticeLobbyJoin::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPracticeLobbyJoin::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyJoin::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.client_version)
  return client_version_;
}
inline void CMsgPracticeLobbyJoin::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.client_version)
}

// optional string pass_key = 3;
inline bool CMsgPracticeLobbyJoin::has_pass_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_pass_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPracticeLobbyJoin::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPracticeLobbyJoin::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CMsgPracticeLobbyJoin::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.pass_key)
  return *pass_key_;
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.pass_key)
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoin.pass_key)
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoin.pass_key)
}
inline ::std::string* CMsgPracticeLobbyJoin::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoin.pass_key)
  return pass_key_;
}
inline ::std::string* CMsgPracticeLobbyJoin::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPracticeLobbyJoin::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoin.pass_key)
}

// optional fixed64 custom_game_crc = 4;
inline bool CMsgPracticeLobbyJoin::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPracticeLobbyJoin::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPracticeLobbyJoin::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
inline ::google::protobuf::uint64 CMsgPracticeLobbyJoin::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.custom_game_crc)
  return custom_game_crc_;
}
inline void CMsgPracticeLobbyJoin::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 5;
inline bool CMsgPracticeLobbyJoin::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPracticeLobbyJoin::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPracticeLobbyJoin::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPracticeLobbyJoin::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
inline ::google::protobuf::uint32 CMsgPracticeLobbyJoin::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CMsgPracticeLobbyJoin::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoinResponse

// optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
inline bool CMsgPracticeLobbyJoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPracticeLobbyJoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPracticeLobbyJoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPracticeLobbyJoinResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::DOTAJoinLobbyResult CMsgPracticeLobbyJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinResponse.result)
  return static_cast< ::DOTAJoinLobbyResult >(result_);
}
inline void CMsgPracticeLobbyJoinResponse::set_result(::DOTAJoinLobbyResult value) {
  assert(::DOTAJoinLobbyResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinResponse.result)
}

// -------------------------------------------------------------------

// CMsgFriendPracticeLobbyListRequest

// repeated uint32 friends = 1;
inline int CMsgFriendPracticeLobbyListRequest::friends_size() const {
  return friends_.size();
}
inline void CMsgFriendPracticeLobbyListRequest::clear_friends() {
  friends_.Clear();
}
inline ::google::protobuf::uint32 CMsgFriendPracticeLobbyListRequest::friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFriendPracticeLobbyListRequest.friends)
  return friends_.Get(index);
}
inline void CMsgFriendPracticeLobbyListRequest::set_friends(int index, ::google::protobuf::uint32 value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgFriendPracticeLobbyListRequest.friends)
}
inline void CMsgFriendPracticeLobbyListRequest::add_friends(::google::protobuf::uint32 value) {
  friends_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgFriendPracticeLobbyListRequest.friends)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgFriendPracticeLobbyListRequest::friends() const {
  // @@protoc_insertion_point(field_list:CMsgFriendPracticeLobbyListRequest.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgFriendPracticeLobbyListRequest::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFriendPracticeLobbyListRequest.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// CMsgFriendPracticeLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgFriendPracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgFriendPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgFriendPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgFriendPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgFriendPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFriendPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}

// -------------------------------------------------------------------

// CMsgGuildmatePracticeLobbyListRequest

// repeated uint32 guilds = 1;
inline int CMsgGuildmatePracticeLobbyListRequest::guilds_size() const {
  return guilds_.size();
}
inline void CMsgGuildmatePracticeLobbyListRequest::clear_guilds() {
  guilds_.Clear();
}
inline ::google::protobuf::uint32 CMsgGuildmatePracticeLobbyListRequest::guilds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGuildmatePracticeLobbyListRequest.guilds)
  return guilds_.Get(index);
}
inline void CMsgGuildmatePracticeLobbyListRequest::set_guilds(int index, ::google::protobuf::uint32 value) {
  guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGuildmatePracticeLobbyListRequest.guilds)
}
inline void CMsgGuildmatePracticeLobbyListRequest::add_guilds(::google::protobuf::uint32 value) {
  guilds_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGuildmatePracticeLobbyListRequest.guilds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGuildmatePracticeLobbyListRequest::guilds() const {
  // @@protoc_insertion_point(field_list:CMsgGuildmatePracticeLobbyListRequest.guilds)
  return guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGuildmatePracticeLobbyListRequest::mutable_guilds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGuildmatePracticeLobbyListRequest.guilds)
  return &guilds_;
}

// -------------------------------------------------------------------

// CMsgGuildmatePracticeLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgGuildmatePracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgGuildmatePracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgGuildmatePracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgGuildmatePracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgGuildmatePracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgGuildmatePracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgGuildmatePracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return &lobbies_;
}

// -------------------------------------------------------------------

// CMsgJoinableCustomGameModesRequest

// optional uint32 server_region = 1;
inline bool CMsgJoinableCustomGameModesRequest::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgJoinableCustomGameModesRequest::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgJoinableCustomGameModesRequest::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgJoinableCustomGameModesRequest::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomGameModesRequest::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesRequest.server_region)
  return server_region_;
}
inline void CMsgJoinableCustomGameModesRequest::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesRequest.server_region)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomGameModesResponseEntry

// optional uint64 custom_game_id = 1;
inline bool CMsgJoinableCustomGameModesResponseEntry::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgJoinableCustomGameModesResponseEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponseEntry.custom_game_id)
  return custom_game_id_;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesResponseEntry.custom_game_id)
}

// optional uint32 lobby_count = 2;
inline bool CMsgJoinableCustomGameModesResponseEntry::has_lobby_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_has_lobby_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_has_lobby_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_lobby_count() {
  lobby_count_ = 0u;
  clear_has_lobby_count();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomGameModesResponseEntry::lobby_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponseEntry.lobby_count)
  return lobby_count_;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_lobby_count(::google::protobuf::uint32 value) {
  set_has_lobby_count();
  lobby_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesResponseEntry.lobby_count)
}

// optional uint32 player_count = 3;
inline bool CMsgJoinableCustomGameModesResponseEntry::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_player_count() {
  player_count_ = 0u;
  clear_has_player_count();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomGameModesResponseEntry::player_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponseEntry.player_count)
  return player_count_;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_player_count(::google::protobuf::uint32 value) {
  set_has_player_count();
  player_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesResponseEntry.player_count)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomGameModesResponse

// repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
inline int CMsgJoinableCustomGameModesResponse::game_modes_size() const {
  return game_modes_.size();
}
inline void CMsgJoinableCustomGameModesResponse::clear_game_modes() {
  game_modes_.Clear();
}
inline const ::CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponse::game_modes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Get(index);
}
inline ::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::mutable_game_modes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Mutable(index);
}
inline ::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::add_game_modes() {
  // @@protoc_insertion_point(field_add:CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >&
CMsgJoinableCustomGameModesResponse::game_modes() const {
  // @@protoc_insertion_point(field_list:CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >*
CMsgJoinableCustomGameModesResponse::mutable_game_modes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJoinableCustomGameModesResponse.game_modes)
  return &game_modes_;
}

// -------------------------------------------------------------------

// CMsgJoinableCustomLobbiesRequest

// optional uint32 server_region = 1;
inline bool CMsgJoinableCustomLobbiesRequest::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgJoinableCustomLobbiesRequest::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgJoinableCustomLobbiesRequest::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgJoinableCustomLobbiesRequest::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomLobbiesRequest::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesRequest.server_region)
  return server_region_;
}
inline void CMsgJoinableCustomLobbiesRequest::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesRequest.server_region)
}

// optional uint64 custom_game_id = 2;
inline bool CMsgJoinableCustomLobbiesRequest::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgJoinableCustomLobbiesRequest::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgJoinableCustomLobbiesRequest::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgJoinableCustomLobbiesRequest::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgJoinableCustomLobbiesRequest::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesRequest.custom_game_id)
  return custom_game_id_;
}
inline void CMsgJoinableCustomLobbiesRequest::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesRequest.custom_game_id)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomLobbiesResponseEntry

// optional fixed64 lobby_id = 1;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgJoinableCustomLobbiesResponseEntry::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.lobby_id)
  return lobby_id_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.lobby_id)
}

// optional uint64 custom_game_id = 2;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgJoinableCustomLobbiesResponseEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.custom_game_id)
  return custom_game_id_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.custom_game_id)
}

// optional string lobby_name = 3;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_lobby_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_lobby_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_lobby_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_lobby_name() {
  if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_->clear();
  }
  clear_has_lobby_name();
}
inline const ::std::string& CMsgJoinableCustomLobbiesResponseEntry::lobby_name() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  return *lobby_name_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const ::std::string& value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const char* value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const char* value, size_t size) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline ::std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_lobby_name() {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  return lobby_name_;
}
inline ::std::string* CMsgJoinableCustomLobbiesResponseEntry::release_lobby_name() {
  clear_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lobby_name_;
    lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_lobby_name(::std::string* lobby_name) {
  if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lobby_name_;
  }
  if (lobby_name) {
    set_has_lobby_name();
    lobby_name_ = lobby_name;
  } else {
    clear_has_lobby_name();
    lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}

// optional uint32 member_count = 4;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_member_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_member_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.member_count)
  return member_count_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.member_count)
}

// optional uint32 leader_account_id = 5;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.leader_account_id)
  return leader_account_id_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.leader_account_id)
}

// optional string leader_name = 6;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_leader_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_leader_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& CMsgJoinableCustomLobbiesResponseEntry::leader_name() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  return *leader_name_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline ::std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  return leader_name_;
}
inline ::std::string* CMsgJoinableCustomLobbiesResponseEntry::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}

// optional string custom_map_name = 7;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_custom_map_name() {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_->clear();
  }
  clear_has_custom_map_name();
}
inline const ::std::string& CMsgJoinableCustomLobbiesResponseEntry::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  return *custom_map_name_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const char* value) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  custom_map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline ::std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_custom_map_name() {
  set_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  return custom_map_name_;
}
inline ::std::string* CMsgJoinableCustomLobbiesResponseEntry::release_custom_map_name() {
  clear_has_custom_map_name();
  if (custom_map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_map_name_;
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_map_name_;
  }
  if (custom_map_name) {
    set_has_custom_map_name();
    custom_map_name_ = custom_map_name;
  } else {
    clear_has_custom_map_name();
    custom_map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}

// optional uint32 max_player_count = 8;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_max_player_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_max_player_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_max_player_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_max_player_count() {
  max_player_count_ = 0u;
  clear_has_max_player_count();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::max_player_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.max_player_count)
  return max_player_count_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_max_player_count(::google::protobuf::uint32 value) {
  set_has_max_player_count();
  max_player_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.max_player_count)
}

// optional uint32 server_region = 9;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_server_region() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_server_region() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.server_region)
  return server_region_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.server_region)
}

// optional uint32 lan_host_ping_to_server_region = 10;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_lan_host_ping_to_server_region() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
inline ::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_to_server_region)
}

// optional bool has_pass_key = 11;
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_has_pass_key() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_has_pass_key() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_has_pass_key() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_pass_key() {
  has_pass_key_ = false;
  clear_has_has_pass_key();
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.has_pass_key)
  return has_pass_key_;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_pass_key(bool value) {
  set_has_has_pass_key();
  has_pass_key_ = value;
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.has_pass_key)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomLobbiesResponse

// repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
inline int CMsgJoinableCustomLobbiesResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgJoinableCustomLobbiesResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >&
CMsgJoinableCustomLobbiesResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >*
CMsgJoinableCustomLobbiesResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJoinableCustomLobbiesResponse.lobbies)
  return &lobbies_;
}

// -------------------------------------------------------------------

// CMsgQuickJoinCustomLobby_LegacyRegionPing

// optional uint32 server_region = 1;
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
inline ::google::protobuf::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.LegacyRegionPing.server_region)
  return server_region_;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.LegacyRegionPing.server_region)
}

// optional uint32 ping = 2;
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_has_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_has_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_ping() {
  ping_ = 0u;
  clear_has_ping();
}
inline ::google::protobuf::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::ping() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.LegacyRegionPing.ping)
  return ping_;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_ping(::google::protobuf::uint32 value) {
  set_has_ping();
  ping_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.LegacyRegionPing.ping)
}

// optional fixed32 region_code = 3;
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_region_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_has_region_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_has_region_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_region_code() {
  region_code_ = 0u;
  clear_has_region_code();
}
inline ::google::protobuf::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::region_code() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.LegacyRegionPing.region_code)
  return region_code_;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_region_code(::google::protobuf::uint32 value) {
  set_has_region_code();
  region_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.LegacyRegionPing.region_code)
}

// -------------------------------------------------------------------

// CMsgQuickJoinCustomLobby

// optional uint32 legacy_server_region = 1;
inline bool CMsgQuickJoinCustomLobby::has_legacy_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuickJoinCustomLobby::set_has_legacy_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuickJoinCustomLobby::clear_has_legacy_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuickJoinCustomLobby::clear_legacy_server_region() {
  legacy_server_region_ = 0u;
  clear_has_legacy_server_region();
}
inline ::google::protobuf::uint32 CMsgQuickJoinCustomLobby::legacy_server_region() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.legacy_server_region)
  return legacy_server_region_;
}
inline void CMsgQuickJoinCustomLobby::set_legacy_server_region(::google::protobuf::uint32 value) {
  set_has_legacy_server_region();
  legacy_server_region_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.legacy_server_region)
}

// optional uint64 custom_game_id = 2;
inline bool CMsgQuickJoinCustomLobby::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuickJoinCustomLobby::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuickJoinCustomLobby::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuickJoinCustomLobby::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgQuickJoinCustomLobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.custom_game_id)
  return custom_game_id_;
}
inline void CMsgQuickJoinCustomLobby::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.custom_game_id)
}

// optional uint32 client_version = 3;
inline bool CMsgQuickJoinCustomLobby::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuickJoinCustomLobby::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuickJoinCustomLobby::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuickJoinCustomLobby::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgQuickJoinCustomLobby::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.client_version)
  return client_version_;
}
inline void CMsgQuickJoinCustomLobby::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.client_version)
}

// optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
inline bool CMsgQuickJoinCustomLobby::has_create_lobby_details() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgQuickJoinCustomLobby::set_has_create_lobby_details() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgQuickJoinCustomLobby::clear_has_create_lobby_details() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgQuickJoinCustomLobby::clear_create_lobby_details() {
  if (create_lobby_details_ != NULL) create_lobby_details_->::CMsgPracticeLobbySetDetails::Clear();
  clear_has_create_lobby_details();
}
inline const ::CMsgPracticeLobbySetDetails& CMsgQuickJoinCustomLobby::create_lobby_details() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.create_lobby_details)
  return create_lobby_details_ != NULL ? *create_lobby_details_ : *default_instance_->create_lobby_details_;
}
inline ::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::mutable_create_lobby_details() {
  set_has_create_lobby_details();
  if (create_lobby_details_ == NULL) create_lobby_details_ = new ::CMsgPracticeLobbySetDetails;
  // @@protoc_insertion_point(field_mutable:CMsgQuickJoinCustomLobby.create_lobby_details)
  return create_lobby_details_;
}
inline ::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::release_create_lobby_details() {
  clear_has_create_lobby_details();
  ::CMsgPracticeLobbySetDetails* temp = create_lobby_details_;
  create_lobby_details_ = NULL;
  return temp;
}
inline void CMsgQuickJoinCustomLobby::set_allocated_create_lobby_details(::CMsgPracticeLobbySetDetails* create_lobby_details) {
  delete create_lobby_details_;
  create_lobby_details_ = create_lobby_details;
  if (create_lobby_details) {
    set_has_create_lobby_details();
  } else {
    clear_has_create_lobby_details();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuickJoinCustomLobby.create_lobby_details)
}

// optional bool allow_any_map = 5;
inline bool CMsgQuickJoinCustomLobby::has_allow_any_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgQuickJoinCustomLobby::set_has_allow_any_map() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgQuickJoinCustomLobby::clear_has_allow_any_map() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgQuickJoinCustomLobby::clear_allow_any_map() {
  allow_any_map_ = false;
  clear_has_allow_any_map();
}
inline bool CMsgQuickJoinCustomLobby::allow_any_map() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.allow_any_map)
  return allow_any_map_;
}
inline void CMsgQuickJoinCustomLobby::set_allow_any_map(bool value) {
  set_has_allow_any_map();
  allow_any_map_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.allow_any_map)
}

// repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
inline int CMsgQuickJoinCustomLobby::legacy_region_pings_size() const {
  return legacy_region_pings_.size();
}
inline void CMsgQuickJoinCustomLobby::clear_legacy_region_pings() {
  legacy_region_pings_.Clear();
}
inline const ::CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby::legacy_region_pings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Get(index);
}
inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::mutable_legacy_region_pings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Mutable(index);
}
inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::add_legacy_region_pings() {
  // @@protoc_insertion_point(field_add:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >&
CMsgQuickJoinCustomLobby::legacy_region_pings() const {
  // @@protoc_insertion_point(field_list:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >*
CMsgQuickJoinCustomLobby::mutable_legacy_region_pings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return &legacy_region_pings_;
}

// optional .CMsgClientPingData ping_data = 7;
inline bool CMsgQuickJoinCustomLobby::has_ping_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgQuickJoinCustomLobby::set_has_ping_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgQuickJoinCustomLobby::clear_has_ping_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgQuickJoinCustomLobby::clear_ping_data() {
  if (ping_data_ != NULL) ping_data_->::CMsgClientPingData::Clear();
  clear_has_ping_data();
}
inline const ::CMsgClientPingData& CMsgQuickJoinCustomLobby::ping_data() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.ping_data)
  return ping_data_ != NULL ? *ping_data_ : *default_instance_->ping_data_;
}
inline ::CMsgClientPingData* CMsgQuickJoinCustomLobby::mutable_ping_data() {
  set_has_ping_data();
  if (ping_data_ == NULL) ping_data_ = new ::CMsgClientPingData;
  // @@protoc_insertion_point(field_mutable:CMsgQuickJoinCustomLobby.ping_data)
  return ping_data_;
}
inline ::CMsgClientPingData* CMsgQuickJoinCustomLobby::release_ping_data() {
  clear_has_ping_data();
  ::CMsgClientPingData* temp = ping_data_;
  ping_data_ = NULL;
  return temp;
}
inline void CMsgQuickJoinCustomLobby::set_allocated_ping_data(::CMsgClientPingData* ping_data) {
  delete ping_data_;
  ping_data_ = ping_data;
  if (ping_data) {
    set_has_ping_data();
  } else {
    clear_has_ping_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuickJoinCustomLobby.ping_data)
}

// -------------------------------------------------------------------

// CMsgQuickJoinCustomLobbyResponse

// optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
inline bool CMsgQuickJoinCustomLobbyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuickJoinCustomLobbyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuickJoinCustomLobbyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuickJoinCustomLobbyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::DOTAJoinLobbyResult CMsgQuickJoinCustomLobbyResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobbyResponse.result)
  return static_cast< ::DOTAJoinLobbyResult >(result_);
}
inline void CMsgQuickJoinCustomLobbyResponse::set_result(::DOTAJoinLobbyResult value) {
  assert(::DOTAJoinLobbyResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobbyResponse.result)
}

// -------------------------------------------------------------------

// CMsgBotGameCreate

// optional string search_key = 1;
inline bool CMsgBotGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotGameCreate::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CMsgBotGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.search_key)
  return *search_key_;
}
inline void CMsgBotGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.search_key)
}
inline void CMsgBotGameCreate::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgBotGameCreate.search_key)
}
inline void CMsgBotGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgBotGameCreate.search_key)
}
inline ::std::string* CMsgBotGameCreate::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgBotGameCreate.search_key)
  return search_key_;
}
inline ::std::string* CMsgBotGameCreate::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgBotGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (search_key) {
    set_has_search_key();
    search_key_ = search_key;
  } else {
    clear_has_search_key();
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgBotGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgBotGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.client_version)
  return client_version_;
}
inline void CMsgBotGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.client_version)
}

// optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgBotGameCreate::has_difficulty_radiant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotGameCreate::set_has_difficulty_radiant() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotGameCreate::clear_has_difficulty_radiant() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotGameCreate::clear_difficulty_radiant() {
  difficulty_radiant_ = 0;
  clear_has_difficulty_radiant();
}
inline ::DOTABotDifficulty CMsgBotGameCreate::difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.difficulty_radiant)
  return static_cast< ::DOTABotDifficulty >(difficulty_radiant_);
}
inline void CMsgBotGameCreate::set_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_difficulty_radiant();
  difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.difficulty_radiant)
}

// optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgBotGameCreate::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotGameCreate::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotGameCreate::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotGameCreate::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::DOTA_GC_TEAM CMsgBotGameCreate::team() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.team)
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline void CMsgBotGameCreate::set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.team)
}

// optional uint32 game_mode = 5;
inline bool CMsgBotGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotGameCreate::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CMsgBotGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.game_mode)
  return game_mode_;
}
inline void CMsgBotGameCreate::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.game_mode)
}

// optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgBotGameCreate::has_difficulty_dire() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotGameCreate::set_has_difficulty_dire() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotGameCreate::clear_has_difficulty_dire() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotGameCreate::clear_difficulty_dire() {
  difficulty_dire_ = 0;
  clear_has_difficulty_dire();
}
inline ::DOTABotDifficulty CMsgBotGameCreate::difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.difficulty_dire)
  return static_cast< ::DOTABotDifficulty >(difficulty_dire_);
}
inline void CMsgBotGameCreate::set_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  set_has_difficulty_dire();
  difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.difficulty_dire)
}

// -------------------------------------------------------------------

// CMsgCustomGameCreate

// optional string search_key = 1;
inline bool CMsgCustomGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgCustomGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgCustomGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgCustomGameCreate::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CMsgCustomGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.search_key)
  return *search_key_;
}
inline void CMsgCustomGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.search_key)
}
inline void CMsgCustomGameCreate::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgCustomGameCreate.search_key)
}
inline void CMsgCustomGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgCustomGameCreate.search_key)
}
inline ::std::string* CMsgCustomGameCreate::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameCreate.search_key)
  return search_key_;
}
inline ::std::string* CMsgCustomGameCreate::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgCustomGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (search_key) {
    set_has_search_key();
    search_key_ = search_key;
  } else {
    clear_has_search_key();
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgCustomGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgCustomGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgCustomGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgCustomGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgCustomGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgCustomGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.client_version)
  return client_version_;
}
inline void CMsgCustomGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.client_version)
}

// optional uint32 difficulty = 3;
inline bool CMsgCustomGameCreate::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgCustomGameCreate::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgCustomGameCreate::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgCustomGameCreate::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 CMsgCustomGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.difficulty)
  return difficulty_;
}
inline void CMsgCustomGameCreate::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.difficulty)
}

// optional string game_mode = 4;
inline bool CMsgCustomGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgCustomGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgCustomGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgCustomGameCreate::clear_game_mode() {
  if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_->clear();
  }
  clear_has_game_mode();
}
inline const ::std::string& CMsgCustomGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.game_mode)
  return *game_mode_;
}
inline void CMsgCustomGameCreate::set_game_mode(const ::std::string& value) {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  game_mode_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.game_mode)
}
inline void CMsgCustomGameCreate::set_game_mode(const char* value) {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  game_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgCustomGameCreate.game_mode)
}
inline void CMsgCustomGameCreate::set_game_mode(const char* value, size_t size) {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  game_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgCustomGameCreate.game_mode)
}
inline ::std::string* CMsgCustomGameCreate::mutable_game_mode() {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameCreate.game_mode)
  return game_mode_;
}
inline ::std::string* CMsgCustomGameCreate::release_game_mode() {
  clear_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_mode_;
    game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgCustomGameCreate::set_allocated_game_mode(::std::string* game_mode) {
  if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_mode_;
  }
  if (game_mode) {
    set_has_game_mode();
    game_mode_ = game_mode;
  } else {
    clear_has_game_mode();
    game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgCustomGameCreate.game_mode)
}

// optional string map = 5;
inline bool CMsgCustomGameCreate::has_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgCustomGameCreate::set_has_map() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgCustomGameCreate::clear_has_map() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgCustomGameCreate::clear_map() {
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_->clear();
  }
  clear_has_map();
}
inline const ::std::string& CMsgCustomGameCreate::map() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.map)
  return *map_;
}
inline void CMsgCustomGameCreate::set_map(const ::std::string& value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  map_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.map)
}
inline void CMsgCustomGameCreate::set_map(const char* value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  map_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgCustomGameCreate.map)
}
inline void CMsgCustomGameCreate::set_map(const char* value, size_t size) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  map_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgCustomGameCreate.map)
}
inline ::std::string* CMsgCustomGameCreate::mutable_map() {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameCreate.map)
  return map_;
}
inline ::std::string* CMsgCustomGameCreate::release_map() {
  clear_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = map_;
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgCustomGameCreate::set_allocated_map(::std::string* map) {
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_;
  }
  if (map) {
    set_has_map();
    map_ = map;
  } else {
    clear_has_map();
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgCustomGameCreate.map)
}

// optional uint64 custom_game_id = 7;
inline bool CMsgCustomGameCreate::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgCustomGameCreate::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgCustomGameCreate::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgCustomGameCreate::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgCustomGameCreate::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.custom_game_id)
  return custom_game_id_;
}
inline void CMsgCustomGameCreate::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.custom_game_id)
}

// -------------------------------------------------------------------

// CMsgEventGameCreate

// optional string search_key = 1;
inline bool CMsgEventGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgEventGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgEventGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgEventGameCreate::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CMsgEventGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.search_key)
  return *search_key_;
}
inline void CMsgEventGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.search_key)
}
inline void CMsgEventGameCreate::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgEventGameCreate.search_key)
}
inline void CMsgEventGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgEventGameCreate.search_key)
}
inline ::std::string* CMsgEventGameCreate::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEventGameCreate.search_key)
  return search_key_;
}
inline ::std::string* CMsgEventGameCreate::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgEventGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (search_key) {
    set_has_search_key();
    search_key_ = search_key;
  } else {
    clear_has_search_key();
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEventGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgEventGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgEventGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgEventGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgEventGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgEventGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.client_version)
  return client_version_;
}
inline void CMsgEventGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.client_version)
}

// optional uint32 difficulty = 3;
inline bool CMsgEventGameCreate::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgEventGameCreate::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgEventGameCreate::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgEventGameCreate::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
inline ::google::protobuf::uint32 CMsgEventGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.difficulty)
  return difficulty_;
}
inline void CMsgEventGameCreate::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.difficulty)
}

// optional string game_mode = 4;
inline bool CMsgEventGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgEventGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgEventGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgEventGameCreate::clear_game_mode() {
  if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_->clear();
  }
  clear_has_game_mode();
}
inline const ::std::string& CMsgEventGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.game_mode)
  return *game_mode_;
}
inline void CMsgEventGameCreate::set_game_mode(const ::std::string& value) {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  game_mode_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.game_mode)
}
inline void CMsgEventGameCreate::set_game_mode(const char* value) {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  game_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgEventGameCreate.game_mode)
}
inline void CMsgEventGameCreate::set_game_mode(const char* value, size_t size) {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  game_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgEventGameCreate.game_mode)
}
inline ::std::string* CMsgEventGameCreate::mutable_game_mode() {
  set_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_mode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEventGameCreate.game_mode)
  return game_mode_;
}
inline ::std::string* CMsgEventGameCreate::release_game_mode() {
  clear_has_game_mode();
  if (game_mode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_mode_;
    game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgEventGameCreate::set_allocated_game_mode(::std::string* game_mode) {
  if (game_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_mode_;
  }
  if (game_mode) {
    set_has_game_mode();
    game_mode_ = game_mode;
  } else {
    clear_has_game_mode();
    game_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEventGameCreate.game_mode)
}

// optional string map = 5;
inline bool CMsgEventGameCreate::has_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgEventGameCreate::set_has_map() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgEventGameCreate::clear_has_map() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgEventGameCreate::clear_map() {
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_->clear();
  }
  clear_has_map();
}
inline const ::std::string& CMsgEventGameCreate::map() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.map)
  return *map_;
}
inline void CMsgEventGameCreate::set_map(const ::std::string& value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  map_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.map)
}
inline void CMsgEventGameCreate::set_map(const char* value) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  map_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgEventGameCreate.map)
}
inline void CMsgEventGameCreate::set_map(const char* value, size_t size) {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  map_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgEventGameCreate.map)
}
inline ::std::string* CMsgEventGameCreate::mutable_map() {
  set_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEventGameCreate.map)
  return map_;
}
inline ::std::string* CMsgEventGameCreate::release_map() {
  clear_has_map();
  if (map_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = map_;
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgEventGameCreate::set_allocated_map(::std::string* map) {
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_;
  }
  if (map) {
    set_has_map();
    map_ = map;
  } else {
    clear_has_map();
    map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEventGameCreate.map)
}

// optional uint64 custom_game_id = 7;
inline bool CMsgEventGameCreate::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgEventGameCreate::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgEventGameCreate::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgEventGameCreate::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
inline ::google::protobuf::uint64 CMsgEventGameCreate::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.custom_game_id)
  return custom_game_id_;
}
inline void CMsgEventGameCreate::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.custom_game_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPartyMemberSetCoach

// optional bool wants_coach = 1;
inline bool CMsgDOTAPartyMemberSetCoach::has_wants_coach() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAPartyMemberSetCoach::set_has_wants_coach() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAPartyMemberSetCoach::clear_has_wants_coach() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAPartyMemberSetCoach::clear_wants_coach() {
  wants_coach_ = false;
  clear_has_wants_coach();
}
inline bool CMsgDOTAPartyMemberSetCoach::wants_coach() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPartyMemberSetCoach.wants_coach)
  return wants_coach_;
}
inline void CMsgDOTAPartyMemberSetCoach::set_wants_coach(bool value) {
  set_has_wants_coach();
  wants_coach_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAPartyMemberSetCoach.wants_coach)
}

// -------------------------------------------------------------------

// CMsgDOTASetGroupLeader

// optional fixed64 new_leader_steamid = 1;
inline bool CMsgDOTASetGroupLeader::has_new_leader_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASetGroupLeader::set_has_new_leader_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASetGroupLeader::clear_has_new_leader_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASetGroupLeader::clear_new_leader_steamid() {
  new_leader_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_new_leader_steamid();
}
inline ::google::protobuf::uint64 CMsgDOTASetGroupLeader::new_leader_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetGroupLeader.new_leader_steamid)
  return new_leader_steamid_;
}
inline void CMsgDOTASetGroupLeader::set_new_leader_steamid(::google::protobuf::uint64 value) {
  set_has_new_leader_steamid();
  new_leader_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASetGroupLeader.new_leader_steamid)
}

// -------------------------------------------------------------------

// CMsgDOTACancelGroupInvites

// repeated fixed64 invited_steamids = 1;
inline int CMsgDOTACancelGroupInvites::invited_steamids_size() const {
  return invited_steamids_.size();
}
inline void CMsgDOTACancelGroupInvites::clear_invited_steamids() {
  invited_steamids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTACancelGroupInvites::invited_steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTACancelGroupInvites.invited_steamids)
  return invited_steamids_.Get(index);
}
inline void CMsgDOTACancelGroupInvites::set_invited_steamids(int index, ::google::protobuf::uint64 value) {
  invited_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTACancelGroupInvites.invited_steamids)
}
inline void CMsgDOTACancelGroupInvites::add_invited_steamids(::google::protobuf::uint64 value) {
  invited_steamids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTACancelGroupInvites.invited_steamids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTACancelGroupInvites::invited_steamids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTACancelGroupInvites.invited_steamids)
  return invited_steamids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTACancelGroupInvites::mutable_invited_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTACancelGroupInvites.invited_steamids)
  return &invited_steamids_;
}

// repeated fixed64 invited_groupids = 2;
inline int CMsgDOTACancelGroupInvites::invited_groupids_size() const {
  return invited_groupids_.size();
}
inline void CMsgDOTACancelGroupInvites::clear_invited_groupids() {
  invited_groupids_.Clear();
}
inline ::google::protobuf::uint64 CMsgDOTACancelGroupInvites::invited_groupids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTACancelGroupInvites.invited_groupids)
  return invited_groupids_.Get(index);
}
inline void CMsgDOTACancelGroupInvites::set_invited_groupids(int index, ::google::protobuf::uint64 value) {
  invited_groupids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTACancelGroupInvites.invited_groupids)
}
inline void CMsgDOTACancelGroupInvites::add_invited_groupids(::google::protobuf::uint64 value) {
  invited_groupids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTACancelGroupInvites.invited_groupids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTACancelGroupInvites::invited_groupids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTACancelGroupInvites.invited_groupids)
  return invited_groupids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTACancelGroupInvites::mutable_invited_groupids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTACancelGroupInvites.invited_groupids)
  return &invited_groupids_;
}

// -------------------------------------------------------------------

// CMsgDOTASetGroupOpenStatus

// optional bool open = 1;
inline bool CMsgDOTASetGroupOpenStatus::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASetGroupOpenStatus::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTASetGroupOpenStatus::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTASetGroupOpenStatus::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool CMsgDOTASetGroupOpenStatus::open() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetGroupOpenStatus.open)
  return open_;
}
inline void CMsgDOTASetGroupOpenStatus::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTASetGroupOpenStatus.open)
}

// -------------------------------------------------------------------

// CMsgDOTAGroupMergeInvite

// optional fixed64 other_group_id = 1;
inline bool CMsgDOTAGroupMergeInvite::has_other_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGroupMergeInvite::set_has_other_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGroupMergeInvite::clear_has_other_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGroupMergeInvite::clear_other_group_id() {
  other_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_other_group_id();
}
inline ::google::protobuf::uint64 CMsgDOTAGroupMergeInvite::other_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeInvite.other_group_id)
  return other_group_id_;
}
inline void CMsgDOTAGroupMergeInvite::set_other_group_id(::google::protobuf::uint64 value) {
  set_has_other_group_id();
  other_group_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeInvite.other_group_id)
}

// -------------------------------------------------------------------

// CMsgDOTAGroupMergeResponse

// optional fixed64 initiator_group_id = 1;
inline bool CMsgDOTAGroupMergeResponse::has_initiator_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGroupMergeResponse::set_has_initiator_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGroupMergeResponse::clear_has_initiator_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGroupMergeResponse::clear_initiator_group_id() {
  initiator_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_initiator_group_id();
}
inline ::google::protobuf::uint64 CMsgDOTAGroupMergeResponse::initiator_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeResponse.initiator_group_id)
  return initiator_group_id_;
}
inline void CMsgDOTAGroupMergeResponse::set_initiator_group_id(::google::protobuf::uint64 value) {
  set_has_initiator_group_id();
  initiator_group_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeResponse.initiator_group_id)
}

// optional bool accept = 2;
inline bool CMsgDOTAGroupMergeResponse::has_accept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAGroupMergeResponse::set_has_accept() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAGroupMergeResponse::clear_has_accept() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAGroupMergeResponse::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
inline bool CMsgDOTAGroupMergeResponse::accept() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeResponse.accept)
  return accept_;
}
inline void CMsgDOTAGroupMergeResponse::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeResponse.accept)
}

// -------------------------------------------------------------------

// CMsgDOTAGroupMergeReply

// optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
inline bool CMsgDOTAGroupMergeReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAGroupMergeReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAGroupMergeReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAGroupMergeReply::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::EDOTAGroupMergeResult CMsgDOTAGroupMergeReply::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeReply.result)
  return static_cast< ::EDOTAGroupMergeResult >(result_);
}
inline void CMsgDOTAGroupMergeReply::set_result(::EDOTAGroupMergeResult value) {
  assert(::EDOTAGroupMergeResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeReply.result)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyGameDetails_Team

// optional uint32 team_id = 1;
inline bool CMsgSpectatorLobbyGameDetails_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.Team.team_id)
  return team_id_;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.Team.team_id)
}

// optional string team_name = 2;
inline bool CMsgSpectatorLobbyGameDetails_Team::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgSpectatorLobbyGameDetails_Team::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.Team.team_name)
  return *team_name_;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline ::std::string* CMsgSpectatorLobbyGameDetails_Team::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.Team.team_name)
  return team_name_;
}
inline ::std::string* CMsgSpectatorLobbyGameDetails_Team::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.Team.team_name)
}

// optional fixed64 team_logo = 3;
inline bool CMsgSpectatorLobbyGameDetails_Team::has_team_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_has_team_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgSpectatorLobbyGameDetails_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.Team.team_logo)
  return team_logo_;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.Team.team_logo)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyGameDetails

// optional uint32 language = 1;
inline bool CMsgSpectatorLobbyGameDetails::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::language() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.language)
  return language_;
}
inline void CMsgSpectatorLobbyGameDetails::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.language)
}

// optional uint64 match_id = 2;
inline bool CMsgSpectatorLobbyGameDetails::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgSpectatorLobbyGameDetails::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.match_id)
  return match_id_;
}
inline void CMsgSpectatorLobbyGameDetails::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.match_id)
}

// optional fixed64 server_steam_id = 3;
inline bool CMsgSpectatorLobbyGameDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgSpectatorLobbyGameDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.server_steam_id)
  return server_steam_id_;
}
inline void CMsgSpectatorLobbyGameDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.server_steam_id)
}

// optional string stream_url = 4;
inline bool CMsgSpectatorLobbyGameDetails::has_stream_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_stream_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_stream_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_stream_url() {
  if (stream_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_url_->clear();
  }
  clear_has_stream_url();
}
inline const ::std::string& CMsgSpectatorLobbyGameDetails::stream_url() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.stream_url)
  return *stream_url_;
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(const ::std::string& value) {
  set_has_stream_url();
  if (stream_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_url_ = new ::std::string;
  }
  stream_url_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(const char* value) {
  set_has_stream_url();
  if (stream_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_url_ = new ::std::string;
  }
  stream_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(const char* value, size_t size) {
  set_has_stream_url();
  if (stream_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_url_ = new ::std::string;
  }
  stream_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline ::std::string* CMsgSpectatorLobbyGameDetails::mutable_stream_url() {
  set_has_stream_url();
  if (stream_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.stream_url)
  return stream_url_;
}
inline ::std::string* CMsgSpectatorLobbyGameDetails::release_stream_url() {
  clear_has_stream_url();
  if (stream_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stream_url_;
    stream_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_stream_url(::std::string* stream_url) {
  if (stream_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_url_;
  }
  if (stream_url) {
    set_has_stream_url();
    stream_url_ = stream_url;
  } else {
    clear_has_stream_url();
    stream_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.stream_url)
}

// optional string stream_name = 5;
inline bool CMsgSpectatorLobbyGameDetails::has_stream_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_stream_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_stream_name() {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_->clear();
  }
  clear_has_stream_name();
}
inline const ::std::string& CMsgSpectatorLobbyGameDetails::stream_name() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.stream_name)
  return *stream_name_;
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(const char* value) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  stream_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline ::std::string* CMsgSpectatorLobbyGameDetails::mutable_stream_name() {
  set_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.stream_name)
  return stream_name_;
}
inline ::std::string* CMsgSpectatorLobbyGameDetails::release_stream_name() {
  clear_has_stream_name();
  if (stream_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stream_name_;
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (stream_name) {
    set_has_stream_name();
    stream_name_ = stream_name;
  } else {
    clear_has_stream_name();
    stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.stream_name)
}

// optional uint32 league_id = 6;
inline bool CMsgSpectatorLobbyGameDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.league_id)
  return league_id_;
}
inline void CMsgSpectatorLobbyGameDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.league_id)
}

// optional uint32 series_type = 7;
inline bool CMsgSpectatorLobbyGameDetails::has_series_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_series_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.series_type)
  return series_type_;
}
inline void CMsgSpectatorLobbyGameDetails::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.series_type)
}

// optional uint32 series_game = 8;
inline bool CMsgSpectatorLobbyGameDetails::has_series_game() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_series_game() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::series_game() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.series_game)
  return series_game_;
}
inline void CMsgSpectatorLobbyGameDetails::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.series_game)
}

// optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
inline bool CMsgSpectatorLobbyGameDetails::has_radiant_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_radiant_team() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_radiant_team() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_radiant_team() {
  if (radiant_team_ != NULL) radiant_team_->::CMsgSpectatorLobbyGameDetails_Team::Clear();
  clear_has_radiant_team();
}
inline const ::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::radiant_team() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.radiant_team)
  return radiant_team_ != NULL ? *radiant_team_ : *default_instance_->radiant_team_;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::mutable_radiant_team() {
  set_has_radiant_team();
  if (radiant_team_ == NULL) radiant_team_ = new ::CMsgSpectatorLobbyGameDetails_Team;
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.radiant_team)
  return radiant_team_;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::release_radiant_team() {
  clear_has_radiant_team();
  ::CMsgSpectatorLobbyGameDetails_Team* temp = radiant_team_;
  radiant_team_ = NULL;
  return temp;
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_radiant_team(::CMsgSpectatorLobbyGameDetails_Team* radiant_team) {
  delete radiant_team_;
  radiant_team_ = radiant_team;
  if (radiant_team) {
    set_has_radiant_team();
  } else {
    clear_has_radiant_team();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.radiant_team)
}

// optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
inline bool CMsgSpectatorLobbyGameDetails::has_dire_team() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSpectatorLobbyGameDetails::set_has_dire_team() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_has_dire_team() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSpectatorLobbyGameDetails::clear_dire_team() {
  if (dire_team_ != NULL) dire_team_->::CMsgSpectatorLobbyGameDetails_Team::Clear();
  clear_has_dire_team();
}
inline const ::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::dire_team() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.dire_team)
  return dire_team_ != NULL ? *dire_team_ : *default_instance_->dire_team_;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::mutable_dire_team() {
  set_has_dire_team();
  if (dire_team_ == NULL) dire_team_ = new ::CMsgSpectatorLobbyGameDetails_Team;
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.dire_team)
  return dire_team_;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::release_dire_team() {
  clear_has_dire_team();
  ::CMsgSpectatorLobbyGameDetails_Team* temp = dire_team_;
  dire_team_ = NULL;
  return temp;
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_dire_team(::CMsgSpectatorLobbyGameDetails_Team* dire_team) {
  delete dire_team_;
  dire_team_ = dire_team;
  if (dire_team) {
    set_has_dire_team();
  } else {
    clear_has_dire_team();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.dire_team)
}

// -------------------------------------------------------------------

// CMsgSetSpectatorLobbyDetails

// optional uint64 lobby_id = 1;
inline bool CMsgSetSpectatorLobbyDetails::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSetSpectatorLobbyDetails::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgSetSpectatorLobbyDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.lobby_id)
  return lobby_id_;
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSetSpectatorLobbyDetails.lobby_id)
}

// optional string lobby_name = 2;
inline bool CMsgSetSpectatorLobbyDetails::has_lobby_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSetSpectatorLobbyDetails::set_has_lobby_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_has_lobby_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_lobby_name() {
  if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_->clear();
  }
  clear_has_lobby_name();
}
inline const ::std::string& CMsgSetSpectatorLobbyDetails::lobby_name() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.lobby_name)
  return *lobby_name_;
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(const ::std::string& value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(const char* value) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(const char* value, size_t size) {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  lobby_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline ::std::string* CMsgSetSpectatorLobbyDetails::mutable_lobby_name() {
  set_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lobby_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSetSpectatorLobbyDetails.lobby_name)
  return lobby_name_;
}
inline ::std::string* CMsgSetSpectatorLobbyDetails::release_lobby_name() {
  clear_has_lobby_name();
  if (lobby_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lobby_name_;
    lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgSetSpectatorLobbyDetails::set_allocated_lobby_name(::std::string* lobby_name) {
  if (lobby_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lobby_name_;
  }
  if (lobby_name) {
    set_has_lobby_name();
    lobby_name_ = lobby_name;
  } else {
    clear_has_lobby_name();
    lobby_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSetSpectatorLobbyDetails.lobby_name)
}

// optional string pass_key = 3;
inline bool CMsgSetSpectatorLobbyDetails::has_pass_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSetSpectatorLobbyDetails::set_has_pass_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_pass_key() {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_->clear();
  }
  clear_has_pass_key();
}
inline const ::std::string& CMsgSetSpectatorLobbyDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.pass_key)
  return *pass_key_;
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(const char* value) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  pass_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline ::std::string* CMsgSetSpectatorLobbyDetails::mutable_pass_key() {
  set_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pass_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSetSpectatorLobbyDetails.pass_key)
  return pass_key_;
}
inline ::std::string* CMsgSetSpectatorLobbyDetails::release_pass_key() {
  clear_has_pass_key();
  if (pass_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pass_key_;
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgSetSpectatorLobbyDetails::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pass_key_;
  }
  if (pass_key) {
    set_has_pass_key();
    pass_key_ = pass_key;
  } else {
    clear_has_pass_key();
    pass_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSetSpectatorLobbyDetails.pass_key)
}

// optional .CMsgSpectatorLobbyGameDetails game_details = 4;
inline bool CMsgSetSpectatorLobbyDetails::has_game_details() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSetSpectatorLobbyDetails::set_has_game_details() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_has_game_details() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSetSpectatorLobbyDetails::clear_game_details() {
  if (game_details_ != NULL) game_details_->::CMsgSpectatorLobbyGameDetails::Clear();
  clear_has_game_details();
}
inline const ::CMsgSpectatorLobbyGameDetails& CMsgSetSpectatorLobbyDetails::game_details() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.game_details)
  return game_details_ != NULL ? *game_details_ : *default_instance_->game_details_;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::mutable_game_details() {
  set_has_game_details();
  if (game_details_ == NULL) game_details_ = new ::CMsgSpectatorLobbyGameDetails;
  // @@protoc_insertion_point(field_mutable:CMsgSetSpectatorLobbyDetails.game_details)
  return game_details_;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::release_game_details() {
  clear_has_game_details();
  ::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = NULL;
  return temp;
}
inline void CMsgSetSpectatorLobbyDetails::set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details) {
  delete game_details_;
  game_details_ = game_details;
  if (game_details) {
    set_has_game_details();
  } else {
    clear_has_game_details();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSetSpectatorLobbyDetails.game_details)
}

// -------------------------------------------------------------------

// CMsgCreateSpectatorLobby

// optional uint32 client_version = 1;
inline bool CMsgCreateSpectatorLobby::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgCreateSpectatorLobby::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgCreateSpectatorLobby::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgCreateSpectatorLobby::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgCreateSpectatorLobby::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgCreateSpectatorLobby.client_version)
  return client_version_;
}
inline void CMsgCreateSpectatorLobby::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgCreateSpectatorLobby.client_version)
}

// optional .CMsgSetSpectatorLobbyDetails details = 2;
inline bool CMsgCreateSpectatorLobby::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgCreateSpectatorLobby::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgCreateSpectatorLobby::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgCreateSpectatorLobby::clear_details() {
  if (details_ != NULL) details_->::CMsgSetSpectatorLobbyDetails::Clear();
  clear_has_details();
}
inline const ::CMsgSetSpectatorLobbyDetails& CMsgCreateSpectatorLobby::details() const {
  // @@protoc_insertion_point(field_get:CMsgCreateSpectatorLobby.details)
  return details_ != NULL ? *details_ : *default_instance_->details_;
}
inline ::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::mutable_details() {
  set_has_details();
  if (details_ == NULL) details_ = new ::CMsgSetSpectatorLobbyDetails;
  // @@protoc_insertion_point(field_mutable:CMsgCreateSpectatorLobby.details)
  return details_;
}
inline ::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::release_details() {
  clear_has_details();
  ::CMsgSetSpectatorLobbyDetails* temp = details_;
  details_ = NULL;
  return temp;
}
inline void CMsgCreateSpectatorLobby::set_allocated_details(::CMsgSetSpectatorLobbyDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgCreateSpectatorLobby.details)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyList

// -------------------------------------------------------------------

// CMsgSpectatorLobbyListResponse_SpectatorLobby

// optional uint64 lobby_id = 1;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgSpectatorLobbyListResponse_SpectatorLobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.lobby_id)
  return lobby_id_;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.lobby_id)
}

// optional string game_name = 2;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_game_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_game_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& CMsgSpectatorLobbyListResponse_SpectatorLobby::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  return *game_name_;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline ::std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  return game_name_;
}
inline ::std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}

// optional bool requires_pass_key = 3;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.requires_pass_key)
  return requires_pass_key_;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.requires_pass_key)
}

// optional uint32 leader_account_id = 4;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.leader_account_id)
  return leader_account_id_;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.leader_account_id)
}

// optional uint32 member_count = 5;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_member_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_member_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.member_count)
  return member_count_;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.member_count)
}

// optional .CMsgSpectatorLobbyGameDetails game_details = 7;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_game_details() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_game_details() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_game_details() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_game_details() {
  if (game_details_ != NULL) game_details_->::CMsgSpectatorLobbyGameDetails::Clear();
  clear_has_game_details();
}
inline const ::CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyListResponse_SpectatorLobby::game_details() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  return game_details_ != NULL ? *game_details_ : *default_instance_->game_details_;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::mutable_game_details() {
  set_has_game_details();
  if (game_details_ == NULL) game_details_ = new ::CMsgSpectatorLobbyGameDetails;
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  return game_details_;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::release_game_details() {
  clear_has_game_details();
  ::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = NULL;
  return temp;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details) {
  delete game_details_;
  game_details_ = game_details;
  if (game_details) {
    set_has_game_details();
  } else {
    clear_has_game_details();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyListResponse

// repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
inline int CMsgSpectatorLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
inline void CMsgSpectatorLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline const ::CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >&
CMsgSpectatorLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >*
CMsgSpectatorLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSpectatorLobbyListResponse.lobbies)
  return &lobbies_;
}

// -------------------------------------------------------------------

// CMsgClientToGCRequestSteamDatagramTicket

// optional fixed64 server_steam_id = 1;
inline bool CMsgClientToGCRequestSteamDatagramTicket::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCRequestSteamDatagramTicket::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCRequestSteamDatagramTicket::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCRequestSteamDatagramTicket::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgClientToGCRequestSteamDatagramTicket::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSteamDatagramTicket.server_steam_id)
  return server_steam_id_;
}
inline void CMsgClientToGCRequestSteamDatagramTicket::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSteamDatagramTicket.server_steam_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCRequestSteamDatagramTicketResponse

// optional string serialized_ticket = 1;
inline bool CMsgClientToGCRequestSteamDatagramTicketResponse::has_serialized_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_has_serialized_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_has_serialized_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_serialized_ticket() {
  if (serialized_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_ticket_->clear();
  }
  clear_has_serialized_ticket();
}
inline const ::std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  return *serialized_ticket_;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const ::std::string& value) {
  set_has_serialized_ticket();
  if (serialized_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_ticket_ = new ::std::string;
  }
  serialized_ticket_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const char* value) {
  set_has_serialized_ticket();
  if (serialized_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_ticket_ = new ::std::string;
  }
  serialized_ticket_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const char* value, size_t size) {
  set_has_serialized_ticket();
  if (serialized_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_ticket_ = new ::std::string;
  }
  serialized_ticket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline ::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::mutable_serialized_ticket() {
  set_has_serialized_ticket();
  if (serialized_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_ticket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  return serialized_ticket_;
}
inline ::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::release_serialized_ticket() {
  clear_has_serialized_ticket();
  if (serialized_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_ticket_;
    serialized_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_allocated_serialized_ticket(::std::string* serialized_ticket) {
  if (serialized_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_ticket_;
  }
  if (serialized_ticket) {
    set_has_serialized_ticket();
    serialized_ticket_ = serialized_ticket;
  } else {
    clear_has_serialized_ticket();
    serialized_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}

// optional string message = 2;
inline bool CMsgClientToGCRequestSteamDatagramTicketResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  return *message_;
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline ::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  return message_;
}
inline ::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EStartFindingMatchResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EStartFindingMatchResult>() {
  return ::EStartFindingMatchResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto__INCLUDED
