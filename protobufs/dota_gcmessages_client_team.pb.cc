// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgDOTATeamMemberSDO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamMemberSDO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamAdminSDO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamAdminSDO_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInfo_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInfo_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMyTeamInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMyTeamInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTACreateTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTACreateTeamResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAEditTeamDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAEditTeamDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAEditTeamDetailsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAEditTeamDetailsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamProfileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProTeamListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProTeamListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListResponse_TeamEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAProTeamListResponse_TeamEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_InviterToGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInvite_InviterToGC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCImmediateResponseToInviter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCRequestToInvitee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInvite_GCRequestToInvitee_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_InviteeResponseToGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInvite_InviteeResponseToGC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCResponseToInviter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInvite_GCResponseToInviter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCResponseToInvitee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATeamInvite_GCResponseToInvitee_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAKickTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAKickTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAKickTeamMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAKickTeamMemberResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATransferTeamAdmin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATransferTeamAdmin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATransferTeamAdminResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATransferTeamAdminResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChangeTeamSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChangeTeamSub_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAChangeTeamSubResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAChangeTeamSubResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTAChangeTeamSubResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTALeaveTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTALeaveTeamResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTABetaParticipation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTABetaParticipation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamInviteResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_team.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgDOTATeamMemberSDO_descriptor_ = file->message_type(0);
  static const int CMsgDOTATeamMemberSDO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, team_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, profile_team_id_),
  };
  CMsgDOTATeamMemberSDO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamMemberSDO_descriptor_,
      CMsgDOTATeamMemberSDO::default_instance_,
      CMsgDOTATeamMemberSDO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMemberSDO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamMemberSDO));
  CMsgDOTATeamAdminSDO_descriptor_ = file->message_type(1);
  static const int CMsgDOTATeamAdminSDO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, team_ids_),
  };
  CMsgDOTATeamAdminSDO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamAdminSDO_descriptor_,
      CMsgDOTATeamAdminSDO::default_instance_,
      CMsgDOTATeamAdminSDO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamAdminSDO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamAdminSDO));
  CMsgDOTATeamMember_descriptor_ = file->message_type(2);
  static const int CMsgDOTATeamMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, time_joined_),
  };
  CMsgDOTATeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamMember_descriptor_,
      CMsgDOTATeamMember::default_instance_,
      CMsgDOTATeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamMember));
  CMsgDOTATeam_descriptor_ = file->message_type(3);
  static const int CMsgDOTATeam_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, admin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, disbanded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, sponsor_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, fullgamesplayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, leagues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, gamesplayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, gamesplayedwithcurrentroster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, teammatchmakinggamesplayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, lastplayedgametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, lastrenametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, recent_match_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, top_match_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, pickup_team_),
  };
  CMsgDOTATeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeam_descriptor_,
      CMsgDOTATeam::default_instance_,
      CMsgDOTATeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeam));
  CMsgDOTATeamInfo_descriptor_ = file->message_type(4);
  static const int CMsgDOTATeamInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, pickup_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, ugc_sponsor_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, losses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, calibration_games_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, games_played_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, games_played_matchmaking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, leagues_participated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, top_match_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, recent_match_ids_),
  };
  CMsgDOTATeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInfo_descriptor_,
      CMsgDOTATeamInfo::default_instance_,
      CMsgDOTATeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInfo));
  CMsgDOTATeamInfo_Member_descriptor_ = CMsgDOTATeamInfo_descriptor_->nested_type(0);
  static const int CMsgDOTATeamInfo_Member_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, time_joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, sub_),
  };
  CMsgDOTATeamInfo_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInfo_Member_descriptor_,
      CMsgDOTATeamInfo_Member::default_instance_,
      CMsgDOTATeamInfo_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInfo_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInfo_Member));
  CMsgDOTATeamsInfo_descriptor_ = file->message_type(5);
  static const int CMsgDOTATeamsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, teams_),
  };
  CMsgDOTATeamsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamsInfo_descriptor_,
      CMsgDOTATeamsInfo::default_instance_,
      CMsgDOTATeamsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamsInfo));
  CMsgDOTAMyTeamInfoRequest_descriptor_ = file->message_type(6);
  static const int CMsgDOTAMyTeamInfoRequest_offsets_[1] = {
  };
  CMsgDOTAMyTeamInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMyTeamInfoRequest_descriptor_,
      CMsgDOTAMyTeamInfoRequest::default_instance_,
      CMsgDOTAMyTeamInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMyTeamInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMyTeamInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMyTeamInfoRequest));
  CMsgDOTACreateTeam_descriptor_ = file->message_type(7);
  static const int CMsgDOTACreateTeam_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, sponsor_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, pickup_team_),
  };
  CMsgDOTACreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTACreateTeam_descriptor_,
      CMsgDOTACreateTeam::default_instance_,
      CMsgDOTACreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTACreateTeam));
  CMsgDOTACreateTeamResponse_descriptor_ = file->message_type(8);
  static const int CMsgDOTACreateTeamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, team_id_),
  };
  CMsgDOTACreateTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTACreateTeamResponse_descriptor_,
      CMsgDOTACreateTeamResponse::default_instance_,
      CMsgDOTACreateTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTACreateTeamResponse));
  CMsgDOTACreateTeamResponse_Result_descriptor_ = CMsgDOTACreateTeamResponse_descriptor_->enum_type(0);
  CMsgDOTAEditTeamDetails_descriptor_ = file->message_type(9);
  static const int CMsgDOTAEditTeamDetails_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, banner_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, sponsor_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, in_use_by_party_),
  };
  CMsgDOTAEditTeamDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAEditTeamDetails_descriptor_,
      CMsgDOTAEditTeamDetails::default_instance_,
      CMsgDOTAEditTeamDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAEditTeamDetails));
  CMsgDOTAEditTeamDetailsResponse_descriptor_ = file->message_type(10);
  static const int CMsgDOTAEditTeamDetailsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetailsResponse, result_),
  };
  CMsgDOTAEditTeamDetailsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAEditTeamDetailsResponse_descriptor_,
      CMsgDOTAEditTeamDetailsResponse::default_instance_,
      CMsgDOTAEditTeamDetailsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetailsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditTeamDetailsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAEditTeamDetailsResponse));
  CMsgDOTAEditTeamDetailsResponse_Result_descriptor_ = CMsgDOTAEditTeamDetailsResponse_descriptor_->enum_type(0);
  CMsgDOTATeamProfileResponse_descriptor_ = file->message_type(11);
  static const int CMsgDOTATeamProfileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, team_),
  };
  CMsgDOTATeamProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamProfileResponse_descriptor_,
      CMsgDOTATeamProfileResponse::default_instance_,
      CMsgDOTATeamProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamProfileResponse));
  CMsgDOTAProTeamListRequest_descriptor_ = file->message_type(12);
  static const int CMsgDOTAProTeamListRequest_offsets_[1] = {
  };
  CMsgDOTAProTeamListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProTeamListRequest_descriptor_,
      CMsgDOTAProTeamListRequest::default_instance_,
      CMsgDOTAProTeamListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProTeamListRequest));
  CMsgDOTAProTeamListResponse_descriptor_ = file->message_type(13);
  static const int CMsgDOTAProTeamListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, eresult_),
  };
  CMsgDOTAProTeamListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProTeamListResponse_descriptor_,
      CMsgDOTAProTeamListResponse::default_instance_,
      CMsgDOTAProTeamListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProTeamListResponse));
  CMsgDOTAProTeamListResponse_TeamEntry_descriptor_ = CMsgDOTAProTeamListResponse_descriptor_->nested_type(0);
  static const int CMsgDOTAProTeamListResponse_TeamEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, member_count_),
  };
  CMsgDOTAProTeamListResponse_TeamEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAProTeamListResponse_TeamEntry_descriptor_,
      CMsgDOTAProTeamListResponse_TeamEntry::default_instance_,
      CMsgDOTAProTeamListResponse_TeamEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAProTeamListResponse_TeamEntry));
  CMsgDOTATeamInvite_InviterToGC_descriptor_ = file->message_type(14);
  static const int CMsgDOTATeamInvite_InviterToGC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, team_id_),
  };
  CMsgDOTATeamInvite_InviterToGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInvite_InviterToGC_descriptor_,
      CMsgDOTATeamInvite_InviterToGC::default_instance_,
      CMsgDOTATeamInvite_InviterToGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInvite_InviterToGC));
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_descriptor_ = file->message_type(15);
  static const int CMsgDOTATeamInvite_GCImmediateResponseToInviter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, invitee_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, required_badge_level_),
  };
  CMsgDOTATeamInvite_GCImmediateResponseToInviter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInvite_GCImmediateResponseToInviter_descriptor_,
      CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance_,
      CMsgDOTATeamInvite_GCImmediateResponseToInviter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInvite_GCImmediateResponseToInviter));
  CMsgDOTATeamInvite_GCRequestToInvitee_descriptor_ = file->message_type(16);
  static const int CMsgDOTATeamInvite_GCRequestToInvitee_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, inviter_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, team_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, logo_),
  };
  CMsgDOTATeamInvite_GCRequestToInvitee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInvite_GCRequestToInvitee_descriptor_,
      CMsgDOTATeamInvite_GCRequestToInvitee::default_instance_,
      CMsgDOTATeamInvite_GCRequestToInvitee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInvite_GCRequestToInvitee));
  CMsgDOTATeamInvite_InviteeResponseToGC_descriptor_ = file->message_type(17);
  static const int CMsgDOTATeamInvite_InviteeResponseToGC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviteeResponseToGC, result_),
  };
  CMsgDOTATeamInvite_InviteeResponseToGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInvite_InviteeResponseToGC_descriptor_,
      CMsgDOTATeamInvite_InviteeResponseToGC::default_instance_,
      CMsgDOTATeamInvite_InviteeResponseToGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviteeResponseToGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_InviteeResponseToGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInvite_InviteeResponseToGC));
  CMsgDOTATeamInvite_GCResponseToInviter_descriptor_ = file->message_type(18);
  static const int CMsgDOTATeamInvite_GCResponseToInviter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, invitee_name_),
  };
  CMsgDOTATeamInvite_GCResponseToInviter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInvite_GCResponseToInviter_descriptor_,
      CMsgDOTATeamInvite_GCResponseToInviter::default_instance_,
      CMsgDOTATeamInvite_GCResponseToInviter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInviter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInvite_GCResponseToInviter));
  CMsgDOTATeamInvite_GCResponseToInvitee_descriptor_ = file->message_type(19);
  static const int CMsgDOTATeamInvite_GCResponseToInvitee_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, team_name_),
  };
  CMsgDOTATeamInvite_GCResponseToInvitee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATeamInvite_GCResponseToInvitee_descriptor_,
      CMsgDOTATeamInvite_GCResponseToInvitee::default_instance_,
      CMsgDOTATeamInvite_GCResponseToInvitee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATeamInvite_GCResponseToInvitee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATeamInvite_GCResponseToInvitee));
  CMsgDOTAKickTeamMember_descriptor_ = file->message_type(20);
  static const int CMsgDOTAKickTeamMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, team_id_),
  };
  CMsgDOTAKickTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAKickTeamMember_descriptor_,
      CMsgDOTAKickTeamMember::default_instance_,
      CMsgDOTAKickTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAKickTeamMember));
  CMsgDOTAKickTeamMemberResponse_descriptor_ = file->message_type(21);
  static const int CMsgDOTAKickTeamMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMemberResponse, result_),
  };
  CMsgDOTAKickTeamMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAKickTeamMemberResponse_descriptor_,
      CMsgDOTAKickTeamMemberResponse::default_instance_,
      CMsgDOTAKickTeamMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAKickTeamMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAKickTeamMemberResponse));
  CMsgDOTAKickTeamMemberResponse_Result_descriptor_ = CMsgDOTAKickTeamMemberResponse_descriptor_->enum_type(0);
  CMsgDOTATransferTeamAdmin_descriptor_ = file->message_type(22);
  static const int CMsgDOTATransferTeamAdmin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, new_admin_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, team_id_),
  };
  CMsgDOTATransferTeamAdmin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATransferTeamAdmin_descriptor_,
      CMsgDOTATransferTeamAdmin::default_instance_,
      CMsgDOTATransferTeamAdmin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATransferTeamAdmin));
  CMsgDOTATransferTeamAdminResponse_descriptor_ = file->message_type(23);
  static const int CMsgDOTATransferTeamAdminResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdminResponse, result_),
  };
  CMsgDOTATransferTeamAdminResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATransferTeamAdminResponse_descriptor_,
      CMsgDOTATransferTeamAdminResponse::default_instance_,
      CMsgDOTATransferTeamAdminResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdminResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATransferTeamAdminResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATransferTeamAdminResponse));
  CMsgDOTATransferTeamAdminResponse_Result_descriptor_ = CMsgDOTATransferTeamAdminResponse_descriptor_->enum_type(0);
  CMsgDOTAChangeTeamSub_descriptor_ = file->message_type(24);
  static const int CMsgDOTAChangeTeamSub_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, member_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, sub_account_id_),
  };
  CMsgDOTAChangeTeamSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChangeTeamSub_descriptor_,
      CMsgDOTAChangeTeamSub::default_instance_,
      CMsgDOTAChangeTeamSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChangeTeamSub));
  CMsgDOTAChangeTeamSubResponse_descriptor_ = file->message_type(25);
  static const int CMsgDOTAChangeTeamSubResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSubResponse, result_),
  };
  CMsgDOTAChangeTeamSubResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAChangeTeamSubResponse_descriptor_,
      CMsgDOTAChangeTeamSubResponse::default_instance_,
      CMsgDOTAChangeTeamSubResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSubResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChangeTeamSubResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAChangeTeamSubResponse));
  CMsgDOTAChangeTeamSubResponse_Result_descriptor_ = CMsgDOTAChangeTeamSubResponse_descriptor_->enum_type(0);
  CMsgDOTALeaveTeam_descriptor_ = file->message_type(26);
  static const int CMsgDOTALeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeam, team_id_),
  };
  CMsgDOTALeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALeaveTeam_descriptor_,
      CMsgDOTALeaveTeam::default_instance_,
      CMsgDOTALeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALeaveTeam));
  CMsgDOTALeaveTeamResponse_descriptor_ = file->message_type(27);
  static const int CMsgDOTALeaveTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeamResponse, result_),
  };
  CMsgDOTALeaveTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTALeaveTeamResponse_descriptor_,
      CMsgDOTALeaveTeamResponse::default_instance_,
      CMsgDOTALeaveTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTALeaveTeamResponse));
  CMsgDOTALeaveTeamResponse_Result_descriptor_ = CMsgDOTALeaveTeamResponse_descriptor_->enum_type(0);
  CMsgDOTABetaParticipation_descriptor_ = file->message_type(28);
  static const int CMsgDOTABetaParticipation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABetaParticipation, access_rights_),
  };
  CMsgDOTABetaParticipation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTABetaParticipation_descriptor_,
      CMsgDOTABetaParticipation::default_instance_,
      CMsgDOTABetaParticipation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABetaParticipation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABetaParticipation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTABetaParticipation));
  ETeamInviteResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fteam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamMemberSDO_descriptor_, &CMsgDOTATeamMemberSDO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamAdminSDO_descriptor_, &CMsgDOTATeamAdminSDO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamMember_descriptor_, &CMsgDOTATeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeam_descriptor_, &CMsgDOTATeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInfo_descriptor_, &CMsgDOTATeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInfo_Member_descriptor_, &CMsgDOTATeamInfo_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamsInfo_descriptor_, &CMsgDOTATeamsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMyTeamInfoRequest_descriptor_, &CMsgDOTAMyTeamInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTACreateTeam_descriptor_, &CMsgDOTACreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTACreateTeamResponse_descriptor_, &CMsgDOTACreateTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAEditTeamDetails_descriptor_, &CMsgDOTAEditTeamDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAEditTeamDetailsResponse_descriptor_, &CMsgDOTAEditTeamDetailsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamProfileResponse_descriptor_, &CMsgDOTATeamProfileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProTeamListRequest_descriptor_, &CMsgDOTAProTeamListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProTeamListResponse_descriptor_, &CMsgDOTAProTeamListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAProTeamListResponse_TeamEntry_descriptor_, &CMsgDOTAProTeamListResponse_TeamEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInvite_InviterToGC_descriptor_, &CMsgDOTATeamInvite_InviterToGC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInvite_GCImmediateResponseToInviter_descriptor_, &CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInvite_GCRequestToInvitee_descriptor_, &CMsgDOTATeamInvite_GCRequestToInvitee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInvite_InviteeResponseToGC_descriptor_, &CMsgDOTATeamInvite_InviteeResponseToGC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInvite_GCResponseToInviter_descriptor_, &CMsgDOTATeamInvite_GCResponseToInviter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATeamInvite_GCResponseToInvitee_descriptor_, &CMsgDOTATeamInvite_GCResponseToInvitee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAKickTeamMember_descriptor_, &CMsgDOTAKickTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAKickTeamMemberResponse_descriptor_, &CMsgDOTAKickTeamMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATransferTeamAdmin_descriptor_, &CMsgDOTATransferTeamAdmin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATransferTeamAdminResponse_descriptor_, &CMsgDOTATransferTeamAdminResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChangeTeamSub_descriptor_, &CMsgDOTAChangeTeamSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAChangeTeamSubResponse_descriptor_, &CMsgDOTAChangeTeamSubResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALeaveTeam_descriptor_, &CMsgDOTALeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTALeaveTeamResponse_descriptor_, &CMsgDOTALeaveTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTABetaParticipation_descriptor_, &CMsgDOTABetaParticipation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  delete CMsgDOTATeamMemberSDO::default_instance_;
  delete CMsgDOTATeamMemberSDO_reflection_;
  delete CMsgDOTATeamAdminSDO::default_instance_;
  delete CMsgDOTATeamAdminSDO_reflection_;
  delete CMsgDOTATeamMember::default_instance_;
  delete CMsgDOTATeamMember_reflection_;
  delete CMsgDOTATeam::default_instance_;
  delete CMsgDOTATeam_reflection_;
  delete CMsgDOTATeamInfo::default_instance_;
  delete CMsgDOTATeamInfo_reflection_;
  delete CMsgDOTATeamInfo_Member::default_instance_;
  delete CMsgDOTATeamInfo_Member_reflection_;
  delete CMsgDOTATeamsInfo::default_instance_;
  delete CMsgDOTATeamsInfo_reflection_;
  delete CMsgDOTAMyTeamInfoRequest::default_instance_;
  delete CMsgDOTAMyTeamInfoRequest_reflection_;
  delete CMsgDOTACreateTeam::default_instance_;
  delete CMsgDOTACreateTeam_reflection_;
  delete CMsgDOTACreateTeamResponse::default_instance_;
  delete CMsgDOTACreateTeamResponse_reflection_;
  delete CMsgDOTAEditTeamDetails::default_instance_;
  delete CMsgDOTAEditTeamDetails_reflection_;
  delete CMsgDOTAEditTeamDetailsResponse::default_instance_;
  delete CMsgDOTAEditTeamDetailsResponse_reflection_;
  delete CMsgDOTATeamProfileResponse::default_instance_;
  delete CMsgDOTATeamProfileResponse_reflection_;
  delete CMsgDOTAProTeamListRequest::default_instance_;
  delete CMsgDOTAProTeamListRequest_reflection_;
  delete CMsgDOTAProTeamListResponse::default_instance_;
  delete CMsgDOTAProTeamListResponse_reflection_;
  delete CMsgDOTAProTeamListResponse_TeamEntry::default_instance_;
  delete CMsgDOTAProTeamListResponse_TeamEntry_reflection_;
  delete CMsgDOTATeamInvite_InviterToGC::default_instance_;
  delete CMsgDOTATeamInvite_InviterToGC_reflection_;
  delete CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance_;
  delete CMsgDOTATeamInvite_GCImmediateResponseToInviter_reflection_;
  delete CMsgDOTATeamInvite_GCRequestToInvitee::default_instance_;
  delete CMsgDOTATeamInvite_GCRequestToInvitee_reflection_;
  delete CMsgDOTATeamInvite_InviteeResponseToGC::default_instance_;
  delete CMsgDOTATeamInvite_InviteeResponseToGC_reflection_;
  delete CMsgDOTATeamInvite_GCResponseToInviter::default_instance_;
  delete CMsgDOTATeamInvite_GCResponseToInviter_reflection_;
  delete CMsgDOTATeamInvite_GCResponseToInvitee::default_instance_;
  delete CMsgDOTATeamInvite_GCResponseToInvitee_reflection_;
  delete CMsgDOTAKickTeamMember::default_instance_;
  delete CMsgDOTAKickTeamMember_reflection_;
  delete CMsgDOTAKickTeamMemberResponse::default_instance_;
  delete CMsgDOTAKickTeamMemberResponse_reflection_;
  delete CMsgDOTATransferTeamAdmin::default_instance_;
  delete CMsgDOTATransferTeamAdmin_reflection_;
  delete CMsgDOTATransferTeamAdminResponse::default_instance_;
  delete CMsgDOTATransferTeamAdminResponse_reflection_;
  delete CMsgDOTAChangeTeamSub::default_instance_;
  delete CMsgDOTAChangeTeamSub_reflection_;
  delete CMsgDOTAChangeTeamSubResponse::default_instance_;
  delete CMsgDOTAChangeTeamSubResponse_reflection_;
  delete CMsgDOTALeaveTeam::default_instance_;
  delete CMsgDOTALeaveTeam_reflection_;
  delete CMsgDOTALeaveTeamResponse::default_instance_;
  delete CMsgDOTALeaveTeamResponse_reflection_;
  delete CMsgDOTABetaParticipation::default_instance_;
  delete CMsgDOTABetaParticipation_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!dota_gcmessages_client_team.proto\"V\n\025C"
    "MsgDOTATeamMemberSDO\022\022\n\naccount_id\030\001 \001(\r"
    "\022\020\n\010team_ids\030\002 \003(\r\022\027\n\017profile_team_id\030\003 "
    "\001(\r\"<\n\024CMsgDOTATeamAdminSDO\022\022\n\naccount_i"
    "d\030\001 \001(\r\022\020\n\010team_ids\030\002 \003(\r\"=\n\022CMsgDOTATea"
    "mMember\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013time_join"
    "ed\030\004 \001(\r\"\336\004\n\014CMsgDOTATeam\022$\n\007members\030\001 \003"
    "(\0132\023.CMsgDOTATeamMember\022\017\n\007team_id\030\002 \001(\r"
    "\022\014\n\004name\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\022\020\n\010admin_id\030"
    "\005 \001(\r\022\024\n\014time_created\030\006 \001(\r\022\021\n\tdisbanded"
    "\030\007 \001(\010\022\014\n\004wins\030\010 \001(\r\022\016\n\006losses\030\t \001(\r\022\014\n\004"
    "rank\030\n \001(\r\022#\n\033calibration_games_remainin"
    "g\030\030 \001(\r\022\014\n\004logo\030\013 \001(\004\022\021\n\tbase_logo\030\014 \001(\004"
    "\022\023\n\013banner_logo\030\r \001(\004\022\024\n\014sponsor_logo\030\016 "
    "\001(\004\022\024\n\014country_code\030\017 \001(\t\022\013\n\003url\030\020 \001(\t\022\027"
    "\n\017fullgamesplayed\030\021 \001(\r\022\017\n\007leagues\030\022 \003(\r"
    "\022\023\n\013gamesplayed\030\023 \001(\r\022$\n\034gamesplayedwith"
    "currentroster\030\024 \001(\r\022\"\n\032teammatchmakingga"
    "mesplayed\030\025 \001(\r\022\032\n\022lastplayedgametime\030\026 "
    "\001(\r\022\026\n\016lastrenametime\030\027 \001(\r\022\030\n\020recent_ma"
    "tch_ids\030\031 \003(\004\022\025\n\rtop_match_ids\030\032 \003(\004\022\023\n\013"
    "pickup_team\030\033 \001(\010\"\335\004\n\020CMsgDOTATeamInfo\022)"
    "\n\007members\030\001 \003(\0132\030.CMsgDOTATeamInfo.Membe"
    "r\022\017\n\007team_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003tag\030"
    "\004 \001(\t\022\024\n\014time_created\030\005 \001(\r\022\013\n\003pro\030\006 \001(\010"
    "\022\016\n\006locked\030\007 \001(\010\022\023\n\013pickup_team\030\010 \001(\010\022\020\n"
    "\010ugc_logo\030\t \001(\004\022\025\n\rugc_base_logo\030\n \001(\004\022\027"
    "\n\017ugc_banner_logo\030\013 \001(\004\022\030\n\020ugc_sponsor_l"
    "ogo\030\014 \001(\004\022\024\n\014country_code\030\r \001(\t\022\013\n\003url\030\016"
    " \001(\t\022\014\n\004wins\030\017 \001(\r\022\016\n\006losses\030\020 \001(\r\022\014\n\004ra"
    "nk\030\021 \001(\r\022#\n\033calibration_games_remaining\030"
    "\022 \001(\r\022\032\n\022games_played_total\030\023 \001(\r\022 \n\030gam"
    "es_played_matchmaking\030\024 \001(\r\022\034\n\024leagues_p"
    "articipated\030\025 \003(\r\022\025\n\rtop_match_ids\030\026 \003(\004"
    "\022\030\n\020recent_match_ids\030\027 \003(\004\032M\n\006Member\022\022\n\n"
    "account_id\030\001 \001(\r\022\023\n\013time_joined\030\002 \001(\r\022\r\n"
    "\005admin\030\003 \001(\010\022\013\n\003sub\030\004 \001(\010\"H\n\021CMsgDOTATea"
    "msInfo\022\021\n\tleague_id\030\001 \001(\r\022 \n\005teams\030\002 \003(\013"
    "2\021.CMsgDOTATeamInfo\"\033\n\031CMsgDOTAMyTeamInf"
    "oRequest\"\263\001\n\022CMsgDOTACreateTeam\022\014\n\004name\030"
    "\001 \001(\t\022\013\n\003tag\030\002 \001(\t\022\014\n\004logo\030\003 \001(\004\022\021\n\tbase"
    "_logo\030\004 \001(\004\022\023\n\013banner_logo\030\005 \001(\004\022\024\n\014spon"
    "sor_logo\030\006 \001(\004\022\024\n\014country_code\030\007 \001(\t\022\013\n\003"
    "url\030\010 \001(\t\022\023\n\013pickup_team\030\t \001(\010\"\227\004\n\032CMsgD"
    "OTACreateTeamResponse\022;\n\006result\030\001 \001(\0162\"."
    "CMsgDOTACreateTeamResponse.Result:\007INVAL"
    "ID\022\017\n\007team_id\030\002 \001(\r\"\252\003\n\006Result\022\024\n\007INVALI"
    "D\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS\020\000\022\016\n\nNAME_EMPTY\020"
    "\001\022\027\n\023NAME_BAD_CHARACTERS\020\002\022\016\n\nNAME_TAKEN"
    "\020\003\022\021\n\rNAME_TOO_LONG\020\004\022\r\n\tTAG_EMPTY\020\005\022\026\n\022"
    "TAG_BAD_CHARACTERS\020\006\022\r\n\tTAG_TAKEN\020\007\022\020\n\014T"
    "AG_TOO_LONG\020\010\022\020\n\014CREATOR_BUSY\020\t\022\025\n\021UNSPE"
    "CIFIED_ERROR\020\n\022\036\n\032CREATOR_TEAM_LIMIT_REA"
    "CHED\020\013\022\013\n\007NO_LOGO\020\014\022\"\n\036CREATOR_TEAM_CREA"
    "TION_COOLDOWN\020\r\022\026\n\022LOGO_UPLOAD_FAILED\020\016\022"
    "\035\n\031NAME_CHANGED_TOO_RECENTLY\020\017\022\036\n\032CREATO"
    "R_INSUFFICIENT_LEVEL\020\020\022\030\n\024INVALID_ACCOUN"
    "T_TYPE\020\021\"\315\001\n\027CMsgDOTAEditTeamDetails\022\017\n\007"
    "team_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t"
    "\022\014\n\004logo\030\004 \001(\004\022\021\n\tbase_logo\030\005 \001(\004\022\023\n\013ban"
    "ner_logo\030\006 \001(\004\022\024\n\014sponsor_logo\030\007 \001(\004\022\024\n\014"
    "country_code\030\010 \001(\t\022\013\n\003url\030\t \001(\t\022\027\n\017in_us"
    "e_by_party\030\n \001(\010\"\355\001\n\037CMsgDOTAEditTeamDet"
    "ailsResponse\022@\n\006result\030\001 \001(\0162\'.CMsgDOTAE"
    "ditTeamDetailsResponse.Result:\007SUCCESS\"\207"
    "\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALI"
    "D_ACCOUNT_TYPE\020\001\022\026\n\022FAILURE_NOT_MEMBER\020\002"
    "\022\027\n\023FAILURE_TEAM_LOCKED\020\003\022\035\n\031FAILURE_UNS"
    "PECIFIED_ERROR\020\004\"K\n\033CMsgDOTATeamProfileR"
    "esponse\022\017\n\007eresult\030\001 \001(\r\022\033\n\004team\030\002 \001(\0132\r"
    ".CMsgDOTATeam\"\034\n\032CMsgDOTAProTeamListRequ"
    "est\"\340\001\n\033CMsgDOTAProTeamListResponse\0225\n\005t"
    "eams\030\001 \003(\0132&.CMsgDOTAProTeamListResponse"
    ".TeamEntry\022\017\n\007eresult\030\002 \001(\r\032y\n\tTeamEntry"
    "\022\017\n\007team_id\030\001 \001(\r\022\013\n\003tag\030\002 \001(\t\022\024\n\014time_c"
    "reated\030\003 \001(\r\022\014\n\004logo\030\004 \001(\004\022\024\n\014country_co"
    "de\030\005 \001(\t\022\024\n\014member_count\030\006 \001(\r\"E\n\036CMsgDO"
    "TATeamInvite_InviterToGC\022\022\n\naccount_id\030\001"
    " \001(\r\022\017\n\007team_id\030\002 \001(\r\"\236\001\n/CMsgDOTATeamIn"
    "vite_GCImmediateResponseToInviter\0227\n\006res"
    "ult\030\001 \001(\0162\022.ETeamInviteResult:\023TEAM_INVI"
    "TE_SUCCESS\022\024\n\014invitee_name\030\002 \001(\t\022\034\n\024requ"
    "ired_badge_level\030\003 \001(\r\"v\n%CMsgDOTATeamIn"
    "vite_GCRequestToInvitee\022\032\n\022inviter_accou"
    "nt_id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\020\n\010team_t"
    "ag\030\003 \001(\t\022\014\n\004logo\030\004 \001(\004\"a\n&CMsgDOTATeamIn"
    "vite_InviteeResponseToGC\0227\n\006result\030\001 \001(\016"
    "2\022.ETeamInviteResult:\023TEAM_INVITE_SUCCES"
    "S\"w\n&CMsgDOTATeamInvite_GCResponseToInvi"
    "ter\0227\n\006result\030\001 \001(\0162\022.ETeamInviteResult:"
    "\023TEAM_INVITE_SUCCESS\022\024\n\014invitee_name\030\002 \001"
    "(\t\"t\n&CMsgDOTATeamInvite_GCResponseToInv"
    "itee\0227\n\006result\030\001 \001(\0162\022.ETeamInviteResult"
    ":\023TEAM_INVITE_SUCCESS\022\021\n\tteam_name\030\002 \001(\t"
    "\"=\n\026CMsgDOTAKickTeamMember\022\022\n\naccount_id"
    "\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\"\220\002\n\036CMsgDOTAKick"
    "TeamMemberResponse\022\?\n\006result\030\001 \001(\0162&.CMs"
    "gDOTAKickTeamMemberResponse.Result:\007SUCC"
    "ESS\"\254\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_I"
    "NVALID_ACCOUNT_TYPE\020\001\022\034\n\030FAILURE_KICKER_"
    "NOT_ADMIN\020\002\022\035\n\031FAILURE_KICKEE_NOT_MEMBER"
    "\020\003\022\027\n\023FAILURE_TEAM_LOCKED\020\004\022\035\n\031FAILURE_U"
    "NSPECIFIED_ERROR\020\005\"J\n\031CMsgDOTATransferTe"
    "amAdmin\022\034\n\024new_admin_account_id\030\001 \001(\r\022\017\n"
    "\007team_id\030\002 \001(\r\"\211\002\n!CMsgDOTATransferTeamA"
    "dminResponse\022B\n\006result\030\001 \001(\0162).CMsgDOTAT"
    "ransferTeamAdminResponse.Result:\007SUCCESS"
    "\"\237\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVA"
    "LID_ACCOUNT_TYPE\020\001\022\025\n\021FAILURE_NOT_ADMIN\020"
    "\002\022\030\n\024FAILURE_SAME_ACCOUNT\020\003\022\026\n\022FAILURE_N"
    "OT_MEMBER\020\004\022\035\n\031FAILURE_UNSPECIFIED_ERROR"
    "\020\005\"[\n\025CMsgDOTAChangeTeamSub\022\017\n\007team_id\030\001"
    " \001(\r\022\031\n\021member_account_id\030\002 \001(\r\022\026\n\016sub_a"
    "ccount_id\030\003 \001(\r\"\257\002\n\035CMsgDOTAChangeTeamSu"
    "bResponse\022>\n\006result\030\001 \001(\0162%.CMsgDOTAChan"
    "geTeamSubResponse.Result:\007SUCCESS\"\315\001\n\006Re"
    "sult\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID_ACC"
    "OUNT_TYPE\020\001\022\030\n\024FAILURE_SAME_ACCOUNT\020\002\022\025\n"
    "\021FAILURE_NOT_ADMIN\020\003\022\026\n\022FAILURE_NOT_MEMB"
    "ER\020\004\022\023\n\017FAILURE_NOT_SUB\020\005\022\027\n\023FAILURE_ALR"
    "EADY_SUB\020\006\022\035\n\031FAILURE_UNSPECIFIED_ERROR\020"
    "\007\"$\n\021CMsgDOTALeaveTeam\022\017\n\007team_id\030\001 \001(\r\""
    "\276\001\n\031CMsgDOTALeaveTeamResponse\022:\n\006result\030"
    "\001 \001(\0162!.CMsgDOTALeaveTeamResponse.Result"
    ":\007SUCCESS\"e\n\006Result\022\013\n\007SUCCESS\020\000\022\026\n\022FAIL"
    "URE_NOT_MEMBER\020\001\022\027\n\023FAILURE_TEAM_LOCKED\020"
    "\002\022\035\n\031FAILURE_UNSPECIFIED_ERROR\020\003\"2\n\031CMsg"
    "DOTABetaParticipation\022\025\n\raccess_rights\030\001"
    " \001(\r*\332\004\n\021ETeamInviteResult\022\027\n\023TEAM_INVIT"
    "E_SUCCESS\020\000\022\'\n#TEAM_INVITE_FAILURE_INVIT"
    "E_REJECTED\020\001\022&\n\"TEAM_INVITE_FAILURE_INVI"
    "TE_TIMEOUT\020\002\022*\n&TEAM_INVITE_ERROR_TEAM_A"
    "T_MEMBER_LIMIT\020\003\022!\n\035TEAM_INVITE_ERROR_TE"
    "AM_LOCKED\020\004\022+\n\'TEAM_INVITE_ERROR_INVITEE"
    "_NOT_AVAILABLE\020\005\022\"\n\036TEAM_INVITE_ERROR_IN"
    "VITEE_BUSY\020\006\022,\n(TEAM_INVITE_ERROR_INVITE"
    "E_ALREADY_MEMBER\020\007\022+\n\'TEAM_INVITE_ERROR_"
    "INVITEE_AT_TEAM_LIMIT\020\010\0220\n,TEAM_INVITE_E"
    "RROR_INVITEE_INSUFFICIENT_LEVEL\020\t\0222\n.TEA"
    "M_INVITE_ERROR_INVITER_INVALID_ACCOUNT_T"
    "YPE\020\n\022\'\n#TEAM_INVITE_ERROR_INVITER_NOT_A"
    "DMIN\020\013\022.\n*TEAM_INVITE_ERROR_INCORRECT_US"
    "ER_RESPONDED\020\014\022!\n\035TEAM_INVITE_ERROR_UNSP"
    "ECIFIED\020\rB\005H\001\200\001\000", 5736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_team.proto", &protobuf_RegisterTypes);
  CMsgDOTATeamMemberSDO::default_instance_ = new CMsgDOTATeamMemberSDO();
  CMsgDOTATeamAdminSDO::default_instance_ = new CMsgDOTATeamAdminSDO();
  CMsgDOTATeamMember::default_instance_ = new CMsgDOTATeamMember();
  CMsgDOTATeam::default_instance_ = new CMsgDOTATeam();
  CMsgDOTATeamInfo::default_instance_ = new CMsgDOTATeamInfo();
  CMsgDOTATeamInfo_Member::default_instance_ = new CMsgDOTATeamInfo_Member();
  CMsgDOTATeamsInfo::default_instance_ = new CMsgDOTATeamsInfo();
  CMsgDOTAMyTeamInfoRequest::default_instance_ = new CMsgDOTAMyTeamInfoRequest();
  CMsgDOTACreateTeam::default_instance_ = new CMsgDOTACreateTeam();
  CMsgDOTACreateTeamResponse::default_instance_ = new CMsgDOTACreateTeamResponse();
  CMsgDOTAEditTeamDetails::default_instance_ = new CMsgDOTAEditTeamDetails();
  CMsgDOTAEditTeamDetailsResponse::default_instance_ = new CMsgDOTAEditTeamDetailsResponse();
  CMsgDOTATeamProfileResponse::default_instance_ = new CMsgDOTATeamProfileResponse();
  CMsgDOTAProTeamListRequest::default_instance_ = new CMsgDOTAProTeamListRequest();
  CMsgDOTAProTeamListResponse::default_instance_ = new CMsgDOTAProTeamListResponse();
  CMsgDOTAProTeamListResponse_TeamEntry::default_instance_ = new CMsgDOTAProTeamListResponse_TeamEntry();
  CMsgDOTATeamInvite_InviterToGC::default_instance_ = new CMsgDOTATeamInvite_InviterToGC();
  CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance_ = new CMsgDOTATeamInvite_GCImmediateResponseToInviter();
  CMsgDOTATeamInvite_GCRequestToInvitee::default_instance_ = new CMsgDOTATeamInvite_GCRequestToInvitee();
  CMsgDOTATeamInvite_InviteeResponseToGC::default_instance_ = new CMsgDOTATeamInvite_InviteeResponseToGC();
  CMsgDOTATeamInvite_GCResponseToInviter::default_instance_ = new CMsgDOTATeamInvite_GCResponseToInviter();
  CMsgDOTATeamInvite_GCResponseToInvitee::default_instance_ = new CMsgDOTATeamInvite_GCResponseToInvitee();
  CMsgDOTAKickTeamMember::default_instance_ = new CMsgDOTAKickTeamMember();
  CMsgDOTAKickTeamMemberResponse::default_instance_ = new CMsgDOTAKickTeamMemberResponse();
  CMsgDOTATransferTeamAdmin::default_instance_ = new CMsgDOTATransferTeamAdmin();
  CMsgDOTATransferTeamAdminResponse::default_instance_ = new CMsgDOTATransferTeamAdminResponse();
  CMsgDOTAChangeTeamSub::default_instance_ = new CMsgDOTAChangeTeamSub();
  CMsgDOTAChangeTeamSubResponse::default_instance_ = new CMsgDOTAChangeTeamSubResponse();
  CMsgDOTALeaveTeam::default_instance_ = new CMsgDOTALeaveTeam();
  CMsgDOTALeaveTeamResponse::default_instance_ = new CMsgDOTALeaveTeamResponse();
  CMsgDOTABetaParticipation::default_instance_ = new CMsgDOTABetaParticipation();
  CMsgDOTATeamMemberSDO::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamAdminSDO::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamMember::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeam::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInfo_Member::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamsInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMyTeamInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTACreateTeam::default_instance_->InitAsDefaultInstance();
  CMsgDOTACreateTeamResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAEditTeamDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTAEditTeamDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamProfileResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProTeamListRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProTeamListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAProTeamListResponse_TeamEntry::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInvite_InviterToGC::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInvite_GCRequestToInvitee::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInvite_InviteeResponseToGC::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInvite_GCResponseToInviter::default_instance_->InitAsDefaultInstance();
  CMsgDOTATeamInvite_GCResponseToInvitee::default_instance_->InitAsDefaultInstance();
  CMsgDOTAKickTeamMember::default_instance_->InitAsDefaultInstance();
  CMsgDOTAKickTeamMemberResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTATransferTeamAdmin::default_instance_->InitAsDefaultInstance();
  CMsgDOTATransferTeamAdminResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChangeTeamSub::default_instance_->InitAsDefaultInstance();
  CMsgDOTAChangeTeamSubResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTALeaveTeam::default_instance_->InitAsDefaultInstance();
  CMsgDOTALeaveTeamResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTABetaParticipation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fteam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fteam_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fteam_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5fteam_2eproto_;
const ::google::protobuf::EnumDescriptor* ETeamInviteResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamInviteResult_descriptor_;
}
bool ETeamInviteResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamMemberSDO::kAccountIdFieldNumber;
const int CMsgDOTATeamMemberSDO::kTeamIdsFieldNumber;
const int CMsgDOTATeamMemberSDO::kProfileTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamMemberSDO)
}

void CMsgDOTATeamMemberSDO::InitAsDefaultInstance() {
}

CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO(const CMsgDOTATeamMemberSDO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamMemberSDO)
}

void CMsgDOTATeamMemberSDO::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  profile_team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamMemberSDO::~CMsgDOTATeamMemberSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamMemberSDO)
  SharedDtor();
}

void CMsgDOTATeamMemberSDO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamMemberSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamMemberSDO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamMemberSDO_descriptor_;
}

const CMsgDOTATeamMemberSDO& CMsgDOTATeamMemberSDO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamMemberSDO* CMsgDOTATeamMemberSDO::default_instance_ = NULL;

CMsgDOTATeamMemberSDO* CMsgDOTATeamMemberSDO::New() const {
  return new CMsgDOTATeamMemberSDO;
}

void CMsgDOTATeamMemberSDO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamMemberSDO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, profile_team_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  team_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamMemberSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamMemberSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_ids;
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_team_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_team_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_ids;
        if (input->ExpectTag(24)) goto parse_profile_team_id;
        break;
      }

      // optional uint32 profile_team_id = 3;
      case 3: {
        if (tag == 24) {
         parse_profile_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profile_team_id_)));
          set_has_profile_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamMemberSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamMemberSDO)
  return false;
#undef DO_
}

void CMsgDOTATeamMemberSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamMemberSDO)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0; i < this->team_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  // optional uint32 profile_team_id = 3;
  if (has_profile_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profile_team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamMemberSDO)
}

::google::protobuf::uint8* CMsgDOTATeamMemberSDO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamMemberSDO)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0; i < this->team_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->team_ids(i), target);
  }

  // optional uint32 profile_team_id = 3;
  if (has_profile_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profile_team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamMemberSDO)
  return target;
}

int CMsgDOTATeamMemberSDO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 profile_team_id = 3;
    if (has_profile_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profile_team_id());
    }

  }
  // repeated uint32 team_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->team_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->team_ids(i));
    }
    total_size += 1 * this->team_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamMemberSDO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamMemberSDO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamMemberSDO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMemberSDO::MergeFrom(const CMsgDOTATeamMemberSDO& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_ids_.MergeFrom(from.team_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_profile_team_id()) {
      set_profile_team_id(from.profile_team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamMemberSDO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMemberSDO::CopyFrom(const CMsgDOTATeamMemberSDO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMemberSDO::IsInitialized() const {

  return true;
}

void CMsgDOTATeamMemberSDO::Swap(CMsgDOTATeamMemberSDO* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    team_ids_.Swap(&other->team_ids_);
    std::swap(profile_team_id_, other->profile_team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamMemberSDO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamMemberSDO_descriptor_;
  metadata.reflection = CMsgDOTATeamMemberSDO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamAdminSDO::kAccountIdFieldNumber;
const int CMsgDOTATeamAdminSDO::kTeamIdsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamAdminSDO)
}

void CMsgDOTATeamAdminSDO::InitAsDefaultInstance() {
}

CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO(const CMsgDOTATeamAdminSDO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamAdminSDO)
}

void CMsgDOTATeamAdminSDO::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamAdminSDO::~CMsgDOTATeamAdminSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamAdminSDO)
  SharedDtor();
}

void CMsgDOTATeamAdminSDO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamAdminSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamAdminSDO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamAdminSDO_descriptor_;
}

const CMsgDOTATeamAdminSDO& CMsgDOTATeamAdminSDO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamAdminSDO* CMsgDOTATeamAdminSDO::default_instance_ = NULL;

CMsgDOTATeamAdminSDO* CMsgDOTATeamAdminSDO::New() const {
  return new CMsgDOTATeamAdminSDO;
}

void CMsgDOTATeamAdminSDO::Clear() {
  account_id_ = 0u;
  team_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamAdminSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamAdminSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_ids;
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_team_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_team_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamAdminSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamAdminSDO)
  return false;
#undef DO_
}

void CMsgDOTATeamAdminSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamAdminSDO)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0; i < this->team_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamAdminSDO)
}

::google::protobuf::uint8* CMsgDOTATeamAdminSDO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamAdminSDO)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0; i < this->team_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->team_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamAdminSDO)
  return target;
}

int CMsgDOTATeamAdminSDO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated uint32 team_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->team_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->team_ids(i));
    }
    total_size += 1 * this->team_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamAdminSDO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamAdminSDO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamAdminSDO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamAdminSDO::MergeFrom(const CMsgDOTATeamAdminSDO& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_ids_.MergeFrom(from.team_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamAdminSDO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamAdminSDO::CopyFrom(const CMsgDOTATeamAdminSDO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamAdminSDO::IsInitialized() const {

  return true;
}

void CMsgDOTATeamAdminSDO::Swap(CMsgDOTATeamAdminSDO* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    team_ids_.Swap(&other->team_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamAdminSDO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamAdminSDO_descriptor_;
  metadata.reflection = CMsgDOTATeamAdminSDO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamMember::kAccountIdFieldNumber;
const int CMsgDOTATeamMember::kTimeJoinedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamMember::CMsgDOTATeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamMember)
}

void CMsgDOTATeamMember::InitAsDefaultInstance() {
}

CMsgDOTATeamMember::CMsgDOTATeamMember(const CMsgDOTATeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamMember)
}

void CMsgDOTATeamMember::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  time_joined_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamMember::~CMsgDOTATeamMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamMember)
  SharedDtor();
}

void CMsgDOTATeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamMember_descriptor_;
}

const CMsgDOTATeamMember& CMsgDOTATeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamMember* CMsgDOTATeamMember::default_instance_ = NULL;

CMsgDOTATeamMember* CMsgDOTATeamMember::New() const {
  return new CMsgDOTATeamMember;
}

void CMsgDOTATeamMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, time_joined_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_joined;
        break;
      }

      // optional uint32 time_joined = 4;
      case 4: {
        if (tag == 32) {
         parse_time_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
          set_has_time_joined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamMember)
  return false;
#undef DO_
}

void CMsgDOTATeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 4;
  if (has_time_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_joined(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamMember)
}

::google::protobuf::uint8* CMsgDOTATeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 4;
  if (has_time_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_joined(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamMember)
  return target;
}

int CMsgDOTATeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 4;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMember::MergeFrom(const CMsgDOTATeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_time_joined()) {
      set_time_joined(from.time_joined());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMember::CopyFrom(const CMsgDOTATeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMember::IsInitialized() const {

  return true;
}

void CMsgDOTATeamMember::Swap(CMsgDOTATeamMember* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(time_joined_, other->time_joined_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamMember_descriptor_;
  metadata.reflection = CMsgDOTATeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeam::kMembersFieldNumber;
const int CMsgDOTATeam::kTeamIdFieldNumber;
const int CMsgDOTATeam::kNameFieldNumber;
const int CMsgDOTATeam::kTagFieldNumber;
const int CMsgDOTATeam::kAdminIdFieldNumber;
const int CMsgDOTATeam::kTimeCreatedFieldNumber;
const int CMsgDOTATeam::kDisbandedFieldNumber;
const int CMsgDOTATeam::kWinsFieldNumber;
const int CMsgDOTATeam::kLossesFieldNumber;
const int CMsgDOTATeam::kRankFieldNumber;
const int CMsgDOTATeam::kCalibrationGamesRemainingFieldNumber;
const int CMsgDOTATeam::kLogoFieldNumber;
const int CMsgDOTATeam::kBaseLogoFieldNumber;
const int CMsgDOTATeam::kBannerLogoFieldNumber;
const int CMsgDOTATeam::kSponsorLogoFieldNumber;
const int CMsgDOTATeam::kCountryCodeFieldNumber;
const int CMsgDOTATeam::kUrlFieldNumber;
const int CMsgDOTATeam::kFullgamesplayedFieldNumber;
const int CMsgDOTATeam::kLeaguesFieldNumber;
const int CMsgDOTATeam::kGamesplayedFieldNumber;
const int CMsgDOTATeam::kGamesplayedwithcurrentrosterFieldNumber;
const int CMsgDOTATeam::kTeammatchmakinggamesplayedFieldNumber;
const int CMsgDOTATeam::kLastplayedgametimeFieldNumber;
const int CMsgDOTATeam::kLastrenametimeFieldNumber;
const int CMsgDOTATeam::kRecentMatchIdsFieldNumber;
const int CMsgDOTATeam::kTopMatchIdsFieldNumber;
const int CMsgDOTATeam::kPickupTeamFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeam::CMsgDOTATeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeam)
}

void CMsgDOTATeam::InitAsDefaultInstance() {
}

CMsgDOTATeam::CMsgDOTATeam(const CMsgDOTATeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeam)
}

void CMsgDOTATeam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admin_id_ = 0u;
  time_created_ = 0u;
  disbanded_ = false;
  wins_ = 0u;
  losses_ = 0u;
  rank_ = 0u;
  calibration_games_remaining_ = 0u;
  logo_ = GOOGLE_ULONGLONG(0);
  base_logo_ = GOOGLE_ULONGLONG(0);
  banner_logo_ = GOOGLE_ULONGLONG(0);
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullgamesplayed_ = 0u;
  gamesplayed_ = 0u;
  gamesplayedwithcurrentroster_ = 0u;
  teammatchmakinggamesplayed_ = 0u;
  lastplayedgametime_ = 0u;
  lastrenametime_ = 0u;
  pickup_team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeam::~CMsgDOTATeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeam)
  SharedDtor();
}

void CMsgDOTATeam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeam_descriptor_;
}

const CMsgDOTATeam& CMsgDOTATeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeam* CMsgDOTATeam::default_instance_ = NULL;

CMsgDOTATeam* CMsgDOTATeam::New() const {
  return new CMsgDOTATeam;
}

void CMsgDOTATeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(team_id_, admin_id_);
    ZR_(time_created_, wins_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    disbanded_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(losses_, calibration_games_remaining_);
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16449536) {
    ZR_(fullgamesplayed_, lastrenametime_);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  pickup_team_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  leagues_.Clear();
  recent_match_ids_.Clear();
  top_match_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTATeamMember members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tag;
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (tag == 34) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_admin_id;
        break;
      }

      // optional uint32 admin_id = 5;
      case 5: {
        if (tag == 40) {
         parse_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 6;
      case 6: {
        if (tag == 48) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_disbanded;
        break;
      }

      // optional bool disbanded = 7;
      case 7: {
        if (tag == 56) {
         parse_disbanded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disbanded_)));
          set_has_disbanded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 8;
      case 8: {
        if (tag == 64) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_losses;
        break;
      }

      // optional uint32 losses = 9;
      case 9: {
        if (tag == 72) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 10;
      case 10: {
        if (tag == 80) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 11;
      case 11: {
        if (tag == 88) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_base_logo;
        break;
      }

      // optional uint64 base_logo = 12;
      case 12: {
        if (tag == 96) {
         parse_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
          set_has_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_banner_logo;
        break;
      }

      // optional uint64 banner_logo = 13;
      case 13: {
        if (tag == 104) {
         parse_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
          set_has_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sponsor_logo;
        break;
      }

      // optional uint64 sponsor_logo = 14;
      case 14: {
        if (tag == 112) {
         parse_sponsor_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
          set_has_sponsor_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_country_code;
        break;
      }

      // optional string country_code = 15;
      case 15: {
        if (tag == 122) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_url;
        break;
      }

      // optional string url = 16;
      case 16: {
        if (tag == 130) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fullgamesplayed;
        break;
      }

      // optional uint32 fullgamesplayed = 17;
      case 17: {
        if (tag == 136) {
         parse_fullgamesplayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fullgamesplayed_)));
          set_has_fullgamesplayed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_leagues;
        break;
      }

      // repeated uint32 leagues = 18;
      case 18: {
        if (tag == 144) {
         parse_leagues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_leagues())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_leagues())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_leagues;
        if (input->ExpectTag(152)) goto parse_gamesplayed;
        break;
      }

      // optional uint32 gamesplayed = 19;
      case 19: {
        if (tag == 152) {
         parse_gamesplayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesplayed_)));
          set_has_gamesplayed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_gamesplayedwithcurrentroster;
        break;
      }

      // optional uint32 gamesplayedwithcurrentroster = 20;
      case 20: {
        if (tag == 160) {
         parse_gamesplayedwithcurrentroster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesplayedwithcurrentroster_)));
          set_has_gamesplayedwithcurrentroster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_teammatchmakinggamesplayed;
        break;
      }

      // optional uint32 teammatchmakinggamesplayed = 21;
      case 21: {
        if (tag == 168) {
         parse_teammatchmakinggamesplayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammatchmakinggamesplayed_)));
          set_has_teammatchmakinggamesplayed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_lastplayedgametime;
        break;
      }

      // optional uint32 lastplayedgametime = 22;
      case 22: {
        if (tag == 176) {
         parse_lastplayedgametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastplayedgametime_)));
          set_has_lastplayedgametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_lastrenametime;
        break;
      }

      // optional uint32 lastrenametime = 23;
      case 23: {
        if (tag == 184) {
         parse_lastrenametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrenametime_)));
          set_has_lastrenametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_calibration_games_remaining;
        break;
      }

      // optional uint32 calibration_games_remaining = 24;
      case 24: {
        if (tag == 192) {
         parse_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
          set_has_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_recent_match_ids;
        break;
      }

      // repeated uint64 recent_match_ids = 25;
      case 25: {
        if (tag == 200) {
         parse_recent_match_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 200, input, this->mutable_recent_match_ids())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recent_match_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_recent_match_ids;
        if (input->ExpectTag(208)) goto parse_top_match_ids;
        break;
      }

      // repeated uint64 top_match_ids = 26;
      case 26: {
        if (tag == 208) {
         parse_top_match_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 208, input, this->mutable_top_match_ids())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_match_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_top_match_ids;
        if (input->ExpectTag(216)) goto parse_pickup_team;
        break;
      }

      // optional bool pickup_team = 27;
      case 27: {
        if (tag == 216) {
         parse_pickup_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
          set_has_pickup_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeam)
  return false;
#undef DO_
}

void CMsgDOTATeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeam)
  // repeated .CMsgDOTATeamMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tag = 4;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional uint32 admin_id = 5;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->admin_id(), output);
  }

  // optional uint32 time_created = 6;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_created(), output);
  }

  // optional bool disbanded = 7;
  if (has_disbanded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disbanded(), output);
  }

  // optional uint32 wins = 8;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->wins(), output);
  }

  // optional uint32 losses = 9;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->losses(), output);
  }

  // optional uint32 rank = 10;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rank(), output);
  }

  // optional uint64 logo = 11;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->logo(), output);
  }

  // optional uint64 base_logo = 12;
  if (has_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 13;
  if (has_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 14;
  if (has_sponsor_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->sponsor_logo(), output);
  }

  // optional string country_code = 15;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->country_code(), output);
  }

  // optional string url = 16;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->url(), output);
  }

  // optional uint32 fullgamesplayed = 17;
  if (has_fullgamesplayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fullgamesplayed(), output);
  }

  // repeated uint32 leagues = 18;
  for (int i = 0; i < this->leagues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->leagues(i), output);
  }

  // optional uint32 gamesplayed = 19;
  if (has_gamesplayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->gamesplayed(), output);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (has_gamesplayedwithcurrentroster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->gamesplayedwithcurrentroster(), output);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (has_teammatchmakinggamesplayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->teammatchmakinggamesplayed(), output);
  }

  // optional uint32 lastplayedgametime = 22;
  if (has_lastplayedgametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->lastplayedgametime(), output);
  }

  // optional uint32 lastrenametime = 23;
  if (has_lastrenametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->lastrenametime(), output);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (has_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->calibration_games_remaining(), output);
  }

  // repeated uint64 recent_match_ids = 25;
  for (int i = 0; i < this->recent_match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      25, this->recent_match_ids(i), output);
  }

  // repeated uint64 top_match_ids = 26;
  for (int i = 0; i < this->top_match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      26, this->top_match_ids(i), output);
  }

  // optional bool pickup_team = 27;
  if (has_pickup_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->pickup_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeam)
}

::google::protobuf::uint8* CMsgDOTATeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeam)
  // repeated .CMsgDOTATeamMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string tag = 4;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional uint32 admin_id = 5;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->admin_id(), target);
  }

  // optional uint32 time_created = 6;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_created(), target);
  }

  // optional bool disbanded = 7;
  if (has_disbanded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disbanded(), target);
  }

  // optional uint32 wins = 8;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->wins(), target);
  }

  // optional uint32 losses = 9;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->losses(), target);
  }

  // optional uint32 rank = 10;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rank(), target);
  }

  // optional uint64 logo = 11;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->logo(), target);
  }

  // optional uint64 base_logo = 12;
  if (has_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 13;
  if (has_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 14;
  if (has_sponsor_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->sponsor_logo(), target);
  }

  // optional string country_code = 15;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->country_code(), target);
  }

  // optional string url = 16;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->url(), target);
  }

  // optional uint32 fullgamesplayed = 17;
  if (has_fullgamesplayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fullgamesplayed(), target);
  }

  // repeated uint32 leagues = 18;
  for (int i = 0; i < this->leagues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->leagues(i), target);
  }

  // optional uint32 gamesplayed = 19;
  if (has_gamesplayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->gamesplayed(), target);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (has_gamesplayedwithcurrentroster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->gamesplayedwithcurrentroster(), target);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (has_teammatchmakinggamesplayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->teammatchmakinggamesplayed(), target);
  }

  // optional uint32 lastplayedgametime = 22;
  if (has_lastplayedgametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->lastplayedgametime(), target);
  }

  // optional uint32 lastrenametime = 23;
  if (has_lastrenametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->lastrenametime(), target);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (has_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->calibration_games_remaining(), target);
  }

  // repeated uint64 recent_match_ids = 25;
  for (int i = 0; i < this->recent_match_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(25, this->recent_match_ids(i), target);
  }

  // repeated uint64 top_match_ids = 26;
  for (int i = 0; i < this->top_match_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(26, this->top_match_ids(i), target);
  }

  // optional bool pickup_team = 27;
  if (has_pickup_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->pickup_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeam)
  return target;
}

int CMsgDOTATeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 4;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint32 admin_id = 5;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_id());
    }

    // optional uint32 time_created = 6;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional bool disbanded = 7;
    if (has_disbanded()) {
      total_size += 1 + 1;
    }

    // optional uint32 wins = 8;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 losses = 9;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 calibration_games_remaining = 24;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint64 logo = 11;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 12;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 13;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 14;
    if (has_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

    // optional string country_code = 15;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string url = 16;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 fullgamesplayed = 17;
    if (has_fullgamesplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fullgamesplayed());
    }

    // optional uint32 gamesplayed = 19;
    if (has_gamesplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesplayed());
    }

    // optional uint32 gamesplayedwithcurrentroster = 20;
    if (has_gamesplayedwithcurrentroster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesplayedwithcurrentroster());
    }

    // optional uint32 teammatchmakinggamesplayed = 21;
    if (has_teammatchmakinggamesplayed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammatchmakinggamesplayed());
    }

    // optional uint32 lastplayedgametime = 22;
    if (has_lastplayedgametime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastplayedgametime());
    }

    // optional uint32 lastrenametime = 23;
    if (has_lastrenametime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrenametime());
    }

  }
  if (_has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    // optional bool pickup_team = 27;
    if (has_pickup_team()) {
      total_size += 2 + 1;
    }

  }
  // repeated .CMsgDOTATeamMember members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated uint32 leagues = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->leagues_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->leagues(i));
    }
    total_size += 2 * this->leagues_size() + data_size;
  }

  // repeated uint64 recent_match_ids = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->recent_match_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->recent_match_ids(i));
    }
    total_size += 2 * this->recent_match_ids_size() + data_size;
  }

  // repeated uint64 top_match_ids = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_match_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->top_match_ids(i));
    }
    total_size += 2 * this->top_match_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeam::MergeFrom(const CMsgDOTATeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  leagues_.MergeFrom(from.leagues_);
  recent_match_ids_.MergeFrom(from.recent_match_ids_);
  top_match_ids_.MergeFrom(from.top_match_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_disbanded()) {
      set_disbanded(from.disbanded());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_losses()) {
      set_losses(from.losses());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_calibration_games_remaining()) {
      set_calibration_games_remaining(from.calibration_games_remaining());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_base_logo()) {
      set_base_logo(from.base_logo());
    }
    if (from.has_banner_logo()) {
      set_banner_logo(from.banner_logo());
    }
    if (from.has_sponsor_logo()) {
      set_sponsor_logo(from.sponsor_logo());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_fullgamesplayed()) {
      set_fullgamesplayed(from.fullgamesplayed());
    }
    if (from.has_gamesplayed()) {
      set_gamesplayed(from.gamesplayed());
    }
    if (from.has_gamesplayedwithcurrentroster()) {
      set_gamesplayedwithcurrentroster(from.gamesplayedwithcurrentroster());
    }
    if (from.has_teammatchmakinggamesplayed()) {
      set_teammatchmakinggamesplayed(from.teammatchmakinggamesplayed());
    }
    if (from.has_lastplayedgametime()) {
      set_lastplayedgametime(from.lastplayedgametime());
    }
    if (from.has_lastrenametime()) {
      set_lastrenametime(from.lastrenametime());
    }
  }
  if (from._has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    if (from.has_pickup_team()) {
      set_pickup_team(from.pickup_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeam::CopyFrom(const CMsgDOTATeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeam::IsInitialized() const {

  return true;
}

void CMsgDOTATeam::Swap(CMsgDOTATeam* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(team_id_, other->team_id_);
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(admin_id_, other->admin_id_);
    std::swap(time_created_, other->time_created_);
    std::swap(disbanded_, other->disbanded_);
    std::swap(wins_, other->wins_);
    std::swap(losses_, other->losses_);
    std::swap(rank_, other->rank_);
    std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
    std::swap(logo_, other->logo_);
    std::swap(base_logo_, other->base_logo_);
    std::swap(banner_logo_, other->banner_logo_);
    std::swap(sponsor_logo_, other->sponsor_logo_);
    std::swap(country_code_, other->country_code_);
    std::swap(url_, other->url_);
    std::swap(fullgamesplayed_, other->fullgamesplayed_);
    leagues_.Swap(&other->leagues_);
    std::swap(gamesplayed_, other->gamesplayed_);
    std::swap(gamesplayedwithcurrentroster_, other->gamesplayedwithcurrentroster_);
    std::swap(teammatchmakinggamesplayed_, other->teammatchmakinggamesplayed_);
    std::swap(lastplayedgametime_, other->lastplayedgametime_);
    std::swap(lastrenametime_, other->lastrenametime_);
    recent_match_ids_.Swap(&other->recent_match_ids_);
    top_match_ids_.Swap(&other->top_match_ids_);
    std::swap(pickup_team_, other->pickup_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeam_descriptor_;
  metadata.reflection = CMsgDOTATeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInfo_Member::kAccountIdFieldNumber;
const int CMsgDOTATeamInfo_Member::kTimeJoinedFieldNumber;
const int CMsgDOTATeamInfo_Member::kAdminFieldNumber;
const int CMsgDOTATeamInfo_Member::kSubFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInfo.Member)
}

void CMsgDOTATeamInfo_Member::InitAsDefaultInstance() {
}

CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(const CMsgDOTATeamInfo_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.Member)
}

void CMsgDOTATeamInfo_Member::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  time_joined_ = 0u;
  admin_ = false;
  sub_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInfo_Member::~CMsgDOTATeamInfo_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.Member)
  SharedDtor();
}

void CMsgDOTATeamInfo_Member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInfo_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInfo_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInfo_Member_descriptor_;
}

const CMsgDOTATeamInfo_Member& CMsgDOTATeamInfo_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo_Member::default_instance_ = NULL;

CMsgDOTATeamInfo_Member* CMsgDOTATeamInfo_Member::New() const {
  return new CMsgDOTATeamInfo_Member;
}

void CMsgDOTATeamInfo_Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamInfo_Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, sub_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInfo_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInfo.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_joined;
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (tag == 16) {
         parse_time_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
          set_has_time_joined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_admin;
        break;
      }

      // optional bool admin = 3;
      case 3: {
        if (tag == 24) {
         parse_admin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_)));
          set_has_admin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sub;
        break;
      }

      // optional bool sub = 4;
      case 4: {
        if (tag == 32) {
         parse_sub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_)));
          set_has_sub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInfo.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInfo.Member)
  return false;
#undef DO_
}

void CMsgDOTATeamInfo_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInfo.Member)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (has_time_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // optional bool admin = 3;
  if (has_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->admin(), output);
  }

  // optional bool sub = 4;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sub(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInfo.Member)
}

::google::protobuf::uint8* CMsgDOTATeamInfo_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.Member)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (has_time_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // optional bool admin = 3;
  if (has_admin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->admin(), target);
  }

  // optional bool sub = 4;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sub(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.Member)
  return target;
}

int CMsgDOTATeamInfo_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 2;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional bool admin = 3;
    if (has_admin()) {
      total_size += 1 + 1;
    }

    // optional bool sub = 4;
    if (has_sub()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInfo_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInfo_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInfo_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_Member::MergeFrom(const CMsgDOTATeamInfo_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_time_joined()) {
      set_time_joined(from.time_joined());
    }
    if (from.has_admin()) {
      set_admin(from.admin());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInfo_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_Member::CopyFrom(const CMsgDOTATeamInfo_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_Member::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInfo_Member::Swap(CMsgDOTATeamInfo_Member* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(time_joined_, other->time_joined_);
    std::swap(admin_, other->admin_);
    std::swap(sub_, other->sub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInfo_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInfo_Member_descriptor_;
  metadata.reflection = CMsgDOTATeamInfo_Member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATeamInfo::kMembersFieldNumber;
const int CMsgDOTATeamInfo::kTeamIdFieldNumber;
const int CMsgDOTATeamInfo::kNameFieldNumber;
const int CMsgDOTATeamInfo::kTagFieldNumber;
const int CMsgDOTATeamInfo::kTimeCreatedFieldNumber;
const int CMsgDOTATeamInfo::kProFieldNumber;
const int CMsgDOTATeamInfo::kLockedFieldNumber;
const int CMsgDOTATeamInfo::kPickupTeamFieldNumber;
const int CMsgDOTATeamInfo::kUgcLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcBaseLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcBannerLogoFieldNumber;
const int CMsgDOTATeamInfo::kUgcSponsorLogoFieldNumber;
const int CMsgDOTATeamInfo::kCountryCodeFieldNumber;
const int CMsgDOTATeamInfo::kUrlFieldNumber;
const int CMsgDOTATeamInfo::kWinsFieldNumber;
const int CMsgDOTATeamInfo::kLossesFieldNumber;
const int CMsgDOTATeamInfo::kRankFieldNumber;
const int CMsgDOTATeamInfo::kCalibrationGamesRemainingFieldNumber;
const int CMsgDOTATeamInfo::kGamesPlayedTotalFieldNumber;
const int CMsgDOTATeamInfo::kGamesPlayedMatchmakingFieldNumber;
const int CMsgDOTATeamInfo::kLeaguesParticipatedFieldNumber;
const int CMsgDOTATeamInfo::kTopMatchIdsFieldNumber;
const int CMsgDOTATeamInfo::kRecentMatchIdsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInfo::CMsgDOTATeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInfo)
}

void CMsgDOTATeamInfo::InitAsDefaultInstance() {
}

CMsgDOTATeamInfo::CMsgDOTATeamInfo(const CMsgDOTATeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo)
}

void CMsgDOTATeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_created_ = 0u;
  pro_ = false;
  locked_ = false;
  pickup_team_ = false;
  ugc_logo_ = GOOGLE_ULONGLONG(0);
  ugc_base_logo_ = GOOGLE_ULONGLONG(0);
  ugc_banner_logo_ = GOOGLE_ULONGLONG(0);
  ugc_sponsor_logo_ = GOOGLE_ULONGLONG(0);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wins_ = 0u;
  losses_ = 0u;
  rank_ = 0u;
  calibration_games_remaining_ = 0u;
  games_played_total_ = 0u;
  games_played_matchmaking_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInfo::~CMsgDOTATeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo)
  SharedDtor();
}

void CMsgDOTATeamInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInfo_descriptor_;
}

const CMsgDOTATeamInfo& CMsgDOTATeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInfo* CMsgDOTATeamInfo::default_instance_ = NULL;

CMsgDOTATeamInfo* CMsgDOTATeamInfo::New() const {
  return new CMsgDOTATeamInfo;
}

void CMsgDOTATeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(team_id_, time_created_);
    ZR_(pro_, pickup_team_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(wins_, ugc_sponsor_logo_);
    ugc_logo_ = GOOGLE_ULONGLONG(0);
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    losses_ = 0u;
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(rank_, games_played_total_);
    games_played_matchmaking_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  leagues_participated_.Clear();
  top_match_ids_.Clear();
  recent_match_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTATeamInfo.Member members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tag;
        break;
      }

      // optional string tag = 4;
      case 4: {
        if (tag == 34) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 5;
      case 5: {
        if (tag == 40) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pro;
        break;
      }

      // optional bool pro = 6;
      case 6: {
        if (tag == 48) {
         parse_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pro_)));
          set_has_pro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_locked;
        break;
      }

      // optional bool locked = 7;
      case 7: {
        if (tag == 56) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pickup_team;
        break;
      }

      // optional bool pickup_team = 8;
      case 8: {
        if (tag == 64) {
         parse_pickup_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
          set_has_pickup_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ugc_logo;
        break;
      }

      // optional uint64 ugc_logo = 9;
      case 9: {
        if (tag == 72) {
         parse_ugc_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_logo_)));
          set_has_ugc_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ugc_base_logo;
        break;
      }

      // optional uint64 ugc_base_logo = 10;
      case 10: {
        if (tag == 80) {
         parse_ugc_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_base_logo_)));
          set_has_ugc_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ugc_banner_logo;
        break;
      }

      // optional uint64 ugc_banner_logo = 11;
      case 11: {
        if (tag == 88) {
         parse_ugc_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_banner_logo_)));
          set_has_ugc_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ugc_sponsor_logo;
        break;
      }

      // optional uint64 ugc_sponsor_logo = 12;
      case 12: {
        if (tag == 96) {
         parse_ugc_sponsor_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_sponsor_logo_)));
          set_has_ugc_sponsor_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_country_code;
        break;
      }

      // optional string country_code = 13;
      case 13: {
        if (tag == 106) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_url;
        break;
      }

      // optional string url = 14;
      case 14: {
        if (tag == 114) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_wins;
        break;
      }

      // optional uint32 wins = 15;
      case 15: {
        if (tag == 120) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_losses;
        break;
      }

      // optional uint32 losses = 16;
      case 16: {
        if (tag == 128) {
         parse_losses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
          set_has_losses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 17;
      case 17: {
        if (tag == 136) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_calibration_games_remaining;
        break;
      }

      // optional uint32 calibration_games_remaining = 18;
      case 18: {
        if (tag == 144) {
         parse_calibration_games_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
          set_has_calibration_games_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_games_played_total;
        break;
      }

      // optional uint32 games_played_total = 19;
      case 19: {
        if (tag == 152) {
         parse_games_played_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_total_)));
          set_has_games_played_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_games_played_matchmaking;
        break;
      }

      // optional uint32 games_played_matchmaking = 20;
      case 20: {
        if (tag == 160) {
         parse_games_played_matchmaking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_played_matchmaking_)));
          set_has_games_played_matchmaking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_leagues_participated;
        break;
      }

      // repeated uint32 leagues_participated = 21;
      case 21: {
        if (tag == 168) {
         parse_leagues_participated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable_leagues_participated())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_leagues_participated())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_leagues_participated;
        if (input->ExpectTag(176)) goto parse_top_match_ids;
        break;
      }

      // repeated uint64 top_match_ids = 22;
      case 22: {
        if (tag == 176) {
         parse_top_match_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 176, input, this->mutable_top_match_ids())));
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_match_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_top_match_ids;
        if (input->ExpectTag(184)) goto parse_recent_match_ids;
        break;
      }

      // repeated uint64 recent_match_ids = 23;
      case 23: {
        if (tag == 184) {
         parse_recent_match_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 184, input, this->mutable_recent_match_ids())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recent_match_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_recent_match_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInfo)
  return false;
#undef DO_
}

void CMsgDOTATeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInfo)
  // repeated .CMsgDOTATeamInfo.Member members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tag = 4;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag(), output);
  }

  // optional uint32 time_created = 5;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_created(), output);
  }

  // optional bool pro = 6;
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pro(), output);
  }

  // optional bool locked = 7;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->locked(), output);
  }

  // optional bool pickup_team = 8;
  if (has_pickup_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pickup_team(), output);
  }

  // optional uint64 ugc_logo = 9;
  if (has_ugc_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ugc_logo(), output);
  }

  // optional uint64 ugc_base_logo = 10;
  if (has_ugc_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ugc_base_logo(), output);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (has_ugc_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ugc_banner_logo(), output);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (has_ugc_sponsor_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ugc_sponsor_logo(), output);
  }

  // optional string country_code = 13;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->country_code(), output);
  }

  // optional string url = 14;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->url(), output);
  }

  // optional uint32 wins = 15;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->wins(), output);
  }

  // optional uint32 losses = 16;
  if (has_losses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->losses(), output);
  }

  // optional uint32 rank = 17;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->rank(), output);
  }

  // optional uint32 calibration_games_remaining = 18;
  if (has_calibration_games_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->calibration_games_remaining(), output);
  }

  // optional uint32 games_played_total = 19;
  if (has_games_played_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->games_played_total(), output);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (has_games_played_matchmaking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->games_played_matchmaking(), output);
  }

  // repeated uint32 leagues_participated = 21;
  for (int i = 0; i < this->leagues_participated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->leagues_participated(i), output);
  }

  // repeated uint64 top_match_ids = 22;
  for (int i = 0; i < this->top_match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      22, this->top_match_ids(i), output);
  }

  // repeated uint64 recent_match_ids = 23;
  for (int i = 0; i < this->recent_match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      23, this->recent_match_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInfo)
}

::google::protobuf::uint8* CMsgDOTATeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo)
  // repeated .CMsgDOTATeamInfo.Member members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string tag = 4;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag(), target);
  }

  // optional uint32 time_created = 5;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_created(), target);
  }

  // optional bool pro = 6;
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pro(), target);
  }

  // optional bool locked = 7;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->locked(), target);
  }

  // optional bool pickup_team = 8;
  if (has_pickup_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pickup_team(), target);
  }

  // optional uint64 ugc_logo = 9;
  if (has_ugc_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ugc_logo(), target);
  }

  // optional uint64 ugc_base_logo = 10;
  if (has_ugc_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ugc_base_logo(), target);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (has_ugc_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ugc_banner_logo(), target);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (has_ugc_sponsor_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ugc_sponsor_logo(), target);
  }

  // optional string country_code = 13;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->country_code(), target);
  }

  // optional string url = 14;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->url(), target);
  }

  // optional uint32 wins = 15;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->wins(), target);
  }

  // optional uint32 losses = 16;
  if (has_losses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->losses(), target);
  }

  // optional uint32 rank = 17;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->rank(), target);
  }

  // optional uint32 calibration_games_remaining = 18;
  if (has_calibration_games_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->calibration_games_remaining(), target);
  }

  // optional uint32 games_played_total = 19;
  if (has_games_played_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->games_played_total(), target);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (has_games_played_matchmaking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->games_played_matchmaking(), target);
  }

  // repeated uint32 leagues_participated = 21;
  for (int i = 0; i < this->leagues_participated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(21, this->leagues_participated(i), target);
  }

  // repeated uint64 top_match_ids = 22;
  for (int i = 0; i < this->top_match_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(22, this->top_match_ids(i), target);
  }

  // repeated uint64 recent_match_ids = 23;
  for (int i = 0; i < this->recent_match_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(23, this->recent_match_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo)
  return target;
}

int CMsgDOTATeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 4;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint32 time_created = 5;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional bool pro = 6;
    if (has_pro()) {
      total_size += 1 + 1;
    }

    // optional bool locked = 7;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional bool pickup_team = 8;
    if (has_pickup_team()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ugc_logo = 9;
    if (has_ugc_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_logo());
    }

    // optional uint64 ugc_base_logo = 10;
    if (has_ugc_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_base_logo());
    }

    // optional uint64 ugc_banner_logo = 11;
    if (has_ugc_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_banner_logo());
    }

    // optional uint64 ugc_sponsor_logo = 12;
    if (has_ugc_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_sponsor_logo());
    }

    // optional string country_code = 13;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 14;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 wins = 15;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 16;
    if (has_losses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 rank = 17;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 calibration_games_remaining = 18;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint32 games_played_total = 19;
    if (has_games_played_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played_total());
    }

    // optional uint32 games_played_matchmaking = 20;
    if (has_games_played_matchmaking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_played_matchmaking());
    }

  }
  // repeated .CMsgDOTATeamInfo.Member members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated uint32 leagues_participated = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->leagues_participated_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->leagues_participated(i));
    }
    total_size += 2 * this->leagues_participated_size() + data_size;
  }

  // repeated uint64 top_match_ids = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->top_match_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->top_match_ids(i));
    }
    total_size += 2 * this->top_match_ids_size() + data_size;
  }

  // repeated uint64 recent_match_ids = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->recent_match_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->recent_match_ids(i));
    }
    total_size += 2 * this->recent_match_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo::MergeFrom(const CMsgDOTATeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  leagues_participated_.MergeFrom(from.leagues_participated_);
  top_match_ids_.MergeFrom(from.top_match_ids_);
  recent_match_ids_.MergeFrom(from.recent_match_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_pro()) {
      set_pro(from.pro());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_pickup_team()) {
      set_pickup_team(from.pickup_team());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ugc_logo()) {
      set_ugc_logo(from.ugc_logo());
    }
    if (from.has_ugc_base_logo()) {
      set_ugc_base_logo(from.ugc_base_logo());
    }
    if (from.has_ugc_banner_logo()) {
      set_ugc_banner_logo(from.ugc_banner_logo());
    }
    if (from.has_ugc_sponsor_logo()) {
      set_ugc_sponsor_logo(from.ugc_sponsor_logo());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_losses()) {
      set_losses(from.losses());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_calibration_games_remaining()) {
      set_calibration_games_remaining(from.calibration_games_remaining());
    }
    if (from.has_games_played_total()) {
      set_games_played_total(from.games_played_total());
    }
    if (from.has_games_played_matchmaking()) {
      set_games_played_matchmaking(from.games_played_matchmaking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo::CopyFrom(const CMsgDOTATeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInfo::Swap(CMsgDOTATeamInfo* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(team_id_, other->team_id_);
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(time_created_, other->time_created_);
    std::swap(pro_, other->pro_);
    std::swap(locked_, other->locked_);
    std::swap(pickup_team_, other->pickup_team_);
    std::swap(ugc_logo_, other->ugc_logo_);
    std::swap(ugc_base_logo_, other->ugc_base_logo_);
    std::swap(ugc_banner_logo_, other->ugc_banner_logo_);
    std::swap(ugc_sponsor_logo_, other->ugc_sponsor_logo_);
    std::swap(country_code_, other->country_code_);
    std::swap(url_, other->url_);
    std::swap(wins_, other->wins_);
    std::swap(losses_, other->losses_);
    std::swap(rank_, other->rank_);
    std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
    std::swap(games_played_total_, other->games_played_total_);
    std::swap(games_played_matchmaking_, other->games_played_matchmaking_);
    leagues_participated_.Swap(&other->leagues_participated_);
    top_match_ids_.Swap(&other->top_match_ids_);
    recent_match_ids_.Swap(&other->recent_match_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInfo_descriptor_;
  metadata.reflection = CMsgDOTATeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamsInfo::kLeagueIdFieldNumber;
const int CMsgDOTATeamsInfo::kTeamsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamsInfo::CMsgDOTATeamsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamsInfo)
}

void CMsgDOTATeamsInfo::InitAsDefaultInstance() {
}

CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(const CMsgDOTATeamsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamsInfo)
}

void CMsgDOTATeamsInfo::SharedCtor() {
  _cached_size_ = 0;
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamsInfo::~CMsgDOTATeamsInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamsInfo)
  SharedDtor();
}

void CMsgDOTATeamsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamsInfo_descriptor_;
}

const CMsgDOTATeamsInfo& CMsgDOTATeamsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamsInfo* CMsgDOTATeamsInfo::default_instance_ = NULL;

CMsgDOTATeamsInfo* CMsgDOTATeamsInfo::New() const {
  return new CMsgDOTATeamsInfo;
}

void CMsgDOTATeamsInfo::Clear() {
  league_id_ = 0u;
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }

      // repeated .CMsgDOTATeamInfo teams = 2;
      case 2: {
        if (tag == 18) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamsInfo)
  return false;
#undef DO_
}

void CMsgDOTATeamsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamsInfo)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // repeated .CMsgDOTATeamInfo teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamsInfo)
}

::google::protobuf::uint8* CMsgDOTATeamsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamsInfo)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // repeated .CMsgDOTATeamInfo teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamsInfo)
  return target;
}

int CMsgDOTATeamsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // repeated .CMsgDOTATeamInfo teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamsInfo::MergeFrom(const CMsgDOTATeamsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamsInfo::CopyFrom(const CMsgDOTATeamsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamsInfo::IsInitialized() const {

  return true;
}

void CMsgDOTATeamsInfo::Swap(CMsgDOTATeamsInfo* other) {
  if (other != this) {
    std::swap(league_id_, other->league_id_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamsInfo_descriptor_;
  metadata.reflection = CMsgDOTATeamsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMyTeamInfoRequest)
}

void CMsgDOTAMyTeamInfoRequest::InitAsDefaultInstance() {
}

CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(const CMsgDOTAMyTeamInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMyTeamInfoRequest)
}

void CMsgDOTAMyTeamInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMyTeamInfoRequest::~CMsgDOTAMyTeamInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMyTeamInfoRequest)
  SharedDtor();
}

void CMsgDOTAMyTeamInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAMyTeamInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMyTeamInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMyTeamInfoRequest_descriptor_;
}

const CMsgDOTAMyTeamInfoRequest& CMsgDOTAMyTeamInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAMyTeamInfoRequest* CMsgDOTAMyTeamInfoRequest::default_instance_ = NULL;

CMsgDOTAMyTeamInfoRequest* CMsgDOTAMyTeamInfoRequest::New() const {
  return new CMsgDOTAMyTeamInfoRequest;
}

void CMsgDOTAMyTeamInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMyTeamInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMyTeamInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMyTeamInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMyTeamInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAMyTeamInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMyTeamInfoRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMyTeamInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAMyTeamInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMyTeamInfoRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMyTeamInfoRequest)
  return target;
}

int CMsgDOTAMyTeamInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMyTeamInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMyTeamInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const CMsgDOTAMyTeamInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const CMsgDOTAMyTeamInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMyTeamInfoRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAMyTeamInfoRequest::Swap(CMsgDOTAMyTeamInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMyTeamInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMyTeamInfoRequest_descriptor_;
  metadata.reflection = CMsgDOTAMyTeamInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTACreateTeam::kNameFieldNumber;
const int CMsgDOTACreateTeam::kTagFieldNumber;
const int CMsgDOTACreateTeam::kLogoFieldNumber;
const int CMsgDOTACreateTeam::kBaseLogoFieldNumber;
const int CMsgDOTACreateTeam::kBannerLogoFieldNumber;
const int CMsgDOTACreateTeam::kSponsorLogoFieldNumber;
const int CMsgDOTACreateTeam::kCountryCodeFieldNumber;
const int CMsgDOTACreateTeam::kUrlFieldNumber;
const int CMsgDOTACreateTeam::kPickupTeamFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACreateTeam::CMsgDOTACreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACreateTeam)
}

void CMsgDOTACreateTeam::InitAsDefaultInstance() {
}

CMsgDOTACreateTeam::CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateTeam)
}

void CMsgDOTACreateTeam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  base_logo_ = GOOGLE_ULONGLONG(0);
  banner_logo_ = GOOGLE_ULONGLONG(0);
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pickup_team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACreateTeam::~CMsgDOTACreateTeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateTeam)
  SharedDtor();
}

void CMsgDOTACreateTeam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTACreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACreateTeam_descriptor_;
}

const CMsgDOTACreateTeam& CMsgDOTACreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTACreateTeam* CMsgDOTACreateTeam::default_instance_ = NULL;

CMsgDOTACreateTeam* CMsgDOTACreateTeam::New() const {
  return new CMsgDOTACreateTeam;
}

void CMsgDOTACreateTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTACreateTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(logo_, sponsor_logo_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  pickup_team_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTACreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACreateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 3;
      case 3: {
        if (tag == 24) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_logo;
        break;
      }

      // optional uint64 base_logo = 4;
      case 4: {
        if (tag == 32) {
         parse_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
          set_has_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_banner_logo;
        break;
      }

      // optional uint64 banner_logo = 5;
      case 5: {
        if (tag == 40) {
         parse_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
          set_has_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sponsor_logo;
        break;
      }

      // optional uint64 sponsor_logo = 6;
      case 6: {
        if (tag == 48) {
         parse_sponsor_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
          set_has_sponsor_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_country_code;
        break;
      }

      // optional string country_code = 7;
      case 7: {
        if (tag == 58) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional string url = 8;
      case 8: {
        if (tag == 66) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pickup_team;
        break;
      }

      // optional bool pickup_team = 9;
      case 9: {
        if (tag == 72) {
         parse_pickup_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_team_)));
          set_has_pickup_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACreateTeam)
  return false;
#undef DO_
}

void CMsgDOTACreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACreateTeam)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint64 logo = 3;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logo(), output);
  }

  // optional uint64 base_logo = 4;
  if (has_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 5;
  if (has_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 6;
  if (has_sponsor_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sponsor_logo(), output);
  }

  // optional string country_code = 7;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_code(), output);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // optional bool pickup_team = 9;
  if (has_pickup_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->pickup_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACreateTeam)
}

::google::protobuf::uint8* CMsgDOTACreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateTeam)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint64 logo = 3;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (has_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (has_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 6;
  if (has_sponsor_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sponsor_logo(), target);
  }

  // optional string country_code = 7;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_code(), target);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional bool pickup_team = 9;
  if (has_pickup_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->pickup_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateTeam)
  return target;
}

int CMsgDOTACreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint64 logo = 3;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 4;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 6;
    if (has_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

    // optional string country_code = 7;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool pickup_team = 9;
    if (has_pickup_team()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTACreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTACreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeam::MergeFrom(const CMsgDOTACreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_base_logo()) {
      set_base_logo(from.base_logo());
    }
    if (from.has_banner_logo()) {
      set_banner_logo(from.banner_logo());
    }
    if (from.has_sponsor_logo()) {
      set_sponsor_logo(from.sponsor_logo());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pickup_team()) {
      set_pickup_team(from.pickup_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTACreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeam::CopyFrom(const CMsgDOTACreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeam::IsInitialized() const {

  return true;
}

void CMsgDOTACreateTeam::Swap(CMsgDOTACreateTeam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(logo_, other->logo_);
    std::swap(base_logo_, other->base_logo_);
    std::swap(banner_logo_, other->banner_logo_);
    std::swap(sponsor_logo_, other->sponsor_logo_);
    std::swap(country_code_, other->country_code_);
    std::swap(url_, other->url_);
    std::swap(pickup_team_, other->pickup_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTACreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACreateTeam_descriptor_;
  metadata.reflection = CMsgDOTACreateTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACreateTeamResponse_Result_descriptor_;
}
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::SUCCESS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_EMPTY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_BAD_CHARACTERS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TAKEN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TOO_LONG;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_EMPTY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_BAD_CHARACTERS;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TAKEN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TOO_LONG;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_BUSY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::UNSPECIFIED_ERROR;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_LIMIT_REACHED;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NO_LOGO;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_CREATION_COOLDOWN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_CHANGED_TOO_RECENTLY;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_INSUFFICIENT_LEVEL;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID_ACCOUNT_TYPE;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MIN;
const CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MAX;
const int CMsgDOTACreateTeamResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTACreateTeamResponse::kResultFieldNumber;
const int CMsgDOTACreateTeamResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACreateTeamResponse)
}

void CMsgDOTACreateTeamResponse::InitAsDefaultInstance() {
}

CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateTeamResponse)
}

void CMsgDOTACreateTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTACreateTeamResponse::~CMsgDOTACreateTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateTeamResponse)
  SharedDtor();
}

void CMsgDOTACreateTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTACreateTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTACreateTeamResponse_descriptor_;
}

const CMsgDOTACreateTeamResponse& CMsgDOTACreateTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTACreateTeamResponse* CMsgDOTACreateTeamResponse::default_instance_ = NULL;

CMsgDOTACreateTeamResponse* CMsgDOTACreateTeamResponse::New() const {
  return new CMsgDOTACreateTeamResponse;
}

void CMsgDOTACreateTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = -1;
    team_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTACreateTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACreateTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTACreateTeamResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTACreateTeamResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACreateTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACreateTeamResponse)
  return false;
#undef DO_
}

void CMsgDOTACreateTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACreateTeamResponse)
  // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACreateTeamResponse)
}

::google::protobuf::uint8* CMsgDOTACreateTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateTeamResponse)
  // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateTeamResponse)
  return target;
}

int CMsgDOTACreateTeamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTACreateTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTACreateTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeamResponse::MergeFrom(const CMsgDOTACreateTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTACreateTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeamResponse::CopyFrom(const CMsgDOTACreateTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeamResponse::IsInitialized() const {

  return true;
}

void CMsgDOTACreateTeamResponse::Swap(CMsgDOTACreateTeamResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTACreateTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTACreateTeamResponse_descriptor_;
  metadata.reflection = CMsgDOTACreateTeamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAEditTeamDetails::kTeamIdFieldNumber;
const int CMsgDOTAEditTeamDetails::kNameFieldNumber;
const int CMsgDOTAEditTeamDetails::kTagFieldNumber;
const int CMsgDOTAEditTeamDetails::kLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kBaseLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kBannerLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kSponsorLogoFieldNumber;
const int CMsgDOTAEditTeamDetails::kCountryCodeFieldNumber;
const int CMsgDOTAEditTeamDetails::kUrlFieldNumber;
const int CMsgDOTAEditTeamDetails::kInUseByPartyFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAEditTeamDetails)
}

void CMsgDOTAEditTeamDetails::InitAsDefaultInstance() {
}

CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditTeamDetails)
}

void CMsgDOTAEditTeamDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  base_logo_ = GOOGLE_ULONGLONG(0);
  banner_logo_ = GOOGLE_ULONGLONG(0);
  sponsor_logo_ = GOOGLE_ULONGLONG(0);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  in_use_by_party_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAEditTeamDetails::~CMsgDOTAEditTeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditTeamDetails)
  SharedDtor();
}

void CMsgDOTAEditTeamDetails::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAEditTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditTeamDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAEditTeamDetails_descriptor_;
}

const CMsgDOTAEditTeamDetails& CMsgDOTAEditTeamDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAEditTeamDetails* CMsgDOTAEditTeamDetails::default_instance_ = NULL;

CMsgDOTAEditTeamDetails* CMsgDOTAEditTeamDetails::New() const {
  return new CMsgDOTAEditTeamDetails;
}

void CMsgDOTAEditTeamDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAEditTeamDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(logo_, team_id_);
    ZR_(banner_logo_, sponsor_logo_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    in_use_by_party_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAEditTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAEditTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (tag == 32) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_base_logo;
        break;
      }

      // optional uint64 base_logo = 5;
      case 5: {
        if (tag == 40) {
         parse_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
          set_has_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_banner_logo;
        break;
      }

      // optional uint64 banner_logo = 6;
      case 6: {
        if (tag == 48) {
         parse_banner_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
          set_has_banner_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sponsor_logo;
        break;
      }

      // optional uint64 sponsor_logo = 7;
      case 7: {
        if (tag == 56) {
         parse_sponsor_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsor_logo_)));
          set_has_sponsor_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_country_code;
        break;
      }

      // optional string country_code = 8;
      case 8: {
        if (tag == 66) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_url;
        break;
      }

      // optional string url = 9;
      case 9: {
        if (tag == 74) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_in_use_by_party;
        break;
      }

      // optional bool in_use_by_party = 10;
      case 10: {
        if (tag == 80) {
         parse_in_use_by_party:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_by_party_)));
          set_has_in_use_by_party();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAEditTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAEditTeamDetails)
  return false;
#undef DO_
}

void CMsgDOTAEditTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAEditTeamDetails)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional uint64 base_logo = 5;
  if (has_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 6;
  if (has_banner_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->banner_logo(), output);
  }

  // optional uint64 sponsor_logo = 7;
  if (has_sponsor_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sponsor_logo(), output);
  }

  // optional string country_code = 8;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country_code(), output);
  }

  // optional string url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->url(), output);
  }

  // optional bool in_use_by_party = 10;
  if (has_in_use_by_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->in_use_by_party(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAEditTeamDetails)
}

::google::protobuf::uint8* CMsgDOTAEditTeamDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditTeamDetails)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional uint64 base_logo = 5;
  if (has_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 6;
  if (has_banner_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 7;
  if (has_sponsor_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sponsor_logo(), target);
  }

  // optional string country_code = 8;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country_code(), target);
  }

  // optional string url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }

  // optional bool in_use_by_party = 10;
  if (has_in_use_by_party()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->in_use_by_party(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditTeamDetails)
  return target;
}

int CMsgDOTAEditTeamDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 5;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 6;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint64 sponsor_logo = 7;
    if (has_sponsor_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsor_logo());
    }

    // optional string country_code = 8;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string url = 9;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool in_use_by_party = 10;
    if (has_in_use_by_party()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAEditTeamDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetails::MergeFrom(const CMsgDOTAEditTeamDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_base_logo()) {
      set_base_logo(from.base_logo());
    }
    if (from.has_banner_logo()) {
      set_banner_logo(from.banner_logo());
    }
    if (from.has_sponsor_logo()) {
      set_sponsor_logo(from.sponsor_logo());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_in_use_by_party()) {
      set_in_use_by_party(from.in_use_by_party());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAEditTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetails::CopyFrom(const CMsgDOTAEditTeamDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetails::IsInitialized() const {

  return true;
}

void CMsgDOTAEditTeamDetails::Swap(CMsgDOTAEditTeamDetails* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(logo_, other->logo_);
    std::swap(base_logo_, other->base_logo_);
    std::swap(banner_logo_, other->banner_logo_);
    std::swap(sponsor_logo_, other->sponsor_logo_);
    std::swap(country_code_, other->country_code_);
    std::swap(url_, other->url_);
    std::swap(in_use_by_party_, other->in_use_by_party_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAEditTeamDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAEditTeamDetails_descriptor_;
  metadata.reflection = CMsgDOTAEditTeamDetails_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAEditTeamDetailsResponse_Result_descriptor_;
}
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::SUCCESS;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_NOT_MEMBER;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MIN;
const CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MAX;
const int CMsgDOTAEditTeamDetailsResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAEditTeamDetailsResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAEditTeamDetailsResponse)
}

void CMsgDOTAEditTeamDetailsResponse::InitAsDefaultInstance() {
}

CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditTeamDetailsResponse)
}

void CMsgDOTAEditTeamDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAEditTeamDetailsResponse::~CMsgDOTAEditTeamDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditTeamDetailsResponse)
  SharedDtor();
}

void CMsgDOTAEditTeamDetailsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAEditTeamDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditTeamDetailsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAEditTeamDetailsResponse_descriptor_;
}

const CMsgDOTAEditTeamDetailsResponse& CMsgDOTAEditTeamDetailsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAEditTeamDetailsResponse* CMsgDOTAEditTeamDetailsResponse::default_instance_ = NULL;

CMsgDOTAEditTeamDetailsResponse* CMsgDOTAEditTeamDetailsResponse::New() const {
  return new CMsgDOTAEditTeamDetailsResponse;
}

void CMsgDOTAEditTeamDetailsResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAEditTeamDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAEditTeamDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAEditTeamDetailsResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAEditTeamDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAEditTeamDetailsResponse)
  return false;
#undef DO_
}

void CMsgDOTAEditTeamDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAEditTeamDetailsResponse)
  // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAEditTeamDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAEditTeamDetailsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditTeamDetailsResponse)
  // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditTeamDetailsResponse)
  return target;
}

int CMsgDOTAEditTeamDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetailsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAEditTeamDetailsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAEditTeamDetailsResponse::Swap(CMsgDOTAEditTeamDetailsResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAEditTeamDetailsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAEditTeamDetailsResponse_descriptor_;
  metadata.reflection = CMsgDOTAEditTeamDetailsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamProfileResponse::kEresultFieldNumber;
const int CMsgDOTATeamProfileResponse::kTeamFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamProfileResponse)
}

void CMsgDOTATeamProfileResponse::InitAsDefaultInstance() {
  team_ = const_cast< ::CMsgDOTATeam*>(&::CMsgDOTATeam::default_instance());
}

CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse(const CMsgDOTATeamProfileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamProfileResponse)
}

void CMsgDOTATeamProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamProfileResponse::~CMsgDOTATeamProfileResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamProfileResponse)
  SharedDtor();
}

void CMsgDOTATeamProfileResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void CMsgDOTATeamProfileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamProfileResponse_descriptor_;
}

const CMsgDOTATeamProfileResponse& CMsgDOTATeamProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamProfileResponse* CMsgDOTATeamProfileResponse::default_instance_ = NULL;

CMsgDOTATeamProfileResponse* CMsgDOTATeamProfileResponse::New() const {
  return new CMsgDOTATeamProfileResponse;
}

void CMsgDOTATeamProfileResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    eresult_ = 0u;
    if (has_team()) {
      if (team_ != NULL) team_->::CMsgDOTATeam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamProfileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .CMsgDOTATeam team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamProfileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamProfileResponse)
  return false;
#undef DO_
}

void CMsgDOTATeamProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamProfileResponse)
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional .CMsgDOTATeam team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamProfileResponse)
}

::google::protobuf::uint8* CMsgDOTATeamProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamProfileResponse)
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional .CMsgDOTATeam team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamProfileResponse)
  return target;
}

int CMsgDOTATeamProfileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional .CMsgDOTATeam team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamProfileResponse::MergeFrom(const CMsgDOTATeamProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_team()) {
      mutable_team()->::CMsgDOTATeam::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamProfileResponse::CopyFrom(const CMsgDOTATeamProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamProfileResponse::IsInitialized() const {

  return true;
}

void CMsgDOTATeamProfileResponse::Swap(CMsgDOTATeamProfileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamProfileResponse_descriptor_;
  metadata.reflection = CMsgDOTATeamProfileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProTeamListRequest)
}

void CMsgDOTAProTeamListRequest::InitAsDefaultInstance() {
}

CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest(const CMsgDOTAProTeamListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProTeamListRequest)
}

void CMsgDOTAProTeamListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProTeamListRequest::~CMsgDOTAProTeamListRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProTeamListRequest)
  SharedDtor();
}

void CMsgDOTAProTeamListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProTeamListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProTeamListRequest_descriptor_;
}

const CMsgDOTAProTeamListRequest& CMsgDOTAProTeamListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAProTeamListRequest* CMsgDOTAProTeamListRequest::default_instance_ = NULL;

CMsgDOTAProTeamListRequest* CMsgDOTAProTeamListRequest::New() const {
  return new CMsgDOTAProTeamListRequest;
}

void CMsgDOTAProTeamListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProTeamListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProTeamListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProTeamListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProTeamListRequest)
  return false;
#undef DO_
}

void CMsgDOTAProTeamListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProTeamListRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProTeamListRequest)
}

::google::protobuf::uint8* CMsgDOTAProTeamListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProTeamListRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProTeamListRequest)
  return target;
}

int CMsgDOTAProTeamListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProTeamListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProTeamListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProTeamListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListRequest::MergeFrom(const CMsgDOTAProTeamListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProTeamListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListRequest::CopyFrom(const CMsgDOTAProTeamListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAProTeamListRequest::Swap(CMsgDOTAProTeamListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProTeamListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProTeamListRequest_descriptor_;
  metadata.reflection = CMsgDOTAProTeamListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAProTeamListResponse_TeamEntry::kTeamIdFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kTagFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kTimeCreatedFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kLogoFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kCountryCodeFieldNumber;
const int CMsgDOTAProTeamListResponse_TeamEntry::kMemberCountFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProTeamListResponse.TeamEntry)
}

void CMsgDOTAProTeamListResponse_TeamEntry::InitAsDefaultInstance() {
}

CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry(const CMsgDOTAProTeamListResponse_TeamEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProTeamListResponse.TeamEntry)
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_created_ = 0u;
  logo_ = GOOGLE_ULONGLONG(0);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProTeamListResponse_TeamEntry::~CMsgDOTAProTeamListResponse_TeamEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProTeamListResponse.TeamEntry)
  SharedDtor();
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListResponse_TeamEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProTeamListResponse_TeamEntry_descriptor_;
}

const CMsgDOTAProTeamListResponse_TeamEntry& CMsgDOTAProTeamListResponse_TeamEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse_TeamEntry::default_instance_ = NULL;

CMsgDOTAProTeamListResponse_TeamEntry* CMsgDOTAProTeamListResponse_TeamEntry::New() const {
  return new CMsgDOTAProTeamListResponse_TeamEntry;
}

void CMsgDOTAProTeamListResponse_TeamEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAProTeamListResponse_TeamEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(team_id_, logo_);
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
    member_count_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProTeamListResponse_TeamEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProTeamListResponse.TeamEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (tag == 24) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (tag == 32) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_country_code;
        break;
      }

      // optional string country_code = 5;
      case 5: {
        if (tag == 42) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 6;
      case 6: {
        if (tag == 48) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProTeamListResponse.TeamEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProTeamListResponse.TeamEntry)
  return false;
#undef DO_
}

void CMsgDOTAProTeamListResponse_TeamEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProTeamListResponse.TeamEntry)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional string country_code = 5;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->country_code(), output);
  }

  // optional uint32 member_count = 6;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->member_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProTeamListResponse.TeamEntry)
}

::google::protobuf::uint8* CMsgDOTAProTeamListResponse_TeamEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProTeamListResponse.TeamEntry)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional string country_code = 5;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->country_code(), target);
  }

  // optional uint32 member_count = 6;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->member_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProTeamListResponse.TeamEntry)
  return target;
}

int CMsgDOTAProTeamListResponse_TeamEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional string country_code = 5;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional uint32 member_count = 6;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse_TeamEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProTeamListResponse_TeamEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse_TeamEntry::IsInitialized() const {

  return true;
}

void CMsgDOTAProTeamListResponse_TeamEntry::Swap(CMsgDOTAProTeamListResponse_TeamEntry* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(tag_, other->tag_);
    std::swap(time_created_, other->time_created_);
    std::swap(logo_, other->logo_);
    std::swap(country_code_, other->country_code_);
    std::swap(member_count_, other->member_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProTeamListResponse_TeamEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProTeamListResponse_TeamEntry_descriptor_;
  metadata.reflection = CMsgDOTAProTeamListResponse_TeamEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAProTeamListResponse::kTeamsFieldNumber;
const int CMsgDOTAProTeamListResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAProTeamListResponse)
}

void CMsgDOTAProTeamListResponse::InitAsDefaultInstance() {
}

CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse(const CMsgDOTAProTeamListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProTeamListResponse)
}

void CMsgDOTAProTeamListResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAProTeamListResponse::~CMsgDOTAProTeamListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProTeamListResponse)
  SharedDtor();
}

void CMsgDOTAProTeamListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAProTeamListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProTeamListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAProTeamListResponse_descriptor_;
}

const CMsgDOTAProTeamListResponse& CMsgDOTAProTeamListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAProTeamListResponse* CMsgDOTAProTeamListResponse::default_instance_ = NULL;

CMsgDOTAProTeamListResponse* CMsgDOTAProTeamListResponse::New() const {
  return new CMsgDOTAProTeamListResponse;
}

void CMsgDOTAProTeamListResponse::Clear() {
  eresult_ = 0u;
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAProTeamListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAProTeamListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
      case 1: {
        if (tag == 10) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (tag == 16) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAProTeamListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAProTeamListResponse)
  return false;
#undef DO_
}

void CMsgDOTAProTeamListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAProTeamListResponse)
  // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAProTeamListResponse)
}

::google::protobuf::uint8* CMsgDOTAProTeamListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProTeamListResponse)
  // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProTeamListResponse)
  return target;
}

int CMsgDOTAProTeamListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProTeamListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAProTeamListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse::MergeFrom(const CMsgDOTAProTeamListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAProTeamListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse::CopyFrom(const CMsgDOTAProTeamListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAProTeamListResponse::Swap(CMsgDOTAProTeamListResponse* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAProTeamListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAProTeamListResponse_descriptor_;
  metadata.reflection = CMsgDOTAProTeamListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInvite_InviterToGC::kAccountIdFieldNumber;
const int CMsgDOTATeamInvite_InviterToGC::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInvite_InviterToGC)
}

void CMsgDOTATeamInvite_InviterToGC::InitAsDefaultInstance() {
}

CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_InviterToGC)
}

void CMsgDOTATeamInvite_InviterToGC::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInvite_InviterToGC::~CMsgDOTATeamInvite_InviterToGC() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_InviterToGC)
  SharedDtor();
}

void CMsgDOTATeamInvite_InviterToGC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInvite_InviterToGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_InviterToGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInvite_InviterToGC_descriptor_;
}

const CMsgDOTATeamInvite_InviterToGC& CMsgDOTATeamInvite_InviterToGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInvite_InviterToGC* CMsgDOTATeamInvite_InviterToGC::default_instance_ = NULL;

CMsgDOTATeamInvite_InviterToGC* CMsgDOTATeamInvite_InviterToGC::New() const {
  return new CMsgDOTATeamInvite_InviterToGC;
}

void CMsgDOTATeamInvite_InviterToGC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamInvite_InviterToGC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, team_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInvite_InviterToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInvite_InviterToGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInvite_InviterToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInvite_InviterToGC)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_InviterToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInvite_InviterToGC)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInvite_InviterToGC)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_InviterToGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_InviterToGC)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_InviterToGC)
  return target;
}

int CMsgDOTATeamInvite_InviterToGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviterToGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInvite_InviterToGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviterToGC::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInvite_InviterToGC::Swap(CMsgDOTATeamInvite_InviterToGC* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInvite_InviterToGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInvite_InviterToGC_descriptor_;
  metadata.reflection = CMsgDOTATeamInvite_InviterToGC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kInviteeNameFieldNumber;
const int CMsgDOTATeamInvite_GCImmediateResponseToInviter::kRequiredBadgeLevelFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::InitAsDefaultInstance() {
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_badge_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter::~CMsgDOTATeamInvite_GCImmediateResponseToInviter() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedDtor() {
  if (invitee_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitee_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCImmediateResponseToInviter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInvite_GCImmediateResponseToInviter_descriptor_;
}

const CMsgDOTATeamInvite_GCImmediateResponseToInviter& CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter* CMsgDOTATeamInvite_GCImmediateResponseToInviter::default_instance_ = NULL;

CMsgDOTATeamInvite_GCImmediateResponseToInviter* CMsgDOTATeamInvite_GCImmediateResponseToInviter::New() const {
  return new CMsgDOTATeamInvite_GCImmediateResponseToInviter;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamInvite_GCImmediateResponseToInviter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, required_badge_level_);
    if (has_invitee_name()) {
      if (invitee_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitee_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invitee_name;
        break;
      }

      // optional string invitee_name = 2;
      case 2: {
        if (tag == 18) {
         parse_invitee_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee_name().data(), this->invitee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitee_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_required_badge_level;
        break;
      }

      // optional uint32 required_badge_level = 3;
      case 3: {
        if (tag == 24) {
         parse_required_badge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_badge_level_)));
          set_has_required_badge_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string invitee_name = 2;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee_name(), output);
  }

  // optional uint32 required_badge_level = 3;
  if (has_required_badge_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_badge_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCImmediateResponseToInviter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string invitee_name = 2;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitee_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee_name(), target);
  }

  // optional uint32 required_badge_level = 3;
  if (has_required_badge_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->required_badge_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return target;
}

int CMsgDOTATeamInvite_GCImmediateResponseToInviter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string invitee_name = 2;
    if (has_invitee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

    // optional uint32 required_badge_level = 3;
    if (has_required_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_badge_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCImmediateResponseToInviter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInvite_GCImmediateResponseToInviter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_invitee_name()) {
      set_invitee_name(from.invitee_name());
    }
    if (from.has_required_badge_level()) {
      set_required_badge_level(from.required_badge_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Swap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(invitee_name_, other->invitee_name_);
    std::swap(required_badge_level_, other->required_badge_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCImmediateResponseToInviter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInvite_GCImmediateResponseToInviter_descriptor_;
  metadata.reflection = CMsgDOTATeamInvite_GCImmediateResponseToInviter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInvite_GCRequestToInvitee::kInviterAccountIdFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kTeamNameFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kTeamTagFieldNumber;
const int CMsgDOTATeamInvite_GCRequestToInvitee::kLogoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInvite_GCRequestToInvitee)
}

void CMsgDOTATeamInvite_GCRequestToInvitee::InitAsDefaultInstance() {
}

CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCRequestToInvitee)
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inviter_account_id_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInvite_GCRequestToInvitee::~CMsgDOTATeamInvite_GCRequestToInvitee() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCRequestToInvitee)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_tag_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCRequestToInvitee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInvite_GCRequestToInvitee_descriptor_;
}

const CMsgDOTATeamInvite_GCRequestToInvitee& CMsgDOTATeamInvite_GCRequestToInvitee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInvite_GCRequestToInvitee* CMsgDOTATeamInvite_GCRequestToInvitee::default_instance_ = NULL;

CMsgDOTATeamInvite_GCRequestToInvitee* CMsgDOTATeamInvite_GCRequestToInvitee::New() const {
  return new CMsgDOTATeamInvite_GCRequestToInvitee;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATeamInvite_GCRequestToInvitee*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(logo_, inviter_account_id_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
    if (has_team_tag()) {
      if (team_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_tag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inviter_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviter_account_id_)));
          set_has_inviter_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (tag == 18) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team_tag;
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (tag == 26) {
         parse_team_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logo;
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (tag == 32) {
         parse_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
          set_has_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInvite_GCRequestToInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInvite_GCRequestToInvitee)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  // optional uint32 inviter_account_id = 1;
  if (has_inviter_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviter_account_id(), output);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInvite_GCRequestToInvitee)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCRequestToInvitee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  // optional uint32 inviter_account_id = 1;
  if (has_inviter_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviter_account_id(), target);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (has_team_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint64 logo = 4;
  if (has_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCRequestToInvitee)
  return target;
}

int CMsgDOTATeamInvite_GCRequestToInvitee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 inviter_account_id = 1;
    if (has_inviter_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviter_account_id());
    }

    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCRequestToInvitee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInvite_GCRequestToInvitee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviter_account_id()) {
      set_inviter_account_id(from.inviter_account_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_tag()) {
      set_team_tag(from.team_tag());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Swap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  if (other != this) {
    std::swap(inviter_account_id_, other->inviter_account_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_tag_, other->team_tag_);
    std::swap(logo_, other->logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCRequestToInvitee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInvite_GCRequestToInvitee_descriptor_;
  metadata.reflection = CMsgDOTATeamInvite_GCRequestToInvitee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInvite_InviteeResponseToGC::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInvite_InviteeResponseToGC)
}

void CMsgDOTATeamInvite_InviteeResponseToGC::InitAsDefaultInstance() {
}

CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_InviteeResponseToGC)
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInvite_InviteeResponseToGC::~CMsgDOTATeamInvite_InviteeResponseToGC() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_InviteeResponseToGC)
  SharedDtor();
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_InviteeResponseToGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInvite_InviteeResponseToGC_descriptor_;
}

const CMsgDOTATeamInvite_InviteeResponseToGC& CMsgDOTATeamInvite_InviteeResponseToGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInvite_InviteeResponseToGC* CMsgDOTATeamInvite_InviteeResponseToGC::default_instance_ = NULL;

CMsgDOTATeamInvite_InviteeResponseToGC* CMsgDOTATeamInvite_InviteeResponseToGC::New() const {
  return new CMsgDOTATeamInvite_InviteeResponseToGC;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInvite_InviteeResponseToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInvite_InviteeResponseToGC)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInvite_InviteeResponseToGC)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_InviteeResponseToGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_InviteeResponseToGC)
  return target;
}

int CMsgDOTATeamInvite_InviteeResponseToGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviteeResponseToGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInvite_InviteeResponseToGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Swap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInvite_InviteeResponseToGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInvite_InviteeResponseToGC_descriptor_;
  metadata.reflection = CMsgDOTATeamInvite_InviteeResponseToGC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInvite_GCResponseToInviter::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCResponseToInviter::kInviteeNameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInvite_GCResponseToInviter)
}

void CMsgDOTATeamInvite_GCResponseToInviter::InitAsDefaultInstance() {
}

CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCResponseToInviter)
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInvite_GCResponseToInviter::~CMsgDOTATeamInvite_GCResponseToInviter() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCResponseToInviter)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedDtor() {
  if (invitee_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitee_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCResponseToInviter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInvite_GCResponseToInviter_descriptor_;
}

const CMsgDOTATeamInvite_GCResponseToInviter& CMsgDOTATeamInvite_GCResponseToInviter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInvite_GCResponseToInviter* CMsgDOTATeamInvite_GCResponseToInviter::default_instance_ = NULL;

CMsgDOTATeamInvite_GCResponseToInviter* CMsgDOTATeamInvite_GCResponseToInviter::New() const {
  return new CMsgDOTATeamInvite_GCResponseToInviter;
}

void CMsgDOTATeamInvite_GCResponseToInviter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_invitee_name()) {
      if (invitee_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitee_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInvite_GCResponseToInviter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInvite_GCResponseToInviter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invitee_name;
        break;
      }

      // optional string invitee_name = 2;
      case 2: {
        if (tag == 18) {
         parse_invitee_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee_name().data(), this->invitee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitee_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInvite_GCResponseToInviter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInvite_GCResponseToInviter)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCResponseToInviter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInvite_GCResponseToInviter)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string invitee_name = 2;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInvite_GCResponseToInviter)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCResponseToInviter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCResponseToInviter)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string invitee_name = 2;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitee_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCResponseToInviter)
  return target;
}

int CMsgDOTATeamInvite_GCResponseToInviter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string invitee_name = 2;
    if (has_invitee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInviter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInvite_GCResponseToInviter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_invitee_name()) {
      set_invitee_name(from.invitee_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInviter::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInvite_GCResponseToInviter::Swap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(invitee_name_, other->invitee_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCResponseToInviter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInvite_GCResponseToInviter_descriptor_;
  metadata.reflection = CMsgDOTATeamInvite_GCResponseToInviter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATeamInvite_GCResponseToInvitee::kResultFieldNumber;
const int CMsgDOTATeamInvite_GCResponseToInvitee::kTeamNameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATeamInvite_GCResponseToInvitee)
}

void CMsgDOTATeamInvite_GCResponseToInvitee::InitAsDefaultInstance() {
}

CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCResponseToInvitee)
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATeamInvite_GCResponseToInvitee::~CMsgDOTATeamInvite_GCResponseToInvitee() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCResponseToInvitee)
  SharedDtor();
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATeamInvite_GCResponseToInvitee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATeamInvite_GCResponseToInvitee_descriptor_;
}

const CMsgDOTATeamInvite_GCResponseToInvitee& CMsgDOTATeamInvite_GCResponseToInvitee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATeamInvite_GCResponseToInvitee* CMsgDOTATeamInvite_GCResponseToInvitee::default_instance_ = NULL;

CMsgDOTATeamInvite_GCResponseToInvitee* CMsgDOTATeamInvite_GCResponseToInvitee::New() const {
  return new CMsgDOTATeamInvite_GCResponseToInvitee;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETeamInviteResult_IsValid(value)) {
            set_result(static_cast< ::ETeamInviteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (tag == 18) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATeamInvite_GCResponseToInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATeamInvite_GCResponseToInvitee)
  return false;
#undef DO_
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATeamInvite_GCResponseToInvitee)
}

::google::protobuf::uint8* CMsgDOTATeamInvite_GCResponseToInvitee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCResponseToInvitee)
  return target;
}

int CMsgDOTATeamInvite_GCResponseToInvitee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInvitee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATeamInvite_GCResponseToInvitee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::IsInitialized() const {

  return true;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Swap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(team_name_, other->team_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATeamInvite_GCResponseToInvitee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATeamInvite_GCResponseToInvitee_descriptor_;
  metadata.reflection = CMsgDOTATeamInvite_GCResponseToInvitee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAKickTeamMember::kAccountIdFieldNumber;
const int CMsgDOTAKickTeamMember::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAKickTeamMember)
}

void CMsgDOTAKickTeamMember::InitAsDefaultInstance() {
}

CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAKickTeamMember)
}

void CMsgDOTAKickTeamMember::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAKickTeamMember::~CMsgDOTAKickTeamMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAKickTeamMember)
  SharedDtor();
}

void CMsgDOTAKickTeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAKickTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAKickTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAKickTeamMember_descriptor_;
}

const CMsgDOTAKickTeamMember& CMsgDOTAKickTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAKickTeamMember* CMsgDOTAKickTeamMember::default_instance_ = NULL;

CMsgDOTAKickTeamMember* CMsgDOTAKickTeamMember::New() const {
  return new CMsgDOTAKickTeamMember;
}

void CMsgDOTAKickTeamMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAKickTeamMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, team_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAKickTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAKickTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAKickTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAKickTeamMember)
  return false;
#undef DO_
}

void CMsgDOTAKickTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAKickTeamMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAKickTeamMember)
}

::google::protobuf::uint8* CMsgDOTAKickTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAKickTeamMember)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAKickTeamMember)
  return target;
}

int CMsgDOTAKickTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAKickTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAKickTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAKickTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMember::MergeFrom(const CMsgDOTAKickTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAKickTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMember::CopyFrom(const CMsgDOTAKickTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMember::IsInitialized() const {

  return true;
}

void CMsgDOTAKickTeamMember::Swap(CMsgDOTAKickTeamMember* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAKickTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAKickTeamMember_descriptor_;
  metadata.reflection = CMsgDOTAKickTeamMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAKickTeamMemberResponse_Result_descriptor_;
}
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::SUCCESS;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKER_NOT_ADMIN;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKEE_NOT_MEMBER;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MIN;
const CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MAX;
const int CMsgDOTAKickTeamMemberResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAKickTeamMemberResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAKickTeamMemberResponse)
}

void CMsgDOTAKickTeamMemberResponse::InitAsDefaultInstance() {
}

CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAKickTeamMemberResponse)
}

void CMsgDOTAKickTeamMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAKickTeamMemberResponse::~CMsgDOTAKickTeamMemberResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAKickTeamMemberResponse)
  SharedDtor();
}

void CMsgDOTAKickTeamMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAKickTeamMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAKickTeamMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAKickTeamMemberResponse_descriptor_;
}

const CMsgDOTAKickTeamMemberResponse& CMsgDOTAKickTeamMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAKickTeamMemberResponse* CMsgDOTAKickTeamMemberResponse::default_instance_ = NULL;

CMsgDOTAKickTeamMemberResponse* CMsgDOTAKickTeamMemberResponse::New() const {
  return new CMsgDOTAKickTeamMemberResponse;
}

void CMsgDOTAKickTeamMemberResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAKickTeamMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAKickTeamMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAKickTeamMemberResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAKickTeamMemberResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAKickTeamMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAKickTeamMemberResponse)
  return false;
#undef DO_
}

void CMsgDOTAKickTeamMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAKickTeamMemberResponse)
  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAKickTeamMemberResponse)
}

::google::protobuf::uint8* CMsgDOTAKickTeamMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAKickTeamMemberResponse)
  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAKickTeamMemberResponse)
  return target;
}

int CMsgDOTAKickTeamMemberResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAKickTeamMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAKickTeamMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const CMsgDOTAKickTeamMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const CMsgDOTAKickTeamMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMemberResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAKickTeamMemberResponse::Swap(CMsgDOTAKickTeamMemberResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAKickTeamMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAKickTeamMemberResponse_descriptor_;
  metadata.reflection = CMsgDOTAKickTeamMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATransferTeamAdmin::kNewAdminAccountIdFieldNumber;
const int CMsgDOTATransferTeamAdmin::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATransferTeamAdmin)
}

void CMsgDOTATransferTeamAdmin::InitAsDefaultInstance() {
}

CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATransferTeamAdmin)
}

void CMsgDOTATransferTeamAdmin::SharedCtor() {
  _cached_size_ = 0;
  new_admin_account_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATransferTeamAdmin::~CMsgDOTATransferTeamAdmin() {
  // @@protoc_insertion_point(destructor:CMsgDOTATransferTeamAdmin)
  SharedDtor();
}

void CMsgDOTATransferTeamAdmin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATransferTeamAdmin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATransferTeamAdmin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATransferTeamAdmin_descriptor_;
}

const CMsgDOTATransferTeamAdmin& CMsgDOTATransferTeamAdmin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATransferTeamAdmin* CMsgDOTATransferTeamAdmin::default_instance_ = NULL;

CMsgDOTATransferTeamAdmin* CMsgDOTATransferTeamAdmin::New() const {
  return new CMsgDOTATransferTeamAdmin;
}

void CMsgDOTATransferTeamAdmin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATransferTeamAdmin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(new_admin_account_id_, team_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATransferTeamAdmin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATransferTeamAdmin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_admin_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_admin_account_id_)));
          set_has_new_admin_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATransferTeamAdmin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATransferTeamAdmin)
  return false;
#undef DO_
}

void CMsgDOTATransferTeamAdmin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATransferTeamAdmin)
  // optional uint32 new_admin_account_id = 1;
  if (has_new_admin_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_admin_account_id(), output);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATransferTeamAdmin)
}

::google::protobuf::uint8* CMsgDOTATransferTeamAdmin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATransferTeamAdmin)
  // optional uint32 new_admin_account_id = 1;
  if (has_new_admin_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_admin_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATransferTeamAdmin)
  return target;
}

int CMsgDOTATransferTeamAdmin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 new_admin_account_id = 1;
    if (has_new_admin_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_admin_account_id());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdmin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATransferTeamAdmin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const CMsgDOTATransferTeamAdmin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_admin_account_id()) {
      set_new_admin_account_id(from.new_admin_account_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const CMsgDOTATransferTeamAdmin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdmin::IsInitialized() const {

  return true;
}

void CMsgDOTATransferTeamAdmin::Swap(CMsgDOTATransferTeamAdmin* other) {
  if (other != this) {
    std::swap(new_admin_account_id_, other->new_admin_account_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATransferTeamAdmin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATransferTeamAdmin_descriptor_;
  metadata.reflection = CMsgDOTATransferTeamAdmin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATransferTeamAdminResponse_Result_descriptor_;
}
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::SUCCESS;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_ADMIN;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_SAME_ACCOUNT;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_MEMBER;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MIN;
const CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MAX;
const int CMsgDOTATransferTeamAdminResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTATransferTeamAdminResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATransferTeamAdminResponse)
}

void CMsgDOTATransferTeamAdminResponse::InitAsDefaultInstance() {
}

CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATransferTeamAdminResponse)
}

void CMsgDOTATransferTeamAdminResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATransferTeamAdminResponse::~CMsgDOTATransferTeamAdminResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATransferTeamAdminResponse)
  SharedDtor();
}

void CMsgDOTATransferTeamAdminResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATransferTeamAdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATransferTeamAdminResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATransferTeamAdminResponse_descriptor_;
}

const CMsgDOTATransferTeamAdminResponse& CMsgDOTATransferTeamAdminResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTATransferTeamAdminResponse* CMsgDOTATransferTeamAdminResponse::default_instance_ = NULL;

CMsgDOTATransferTeamAdminResponse* CMsgDOTATransferTeamAdminResponse::New() const {
  return new CMsgDOTATransferTeamAdminResponse;
}

void CMsgDOTATransferTeamAdminResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATransferTeamAdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATransferTeamAdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTATransferTeamAdminResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTATransferTeamAdminResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATransferTeamAdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATransferTeamAdminResponse)
  return false;
#undef DO_
}

void CMsgDOTATransferTeamAdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATransferTeamAdminResponse)
  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATransferTeamAdminResponse)
}

::google::protobuf::uint8* CMsgDOTATransferTeamAdminResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATransferTeamAdminResponse)
  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATransferTeamAdminResponse)
  return target;
}

int CMsgDOTATransferTeamAdminResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdminResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATransferTeamAdminResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const CMsgDOTATransferTeamAdminResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const CMsgDOTATransferTeamAdminResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdminResponse::IsInitialized() const {

  return true;
}

void CMsgDOTATransferTeamAdminResponse::Swap(CMsgDOTATransferTeamAdminResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATransferTeamAdminResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATransferTeamAdminResponse_descriptor_;
  metadata.reflection = CMsgDOTATransferTeamAdminResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAChangeTeamSub::kTeamIdFieldNumber;
const int CMsgDOTAChangeTeamSub::kMemberAccountIdFieldNumber;
const int CMsgDOTAChangeTeamSub::kSubAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChangeTeamSub::CMsgDOTAChangeTeamSub()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChangeTeamSub)
}

void CMsgDOTAChangeTeamSub::InitAsDefaultInstance() {
}

CMsgDOTAChangeTeamSub::CMsgDOTAChangeTeamSub(const CMsgDOTAChangeTeamSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChangeTeamSub)
}

void CMsgDOTAChangeTeamSub::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  member_account_id_ = 0u;
  sub_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChangeTeamSub::~CMsgDOTAChangeTeamSub() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChangeTeamSub)
  SharedDtor();
}

void CMsgDOTAChangeTeamSub::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChangeTeamSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChangeTeamSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChangeTeamSub_descriptor_;
}

const CMsgDOTAChangeTeamSub& CMsgDOTAChangeTeamSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAChangeTeamSub* CMsgDOTAChangeTeamSub::default_instance_ = NULL;

CMsgDOTAChangeTeamSub* CMsgDOTAChangeTeamSub::New() const {
  return new CMsgDOTAChangeTeamSub;
}

void CMsgDOTAChangeTeamSub::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAChangeTeamSub*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_id_, sub_account_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChangeTeamSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChangeTeamSub)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_account_id;
        break;
      }

      // optional uint32 member_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_member_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_account_id_)));
          set_has_member_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_account_id;
        break;
      }

      // optional uint32 sub_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_account_id_)));
          set_has_sub_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChangeTeamSub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChangeTeamSub)
  return false;
#undef DO_
}

void CMsgDOTAChangeTeamSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChangeTeamSub)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional uint32 member_account_id = 2;
  if (has_member_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_account_id(), output);
  }

  // optional uint32 sub_account_id = 3;
  if (has_sub_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChangeTeamSub)
}

::google::protobuf::uint8* CMsgDOTAChangeTeamSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChangeTeamSub)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional uint32 member_account_id = 2;
  if (has_member_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_account_id(), target);
  }

  // optional uint32 sub_account_id = 3;
  if (has_sub_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChangeTeamSub)
  return target;
}

int CMsgDOTAChangeTeamSub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 member_account_id = 2;
    if (has_member_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_account_id());
    }

    // optional uint32 sub_account_id = 3;
    if (has_sub_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChangeTeamSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChangeTeamSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChangeTeamSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChangeTeamSub::MergeFrom(const CMsgDOTAChangeTeamSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_member_account_id()) {
      set_member_account_id(from.member_account_id());
    }
    if (from.has_sub_account_id()) {
      set_sub_account_id(from.sub_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChangeTeamSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChangeTeamSub::CopyFrom(const CMsgDOTAChangeTeamSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChangeTeamSub::IsInitialized() const {

  return true;
}

void CMsgDOTAChangeTeamSub::Swap(CMsgDOTAChangeTeamSub* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(member_account_id_, other->member_account_id_);
    std::swap(sub_account_id_, other->sub_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChangeTeamSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChangeTeamSub_descriptor_;
  metadata.reflection = CMsgDOTAChangeTeamSub_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTAChangeTeamSubResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChangeTeamSubResponse_Result_descriptor_;
}
bool CMsgDOTAChangeTeamSubResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::SUCCESS;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_INVALID_ACCOUNT_TYPE;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_SAME_ACCOUNT;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_NOT_ADMIN;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_NOT_MEMBER;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_NOT_SUB;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_ALREADY_SUB;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::Result_MIN;
const CMsgDOTAChangeTeamSubResponse_Result CMsgDOTAChangeTeamSubResponse::Result_MAX;
const int CMsgDOTAChangeTeamSubResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTAChangeTeamSubResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAChangeTeamSubResponse::CMsgDOTAChangeTeamSubResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAChangeTeamSubResponse)
}

void CMsgDOTAChangeTeamSubResponse::InitAsDefaultInstance() {
}

CMsgDOTAChangeTeamSubResponse::CMsgDOTAChangeTeamSubResponse(const CMsgDOTAChangeTeamSubResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChangeTeamSubResponse)
}

void CMsgDOTAChangeTeamSubResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAChangeTeamSubResponse::~CMsgDOTAChangeTeamSubResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChangeTeamSubResponse)
  SharedDtor();
}

void CMsgDOTAChangeTeamSubResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAChangeTeamSubResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChangeTeamSubResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAChangeTeamSubResponse_descriptor_;
}

const CMsgDOTAChangeTeamSubResponse& CMsgDOTAChangeTeamSubResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTAChangeTeamSubResponse* CMsgDOTAChangeTeamSubResponse::default_instance_ = NULL;

CMsgDOTAChangeTeamSubResponse* CMsgDOTAChangeTeamSubResponse::New() const {
  return new CMsgDOTAChangeTeamSubResponse;
}

void CMsgDOTAChangeTeamSubResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAChangeTeamSubResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAChangeTeamSubResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTAChangeTeamSubResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTAChangeTeamSubResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAChangeTeamSubResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAChangeTeamSubResponse)
  return false;
#undef DO_
}

void CMsgDOTAChangeTeamSubResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAChangeTeamSubResponse)
  // optional .CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAChangeTeamSubResponse)
}

::google::protobuf::uint8* CMsgDOTAChangeTeamSubResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChangeTeamSubResponse)
  // optional .CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChangeTeamSubResponse)
  return target;
}

int CMsgDOTAChangeTeamSubResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAChangeTeamSubResponse.Result result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChangeTeamSubResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAChangeTeamSubResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAChangeTeamSubResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAChangeTeamSubResponse::MergeFrom(const CMsgDOTAChangeTeamSubResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAChangeTeamSubResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChangeTeamSubResponse::CopyFrom(const CMsgDOTAChangeTeamSubResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChangeTeamSubResponse::IsInitialized() const {

  return true;
}

void CMsgDOTAChangeTeamSubResponse::Swap(CMsgDOTAChangeTeamSubResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAChangeTeamSubResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAChangeTeamSubResponse_descriptor_;
  metadata.reflection = CMsgDOTAChangeTeamSubResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTALeaveTeam::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALeaveTeam::CMsgDOTALeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALeaveTeam)
}

void CMsgDOTALeaveTeam::InitAsDefaultInstance() {
}

CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveTeam)
}

void CMsgDOTALeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALeaveTeam::~CMsgDOTALeaveTeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveTeam)
  SharedDtor();
}

void CMsgDOTALeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTALeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALeaveTeam_descriptor_;
}

const CMsgDOTALeaveTeam& CMsgDOTALeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTALeaveTeam* CMsgDOTALeaveTeam::default_instance_ = NULL;

CMsgDOTALeaveTeam* CMsgDOTALeaveTeam::New() const {
  return new CMsgDOTALeaveTeam;
}

void CMsgDOTALeaveTeam::Clear() {
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALeaveTeam)
  return false;
#undef DO_
}

void CMsgDOTALeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALeaveTeam)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALeaveTeam)
}

::google::protobuf::uint8* CMsgDOTALeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveTeam)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveTeam)
  return target;
}

int CMsgDOTALeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeam::MergeFrom(const CMsgDOTALeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeam::CopyFrom(const CMsgDOTALeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeam::IsInitialized() const {

  return true;
}

void CMsgDOTALeaveTeam::Swap(CMsgDOTALeaveTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALeaveTeam_descriptor_;
  metadata.reflection = CMsgDOTALeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALeaveTeamResponse_Result_descriptor_;
}
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::SUCCESS;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_NOT_MEMBER;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_TEAM_LOCKED;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_UNSPECIFIED_ERROR;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MIN;
const CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MAX;
const int CMsgDOTALeaveTeamResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgDOTALeaveTeamResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTALeaveTeamResponse)
}

void CMsgDOTALeaveTeamResponse::InitAsDefaultInstance() {
}

CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveTeamResponse)
}

void CMsgDOTALeaveTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTALeaveTeamResponse::~CMsgDOTALeaveTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveTeamResponse)
  SharedDtor();
}

void CMsgDOTALeaveTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTALeaveTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALeaveTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTALeaveTeamResponse_descriptor_;
}

const CMsgDOTALeaveTeamResponse& CMsgDOTALeaveTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTALeaveTeamResponse* CMsgDOTALeaveTeamResponse::default_instance_ = NULL;

CMsgDOTALeaveTeamResponse* CMsgDOTALeaveTeamResponse::New() const {
  return new CMsgDOTALeaveTeamResponse;
}

void CMsgDOTALeaveTeamResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTALeaveTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTALeaveTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgDOTALeaveTeamResponse_Result_IsValid(value)) {
            set_result(static_cast< ::CMsgDOTALeaveTeamResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTALeaveTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTALeaveTeamResponse)
  return false;
#undef DO_
}

void CMsgDOTALeaveTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTALeaveTeamResponse)
  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTALeaveTeamResponse)
}

::google::protobuf::uint8* CMsgDOTALeaveTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveTeamResponse)
  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveTeamResponse)
  return target;
}

int CMsgDOTALeaveTeamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTALeaveTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTALeaveTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const CMsgDOTALeaveTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const CMsgDOTALeaveTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeamResponse::IsInitialized() const {

  return true;
}

void CMsgDOTALeaveTeamResponse::Swap(CMsgDOTALeaveTeamResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTALeaveTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTALeaveTeamResponse_descriptor_;
  metadata.reflection = CMsgDOTALeaveTeamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTABetaParticipation::kAccessRightsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTABetaParticipation::CMsgDOTABetaParticipation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTABetaParticipation)
}

void CMsgDOTABetaParticipation::InitAsDefaultInstance() {
}

CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABetaParticipation)
}

void CMsgDOTABetaParticipation::SharedCtor() {
  _cached_size_ = 0;
  access_rights_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTABetaParticipation::~CMsgDOTABetaParticipation() {
  // @@protoc_insertion_point(destructor:CMsgDOTABetaParticipation)
  SharedDtor();
}

void CMsgDOTABetaParticipation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTABetaParticipation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABetaParticipation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTABetaParticipation_descriptor_;
}

const CMsgDOTABetaParticipation& CMsgDOTABetaParticipation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fteam_2eproto();
  return *default_instance_;
}

CMsgDOTABetaParticipation* CMsgDOTABetaParticipation::default_instance_ = NULL;

CMsgDOTABetaParticipation* CMsgDOTABetaParticipation::New() const {
  return new CMsgDOTABetaParticipation;
}

void CMsgDOTABetaParticipation::Clear() {
  access_rights_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTABetaParticipation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTABetaParticipation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 access_rights = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_rights_)));
          set_has_access_rights();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTABetaParticipation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTABetaParticipation)
  return false;
#undef DO_
}

void CMsgDOTABetaParticipation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTABetaParticipation)
  // optional uint32 access_rights = 1;
  if (has_access_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->access_rights(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTABetaParticipation)
}

::google::protobuf::uint8* CMsgDOTABetaParticipation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABetaParticipation)
  // optional uint32 access_rights = 1;
  if (has_access_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->access_rights(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABetaParticipation)
  return target;
}

int CMsgDOTABetaParticipation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 access_rights = 1;
    if (has_access_rights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->access_rights());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABetaParticipation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTABetaParticipation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTABetaParticipation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTABetaParticipation::MergeFrom(const CMsgDOTABetaParticipation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_rights()) {
      set_access_rights(from.access_rights());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTABetaParticipation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABetaParticipation::CopyFrom(const CMsgDOTABetaParticipation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABetaParticipation::IsInitialized() const {

  return true;
}

void CMsgDOTABetaParticipation::Swap(CMsgDOTABetaParticipation* other) {
  if (other != this) {
    std::swap(access_rights_, other->access_rights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTABetaParticipation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTABetaParticipation_descriptor_;
  metadata.reflection = CMsgDOTABetaParticipation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
