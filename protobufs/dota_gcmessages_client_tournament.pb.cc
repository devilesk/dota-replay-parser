// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_tournament.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_tournament.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_PhaseGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentInfo_PhaseGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_Phase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentInfo_Phase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentInfo_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_UpcomingMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentInfo_UpcomingMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_News_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentInfo_News_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestWeekendTourneySchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestWeekendTourneySchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWeekendTourneySchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWeekendTourneySchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWeekendTourneySchedule_Division_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWeekendTourneySchedule_Division_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWeekendTourneyOpts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWeekendTourneyOpts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWeekendTourneyLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWeekendTourneyLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_Game_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournament_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournament_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_GameChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentStateChange_GameChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_TeamChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentStateChange_TeamChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTATournamentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTATournamentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAClearTournamentGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAClearTournamentGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerSkillLevelStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyPlayerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyPlayerStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyPlayerHistoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyPlayerHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistory_Tournament_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyParticipationDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_Tier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyParticipationDetails_Tier_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_Division_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAWeekendTourneyParticipationDetails_Division_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETournamentEvent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_tournament.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgDOTATournamentInfo_descriptor_ = file->message_type(0);
  static const int CMsgDOTATournamentInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, phase_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, teams_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, upcoming_matches_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, news_list_),
  };
  CMsgDOTATournamentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentInfo_descriptor_,
      CMsgDOTATournamentInfo::default_instance_,
      CMsgDOTATournamentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentInfo));
  CMsgDOTATournamentInfo_PhaseGroup_descriptor_ = CMsgDOTATournamentInfo_descriptor_->nested_type(0);
  static const int CMsgDOTATournamentInfo_PhaseGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, group_name_),
  };
  CMsgDOTATournamentInfo_PhaseGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentInfo_PhaseGroup_descriptor_,
      CMsgDOTATournamentInfo_PhaseGroup::default_instance_,
      CMsgDOTATournamentInfo_PhaseGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentInfo_PhaseGroup));
  CMsgDOTATournamentInfo_Phase_descriptor_ = CMsgDOTATournamentInfo_descriptor_->nested_type(1);
  static const int CMsgDOTATournamentInfo_Phase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, phase_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, phase_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, min_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, max_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, group_list_),
  };
  CMsgDOTATournamentInfo_Phase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentInfo_Phase_descriptor_,
      CMsgDOTATournamentInfo_Phase::default_instance_,
      CMsgDOTATournamentInfo_Phase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentInfo_Phase));
  CMsgDOTATournamentInfo_Team_descriptor_ = CMsgDOTATournamentInfo_descriptor_->nested_type(2);
  static const int CMsgDOTATournamentInfo_Team_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, eliminated_),
  };
  CMsgDOTATournamentInfo_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentInfo_Team_descriptor_,
      CMsgDOTATournamentInfo_Team::default_instance_,
      CMsgDOTATournamentInfo_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentInfo_Team));
  CMsgDOTATournamentInfo_UpcomingMatch_descriptor_ = CMsgDOTATournamentInfo_descriptor_->nested_type(3);
  static const int CMsgDOTATournamentInfo_UpcomingMatch_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, bo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, stage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, winner_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, loser_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_opponent_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_opponent_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, phase_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, phase_id_),
  };
  CMsgDOTATournamentInfo_UpcomingMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentInfo_UpcomingMatch_descriptor_,
      CMsgDOTATournamentInfo_UpcomingMatch::default_instance_,
      CMsgDOTATournamentInfo_UpcomingMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentInfo_UpcomingMatch));
  CMsgDOTATournamentInfo_News_descriptor_ = CMsgDOTATournamentInfo_descriptor_->nested_type(4);
  static const int CMsgDOTATournamentInfo_News_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, timestamp_),
  };
  CMsgDOTATournamentInfo_News_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentInfo_News_descriptor_,
      CMsgDOTATournamentInfo_News::default_instance_,
      CMsgDOTATournamentInfo_News_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentInfo_News));
  CMsgRequestWeekendTourneySchedule_descriptor_ = file->message_type(1);
  static const int CMsgRequestWeekendTourneySchedule_offsets_[1] = {
  };
  CMsgRequestWeekendTourneySchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestWeekendTourneySchedule_descriptor_,
      CMsgRequestWeekendTourneySchedule::default_instance_,
      CMsgRequestWeekendTourneySchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestWeekendTourneySchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestWeekendTourneySchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestWeekendTourneySchedule));
  CMsgWeekendTourneySchedule_descriptor_ = file->message_type(2);
  static const int CMsgWeekendTourneySchedule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule, divisions_),
  };
  CMsgWeekendTourneySchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWeekendTourneySchedule_descriptor_,
      CMsgWeekendTourneySchedule::default_instance_,
      CMsgWeekendTourneySchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWeekendTourneySchedule));
  CMsgWeekendTourneySchedule_Division_descriptor_ = CMsgWeekendTourneySchedule_descriptor_->nested_type(0);
  static const int CMsgWeekendTourneySchedule_Division_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, division_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, time_window_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, time_window_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, time_window_open_next_),
  };
  CMsgWeekendTourneySchedule_Division_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWeekendTourneySchedule_Division_descriptor_,
      CMsgWeekendTourneySchedule_Division::default_instance_,
      CMsgWeekendTourneySchedule_Division_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWeekendTourneySchedule_Division));
  CMsgWeekendTourneyOpts_descriptor_ = file->message_type(3);
  static const int CMsgWeekendTourneyOpts_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, participating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, division_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, buyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, match_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, pickup_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, pickup_team_logo_),
  };
  CMsgWeekendTourneyOpts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWeekendTourneyOpts_descriptor_,
      CMsgWeekendTourneyOpts::default_instance_,
      CMsgWeekendTourneyOpts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWeekendTourneyOpts));
  CMsgWeekendTourneyLeave_descriptor_ = file->message_type(4);
  static const int CMsgWeekendTourneyLeave_offsets_[1] = {
  };
  CMsgWeekendTourneyLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWeekendTourneyLeave_descriptor_,
      CMsgWeekendTourneyLeave::default_instance_,
      CMsgWeekendTourneyLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWeekendTourneyLeave));
  CMsgDOTATournament_descriptor_ = file->message_type(5);
  static const int CMsgDOTATournament_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, division_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, schedule_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, state_seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, season_trophy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, nodes_),
  };
  CMsgDOTATournament_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournament_descriptor_,
      CMsgDOTATournament::default_instance_,
      CMsgDOTATournament_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournament));
  CMsgDOTATournament_Team_descriptor_ = CMsgDOTATournament_descriptor_->nested_type(0);
  static const int CMsgDOTATournament_Team_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, node_or_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, player_buyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, player_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, match_group_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_base_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_ui_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_date_),
  };
  CMsgDOTATournament_Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournament_Team_descriptor_,
      CMsgDOTATournament_Team::default_instance_,
      CMsgDOTATournament_Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournament_Team));
  CMsgDOTATournament_Game_descriptor_ = CMsgDOTATournament_descriptor_->nested_type(1);
  static const int CMsgDOTATournament_Game_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, node_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, team_a_good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, start_time_),
  };
  CMsgDOTATournament_Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournament_Game_descriptor_,
      CMsgDOTATournament_Game::default_instance_,
      CMsgDOTATournament_Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournament_Game));
  CMsgDOTATournament_Node_descriptor_ = CMsgDOTATournament_descriptor_->nested_type(2);
  static const int CMsgDOTATournament_Node_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, team_idx_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, team_idx_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, node_state_),
  };
  CMsgDOTATournament_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournament_Node_descriptor_,
      CMsgDOTATournament_Node::default_instance_,
      CMsgDOTATournament_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournament_Node));
  CMsgDOTATournamentStateChange_descriptor_ = file->message_type(6);
  static const int CMsgDOTATournamentStateChange_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, new_tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, new_tournament_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, game_changes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, team_changes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, merged_tournament_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, state_seq_num_),
  };
  CMsgDOTATournamentStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentStateChange_descriptor_,
      CMsgDOTATournamentStateChange::default_instance_,
      CMsgDOTATournamentStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentStateChange));
  CMsgDOTATournamentStateChange_GameChange_descriptor_ = CMsgDOTATournamentStateChange_descriptor_->nested_type(0);
  static const int CMsgDOTATournamentStateChange_GameChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, new_state_),
  };
  CMsgDOTATournamentStateChange_GameChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentStateChange_GameChange_descriptor_,
      CMsgDOTATournamentStateChange_GameChange::default_instance_,
      CMsgDOTATournamentStateChange_GameChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentStateChange_GameChange));
  CMsgDOTATournamentStateChange_TeamChange_descriptor_ = CMsgDOTATournamentStateChange_descriptor_->nested_type(1);
  static const int CMsgDOTATournamentStateChange_TeamChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, team_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, new_node_or_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, old_node_or_state_),
  };
  CMsgDOTATournamentStateChange_TeamChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentStateChange_TeamChange_descriptor_,
      CMsgDOTATournamentStateChange_TeamChange::default_instance_,
      CMsgDOTATournamentStateChange_TeamChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentStateChange_TeamChange));
  CMsgDOTATournamentRequest_descriptor_ = file->message_type(7);
  static const int CMsgDOTATournamentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, client_tournament_gid_),
  };
  CMsgDOTATournamentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentRequest_descriptor_,
      CMsgDOTATournamentRequest::default_instance_,
      CMsgDOTATournamentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentRequest));
  CMsgDOTATournamentResponse_descriptor_ = file->message_type(8);
  static const int CMsgDOTATournamentResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, tournament_),
  };
  CMsgDOTATournamentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTATournamentResponse_descriptor_,
      CMsgDOTATournamentResponse::default_instance_,
      CMsgDOTATournamentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTATournamentResponse));
  CMsgDOTAClearTournamentGame_descriptor_ = file->message_type(9);
  static const int CMsgDOTAClearTournamentGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, game_id_),
  };
  CMsgDOTAClearTournamentGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAClearTournamentGame_descriptor_,
      CMsgDOTAClearTournamentGame::default_instance_,
      CMsgDOTAClearTournamentGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAClearTournamentGame));
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats_descriptor_ = file->message_type(10);
  static const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_won_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, total_games_won_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, score_),
  };
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyPlayerSkillLevelStats_descriptor_,
      CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance_,
      CMsgDOTAWeekendTourneyPlayerSkillLevelStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyPlayerSkillLevelStats));
  CMsgDOTAWeekendTourneyPlayerStats_descriptor_ = file->message_type(11);
  static const int CMsgDOTAWeekendTourneyPlayerStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, season_trophy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, skill_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, current_tier_),
  };
  CMsgDOTAWeekendTourneyPlayerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyPlayerStats_descriptor_,
      CMsgDOTAWeekendTourneyPlayerStats::default_instance_,
      CMsgDOTAWeekendTourneyPlayerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyPlayerStats));
  CMsgDOTAWeekendTourneyPlayerStatsRequest_descriptor_ = file->message_type(12);
  static const int CMsgDOTAWeekendTourneyPlayerStatsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, season_trophy_id_),
  };
  CMsgDOTAWeekendTourneyPlayerStatsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyPlayerStatsRequest_descriptor_,
      CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance_,
      CMsgDOTAWeekendTourneyPlayerStatsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyPlayerStatsRequest));
  CMsgDOTAWeekendTourneyPlayerHistoryRequest_descriptor_ = file->message_type(13);
  static const int CMsgDOTAWeekendTourneyPlayerHistoryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, season_trophy_id_),
  };
  CMsgDOTAWeekendTourneyPlayerHistoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyPlayerHistoryRequest_descriptor_,
      CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance_,
      CMsgDOTAWeekendTourneyPlayerHistoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyPlayerHistoryRequest));
  CMsgDOTAWeekendTourneyPlayerHistory_descriptor_ = file->message_type(14);
  static const int CMsgDOTAWeekendTourneyPlayerHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, tournaments_),
  };
  CMsgDOTAWeekendTourneyPlayerHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyPlayerHistory_descriptor_,
      CMsgDOTAWeekendTourneyPlayerHistory::default_instance_,
      CMsgDOTAWeekendTourneyPlayerHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyPlayerHistory));
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament_descriptor_ = CMsgDOTAWeekendTourneyPlayerHistory_descriptor_->nested_type(0);
  static const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, season_trophy_id_),
  };
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyPlayerHistory_Tournament_descriptor_,
      CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance_,
      CMsgDOTAWeekendTourneyPlayerHistory_Tournament_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyPlayerHistory_Tournament));
  CMsgDOTAWeekendTourneyParticipationDetails_descriptor_ = file->message_type(15);
  static const int CMsgDOTAWeekendTourneyParticipationDetails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails, divisions_),
  };
  CMsgDOTAWeekendTourneyParticipationDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyParticipationDetails_descriptor_,
      CMsgDOTAWeekendTourneyParticipationDetails::default_instance_,
      CMsgDOTAWeekendTourneyParticipationDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyParticipationDetails));
  CMsgDOTAWeekendTourneyParticipationDetails_Tier_descriptor_ = CMsgDOTAWeekendTourneyParticipationDetails_descriptor_->nested_type(0);
  static const int CMsgDOTAWeekendTourneyParticipationDetails_Tier_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, winning_teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_5_),
  };
  CMsgDOTAWeekendTourneyParticipationDetails_Tier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyParticipationDetails_Tier_descriptor_,
      CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance_,
      CMsgDOTAWeekendTourneyParticipationDetails_Tier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyParticipationDetails_Tier));
  CMsgDOTAWeekendTourneyParticipationDetails_Division_descriptor_ = CMsgDOTAWeekendTourneyParticipationDetails_descriptor_->nested_type(1);
  static const int CMsgDOTAWeekendTourneyParticipationDetails_Division_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, division_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, schedule_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, tiers_),
  };
  CMsgDOTAWeekendTourneyParticipationDetails_Division_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAWeekendTourneyParticipationDetails_Division_descriptor_,
      CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance_,
      CMsgDOTAWeekendTourneyParticipationDetails_Division_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAWeekendTourneyParticipationDetails_Division));
  ETournamentEvent_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentInfo_descriptor_, &CMsgDOTATournamentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentInfo_PhaseGroup_descriptor_, &CMsgDOTATournamentInfo_PhaseGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentInfo_Phase_descriptor_, &CMsgDOTATournamentInfo_Phase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentInfo_Team_descriptor_, &CMsgDOTATournamentInfo_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentInfo_UpcomingMatch_descriptor_, &CMsgDOTATournamentInfo_UpcomingMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentInfo_News_descriptor_, &CMsgDOTATournamentInfo_News::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestWeekendTourneySchedule_descriptor_, &CMsgRequestWeekendTourneySchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWeekendTourneySchedule_descriptor_, &CMsgWeekendTourneySchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWeekendTourneySchedule_Division_descriptor_, &CMsgWeekendTourneySchedule_Division::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWeekendTourneyOpts_descriptor_, &CMsgWeekendTourneyOpts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWeekendTourneyLeave_descriptor_, &CMsgWeekendTourneyLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournament_descriptor_, &CMsgDOTATournament::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournament_Team_descriptor_, &CMsgDOTATournament_Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournament_Game_descriptor_, &CMsgDOTATournament_Game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournament_Node_descriptor_, &CMsgDOTATournament_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentStateChange_descriptor_, &CMsgDOTATournamentStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentStateChange_GameChange_descriptor_, &CMsgDOTATournamentStateChange_GameChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentStateChange_TeamChange_descriptor_, &CMsgDOTATournamentStateChange_TeamChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentRequest_descriptor_, &CMsgDOTATournamentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTATournamentResponse_descriptor_, &CMsgDOTATournamentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAClearTournamentGame_descriptor_, &CMsgDOTAClearTournamentGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyPlayerSkillLevelStats_descriptor_, &CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyPlayerStats_descriptor_, &CMsgDOTAWeekendTourneyPlayerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyPlayerStatsRequest_descriptor_, &CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyPlayerHistoryRequest_descriptor_, &CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyPlayerHistory_descriptor_, &CMsgDOTAWeekendTourneyPlayerHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyPlayerHistory_Tournament_descriptor_, &CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyParticipationDetails_descriptor_, &CMsgDOTAWeekendTourneyParticipationDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyParticipationDetails_Tier_descriptor_, &CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAWeekendTourneyParticipationDetails_Division_descriptor_, &CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  delete CMsgDOTATournamentInfo::default_instance_;
  delete CMsgDOTATournamentInfo_reflection_;
  delete CMsgDOTATournamentInfo_PhaseGroup::default_instance_;
  delete CMsgDOTATournamentInfo_PhaseGroup_reflection_;
  delete CMsgDOTATournamentInfo_Phase::default_instance_;
  delete CMsgDOTATournamentInfo_Phase_reflection_;
  delete CMsgDOTATournamentInfo_Team::default_instance_;
  delete CMsgDOTATournamentInfo_Team_reflection_;
  delete CMsgDOTATournamentInfo_UpcomingMatch::default_instance_;
  delete CMsgDOTATournamentInfo_UpcomingMatch_reflection_;
  delete CMsgDOTATournamentInfo_News::default_instance_;
  delete CMsgDOTATournamentInfo_News_reflection_;
  delete CMsgRequestWeekendTourneySchedule::default_instance_;
  delete CMsgRequestWeekendTourneySchedule_reflection_;
  delete CMsgWeekendTourneySchedule::default_instance_;
  delete CMsgWeekendTourneySchedule_reflection_;
  delete CMsgWeekendTourneySchedule_Division::default_instance_;
  delete CMsgWeekendTourneySchedule_Division_reflection_;
  delete CMsgWeekendTourneyOpts::default_instance_;
  delete CMsgWeekendTourneyOpts_reflection_;
  delete CMsgWeekendTourneyLeave::default_instance_;
  delete CMsgWeekendTourneyLeave_reflection_;
  delete CMsgDOTATournament::default_instance_;
  delete CMsgDOTATournament_reflection_;
  delete CMsgDOTATournament_Team::default_instance_;
  delete CMsgDOTATournament_Team_reflection_;
  delete CMsgDOTATournament_Game::default_instance_;
  delete CMsgDOTATournament_Game_reflection_;
  delete CMsgDOTATournament_Node::default_instance_;
  delete CMsgDOTATournament_Node_reflection_;
  delete CMsgDOTATournamentStateChange::default_instance_;
  delete CMsgDOTATournamentStateChange_reflection_;
  delete CMsgDOTATournamentStateChange_GameChange::default_instance_;
  delete CMsgDOTATournamentStateChange_GameChange_reflection_;
  delete CMsgDOTATournamentStateChange_TeamChange::default_instance_;
  delete CMsgDOTATournamentStateChange_TeamChange_reflection_;
  delete CMsgDOTATournamentRequest::default_instance_;
  delete CMsgDOTATournamentRequest_reflection_;
  delete CMsgDOTATournamentResponse::default_instance_;
  delete CMsgDOTATournamentResponse_reflection_;
  delete CMsgDOTAClearTournamentGame::default_instance_;
  delete CMsgDOTAClearTournamentGame_reflection_;
  delete CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance_;
  delete CMsgDOTAWeekendTourneyPlayerSkillLevelStats_reflection_;
  delete CMsgDOTAWeekendTourneyPlayerStats::default_instance_;
  delete CMsgDOTAWeekendTourneyPlayerStats_reflection_;
  delete CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance_;
  delete CMsgDOTAWeekendTourneyPlayerStatsRequest_reflection_;
  delete CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance_;
  delete CMsgDOTAWeekendTourneyPlayerHistoryRequest_reflection_;
  delete CMsgDOTAWeekendTourneyPlayerHistory::default_instance_;
  delete CMsgDOTAWeekendTourneyPlayerHistory_reflection_;
  delete CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance_;
  delete CMsgDOTAWeekendTourneyPlayerHistory_Tournament_reflection_;
  delete CMsgDOTAWeekendTourneyParticipationDetails::default_instance_;
  delete CMsgDOTAWeekendTourneyParticipationDetails_reflection_;
  delete CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance_;
  delete CMsgDOTAWeekendTourneyParticipationDetails_Tier_reflection_;
  delete CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance_;
  delete CMsgDOTAWeekendTourneyParticipationDetails_Division_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fclient_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'dota_gcmessages_client_tournament.prot"
    "o\032\027dota_client_enums.proto\"\270\n\n\026CMsgDOTAT"
    "ournamentInfo\022\021\n\tleague_id\030\001 \001(\r\0221\n\nphas"
    "e_list\030\002 \003(\0132\035.CMsgDOTATournamentInfo.Ph"
    "ase\0220\n\nteams_list\030\003 \003(\0132\034.CMsgDOTATourna"
    "mentInfo.Team\022D\n\025upcoming_matches_list\030\004"
    " \003(\0132%.CMsgDOTATournamentInfo.UpcomingMa"
    "tch\022/\n\tnews_list\030\005 \003(\0132\034.CMsgDOTATournam"
    "entInfo.News\0322\n\nPhaseGroup\022\020\n\010group_id\030\001"
    " \001(\r\022\022\n\ngroup_name\030\002 \001(\t\032\272\001\n\005Phase\022\020\n\010ph"
    "ase_id\030\001 \001(\r\022\022\n\nphase_name\030\002 \001(\t\022\017\n\007type"
    "_id\030\003 \001(\r\022\022\n\niterations\030\004 \001(\r\022\026\n\016min_sta"
    "rt_time\030\005 \001(\r\022\026\n\016max_start_time\030\006 \001(\r\0226\n"
    "\ngroup_list\030\007 \003(\0132\".CMsgDOTATournamentIn"
    "fo.PhaseGroup\032Y\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\014"
    "\n\004name\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022\021\n\tteam_logo\030\004"
    " \001(\004\022\022\n\neliminated\030\005 \001(\010\032\233\005\n\rUpcomingMat"
    "ch\022\021\n\tseries_id\030\001 \001(\r\022\020\n\010team1_id\030\002 \001(\r\022"
    "\020\n\010team2_id\030\003 \001(\r\022\n\n\002bo\030\004 \001(\r\022\022\n\nstage_n"
    "ame\030\005 \001(\t\022\022\n\nstart_time\030\006 \001(\r\022\024\n\014winner_"
    "stage\030\007 \001(\t\022\023\n\013loser_stage\030\010 \001(\t\022\021\n\tteam"
    "1_tag\030\t \001(\t\022\021\n\tteam2_tag\030\n \001(\t\022\037\n\027team1_"
    "prev_opponent_tag\030\013 \001(\t\022\037\n\027team2_prev_op"
    "ponent_tag\030\014 \001(\t\022\022\n\nteam1_logo\030\r \001(\004\022\022\n\n"
    "team2_logo\030\016 \001(\004\022 \n\030team1_prev_opponent_"
    "logo\030\017 \001(\004\022 \n\030team2_prev_opponent_logo\030\020"
    " \001(\004\022\036\n\026team1_prev_opponent_id\030\021 \001(\r\022\036\n\026"
    "team2_prev_opponent_id\030\022 \001(\r\022\036\n\026team1_pr"
    "ev_match_score\030\023 \001(\r\022\'\n\037team1_prev_match"
    "_opponent_score\030\024 \001(\r\022\036\n\026team2_prev_matc"
    "h_score\030\025 \001(\r\022\'\n\037team2_prev_match_oppone"
    "nt_score\030\026 \001(\r\022\022\n\nphase_type\030\027 \001(\r\022\023\n\013te"
    "am1_score\030\030 \001(\r\022\023\n\013team2_score\030\031 \001(\r\022\020\n\010"
    "phase_id\030\032 \001(\r\032E\n\004News\022\014\n\004link\030\001 \001(\t\022\r\n\005"
    "title\030\002 \001(\t\022\r\n\005image\030\003 \001(\t\022\021\n\ttimestamp\030"
    "\004 \001(\r\"#\n!CMsgRequestWeekendTourneySchedu"
    "le\"\314\001\n\032CMsgWeekendTourneySchedule\0227\n\tdiv"
    "isions\030\001 \003(\0132$.CMsgWeekendTourneySchedul"
    "e.Division\032u\n\010Division\022\025\n\rdivision_code\030"
    "\001 \001(\r\022\030\n\020time_window_open\030\002 \001(\r\022\031\n\021time_"
    "window_close\030\003 \001(\r\022\035\n\025time_window_open_n"
    "ext\030\004 \001(\r\"\303\001\n\026CMsgWeekendTourneyOpts\022\025\n\r"
    "participating\030\001 \001(\010\022\023\n\013division_id\030\002 \001(\r"
    "\022\r\n\005buyin\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\024\n\014"
    "match_groups\030\005 \001(\r\022\017\n\007team_id\030\006 \001(\r\022\030\n\020p"
    "ickup_team_name\030\007 \001(\t\022\030\n\020pickup_team_log"
    "o\030\010 \001(\004\"\031\n\027CMsgWeekendTourneyLeave\"\340\007\n\022C"
    "MsgDOTATournament\022\025\n\rtournament_id\030\001 \001(\r"
    "\022\023\n\013division_id\030\002 \001(\r\022\025\n\rschedule_time\030\003"
    " \001(\r\022\023\n\013skill_level\030\004 \001(\r\022M\n\023tournament_"
    "template\030\005 \001(\0162\024.ETournamentTemplate:\032k_"
    "ETournamentTemplate_None\022<\n\005state\030\006 \001(\0162"
    "\021.ETournamentState:\032k_ETournamentState_U"
    "nknown\022\025\n\rstate_seq_num\030\n \001(\r\022\030\n\020season_"
    "trophy_id\030\013 \001(\r\022\'\n\005teams\030\007 \003(\0132\030.CMsgDOT"
    "ATournament.Team\022\'\n\005games\030\010 \003(\0132\030.CMsgDO"
    "TATournament.Game\022\'\n\005nodes\030\t \003(\0132\030.CMsgD"
    "OTATournament.Node\032\375\001\n\004Team\022\020\n\010team_gid\030"
    "\001 \001(\006\022\025\n\rnode_or_state\030\002 \001(\r\022\023\n\007players\030"
    "\003 \003(\rB\002\020\001\022\030\n\014player_buyin\030\t \003(\rB\002\020\001\022\036\n\022p"
    "layer_skill_level\030\n \003(\rB\002\020\001\022\030\n\020match_gro"
    "up_mask\030\014 \001(\r\022\017\n\007team_id\030\004 \001(\r\022\021\n\tteam_n"
    "ame\030\005 \001(\t\022\026\n\016team_base_logo\030\007 \001(\004\022\024\n\014tea"
    "m_ui_logo\030\010 \001(\004\022\021\n\tteam_date\030\013 \001(\r\032\253\001\n\004G"
    "ame\022\020\n\010node_idx\030\001 \001(\r\022\020\n\010lobby_id\030\002 \001(\006\022"
    "\020\n\010match_id\030\003 \001(\004\022\023\n\013team_a_good\030\004 \001(\010\022D"
    "\n\005state\030\005 \001(\0162\025.ETournamentGameState:\036k_"
    "ETournamentGameState_Unknown\022\022\n\nstart_ti"
    "me\030\006 \001(\r\032\212\001\n\004Node\022\017\n\007node_id\030\001 \001(\r\022\022\n\nte"
    "am_idx_a\030\002 \001(\r\022\022\n\nteam_idx_b\030\003 \001(\r\022I\n\nno"
    "de_state\030\004 \001(\0162\025.ETournamentNodeState:\036k"
    "_ETournamentNodeState_Unknown\"\276\004\n\035CMsgDO"
    "TATournamentStateChange\022\031\n\021new_tournamen"
    "t_id\030\001 \001(\r\0229\n\005event\030\002 \001(\0162\021.ETournamentE"
    "vent:\027k_ETournamentEvent_None\022K\n\024new_tou"
    "rnament_state\030\003 \001(\0162\021.ETournamentState:\032"
    "k_ETournamentState_Unknown\022\?\n\014game_chang"
    "es\030\004 \003(\0132).CMsgDOTATournamentStateChange"
    ".GameChange\022\?\n\014team_changes\030\005 \003(\0132).CMsg"
    "DOTATournamentStateChange.TeamChange\022!\n\025"
    "merged_tournament_ids\030\006 \003(\rB\002\020\001\022\025\n\rstate"
    "_seq_num\030\007 \001(\r\032h\n\nGameChange\022\020\n\010match_id"
    "\030\001 \001(\004\022H\n\tnew_state\030\002 \001(\0162\025.ETournamentG"
    "ameState:\036k_ETournamentGameState_Unknown"
    "\032T\n\nTeamChange\022\020\n\010team_gid\030\001 \001(\004\022\031\n\021new_"
    "node_or_state\030\002 \001(\r\022\031\n\021old_node_or_state"
    "\030\003 \001(\r\"Q\n\031CMsgDOTATournamentRequest\022\025\n\rt"
    "ournament_id\030\001 \001(\r\022\035\n\025client_tournament_"
    "gid\030\002 \001(\004\"X\n\032CMsgDOTATournamentResponse\022"
    "\021\n\006result\030\001 \001(\r:\0012\022\'\n\ntournament\030\002 \001(\0132\023"
    ".CMsgDOTATournament\"E\n\033CMsgDOTAClearTour"
    "namentGame\022\025\n\rtournament_id\030\001 \001(\r\022\017\n\007gam"
    "e_id\030\002 \001(\r\"\365\001\n+CMsgDOTAWeekendTourneyPla"
    "yerSkillLevelStats\022\023\n\013skill_level\030\001 \001(\r\022"
    "\023\n\013times_won_0\030\002 \001(\r\022\023\n\013times_won_1\030\003 \001("
    "\r\022\023\n\013times_won_2\030\004 \001(\r\022\023\n\013times_won_3\030\005 "
    "\001(\r\022\032\n\022times_bye_and_lost\030\006 \001(\r\022\031\n\021times"
    "_bye_and_won\030\007 \001(\r\022\027\n\017total_games_won\030\010 "
    "\001(\r\022\r\n\005score\030\t \001(\r\"\253\001\n!CMsgDOTAWeekendTo"
    "urneyPlayerStats\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020"
    "season_trophy_id\030\002 \001(\r\022B\n\014skill_levels\030\003"
    " \003(\0132,.CMsgDOTAWeekendTourneyPlayerSkill"
    "LevelStats\022\024\n\014current_tier\030\004 \001(\r\"X\n(CMsg"
    "DOTAWeekendTourneyPlayerStatsRequest\022\022\n\n"
    "account_id\030\001 \001(\r\022\030\n\020season_trophy_id\030\002 \001"
    "(\r\"Z\n*CMsgDOTAWeekendTourneyPlayerHistor"
    "yRequest\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020season_t"
    "rophy_id\030\002 \001(\r\"\314\002\n#CMsgDOTAWeekendTourne"
    "yPlayerHistory\022\022\n\naccount_id\030\001 \001(\r\022D\n\013to"
    "urnaments\030\003 \003(\0132/.CMsgDOTAWeekendTourney"
    "PlayerHistory.Tournament\032\312\001\n\nTournament\022"
    "\025\n\rtournament_id\030\001 \001(\r\022\022\n\nstart_time\030\002 \001"
    "(\r\022\027\n\017tournament_tier\030\003 \001(\r\022\017\n\007team_id\030\004"
    " \001(\r\022\021\n\tteam_date\030\005 \001(\r\022\023\n\013team_result\030\006"
    " \001(\r\022\022\n\naccount_id\030\007 \003(\r\022\021\n\tteam_name\030\010 "
    "\001(\t\022\030\n\020season_trophy_id\030\t \001(\r\"\244\003\n*CMsgDO"
    "TAWeekendTourneyParticipationDetails\022G\n\t"
    "divisions\030\001 \003(\01324.CMsgDOTAWeekendTourney"
    "ParticipationDetails.Division\032\263\001\n\004Tier\022\014"
    "\n\004tier\030\001 \001(\r\022\017\n\007players\030\002 \001(\r\022\r\n\005teams\030\003"
    " \001(\r\022\025\n\rwinning_teams\030\004 \001(\r\022\030\n\020players_s"
    "treak_2\030\005 \001(\r\022\030\n\020players_streak_3\030\006 \001(\r\022"
    "\030\n\020players_streak_4\030\007 \001(\r\022\030\n\020players_str"
    "eak_5\030\010 \001(\r\032w\n\010Division\022\023\n\013division_id\030\001"
    " \001(\r\022\025\n\rschedule_time\030\002 \001(\r\022\?\n\005tiers\030\003 \003"
    "(\01320.CMsgDOTAWeekendTourneyParticipation"
    "Details.Tier*\365\003\n\020ETournamentEvent\022\033\n\027k_E"
    "TournamentEvent_None\020\000\022(\n$k_ETournamentE"
    "vent_TournamentCreated\020\001\022(\n$k_ETournamen"
    "tEvent_TournamentsMerged\020\002\022\"\n\036k_ETournam"
    "entEvent_GameOutcome\020\003\022#\n\037k_ETournamentE"
    "vent_TeamGivenBye\020\004\0220\n,k_ETournamentEven"
    "t_TournamentCanceledByAdmin\020\005\022$\n k_ETour"
    "namentEvent_TeamAbandoned\020\006\022+\n\'k_ETourna"
    "mentEvent_ScheduledGameStarted\020\007\022\037\n\033k_ET"
    "ournamentEvent_Canceled\020\010\022\?\n;k_ETourname"
    "ntEvent_TeamParticipationTimedOut_EntryF"
    "eeRefund\020\t\022@\n<k_ETournamentEvent_TeamPar"
    "ticipationTimedOut_EntryFeeForfeit\020\nB\005H\001"
    "\200\001\000", 5563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_tournament.proto", &protobuf_RegisterTypes);
  CMsgDOTATournamentInfo::default_instance_ = new CMsgDOTATournamentInfo();
  CMsgDOTATournamentInfo_PhaseGroup::default_instance_ = new CMsgDOTATournamentInfo_PhaseGroup();
  CMsgDOTATournamentInfo_Phase::default_instance_ = new CMsgDOTATournamentInfo_Phase();
  CMsgDOTATournamentInfo_Team::default_instance_ = new CMsgDOTATournamentInfo_Team();
  CMsgDOTATournamentInfo_UpcomingMatch::default_instance_ = new CMsgDOTATournamentInfo_UpcomingMatch();
  CMsgDOTATournamentInfo_News::default_instance_ = new CMsgDOTATournamentInfo_News();
  CMsgRequestWeekendTourneySchedule::default_instance_ = new CMsgRequestWeekendTourneySchedule();
  CMsgWeekendTourneySchedule::default_instance_ = new CMsgWeekendTourneySchedule();
  CMsgWeekendTourneySchedule_Division::default_instance_ = new CMsgWeekendTourneySchedule_Division();
  CMsgWeekendTourneyOpts::default_instance_ = new CMsgWeekendTourneyOpts();
  CMsgWeekendTourneyLeave::default_instance_ = new CMsgWeekendTourneyLeave();
  CMsgDOTATournament::default_instance_ = new CMsgDOTATournament();
  CMsgDOTATournament_Team::default_instance_ = new CMsgDOTATournament_Team();
  CMsgDOTATournament_Game::default_instance_ = new CMsgDOTATournament_Game();
  CMsgDOTATournament_Node::default_instance_ = new CMsgDOTATournament_Node();
  CMsgDOTATournamentStateChange::default_instance_ = new CMsgDOTATournamentStateChange();
  CMsgDOTATournamentStateChange_GameChange::default_instance_ = new CMsgDOTATournamentStateChange_GameChange();
  CMsgDOTATournamentStateChange_TeamChange::default_instance_ = new CMsgDOTATournamentStateChange_TeamChange();
  CMsgDOTATournamentRequest::default_instance_ = new CMsgDOTATournamentRequest();
  CMsgDOTATournamentResponse::default_instance_ = new CMsgDOTATournamentResponse();
  CMsgDOTAClearTournamentGame::default_instance_ = new CMsgDOTAClearTournamentGame();
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance_ = new CMsgDOTAWeekendTourneyPlayerSkillLevelStats();
  CMsgDOTAWeekendTourneyPlayerStats::default_instance_ = new CMsgDOTAWeekendTourneyPlayerStats();
  CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance_ = new CMsgDOTAWeekendTourneyPlayerStatsRequest();
  CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance_ = new CMsgDOTAWeekendTourneyPlayerHistoryRequest();
  CMsgDOTAWeekendTourneyPlayerHistory::default_instance_ = new CMsgDOTAWeekendTourneyPlayerHistory();
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance_ = new CMsgDOTAWeekendTourneyPlayerHistory_Tournament();
  CMsgDOTAWeekendTourneyParticipationDetails::default_instance_ = new CMsgDOTAWeekendTourneyParticipationDetails();
  CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance_ = new CMsgDOTAWeekendTourneyParticipationDetails_Tier();
  CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance_ = new CMsgDOTAWeekendTourneyParticipationDetails_Division();
  CMsgDOTATournamentInfo::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentInfo_PhaseGroup::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentInfo_Phase::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentInfo_Team::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentInfo_UpcomingMatch::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentInfo_News::default_instance_->InitAsDefaultInstance();
  CMsgRequestWeekendTourneySchedule::default_instance_->InitAsDefaultInstance();
  CMsgWeekendTourneySchedule::default_instance_->InitAsDefaultInstance();
  CMsgWeekendTourneySchedule_Division::default_instance_->InitAsDefaultInstance();
  CMsgWeekendTourneyOpts::default_instance_->InitAsDefaultInstance();
  CMsgWeekendTourneyLeave::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament_Team::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament_Game::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournament_Node::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentStateChange::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentStateChange_GameChange::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentStateChange_TeamChange::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTATournamentResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAClearTournamentGame::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyPlayerStats::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyPlayerHistory::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyParticipationDetails::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance_->InitAsDefaultInstance();
  CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5ftournament_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5ftournament_2eproto_;
const ::google::protobuf::EnumDescriptor* ETournamentEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETournamentEvent_descriptor_;
}
bool ETournamentEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournamentInfo_PhaseGroup::kGroupIdFieldNumber;
const int CMsgDOTATournamentInfo_PhaseGroup::kGroupNameFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentInfo.PhaseGroup)
}

void CMsgDOTATournamentInfo_PhaseGroup::InitAsDefaultInstance() {
}

CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup(const CMsgDOTATournamentInfo_PhaseGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.PhaseGroup)
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentInfo_PhaseGroup::~CMsgDOTATournamentInfo_PhaseGroup() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.PhaseGroup)
  SharedDtor();
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_PhaseGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentInfo_PhaseGroup_descriptor_;
}

const CMsgDOTATournamentInfo_PhaseGroup& CMsgDOTATournamentInfo_PhaseGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_PhaseGroup::default_instance_ = NULL;

CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_PhaseGroup::New() const {
  return new CMsgDOTATournamentInfo_PhaseGroup;
}

void CMsgDOTATournamentInfo_PhaseGroup::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    group_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentInfo_PhaseGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentInfo.PhaseGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // optional string group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentInfo.PhaseGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentInfo.PhaseGroup)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_PhaseGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentInfo.PhaseGroup)
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentInfo.PhaseGroup)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_PhaseGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.PhaseGroup)
  // optional uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.PhaseGroup)
  return target;
}

int CMsgDOTATournamentInfo_PhaseGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_PhaseGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentInfo_PhaseGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_PhaseGroup::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentInfo_PhaseGroup::Swap(CMsgDOTATournamentInfo_PhaseGroup* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_PhaseGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentInfo_PhaseGroup_descriptor_;
  metadata.reflection = CMsgDOTATournamentInfo_PhaseGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentInfo_Phase::kPhaseIdFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kPhaseNameFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kTypeIdFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kIterationsFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kMinStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kMaxStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kGroupListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentInfo.Phase)
}

void CMsgDOTATournamentInfo_Phase::InitAsDefaultInstance() {
}

CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase(const CMsgDOTATournamentInfo_Phase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.Phase)
}

void CMsgDOTATournamentInfo_Phase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_id_ = 0u;
  phase_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_id_ = 0u;
  iterations_ = 0u;
  min_start_time_ = 0u;
  max_start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentInfo_Phase::~CMsgDOTATournamentInfo_Phase() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.Phase)
  SharedDtor();
}

void CMsgDOTATournamentInfo_Phase::SharedDtor() {
  if (phase_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phase_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentInfo_Phase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_Phase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentInfo_Phase_descriptor_;
}

const CMsgDOTATournamentInfo_Phase& CMsgDOTATournamentInfo_Phase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo_Phase::default_instance_ = NULL;

CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo_Phase::New() const {
  return new CMsgDOTATournamentInfo_Phase;
}

void CMsgDOTATournamentInfo_Phase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentInfo_Phase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(phase_id_, min_start_time_);
    if (has_phase_name()) {
      if (phase_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phase_name_->clear();
      }
    }
    max_start_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentInfo_Phase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentInfo.Phase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
          set_has_phase_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phase_name;
        break;
      }

      // optional string phase_name = 2;
      case 2: {
        if (tag == 18) {
         parse_phase_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phase_name().data(), this->phase_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phase_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type_id;
        break;
      }

      // optional uint32 type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iterations;
        break;
      }

      // optional uint32 iterations = 4;
      case 4: {
        if (tag == 32) {
         parse_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iterations_)));
          set_has_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_start_time;
        break;
      }

      // optional uint32 min_start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_min_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_start_time_)));
          set_has_min_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_start_time;
        break;
      }

      // optional uint32 max_start_time = 6;
      case 6: {
        if (tag == 48) {
         parse_max_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_start_time_)));
          set_has_max_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_list;
        break;
      }

      // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
      case 7: {
        if (tag == 58) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_group_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentInfo.Phase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentInfo.Phase)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_Phase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentInfo.Phase)
  // optional uint32 phase_id = 1;
  if (has_phase_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase_id(), output);
  }

  // optional string phase_name = 2;
  if (has_phase_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase_name().data(), this->phase_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phase_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phase_name(), output);
  }

  // optional uint32 type_id = 3;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type_id(), output);
  }

  // optional uint32 iterations = 4;
  if (has_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iterations(), output);
  }

  // optional uint32 min_start_time = 5;
  if (has_min_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_start_time(), output);
  }

  // optional uint32 max_start_time = 6;
  if (has_max_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_start_time(), output);
  }

  // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->group_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentInfo.Phase)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_Phase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.Phase)
  // optional uint32 phase_id = 1;
  if (has_phase_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase_id(), target);
  }

  // optional string phase_name = 2;
  if (has_phase_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase_name().data(), this->phase_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phase_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phase_name(), target);
  }

  // optional uint32 type_id = 3;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type_id(), target);
  }

  // optional uint32 iterations = 4;
  if (has_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iterations(), target);
  }

  // optional uint32 min_start_time = 5;
  if (has_min_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min_start_time(), target);
  }

  // optional uint32 max_start_time = 6;
  if (has_max_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_start_time(), target);
  }

  // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->group_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.Phase)
  return target;
}

int CMsgDOTATournamentInfo_Phase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 phase_id = 1;
    if (has_phase_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_id());
    }

    // optional string phase_name = 2;
    if (has_phase_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phase_name());
    }

    // optional uint32 type_id = 3;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

    // optional uint32 iterations = 4;
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iterations());
    }

    // optional uint32 min_start_time = 5;
    if (has_min_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_start_time());
    }

    // optional uint32 max_start_time = 6;
    if (has_max_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_start_time());
    }

  }
  // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Phase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentInfo_Phase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const CMsgDOTATournamentInfo_Phase& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase_id()) {
      set_phase_id(from.phase_id());
    }
    if (from.has_phase_name()) {
      set_phase_name(from.phase_name());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_iterations()) {
      set_iterations(from.iterations());
    }
    if (from.has_min_start_time()) {
      set_min_start_time(from.min_start_time());
    }
    if (from.has_max_start_time()) {
      set_max_start_time(from.max_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const CMsgDOTATournamentInfo_Phase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Phase::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentInfo_Phase::Swap(CMsgDOTATournamentInfo_Phase* other) {
  if (other != this) {
    std::swap(phase_id_, other->phase_id_);
    std::swap(phase_name_, other->phase_name_);
    std::swap(type_id_, other->type_id_);
    std::swap(iterations_, other->iterations_);
    std::swap(min_start_time_, other->min_start_time_);
    std::swap(max_start_time_, other->max_start_time_);
    group_list_.Swap(&other->group_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_Phase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentInfo_Phase_descriptor_;
  metadata.reflection = CMsgDOTATournamentInfo_Phase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentInfo_Team::kTeamIdFieldNumber;
const int CMsgDOTATournamentInfo_Team::kNameFieldNumber;
const int CMsgDOTATournamentInfo_Team::kTagFieldNumber;
const int CMsgDOTATournamentInfo_Team::kTeamLogoFieldNumber;
const int CMsgDOTATournamentInfo_Team::kEliminatedFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentInfo.Team)
}

void CMsgDOTATournamentInfo_Team::InitAsDefaultInstance() {
}

CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team(const CMsgDOTATournamentInfo_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.Team)
}

void CMsgDOTATournamentInfo_Team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_ = GOOGLE_ULONGLONG(0);
  eliminated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentInfo_Team::~CMsgDOTATournamentInfo_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.Team)
  SharedDtor();
}

void CMsgDOTATournamentInfo_Team::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentInfo_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentInfo_Team_descriptor_;
}

const CMsgDOTATournamentInfo_Team& CMsgDOTATournamentInfo_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo_Team::default_instance_ = NULL;

CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo_Team::New() const {
  return new CMsgDOTATournamentInfo_Team;
}

void CMsgDOTATournamentInfo_Team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentInfo_Team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(team_id_, team_logo_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentInfo_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentInfo.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_logo;
        break;
      }

      // optional uint64 team_logo = 4;
      case 4: {
        if (tag == 32) {
         parse_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
          set_has_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_eliminated;
        break;
      }

      // optional bool eliminated = 5;
      case 5: {
        if (tag == 40) {
         parse_eliminated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eliminated_)));
          set_has_eliminated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentInfo.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentInfo.Team)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentInfo.Team)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint64 team_logo = 4;
  if (has_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_logo(), output);
  }

  // optional bool eliminated = 5;
  if (has_eliminated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->eliminated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentInfo.Team)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.Team)
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint64 team_logo = 4;
  if (has_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_logo(), target);
  }

  // optional bool eliminated = 5;
  if (has_eliminated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->eliminated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.Team)
  return target;
}

int CMsgDOTATournamentInfo_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional bool eliminated = 5;
    if (has_eliminated()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentInfo_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const CMsgDOTATournamentInfo_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_team_logo()) {
      set_team_logo(from.team_logo());
    }
    if (from.has_eliminated()) {
      set_eliminated(from.eliminated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const CMsgDOTATournamentInfo_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Team::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentInfo_Team::Swap(CMsgDOTATournamentInfo_Team* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(team_logo_, other->team_logo_);
    std::swap(eliminated_, other->eliminated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentInfo_Team_descriptor_;
  metadata.reflection = CMsgDOTATournamentInfo_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentInfo_UpcomingMatch::kSeriesIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1IdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2IdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kBoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kStageNameFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kWinnerStageFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kLoserStageFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1TagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2TagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentTagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentTagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1LogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2LogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentLogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentLogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevMatchScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevMatchOpponentScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevMatchScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevMatchOpponentScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kPhaseTypeFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1ScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2ScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kPhaseIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentInfo.UpcomingMatch)
}

void CMsgDOTATournamentInfo_UpcomingMatch::InitAsDefaultInstance() {
}

CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch(const CMsgDOTATournamentInfo_UpcomingMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.UpcomingMatch)
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  series_id_ = 0u;
  team1_id_ = 0u;
  team2_id_ = 0u;
  bo_ = 0u;
  stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = 0u;
  winner_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loser_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_prev_opponent_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_prev_opponent_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_logo_ = GOOGLE_ULONGLONG(0);
  team2_logo_ = GOOGLE_ULONGLONG(0);
  team1_prev_opponent_logo_ = GOOGLE_ULONGLONG(0);
  team2_prev_opponent_logo_ = GOOGLE_ULONGLONG(0);
  team1_prev_opponent_id_ = 0u;
  team2_prev_opponent_id_ = 0u;
  team1_prev_match_score_ = 0u;
  team1_prev_match_opponent_score_ = 0u;
  team2_prev_match_score_ = 0u;
  team2_prev_match_opponent_score_ = 0u;
  phase_type_ = 0u;
  team1_score_ = 0u;
  team2_score_ = 0u;
  phase_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentInfo_UpcomingMatch::~CMsgDOTATournamentInfo_UpcomingMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.UpcomingMatch)
  SharedDtor();
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedDtor() {
  if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stage_name_;
  }
  if (winner_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete winner_stage_;
  }
  if (loser_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loser_stage_;
  }
  if (team1_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team1_tag_;
  }
  if (team2_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team2_tag_;
  }
  if (team1_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team1_prev_opponent_tag_;
  }
  if (team2_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team2_prev_opponent_tag_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_UpcomingMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentInfo_UpcomingMatch_descriptor_;
}

const CMsgDOTATournamentInfo_UpcomingMatch& CMsgDOTATournamentInfo_UpcomingMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo_UpcomingMatch::default_instance_ = NULL;

CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo_UpcomingMatch::New() const {
  return new CMsgDOTATournamentInfo_UpcomingMatch;
}

void CMsgDOTATournamentInfo_UpcomingMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentInfo_UpcomingMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(series_id_, bo_);
    if (has_stage_name()) {
      if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stage_name_->clear();
      }
    }
    start_time_ = 0u;
    if (has_winner_stage()) {
      if (winner_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        winner_stage_->clear();
      }
    }
    if (has_loser_stage()) {
      if (loser_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loser_stage_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(team1_logo_, team2_prev_opponent_logo_);
    if (has_team1_tag()) {
      if (team1_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team1_tag_->clear();
      }
    }
    if (has_team2_tag()) {
      if (team2_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team2_tag_->clear();
      }
    }
    if (has_team1_prev_opponent_tag()) {
      if (team1_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team1_prev_opponent_tag_->clear();
      }
    }
    if (has_team2_prev_opponent_tag()) {
      if (team2_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team2_prev_opponent_tag_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(team2_prev_opponent_id_, team1_score_);
    team1_prev_opponent_id_ = 0u;
  }
  ZR_(team2_score_, phase_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentInfo_UpcomingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentInfo.UpcomingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 series_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team1_id;
        break;
      }

      // optional uint32 team1_id = 2;
      case 2: {
        if (tag == 16) {
         parse_team1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_id_)));
          set_has_team1_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team2_id;
        break;
      }

      // optional uint32 team2_id = 3;
      case 3: {
        if (tag == 24) {
         parse_team2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_id_)));
          set_has_team2_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bo;
        break;
      }

      // optional uint32 bo = 4;
      case 4: {
        if (tag == 32) {
         parse_bo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bo_)));
          set_has_bo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stage_name;
        break;
      }

      // optional string stage_name = 5;
      case 5: {
        if (tag == 42) {
         parse_stage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage_name().data(), this->stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 6;
      case 6: {
        if (tag == 48) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_winner_stage;
        break;
      }

      // optional string winner_stage = 7;
      case 7: {
        if (tag == 58) {
         parse_winner_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winner_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winner_stage().data(), this->winner_stage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "winner_stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loser_stage;
        break;
      }

      // optional string loser_stage = 8;
      case 8: {
        if (tag == 66) {
         parse_loser_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loser_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loser_stage().data(), this->loser_stage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loser_stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_team1_tag;
        break;
      }

      // optional string team1_tag = 9;
      case 9: {
        if (tag == 74) {
         parse_team1_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1_tag().data(), this->team1_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team1_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_team2_tag;
        break;
      }

      // optional string team2_tag = 10;
      case 10: {
        if (tag == 82) {
         parse_team2_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2_tag().data(), this->team2_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team2_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_team1_prev_opponent_tag;
        break;
      }

      // optional string team1_prev_opponent_tag = 11;
      case 11: {
        if (tag == 90) {
         parse_team1_prev_opponent_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1_prev_opponent_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1_prev_opponent_tag().data(), this->team1_prev_opponent_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team1_prev_opponent_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_team2_prev_opponent_tag;
        break;
      }

      // optional string team2_prev_opponent_tag = 12;
      case 12: {
        if (tag == 98) {
         parse_team2_prev_opponent_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2_prev_opponent_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2_prev_opponent_tag().data(), this->team2_prev_opponent_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team2_prev_opponent_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_team1_logo;
        break;
      }

      // optional uint64 team1_logo = 13;
      case 13: {
        if (tag == 104) {
         parse_team1_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team1_logo_)));
          set_has_team1_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_team2_logo;
        break;
      }

      // optional uint64 team2_logo = 14;
      case 14: {
        if (tag == 112) {
         parse_team2_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team2_logo_)));
          set_has_team2_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_team1_prev_opponent_logo;
        break;
      }

      // optional uint64 team1_prev_opponent_logo = 15;
      case 15: {
        if (tag == 120) {
         parse_team1_prev_opponent_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team1_prev_opponent_logo_)));
          set_has_team1_prev_opponent_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_team2_prev_opponent_logo;
        break;
      }

      // optional uint64 team2_prev_opponent_logo = 16;
      case 16: {
        if (tag == 128) {
         parse_team2_prev_opponent_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team2_prev_opponent_logo_)));
          set_has_team2_prev_opponent_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_team1_prev_opponent_id;
        break;
      }

      // optional uint32 team1_prev_opponent_id = 17;
      case 17: {
        if (tag == 136) {
         parse_team1_prev_opponent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_opponent_id_)));
          set_has_team1_prev_opponent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_team2_prev_opponent_id;
        break;
      }

      // optional uint32 team2_prev_opponent_id = 18;
      case 18: {
        if (tag == 144) {
         parse_team2_prev_opponent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_opponent_id_)));
          set_has_team2_prev_opponent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_team1_prev_match_score;
        break;
      }

      // optional uint32 team1_prev_match_score = 19;
      case 19: {
        if (tag == 152) {
         parse_team1_prev_match_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_match_score_)));
          set_has_team1_prev_match_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_team1_prev_match_opponent_score;
        break;
      }

      // optional uint32 team1_prev_match_opponent_score = 20;
      case 20: {
        if (tag == 160) {
         parse_team1_prev_match_opponent_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_match_opponent_score_)));
          set_has_team1_prev_match_opponent_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_team2_prev_match_score;
        break;
      }

      // optional uint32 team2_prev_match_score = 21;
      case 21: {
        if (tag == 168) {
         parse_team2_prev_match_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_match_score_)));
          set_has_team2_prev_match_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_team2_prev_match_opponent_score;
        break;
      }

      // optional uint32 team2_prev_match_opponent_score = 22;
      case 22: {
        if (tag == 176) {
         parse_team2_prev_match_opponent_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_match_opponent_score_)));
          set_has_team2_prev_match_opponent_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_phase_type;
        break;
      }

      // optional uint32 phase_type = 23;
      case 23: {
        if (tag == 184) {
         parse_phase_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_type_)));
          set_has_phase_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_team1_score;
        break;
      }

      // optional uint32 team1_score = 24;
      case 24: {
        if (tag == 192) {
         parse_team1_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
          set_has_team1_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_team2_score;
        break;
      }

      // optional uint32 team2_score = 25;
      case 25: {
        if (tag == 200) {
         parse_team2_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
          set_has_team2_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_phase_id;
        break;
      }

      // optional uint32 phase_id = 26;
      case 26: {
        if (tag == 208) {
         parse_phase_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
          set_has_phase_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentInfo.UpcomingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentInfo.UpcomingMatch)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_UpcomingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentInfo.UpcomingMatch)
  // optional uint32 series_id = 1;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->series_id(), output);
  }

  // optional uint32 team1_id = 2;
  if (has_team1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team1_id(), output);
  }

  // optional uint32 team2_id = 3;
  if (has_team2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team2_id(), output);
  }

  // optional uint32 bo = 4;
  if (has_bo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bo(), output);
  }

  // optional string stage_name = 5;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stage_name(), output);
  }

  // optional uint32 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }

  // optional string winner_stage = 7;
  if (has_winner_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_stage().data(), this->winner_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "winner_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->winner_stage(), output);
  }

  // optional string loser_stage = 8;
  if (has_loser_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loser_stage().data(), this->loser_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loser_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->loser_stage(), output);
  }

  // optional string team1_tag = 9;
  if (has_team1_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_tag().data(), this->team1_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team1_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->team1_tag(), output);
  }

  // optional string team2_tag = 10;
  if (has_team2_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_tag().data(), this->team2_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team2_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->team2_tag(), output);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (has_team1_prev_opponent_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_prev_opponent_tag().data(), this->team1_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team1_prev_opponent_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->team1_prev_opponent_tag(), output);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (has_team2_prev_opponent_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_prev_opponent_tag().data(), this->team2_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team2_prev_opponent_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->team2_prev_opponent_tag(), output);
  }

  // optional uint64 team1_logo = 13;
  if (has_team1_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->team1_logo(), output);
  }

  // optional uint64 team2_logo = 14;
  if (has_team2_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->team2_logo(), output);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (has_team1_prev_opponent_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->team1_prev_opponent_logo(), output);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (has_team2_prev_opponent_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->team2_prev_opponent_logo(), output);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (has_team1_prev_opponent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->team1_prev_opponent_id(), output);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (has_team2_prev_opponent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->team2_prev_opponent_id(), output);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (has_team1_prev_match_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->team1_prev_match_score(), output);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (has_team1_prev_match_opponent_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->team1_prev_match_opponent_score(), output);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (has_team2_prev_match_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->team2_prev_match_score(), output);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (has_team2_prev_match_opponent_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->team2_prev_match_opponent_score(), output);
  }

  // optional uint32 phase_type = 23;
  if (has_phase_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->phase_type(), output);
  }

  // optional uint32 team1_score = 24;
  if (has_team1_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->team1_score(), output);
  }

  // optional uint32 team2_score = 25;
  if (has_team2_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->team2_score(), output);
  }

  // optional uint32 phase_id = 26;
  if (has_phase_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->phase_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentInfo.UpcomingMatch)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_UpcomingMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.UpcomingMatch)
  // optional uint32 series_id = 1;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->series_id(), target);
  }

  // optional uint32 team1_id = 2;
  if (has_team1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team1_id(), target);
  }

  // optional uint32 team2_id = 3;
  if (has_team2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team2_id(), target);
  }

  // optional uint32 bo = 4;
  if (has_bo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bo(), target);
  }

  // optional string stage_name = 5;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stage_name(), target);
  }

  // optional uint32 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }

  // optional string winner_stage = 7;
  if (has_winner_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_stage().data(), this->winner_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "winner_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->winner_stage(), target);
  }

  // optional string loser_stage = 8;
  if (has_loser_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loser_stage().data(), this->loser_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loser_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->loser_stage(), target);
  }

  // optional string team1_tag = 9;
  if (has_team1_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_tag().data(), this->team1_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team1_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team1_tag(), target);
  }

  // optional string team2_tag = 10;
  if (has_team2_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_tag().data(), this->team2_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team2_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->team2_tag(), target);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (has_team1_prev_opponent_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_prev_opponent_tag().data(), this->team1_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team1_prev_opponent_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->team1_prev_opponent_tag(), target);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (has_team2_prev_opponent_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_prev_opponent_tag().data(), this->team2_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team2_prev_opponent_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->team2_prev_opponent_tag(), target);
  }

  // optional uint64 team1_logo = 13;
  if (has_team1_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->team1_logo(), target);
  }

  // optional uint64 team2_logo = 14;
  if (has_team2_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->team2_logo(), target);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (has_team1_prev_opponent_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->team1_prev_opponent_logo(), target);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (has_team2_prev_opponent_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->team2_prev_opponent_logo(), target);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (has_team1_prev_opponent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->team1_prev_opponent_id(), target);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (has_team2_prev_opponent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->team2_prev_opponent_id(), target);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (has_team1_prev_match_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->team1_prev_match_score(), target);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (has_team1_prev_match_opponent_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->team1_prev_match_opponent_score(), target);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (has_team2_prev_match_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->team2_prev_match_score(), target);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (has_team2_prev_match_opponent_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->team2_prev_match_opponent_score(), target);
  }

  // optional uint32 phase_type = 23;
  if (has_phase_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->phase_type(), target);
  }

  // optional uint32 team1_score = 24;
  if (has_team1_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->team1_score(), target);
  }

  // optional uint32 team2_score = 25;
  if (has_team2_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->team2_score(), target);
  }

  // optional uint32 phase_id = 26;
  if (has_phase_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->phase_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.UpcomingMatch)
  return target;
}

int CMsgDOTATournamentInfo_UpcomingMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 series_id = 1;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 team1_id = 2;
    if (has_team1_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_id());
    }

    // optional uint32 team2_id = 3;
    if (has_team2_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_id());
    }

    // optional uint32 bo = 4;
    if (has_bo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bo());
    }

    // optional string stage_name = 5;
    if (has_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_name());
    }

    // optional uint32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional string winner_stage = 7;
    if (has_winner_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winner_stage());
    }

    // optional string loser_stage = 8;
    if (has_loser_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loser_stage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string team1_tag = 9;
    if (has_team1_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1_tag());
    }

    // optional string team2_tag = 10;
    if (has_team2_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2_tag());
    }

    // optional string team1_prev_opponent_tag = 11;
    if (has_team1_prev_opponent_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1_prev_opponent_tag());
    }

    // optional string team2_prev_opponent_tag = 12;
    if (has_team2_prev_opponent_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2_prev_opponent_tag());
    }

    // optional uint64 team1_logo = 13;
    if (has_team1_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team1_logo());
    }

    // optional uint64 team2_logo = 14;
    if (has_team2_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team2_logo());
    }

    // optional uint64 team1_prev_opponent_logo = 15;
    if (has_team1_prev_opponent_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team1_prev_opponent_logo());
    }

    // optional uint64 team2_prev_opponent_logo = 16;
    if (has_team2_prev_opponent_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team2_prev_opponent_logo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 team1_prev_opponent_id = 17;
    if (has_team1_prev_opponent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_opponent_id());
    }

    // optional uint32 team2_prev_opponent_id = 18;
    if (has_team2_prev_opponent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_opponent_id());
    }

    // optional uint32 team1_prev_match_score = 19;
    if (has_team1_prev_match_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_match_score());
    }

    // optional uint32 team1_prev_match_opponent_score = 20;
    if (has_team1_prev_match_opponent_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_match_opponent_score());
    }

    // optional uint32 team2_prev_match_score = 21;
    if (has_team2_prev_match_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_match_score());
    }

    // optional uint32 team2_prev_match_opponent_score = 22;
    if (has_team2_prev_match_opponent_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_match_opponent_score());
    }

    // optional uint32 phase_type = 23;
    if (has_phase_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_type());
    }

    // optional uint32 team1_score = 24;
    if (has_team1_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 team2_score = 25;
    if (has_team2_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 phase_id = 26;
    if (has_phase_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_UpcomingMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentInfo_UpcomingMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_team1_id()) {
      set_team1_id(from.team1_id());
    }
    if (from.has_team2_id()) {
      set_team2_id(from.team2_id());
    }
    if (from.has_bo()) {
      set_bo(from.bo());
    }
    if (from.has_stage_name()) {
      set_stage_name(from.stage_name());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_winner_stage()) {
      set_winner_stage(from.winner_stage());
    }
    if (from.has_loser_stage()) {
      set_loser_stage(from.loser_stage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team1_tag()) {
      set_team1_tag(from.team1_tag());
    }
    if (from.has_team2_tag()) {
      set_team2_tag(from.team2_tag());
    }
    if (from.has_team1_prev_opponent_tag()) {
      set_team1_prev_opponent_tag(from.team1_prev_opponent_tag());
    }
    if (from.has_team2_prev_opponent_tag()) {
      set_team2_prev_opponent_tag(from.team2_prev_opponent_tag());
    }
    if (from.has_team1_logo()) {
      set_team1_logo(from.team1_logo());
    }
    if (from.has_team2_logo()) {
      set_team2_logo(from.team2_logo());
    }
    if (from.has_team1_prev_opponent_logo()) {
      set_team1_prev_opponent_logo(from.team1_prev_opponent_logo());
    }
    if (from.has_team2_prev_opponent_logo()) {
      set_team2_prev_opponent_logo(from.team2_prev_opponent_logo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_team1_prev_opponent_id()) {
      set_team1_prev_opponent_id(from.team1_prev_opponent_id());
    }
    if (from.has_team2_prev_opponent_id()) {
      set_team2_prev_opponent_id(from.team2_prev_opponent_id());
    }
    if (from.has_team1_prev_match_score()) {
      set_team1_prev_match_score(from.team1_prev_match_score());
    }
    if (from.has_team1_prev_match_opponent_score()) {
      set_team1_prev_match_opponent_score(from.team1_prev_match_opponent_score());
    }
    if (from.has_team2_prev_match_score()) {
      set_team2_prev_match_score(from.team2_prev_match_score());
    }
    if (from.has_team2_prev_match_opponent_score()) {
      set_team2_prev_match_opponent_score(from.team2_prev_match_opponent_score());
    }
    if (from.has_phase_type()) {
      set_phase_type(from.phase_type());
    }
    if (from.has_team1_score()) {
      set_team1_score(from.team1_score());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_team2_score()) {
      set_team2_score(from.team2_score());
    }
    if (from.has_phase_id()) {
      set_phase_id(from.phase_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_UpcomingMatch::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentInfo_UpcomingMatch::Swap(CMsgDOTATournamentInfo_UpcomingMatch* other) {
  if (other != this) {
    std::swap(series_id_, other->series_id_);
    std::swap(team1_id_, other->team1_id_);
    std::swap(team2_id_, other->team2_id_);
    std::swap(bo_, other->bo_);
    std::swap(stage_name_, other->stage_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(winner_stage_, other->winner_stage_);
    std::swap(loser_stage_, other->loser_stage_);
    std::swap(team1_tag_, other->team1_tag_);
    std::swap(team2_tag_, other->team2_tag_);
    std::swap(team1_prev_opponent_tag_, other->team1_prev_opponent_tag_);
    std::swap(team2_prev_opponent_tag_, other->team2_prev_opponent_tag_);
    std::swap(team1_logo_, other->team1_logo_);
    std::swap(team2_logo_, other->team2_logo_);
    std::swap(team1_prev_opponent_logo_, other->team1_prev_opponent_logo_);
    std::swap(team2_prev_opponent_logo_, other->team2_prev_opponent_logo_);
    std::swap(team1_prev_opponent_id_, other->team1_prev_opponent_id_);
    std::swap(team2_prev_opponent_id_, other->team2_prev_opponent_id_);
    std::swap(team1_prev_match_score_, other->team1_prev_match_score_);
    std::swap(team1_prev_match_opponent_score_, other->team1_prev_match_opponent_score_);
    std::swap(team2_prev_match_score_, other->team2_prev_match_score_);
    std::swap(team2_prev_match_opponent_score_, other->team2_prev_match_opponent_score_);
    std::swap(phase_type_, other->phase_type_);
    std::swap(team1_score_, other->team1_score_);
    std::swap(team2_score_, other->team2_score_);
    std::swap(phase_id_, other->phase_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_UpcomingMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentInfo_UpcomingMatch_descriptor_;
  metadata.reflection = CMsgDOTATournamentInfo_UpcomingMatch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentInfo_News::kLinkFieldNumber;
const int CMsgDOTATournamentInfo_News::kTitleFieldNumber;
const int CMsgDOTATournamentInfo_News::kImageFieldNumber;
const int CMsgDOTATournamentInfo_News::kTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentInfo.News)
}

void CMsgDOTATournamentInfo_News::InitAsDefaultInstance() {
}

CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News(const CMsgDOTATournamentInfo_News& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.News)
}

void CMsgDOTATournamentInfo_News::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  link_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentInfo_News::~CMsgDOTATournamentInfo_News() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.News)
  SharedDtor();
}

void CMsgDOTATournamentInfo_News::SharedDtor() {
  if (link_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete link_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentInfo_News::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_News::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentInfo_News_descriptor_;
}

const CMsgDOTATournamentInfo_News& CMsgDOTATournamentInfo_News::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo_News::default_instance_ = NULL;

CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo_News::New() const {
  return new CMsgDOTATournamentInfo_News;
}

void CMsgDOTATournamentInfo_News::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_link()) {
      if (link_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        link_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentInfo_News::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentInfo.News)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string link = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), this->link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "link");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // optional string image = 3;
      case 3: {
        if (tag == 26) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentInfo.News)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentInfo.News)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_News::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentInfo.News)
  // optional string link = 1;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->link(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentInfo.News)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_News::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.News)
  // optional string link = 1;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.News)
  return target;
}

int CMsgDOTATournamentInfo_News::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string link = 1;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_News::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_News* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentInfo_News*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_News::MergeFrom(const CMsgDOTATournamentInfo_News& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentInfo_News::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_News::CopyFrom(const CMsgDOTATournamentInfo_News& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_News::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentInfo_News::Swap(CMsgDOTATournamentInfo_News* other) {
  if (other != this) {
    std::swap(link_, other->link_);
    std::swap(title_, other->title_);
    std::swap(image_, other->image_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_News::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentInfo_News_descriptor_;
  metadata.reflection = CMsgDOTATournamentInfo_News_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentInfo::kLeagueIdFieldNumber;
const int CMsgDOTATournamentInfo::kPhaseListFieldNumber;
const int CMsgDOTATournamentInfo::kTeamsListFieldNumber;
const int CMsgDOTATournamentInfo::kUpcomingMatchesListFieldNumber;
const int CMsgDOTATournamentInfo::kNewsListFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentInfo::CMsgDOTATournamentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentInfo)
}

void CMsgDOTATournamentInfo::InitAsDefaultInstance() {
}

CMsgDOTATournamentInfo::CMsgDOTATournamentInfo(const CMsgDOTATournamentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo)
}

void CMsgDOTATournamentInfo::SharedCtor() {
  _cached_size_ = 0;
  league_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentInfo::~CMsgDOTATournamentInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo)
  SharedDtor();
}

void CMsgDOTATournamentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentInfo_descriptor_;
}

const CMsgDOTATournamentInfo& CMsgDOTATournamentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentInfo* CMsgDOTATournamentInfo::default_instance_ = NULL;

CMsgDOTATournamentInfo* CMsgDOTATournamentInfo::New() const {
  return new CMsgDOTATournamentInfo;
}

void CMsgDOTATournamentInfo::Clear() {
  league_id_ = 0u;
  phase_list_.Clear();
  teams_list_.Clear();
  upcoming_matches_list_.Clear();
  news_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phase_list;
        break;
      }

      // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
      case 2: {
        if (tag == 18) {
         parse_phase_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phase_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phase_list;
        if (input->ExpectTag(26)) goto parse_teams_list;
        break;
      }

      // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
      case 3: {
        if (tag == 26) {
         parse_teams_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teams_list;
        if (input->ExpectTag(34)) goto parse_upcoming_matches_list;
        break;
      }

      // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
      case 4: {
        if (tag == 34) {
         parse_upcoming_matches_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upcoming_matches_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upcoming_matches_list;
        if (input->ExpectTag(42)) goto parse_news_list;
        break;
      }

      // repeated .CMsgDOTATournamentInfo.News news_list = 5;
      case 5: {
        if (tag == 42) {
         parse_news_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_news_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_news_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentInfo)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentInfo)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (int i = 0; i < this->phase_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->phase_list(i), output);
  }

  // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
  for (int i = 0; i < this->teams_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teams_list(i), output);
  }

  // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (int i = 0; i < this->upcoming_matches_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upcoming_matches_list(i), output);
  }

  // repeated .CMsgDOTATournamentInfo.News news_list = 5;
  for (int i = 0; i < this->news_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->news_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentInfo)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (int i = 0; i < this->phase_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->phase_list(i), target);
  }

  // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
  for (int i = 0; i < this->teams_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teams_list(i), target);
  }

  // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (int i = 0; i < this->upcoming_matches_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upcoming_matches_list(i), target);
  }

  // repeated .CMsgDOTATournamentInfo.News news_list = 5;
  for (int i = 0; i < this->news_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->news_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo)
  return target;
}

int CMsgDOTATournamentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
  total_size += 1 * this->phase_list_size();
  for (int i = 0; i < this->phase_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phase_list(i));
  }

  // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
  total_size += 1 * this->teams_list_size();
  for (int i = 0; i < this->teams_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams_list(i));
  }

  // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  total_size += 1 * this->upcoming_matches_list_size();
  for (int i = 0; i < this->upcoming_matches_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upcoming_matches_list(i));
  }

  // repeated .CMsgDOTATournamentInfo.News news_list = 5;
  total_size += 1 * this->news_list_size();
  for (int i = 0; i < this->news_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->news_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo::MergeFrom(const CMsgDOTATournamentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  phase_list_.MergeFrom(from.phase_list_);
  teams_list_.MergeFrom(from.teams_list_);
  upcoming_matches_list_.MergeFrom(from.upcoming_matches_list_);
  news_list_.MergeFrom(from.news_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo::CopyFrom(const CMsgDOTATournamentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentInfo::Swap(CMsgDOTATournamentInfo* other) {
  if (other != this) {
    std::swap(league_id_, other->league_id_);
    phase_list_.Swap(&other->phase_list_);
    teams_list_.Swap(&other->teams_list_);
    upcoming_matches_list_.Swap(&other->upcoming_matches_list_);
    news_list_.Swap(&other->news_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentInfo_descriptor_;
  metadata.reflection = CMsgDOTATournamentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRequestWeekendTourneySchedule)
}

void CMsgRequestWeekendTourneySchedule::InitAsDefaultInstance() {
}

CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule(const CMsgRequestWeekendTourneySchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestWeekendTourneySchedule)
}

void CMsgRequestWeekendTourneySchedule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestWeekendTourneySchedule::~CMsgRequestWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:CMsgRequestWeekendTourneySchedule)
  SharedDtor();
}

void CMsgRequestWeekendTourneySchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRequestWeekendTourneySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestWeekendTourneySchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestWeekendTourneySchedule_descriptor_;
}

const CMsgRequestWeekendTourneySchedule& CMsgRequestWeekendTourneySchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgRequestWeekendTourneySchedule* CMsgRequestWeekendTourneySchedule::default_instance_ = NULL;

CMsgRequestWeekendTourneySchedule* CMsgRequestWeekendTourneySchedule::New() const {
  return new CMsgRequestWeekendTourneySchedule;
}

void CMsgRequestWeekendTourneySchedule::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestWeekendTourneySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRequestWeekendTourneySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRequestWeekendTourneySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRequestWeekendTourneySchedule)
  return false;
#undef DO_
}

void CMsgRequestWeekendTourneySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRequestWeekendTourneySchedule)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRequestWeekendTourneySchedule)
}

::google::protobuf::uint8* CMsgRequestWeekendTourneySchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestWeekendTourneySchedule)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestWeekendTourneySchedule)
  return target;
}

int CMsgRequestWeekendTourneySchedule::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestWeekendTourneySchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestWeekendTourneySchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const CMsgRequestWeekendTourneySchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const CMsgRequestWeekendTourneySchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestWeekendTourneySchedule::IsInitialized() const {

  return true;
}

void CMsgRequestWeekendTourneySchedule::Swap(CMsgRequestWeekendTourneySchedule* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestWeekendTourneySchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestWeekendTourneySchedule_descriptor_;
  metadata.reflection = CMsgRequestWeekendTourneySchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgWeekendTourneySchedule_Division::kDivisionCodeFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowOpenFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowCloseFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowOpenNextFieldNumber;
#endif  // !_MSC_VER

CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgWeekendTourneySchedule.Division)
}

void CMsgWeekendTourneySchedule_Division::InitAsDefaultInstance() {
}

CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division(const CMsgWeekendTourneySchedule_Division& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneySchedule.Division)
}

void CMsgWeekendTourneySchedule_Division::SharedCtor() {
  _cached_size_ = 0;
  division_code_ = 0u;
  time_window_open_ = 0u;
  time_window_close_ = 0u;
  time_window_open_next_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWeekendTourneySchedule_Division::~CMsgWeekendTourneySchedule_Division() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneySchedule.Division)
  SharedDtor();
}

void CMsgWeekendTourneySchedule_Division::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgWeekendTourneySchedule_Division::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneySchedule_Division::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeekendTourneySchedule_Division_descriptor_;
}

const CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule_Division::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule_Division::default_instance_ = NULL;

CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule_Division::New() const {
  return new CMsgWeekendTourneySchedule_Division;
}

void CMsgWeekendTourneySchedule_Division::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgWeekendTourneySchedule_Division*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(division_code_, time_window_open_next_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWeekendTourneySchedule_Division::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgWeekendTourneySchedule.Division)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_code_)));
          set_has_division_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_window_open;
        break;
      }

      // optional uint32 time_window_open = 2;
      case 2: {
        if (tag == 16) {
         parse_time_window_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_open_)));
          set_has_time_window_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_window_close;
        break;
      }

      // optional uint32 time_window_close = 3;
      case 3: {
        if (tag == 24) {
         parse_time_window_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_close_)));
          set_has_time_window_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_window_open_next;
        break;
      }

      // optional uint32 time_window_open_next = 4;
      case 4: {
        if (tag == 32) {
         parse_time_window_open_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_open_next_)));
          set_has_time_window_open_next();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgWeekendTourneySchedule.Division)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgWeekendTourneySchedule.Division)
  return false;
#undef DO_
}

void CMsgWeekendTourneySchedule_Division::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgWeekendTourneySchedule.Division)
  // optional uint32 division_code = 1;
  if (has_division_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division_code(), output);
  }

  // optional uint32 time_window_open = 2;
  if (has_time_window_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_window_open(), output);
  }

  // optional uint32 time_window_close = 3;
  if (has_time_window_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_window_close(), output);
  }

  // optional uint32 time_window_open_next = 4;
  if (has_time_window_open_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_window_open_next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgWeekendTourneySchedule.Division)
}

::google::protobuf::uint8* CMsgWeekendTourneySchedule_Division::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneySchedule.Division)
  // optional uint32 division_code = 1;
  if (has_division_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division_code(), target);
  }

  // optional uint32 time_window_open = 2;
  if (has_time_window_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_window_open(), target);
  }

  // optional uint32 time_window_close = 3;
  if (has_time_window_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_window_close(), target);
  }

  // optional uint32 time_window_open_next = 4;
  if (has_time_window_open_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_window_open_next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneySchedule.Division)
  return target;
}

int CMsgWeekendTourneySchedule_Division::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 division_code = 1;
    if (has_division_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_code());
    }

    // optional uint32 time_window_open = 2;
    if (has_time_window_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_open());
    }

    // optional uint32 time_window_close = 3;
    if (has_time_window_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_close());
    }

    // optional uint32 time_window_open_next = 4;
    if (has_time_window_open_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_open_next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule_Division* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWeekendTourneySchedule_Division*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const CMsgWeekendTourneySchedule_Division& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_division_code()) {
      set_division_code(from.division_code());
    }
    if (from.has_time_window_open()) {
      set_time_window_open(from.time_window_open());
    }
    if (from.has_time_window_close()) {
      set_time_window_close(from.time_window_close());
    }
    if (from.has_time_window_open_next()) {
      set_time_window_open_next(from.time_window_open_next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const CMsgWeekendTourneySchedule_Division& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule_Division::IsInitialized() const {

  return true;
}

void CMsgWeekendTourneySchedule_Division::Swap(CMsgWeekendTourneySchedule_Division* other) {
  if (other != this) {
    std::swap(division_code_, other->division_code_);
    std::swap(time_window_open_, other->time_window_open_);
    std::swap(time_window_close_, other->time_window_close_);
    std::swap(time_window_open_next_, other->time_window_open_next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWeekendTourneySchedule_Division::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWeekendTourneySchedule_Division_descriptor_;
  metadata.reflection = CMsgWeekendTourneySchedule_Division_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgWeekendTourneySchedule::kDivisionsFieldNumber;
#endif  // !_MSC_VER

CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgWeekendTourneySchedule)
}

void CMsgWeekendTourneySchedule::InitAsDefaultInstance() {
}

CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule(const CMsgWeekendTourneySchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneySchedule)
}

void CMsgWeekendTourneySchedule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWeekendTourneySchedule::~CMsgWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneySchedule)
  SharedDtor();
}

void CMsgWeekendTourneySchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgWeekendTourneySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneySchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeekendTourneySchedule_descriptor_;
}

const CMsgWeekendTourneySchedule& CMsgWeekendTourneySchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgWeekendTourneySchedule* CMsgWeekendTourneySchedule::default_instance_ = NULL;

CMsgWeekendTourneySchedule* CMsgWeekendTourneySchedule::New() const {
  return new CMsgWeekendTourneySchedule;
}

void CMsgWeekendTourneySchedule::Clear() {
  divisions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWeekendTourneySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgWeekendTourneySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
      case 1: {
        if (tag == 10) {
         parse_divisions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_divisions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_divisions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgWeekendTourneySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgWeekendTourneySchedule)
  return false;
#undef DO_
}

void CMsgWeekendTourneySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgWeekendTourneySchedule)
  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  for (int i = 0; i < this->divisions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->divisions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgWeekendTourneySchedule)
}

::google::protobuf::uint8* CMsgWeekendTourneySchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneySchedule)
  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  for (int i = 0; i < this->divisions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->divisions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneySchedule)
  return target;
}

int CMsgWeekendTourneySchedule::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  total_size += 1 * this->divisions_size();
  for (int i = 0; i < this->divisions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->divisions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneySchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWeekendTourneySchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule::MergeFrom(const CMsgWeekendTourneySchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  divisions_.MergeFrom(from.divisions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWeekendTourneySchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule::CopyFrom(const CMsgWeekendTourneySchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule::IsInitialized() const {

  return true;
}

void CMsgWeekendTourneySchedule::Swap(CMsgWeekendTourneySchedule* other) {
  if (other != this) {
    divisions_.Swap(&other->divisions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWeekendTourneySchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWeekendTourneySchedule_descriptor_;
  metadata.reflection = CMsgWeekendTourneySchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgWeekendTourneyOpts::kParticipatingFieldNumber;
const int CMsgWeekendTourneyOpts::kDivisionIdFieldNumber;
const int CMsgWeekendTourneyOpts::kBuyinFieldNumber;
const int CMsgWeekendTourneyOpts::kSkillLevelFieldNumber;
const int CMsgWeekendTourneyOpts::kMatchGroupsFieldNumber;
const int CMsgWeekendTourneyOpts::kTeamIdFieldNumber;
const int CMsgWeekendTourneyOpts::kPickupTeamNameFieldNumber;
const int CMsgWeekendTourneyOpts::kPickupTeamLogoFieldNumber;
#endif  // !_MSC_VER

CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgWeekendTourneyOpts)
}

void CMsgWeekendTourneyOpts::InitAsDefaultInstance() {
}

CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts(const CMsgWeekendTourneyOpts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneyOpts)
}

void CMsgWeekendTourneyOpts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  participating_ = false;
  division_id_ = 0u;
  buyin_ = 0u;
  skill_level_ = 0u;
  match_groups_ = 0u;
  team_id_ = 0u;
  pickup_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pickup_team_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWeekendTourneyOpts::~CMsgWeekendTourneyOpts() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneyOpts)
  SharedDtor();
}

void CMsgWeekendTourneyOpts::SharedDtor() {
  if (pickup_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pickup_team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgWeekendTourneyOpts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneyOpts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeekendTourneyOpts_descriptor_;
}

const CMsgWeekendTourneyOpts& CMsgWeekendTourneyOpts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgWeekendTourneyOpts* CMsgWeekendTourneyOpts::default_instance_ = NULL;

CMsgWeekendTourneyOpts* CMsgWeekendTourneyOpts::New() const {
  return new CMsgWeekendTourneyOpts;
}

void CMsgWeekendTourneyOpts::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgWeekendTourneyOpts*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(participating_, team_id_);
    if (has_pickup_team_name()) {
      if (pickup_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pickup_team_name_->clear();
      }
    }
    pickup_team_logo_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWeekendTourneyOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgWeekendTourneyOpts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool participating = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participating_)));
          set_has_participating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_division_id;
        break;
      }

      // optional uint32 division_id = 2;
      case 2: {
        if (tag == 16) {
         parse_division_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
          set_has_division_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyin;
        break;
      }

      // optional uint32 buyin = 3;
      case 3: {
        if (tag == 24) {
         parse_buyin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyin_)));
          set_has_buyin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (tag == 32) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_match_groups;
        break;
      }

      // optional uint32 match_groups = 5;
      case 5: {
        if (tag == 40) {
         parse_match_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_groups_)));
          set_has_match_groups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 6;
      case 6: {
        if (tag == 48) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pickup_team_name;
        break;
      }

      // optional string pickup_team_name = 7;
      case 7: {
        if (tag == 58) {
         parse_pickup_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pickup_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pickup_team_name().data(), this->pickup_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pickup_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pickup_team_logo;
        break;
      }

      // optional uint64 pickup_team_logo = 8;
      case 8: {
        if (tag == 64) {
         parse_pickup_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pickup_team_logo_)));
          set_has_pickup_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgWeekendTourneyOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgWeekendTourneyOpts)
  return false;
#undef DO_
}

void CMsgWeekendTourneyOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgWeekendTourneyOpts)
  // optional bool participating = 1;
  if (has_participating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->participating(), output);
  }

  // optional uint32 division_id = 2;
  if (has_division_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->division_id(), output);
  }

  // optional uint32 buyin = 3;
  if (has_buyin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buyin(), output);
  }

  // optional uint32 skill_level = 4;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional uint32 match_groups = 5;
  if (has_match_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_groups(), output);
  }

  // optional uint32 team_id = 6;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_id(), output);
  }

  // optional string pickup_team_name = 7;
  if (has_pickup_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pickup_team_name().data(), this->pickup_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pickup_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pickup_team_name(), output);
  }

  // optional uint64 pickup_team_logo = 8;
  if (has_pickup_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->pickup_team_logo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgWeekendTourneyOpts)
}

::google::protobuf::uint8* CMsgWeekendTourneyOpts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneyOpts)
  // optional bool participating = 1;
  if (has_participating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->participating(), target);
  }

  // optional uint32 division_id = 2;
  if (has_division_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->division_id(), target);
  }

  // optional uint32 buyin = 3;
  if (has_buyin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buyin(), target);
  }

  // optional uint32 skill_level = 4;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional uint32 match_groups = 5;
  if (has_match_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_groups(), target);
  }

  // optional uint32 team_id = 6;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_id(), target);
  }

  // optional string pickup_team_name = 7;
  if (has_pickup_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pickup_team_name().data(), this->pickup_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pickup_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pickup_team_name(), target);
  }

  // optional uint64 pickup_team_logo = 8;
  if (has_pickup_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->pickup_team_logo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneyOpts)
  return target;
}

int CMsgWeekendTourneyOpts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool participating = 1;
    if (has_participating()) {
      total_size += 1 + 1;
    }

    // optional uint32 division_id = 2;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 buyin = 3;
    if (has_buyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyin());
    }

    // optional uint32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 match_groups = 5;
    if (has_match_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_groups());
    }

    // optional uint32 team_id = 6;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string pickup_team_name = 7;
    if (has_pickup_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pickup_team_name());
    }

    // optional uint64 pickup_team_logo = 8;
    if (has_pickup_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pickup_team_logo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneyOpts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWeekendTourneyOpts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWeekendTourneyOpts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyOpts::MergeFrom(const CMsgWeekendTourneyOpts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participating()) {
      set_participating(from.participating());
    }
    if (from.has_division_id()) {
      set_division_id(from.division_id());
    }
    if (from.has_buyin()) {
      set_buyin(from.buyin());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_match_groups()) {
      set_match_groups(from.match_groups());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_pickup_team_name()) {
      set_pickup_team_name(from.pickup_team_name());
    }
    if (from.has_pickup_team_logo()) {
      set_pickup_team_logo(from.pickup_team_logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWeekendTourneyOpts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyOpts::CopyFrom(const CMsgWeekendTourneyOpts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyOpts::IsInitialized() const {

  return true;
}

void CMsgWeekendTourneyOpts::Swap(CMsgWeekendTourneyOpts* other) {
  if (other != this) {
    std::swap(participating_, other->participating_);
    std::swap(division_id_, other->division_id_);
    std::swap(buyin_, other->buyin_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(match_groups_, other->match_groups_);
    std::swap(team_id_, other->team_id_);
    std::swap(pickup_team_name_, other->pickup_team_name_);
    std::swap(pickup_team_logo_, other->pickup_team_logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWeekendTourneyOpts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWeekendTourneyOpts_descriptor_;
  metadata.reflection = CMsgWeekendTourneyOpts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgWeekendTourneyLeave)
}

void CMsgWeekendTourneyLeave::InitAsDefaultInstance() {
}

CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave(const CMsgWeekendTourneyLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneyLeave)
}

void CMsgWeekendTourneyLeave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWeekendTourneyLeave::~CMsgWeekendTourneyLeave() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneyLeave)
  SharedDtor();
}

void CMsgWeekendTourneyLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgWeekendTourneyLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneyLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWeekendTourneyLeave_descriptor_;
}

const CMsgWeekendTourneyLeave& CMsgWeekendTourneyLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgWeekendTourneyLeave* CMsgWeekendTourneyLeave::default_instance_ = NULL;

CMsgWeekendTourneyLeave* CMsgWeekendTourneyLeave::New() const {
  return new CMsgWeekendTourneyLeave;
}

void CMsgWeekendTourneyLeave::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWeekendTourneyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgWeekendTourneyLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgWeekendTourneyLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgWeekendTourneyLeave)
  return false;
#undef DO_
}

void CMsgWeekendTourneyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgWeekendTourneyLeave)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgWeekendTourneyLeave)
}

::google::protobuf::uint8* CMsgWeekendTourneyLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneyLeave)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneyLeave)
  return target;
}

int CMsgWeekendTourneyLeave::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneyLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWeekendTourneyLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWeekendTourneyLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyLeave::MergeFrom(const CMsgWeekendTourneyLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWeekendTourneyLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyLeave::CopyFrom(const CMsgWeekendTourneyLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyLeave::IsInitialized() const {

  return true;
}

void CMsgWeekendTourneyLeave::Swap(CMsgWeekendTourneyLeave* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWeekendTourneyLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWeekendTourneyLeave_descriptor_;
  metadata.reflection = CMsgWeekendTourneyLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournament_Team::kTeamGidFieldNumber;
const int CMsgDOTATournament_Team::kNodeOrStateFieldNumber;
const int CMsgDOTATournament_Team::kPlayersFieldNumber;
const int CMsgDOTATournament_Team::kPlayerBuyinFieldNumber;
const int CMsgDOTATournament_Team::kPlayerSkillLevelFieldNumber;
const int CMsgDOTATournament_Team::kMatchGroupMaskFieldNumber;
const int CMsgDOTATournament_Team::kTeamIdFieldNumber;
const int CMsgDOTATournament_Team::kTeamNameFieldNumber;
const int CMsgDOTATournament_Team::kTeamBaseLogoFieldNumber;
const int CMsgDOTATournament_Team::kTeamUiLogoFieldNumber;
const int CMsgDOTATournament_Team::kTeamDateFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament_Team::CMsgDOTATournament_Team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::InitAsDefaultInstance() {
}

CMsgDOTATournament_Team::CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_gid_ = GOOGLE_ULONGLONG(0);
  node_or_state_ = 0u;
  match_group_mask_ = 0u;
  team_id_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  team_ui_logo_ = GOOGLE_ULONGLONG(0);
  team_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament_Team::~CMsgDOTATournament_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Team)
  SharedDtor();
}

void CMsgDOTATournament_Team::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_Team_descriptor_;
}

const CMsgDOTATournament_Team& CMsgDOTATournament_Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournament_Team* CMsgDOTATournament_Team::default_instance_ = NULL;

CMsgDOTATournament_Team* CMsgDOTATournament_Team::New() const {
  return new CMsgDOTATournament_Team;
}

void CMsgDOTATournament_Team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournament_Team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 227) {
    ZR_(node_or_state_, match_group_mask_);
    team_gid_ = GOOGLE_ULONGLONG(0);
    team_id_ = 0u;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(team_date_, team_ui_logo_);
    team_base_logo_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  player_buyin_.Clear();
  player_skill_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournament_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 team_gid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_gid_)));
          set_has_team_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_or_state;
        break;
      }

      // optional uint32 node_or_state = 2;
      case 2: {
        if (tag == 16) {
         parse_node_or_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_or_state_)));
          set_has_node_or_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated uint32 players = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (tag == 32) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_name;
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (tag == 42) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_team_base_logo;
        break;
      }

      // optional uint64 team_base_logo = 7;
      case 7: {
        if (tag == 56) {
         parse_team_base_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
          set_has_team_base_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_team_ui_logo;
        break;
      }

      // optional uint64 team_ui_logo = 8;
      case 8: {
        if (tag == 64) {
         parse_team_ui_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_ui_logo_)));
          set_has_team_ui_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_player_buyin;
        break;
      }

      // repeated uint32 player_buyin = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_player_buyin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_buyin())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74, input, this->mutable_player_buyin())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_player_skill_level;
        break;
      }

      // repeated uint32 player_skill_level = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_player_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_skill_level())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82, input, this->mutable_player_skill_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_team_date;
        break;
      }

      // optional uint32 team_date = 11;
      case 11: {
        if (tag == 88) {
         parse_team_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_date_)));
          set_has_team_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_match_group_mask;
        break;
      }

      // optional uint32 match_group_mask = 12;
      case 12: {
        if (tag == 96) {
         parse_match_group_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_group_mask_)));
          set_has_match_group_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament.Team)
  return false;
#undef DO_
}

void CMsgDOTATournament_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament.Team)
  // optional fixed64 team_gid = 1;
  if (has_team_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->team_gid(), output);
  }

  // optional uint32 node_or_state = 2;
  if (has_node_or_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_or_state(), output);
  }

  // repeated uint32 players = 3 [packed = true];
  if (this->players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_players_cached_byte_size_);
  }
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->players(i), output);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_name(), output);
  }

  // optional uint64 team_base_logo = 7;
  if (has_team_base_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_base_logo(), output);
  }

  // optional uint64 team_ui_logo = 8;
  if (has_team_ui_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->team_ui_logo(), output);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  if (this->player_buyin_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_player_buyin_cached_byte_size_);
  }
  for (int i = 0; i < this->player_buyin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_buyin(i), output);
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  if (this->player_skill_level_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_player_skill_level_cached_byte_size_);
  }
  for (int i = 0; i < this->player_skill_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_skill_level(i), output);
  }

  // optional uint32 team_date = 11;
  if (has_team_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->team_date(), output);
  }

  // optional uint32 match_group_mask = 12;
  if (has_match_group_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->match_group_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament.Team)
}

::google::protobuf::uint8* CMsgDOTATournament_Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Team)
  // optional fixed64 team_gid = 1;
  if (has_team_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->team_gid(), target);
  }

  // optional uint32 node_or_state = 2;
  if (has_node_or_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_or_state(), target);
  }

  // repeated uint32 players = 3 [packed = true];
  if (this->players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _players_cached_byte_size_, target);
  }
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->players(i), target);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // optional uint64 team_base_logo = 7;
  if (has_team_base_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_base_logo(), target);
  }

  // optional uint64 team_ui_logo = 8;
  if (has_team_ui_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->team_ui_logo(), target);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  if (this->player_buyin_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _player_buyin_cached_byte_size_, target);
  }
  for (int i = 0; i < this->player_buyin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_buyin(i), target);
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  if (this->player_skill_level_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _player_skill_level_cached_byte_size_, target);
  }
  for (int i = 0; i < this->player_skill_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_skill_level(i), target);
  }

  // optional uint32 team_date = 11;
  if (has_team_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->team_date(), target);
  }

  // optional uint32 match_group_mask = 12;
  if (has_match_group_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->match_group_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Team)
  return target;
}

int CMsgDOTATournament_Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 team_gid = 1;
    if (has_team_gid()) {
      total_size += 1 + 8;
    }

    // optional uint32 node_or_state = 2;
    if (has_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_or_state());
    }

    // optional uint32 match_group_mask = 12;
    if (has_match_group_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_group_mask());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string team_name = 5;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 team_base_logo = 7;
    if (has_team_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_ui_logo = 8;
    if (has_team_ui_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_ui_logo());
    }

    // optional uint32 team_date = 11;
    if (has_team_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_date());
    }

  }
  // repeated uint32 players = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->players_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->players(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _players_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->player_buyin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_buyin(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_buyin_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->player_skill_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_skill_level(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_skill_level_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournament_Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournament_Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Team::MergeFrom(const CMsgDOTATournament_Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  player_buyin_.MergeFrom(from.player_buyin_);
  player_skill_level_.MergeFrom(from.player_skill_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_gid()) {
      set_team_gid(from.team_gid());
    }
    if (from.has_node_or_state()) {
      set_node_or_state(from.node_or_state());
    }
    if (from.has_match_group_mask()) {
      set_match_group_mask(from.match_group_mask());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team_base_logo()) {
      set_team_base_logo(from.team_base_logo());
    }
    if (from.has_team_ui_logo()) {
      set_team_ui_logo(from.team_ui_logo());
    }
    if (from.has_team_date()) {
      set_team_date(from.team_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournament_Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Team::CopyFrom(const CMsgDOTATournament_Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Team::IsInitialized() const {

  return true;
}

void CMsgDOTATournament_Team::Swap(CMsgDOTATournament_Team* other) {
  if (other != this) {
    std::swap(team_gid_, other->team_gid_);
    std::swap(node_or_state_, other->node_or_state_);
    players_.Swap(&other->players_);
    player_buyin_.Swap(&other->player_buyin_);
    player_skill_level_.Swap(&other->player_skill_level_);
    std::swap(match_group_mask_, other->match_group_mask_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_base_logo_, other->team_base_logo_);
    std::swap(team_ui_logo_, other->team_ui_logo_);
    std::swap(team_date_, other->team_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournament_Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_Team_descriptor_;
  metadata.reflection = CMsgDOTATournament_Team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournament_Game::kNodeIdxFieldNumber;
const int CMsgDOTATournament_Game::kLobbyIdFieldNumber;
const int CMsgDOTATournament_Game::kMatchIdFieldNumber;
const int CMsgDOTATournament_Game::kTeamAGoodFieldNumber;
const int CMsgDOTATournament_Game::kStateFieldNumber;
const int CMsgDOTATournament_Game::kStartTimeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament_Game::CMsgDOTATournament_Game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::InitAsDefaultInstance() {
}

CMsgDOTATournament_Game::CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::SharedCtor() {
  _cached_size_ = 0;
  node_idx_ = 0u;
  lobby_id_ = GOOGLE_ULONGLONG(0);
  match_id_ = GOOGLE_ULONGLONG(0);
  team_a_good_ = false;
  state_ = 0;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament_Game::~CMsgDOTATournament_Game() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Game)
  SharedDtor();
}

void CMsgDOTATournament_Game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_Game_descriptor_;
}

const CMsgDOTATournament_Game& CMsgDOTATournament_Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournament_Game* CMsgDOTATournament_Game::default_instance_ = NULL;

CMsgDOTATournament_Game* CMsgDOTATournament_Game::New() const {
  return new CMsgDOTATournament_Game;
}

void CMsgDOTATournament_Game::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournament_Game*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lobby_id_, start_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournament_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_idx_)));
          set_has_node_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lobby_id;
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (tag == 17) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_id;
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (tag == 24) {
         parse_match_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_a_good;
        break;
      }

      // optional bool team_a_good = 4;
      case 4: {
        if (tag == 32) {
         parse_team_a_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_a_good_)));
          set_has_team_a_good();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentGameState_IsValid(value)) {
            set_state(static_cast< ::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 6;
      case 6: {
        if (tag == 48) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament.Game)
  return false;
#undef DO_
}

void CMsgDOTATournament_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament.Game)
  // optional uint32 node_idx = 1;
  if (has_node_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_idx(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional bool team_a_good = 4;
  if (has_team_a_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->team_a_good(), output);
  }

  // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional uint32 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament.Game)
}

::google::protobuf::uint8* CMsgDOTATournament_Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Game)
  // optional uint32 node_idx = 1;
  if (has_node_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_idx(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional uint64 match_id = 3;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional bool team_a_good = 4;
  if (has_team_a_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->team_a_good(), target);
  }

  // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional uint32 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Game)
  return target;
}

int CMsgDOTATournament_Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 node_idx = 1;
    if (has_node_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_idx());
    }

    // optional fixed64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional bool team_a_good = 4;
    if (has_team_a_good()) {
      total_size += 1 + 1;
    }

    // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournament_Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournament_Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Game::MergeFrom(const CMsgDOTATournament_Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_idx()) {
      set_node_idx(from.node_idx());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_team_a_good()) {
      set_team_a_good(from.team_a_good());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournament_Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Game::CopyFrom(const CMsgDOTATournament_Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Game::IsInitialized() const {

  return true;
}

void CMsgDOTATournament_Game::Swap(CMsgDOTATournament_Game* other) {
  if (other != this) {
    std::swap(node_idx_, other->node_idx_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(match_id_, other->match_id_);
    std::swap(team_a_good_, other->team_a_good_);
    std::swap(state_, other->state_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournament_Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_Game_descriptor_;
  metadata.reflection = CMsgDOTATournament_Game_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournament_Node::kNodeIdFieldNumber;
const int CMsgDOTATournament_Node::kTeamIdxAFieldNumber;
const int CMsgDOTATournament_Node::kTeamIdxBFieldNumber;
const int CMsgDOTATournament_Node::kNodeStateFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament_Node::CMsgDOTATournament_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::InitAsDefaultInstance() {
}

CMsgDOTATournament_Node::CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0u;
  team_idx_a_ = 0u;
  team_idx_b_ = 0u;
  node_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament_Node::~CMsgDOTATournament_Node() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Node)
  SharedDtor();
}

void CMsgDOTATournament_Node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_Node_descriptor_;
}

const CMsgDOTATournament_Node& CMsgDOTATournament_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournament_Node* CMsgDOTATournament_Node::default_instance_ = NULL;

CMsgDOTATournament_Node* CMsgDOTATournament_Node::New() const {
  return new CMsgDOTATournament_Node;
}

void CMsgDOTATournament_Node::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournament_Node*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(node_id_, node_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournament_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team_idx_a;
        break;
      }

      // optional uint32 team_idx_a = 2;
      case 2: {
        if (tag == 16) {
         parse_team_idx_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_idx_a_)));
          set_has_team_idx_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team_idx_b;
        break;
      }

      // optional uint32 team_idx_b = 3;
      case 3: {
        if (tag == 24) {
         parse_team_idx_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_idx_b_)));
          set_has_team_idx_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_node_state;
        break;
      }

      // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
      case 4: {
        if (tag == 32) {
         parse_node_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentNodeState_IsValid(value)) {
            set_node_state(static_cast< ::ETournamentNodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament.Node)
  return false;
#undef DO_
}

void CMsgDOTATournament_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament.Node)
  // optional uint32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional uint32 team_idx_a = 2;
  if (has_team_idx_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_idx_a(), output);
  }

  // optional uint32 team_idx_b = 3;
  if (has_team_idx_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_idx_b(), output);
  }

  // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (has_node_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->node_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament.Node)
}

::google::protobuf::uint8* CMsgDOTATournament_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Node)
  // optional uint32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional uint32 team_idx_a = 2;
  if (has_team_idx_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_idx_a(), target);
  }

  // optional uint32 team_idx_b = 3;
  if (has_team_idx_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_idx_b(), target);
  }

  // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (has_node_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->node_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Node)
  return target;
}

int CMsgDOTATournament_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 team_idx_a = 2;
    if (has_team_idx_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_idx_a());
    }

    // optional uint32 team_idx_b = 3;
    if (has_team_idx_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_idx_b());
    }

    // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
    if (has_node_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournament_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournament_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Node::MergeFrom(const CMsgDOTATournament_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_team_idx_a()) {
      set_team_idx_a(from.team_idx_a());
    }
    if (from.has_team_idx_b()) {
      set_team_idx_b(from.team_idx_b());
    }
    if (from.has_node_state()) {
      set_node_state(from.node_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournament_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Node::CopyFrom(const CMsgDOTATournament_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Node::IsInitialized() const {

  return true;
}

void CMsgDOTATournament_Node::Swap(CMsgDOTATournament_Node* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(team_idx_a_, other->team_idx_a_);
    std::swap(team_idx_b_, other->team_idx_b_);
    std::swap(node_state_, other->node_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournament_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_Node_descriptor_;
  metadata.reflection = CMsgDOTATournament_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournament::kTournamentIdFieldNumber;
const int CMsgDOTATournament::kDivisionIdFieldNumber;
const int CMsgDOTATournament::kScheduleTimeFieldNumber;
const int CMsgDOTATournament::kSkillLevelFieldNumber;
const int CMsgDOTATournament::kTournamentTemplateFieldNumber;
const int CMsgDOTATournament::kStateFieldNumber;
const int CMsgDOTATournament::kStateSeqNumFieldNumber;
const int CMsgDOTATournament::kSeasonTrophyIdFieldNumber;
const int CMsgDOTATournament::kTeamsFieldNumber;
const int CMsgDOTATournament::kGamesFieldNumber;
const int CMsgDOTATournament::kNodesFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournament::CMsgDOTATournament()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournament)
}

void CMsgDOTATournament::InitAsDefaultInstance() {
}

CMsgDOTATournament::CMsgDOTATournament(const CMsgDOTATournament& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament)
}

void CMsgDOTATournament::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  division_id_ = 0u;
  schedule_time_ = 0u;
  skill_level_ = 0u;
  tournament_template_ = 0;
  state_ = 0;
  state_seq_num_ = 0u;
  season_trophy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournament::~CMsgDOTATournament() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament)
  SharedDtor();
}

void CMsgDOTATournament::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournament_descriptor_;
}

const CMsgDOTATournament& CMsgDOTATournament::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournament* CMsgDOTATournament::default_instance_ = NULL;

CMsgDOTATournament* CMsgDOTATournament::New() const {
  return new CMsgDOTATournament;
}

void CMsgDOTATournament::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournament*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tournament_id_, season_trophy_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teams_.Clear();
  games_.Clear();
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournament)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_division_id;
        break;
      }

      // optional uint32 division_id = 2;
      case 2: {
        if (tag == 16) {
         parse_division_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
          set_has_division_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_schedule_time;
        break;
      }

      // optional uint32 schedule_time = 3;
      case 3: {
        if (tag == 24) {
         parse_schedule_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_time_)));
          set_has_schedule_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (tag == 32) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tournament_template;
        break;
      }

      // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
      case 5: {
        if (tag == 40) {
         parse_tournament_template:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentTemplate_IsValid(value)) {
            set_tournament_template(static_cast< ::ETournamentTemplate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
      case 6: {
        if (tag == 48) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentState_IsValid(value)) {
            set_state(static_cast< ::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_teams;
        break;
      }

      // repeated .CMsgDOTATournament.Team teams = 7;
      case 7: {
        if (tag == 58) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_teams;
        if (input->ExpectTag(66)) goto parse_games;
        break;
      }

      // repeated .CMsgDOTATournament.Game games = 8;
      case 8: {
        if (tag == 66) {
         parse_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_games;
        if (input->ExpectTag(74)) goto parse_nodes;
        break;
      }

      // repeated .CMsgDOTATournament.Node nodes = 9;
      case 9: {
        if (tag == 74) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_nodes;
        if (input->ExpectTag(80)) goto parse_state_seq_num;
        break;
      }

      // optional uint32 state_seq_num = 10;
      case 10: {
        if (tag == 80) {
         parse_state_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_seq_num_)));
          set_has_state_seq_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_season_trophy_id;
        break;
      }

      // optional uint32 season_trophy_id = 11;
      case 11: {
        if (tag == 88) {
         parse_season_trophy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
          set_has_season_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournament)
  return false;
#undef DO_
}

void CMsgDOTATournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournament)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 division_id = 2;
  if (has_division_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->division_id(), output);
  }

  // optional uint32 schedule_time = 3;
  if (has_schedule_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->schedule_time(), output);
  }

  // optional uint32 skill_level = 4;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (has_tournament_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tournament_template(), output);
  }

  // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // repeated .CMsgDOTATournament.Team teams = 7;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->teams(i), output);
  }

  // repeated .CMsgDOTATournament.Game games = 8;
  for (int i = 0; i < this->games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->games(i), output);
  }

  // repeated .CMsgDOTATournament.Node nodes = 9;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nodes(i), output);
  }

  // optional uint32 state_seq_num = 10;
  if (has_state_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->state_seq_num(), output);
  }

  // optional uint32 season_trophy_id = 11;
  if (has_season_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->season_trophy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournament)
}

::google::protobuf::uint8* CMsgDOTATournament::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 division_id = 2;
  if (has_division_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->division_id(), target);
  }

  // optional uint32 schedule_time = 3;
  if (has_schedule_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->schedule_time(), target);
  }

  // optional uint32 skill_level = 4;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (has_tournament_template()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tournament_template(), target);
  }

  // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // repeated .CMsgDOTATournament.Team teams = 7;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->teams(i), target);
  }

  // repeated .CMsgDOTATournament.Game games = 8;
  for (int i = 0; i < this->games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->games(i), target);
  }

  // repeated .CMsgDOTATournament.Node nodes = 9;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->nodes(i), target);
  }

  // optional uint32 state_seq_num = 10;
  if (has_state_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->state_seq_num(), target);
  }

  // optional uint32 season_trophy_id = 11;
  if (has_season_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->season_trophy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament)
  return target;
}

int CMsgDOTATournament::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 division_id = 2;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 schedule_time = 3;
    if (has_schedule_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule_time());
    }

    // optional uint32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
    if (has_tournament_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tournament_template());
    }

    // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 state_seq_num = 10;
    if (has_state_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_seq_num());
    }

    // optional uint32 season_trophy_id = 11;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  // repeated .CMsgDOTATournament.Team teams = 7;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .CMsgDOTATournament.Game games = 8;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  // repeated .CMsgDOTATournament.Node nodes = 9;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournament* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournament*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournament::MergeFrom(const CMsgDOTATournament& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  games_.MergeFrom(from.games_);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_division_id()) {
      set_division_id(from.division_id());
    }
    if (from.has_schedule_time()) {
      set_schedule_time(from.schedule_time());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_tournament_template()) {
      set_tournament_template(from.tournament_template());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_state_seq_num()) {
      set_state_seq_num(from.state_seq_num());
    }
    if (from.has_season_trophy_id()) {
      set_season_trophy_id(from.season_trophy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournament::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament::CopyFrom(const CMsgDOTATournament& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament::IsInitialized() const {

  return true;
}

void CMsgDOTATournament::Swap(CMsgDOTATournament* other) {
  if (other != this) {
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(division_id_, other->division_id_);
    std::swap(schedule_time_, other->schedule_time_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(tournament_template_, other->tournament_template_);
    std::swap(state_, other->state_);
    std::swap(state_seq_num_, other->state_seq_num_);
    std::swap(season_trophy_id_, other->season_trophy_id_);
    teams_.Swap(&other->teams_);
    games_.Swap(&other->games_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournament::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournament_descriptor_;
  metadata.reflection = CMsgDOTATournament_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournamentStateChange_GameChange::kMatchIdFieldNumber;
const int CMsgDOTATournamentStateChange_GameChange::kNewStateFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentStateChange.GameChange)
}

void CMsgDOTATournamentStateChange_GameChange::InitAsDefaultInstance() {
}

CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange(const CMsgDOTATournamentStateChange_GameChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentStateChange.GameChange)
}

void CMsgDOTATournamentStateChange_GameChange::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  new_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentStateChange_GameChange::~CMsgDOTATournamentStateChange_GameChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentStateChange.GameChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange_GameChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentStateChange_GameChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_GameChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentStateChange_GameChange_descriptor_;
}

const CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange_GameChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange_GameChange::default_instance_ = NULL;

CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange_GameChange::New() const {
  return new CMsgDOTATournamentStateChange_GameChange;
}

void CMsgDOTATournamentStateChange_GameChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentStateChange_GameChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_id_, new_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentStateChange_GameChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentStateChange.GameChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_state;
        break;
      }

      // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
      case 2: {
        if (tag == 16) {
         parse_new_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentGameState_IsValid(value)) {
            set_new_state(static_cast< ::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentStateChange.GameChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentStateChange.GameChange)
  return false;
#undef DO_
}

void CMsgDOTATournamentStateChange_GameChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentStateChange.GameChange)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (has_new_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentStateChange.GameChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange_GameChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentStateChange.GameChange)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (has_new_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentStateChange.GameChange)
  return target;
}

int CMsgDOTATournamentStateChange_GameChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
    if (has_new_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_GameChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentStateChange_GameChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_new_state()) {
      set_new_state(from.new_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_GameChange::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentStateChange_GameChange::Swap(CMsgDOTATournamentStateChange_GameChange* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(new_state_, other->new_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange_GameChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentStateChange_GameChange_descriptor_;
  metadata.reflection = CMsgDOTATournamentStateChange_GameChange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentStateChange_TeamChange::kTeamGidFieldNumber;
const int CMsgDOTATournamentStateChange_TeamChange::kNewNodeOrStateFieldNumber;
const int CMsgDOTATournamentStateChange_TeamChange::kOldNodeOrStateFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentStateChange.TeamChange)
}

void CMsgDOTATournamentStateChange_TeamChange::InitAsDefaultInstance() {
}

CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange(const CMsgDOTATournamentStateChange_TeamChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentStateChange.TeamChange)
}

void CMsgDOTATournamentStateChange_TeamChange::SharedCtor() {
  _cached_size_ = 0;
  team_gid_ = GOOGLE_ULONGLONG(0);
  new_node_or_state_ = 0u;
  old_node_or_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentStateChange_TeamChange::~CMsgDOTATournamentStateChange_TeamChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentStateChange.TeamChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange_TeamChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentStateChange_TeamChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_TeamChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentStateChange_TeamChange_descriptor_;
}

const CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange_TeamChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange_TeamChange::default_instance_ = NULL;

CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange_TeamChange::New() const {
  return new CMsgDOTATournamentStateChange_TeamChange;
}

void CMsgDOTATournamentStateChange_TeamChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentStateChange_TeamChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(team_gid_, old_node_or_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentStateChange_TeamChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentStateChange.TeamChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_gid_)));
          set_has_team_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_node_or_state;
        break;
      }

      // optional uint32 new_node_or_state = 2;
      case 2: {
        if (tag == 16) {
         parse_new_node_or_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_node_or_state_)));
          set_has_new_node_or_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_old_node_or_state;
        break;
      }

      // optional uint32 old_node_or_state = 3;
      case 3: {
        if (tag == 24) {
         parse_old_node_or_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_node_or_state_)));
          set_has_old_node_or_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentStateChange.TeamChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentStateChange.TeamChange)
  return false;
#undef DO_
}

void CMsgDOTATournamentStateChange_TeamChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentStateChange.TeamChange)
  // optional uint64 team_gid = 1;
  if (has_team_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_gid(), output);
  }

  // optional uint32 new_node_or_state = 2;
  if (has_new_node_or_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_node_or_state(), output);
  }

  // optional uint32 old_node_or_state = 3;
  if (has_old_node_or_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_node_or_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentStateChange.TeamChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange_TeamChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentStateChange.TeamChange)
  // optional uint64 team_gid = 1;
  if (has_team_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_gid(), target);
  }

  // optional uint32 new_node_or_state = 2;
  if (has_new_node_or_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_node_or_state(), target);
  }

  // optional uint32 old_node_or_state = 3;
  if (has_old_node_or_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_node_or_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentStateChange.TeamChange)
  return target;
}

int CMsgDOTATournamentStateChange_TeamChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 team_gid = 1;
    if (has_team_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_gid());
    }

    // optional uint32 new_node_or_state = 2;
    if (has_new_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_node_or_state());
    }

    // optional uint32 old_node_or_state = 3;
    if (has_old_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_node_or_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_TeamChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentStateChange_TeamChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_gid()) {
      set_team_gid(from.team_gid());
    }
    if (from.has_new_node_or_state()) {
      set_new_node_or_state(from.new_node_or_state());
    }
    if (from.has_old_node_or_state()) {
      set_old_node_or_state(from.old_node_or_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_TeamChange::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentStateChange_TeamChange::Swap(CMsgDOTATournamentStateChange_TeamChange* other) {
  if (other != this) {
    std::swap(team_gid_, other->team_gid_);
    std::swap(new_node_or_state_, other->new_node_or_state_);
    std::swap(old_node_or_state_, other->old_node_or_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange_TeamChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentStateChange_TeamChange_descriptor_;
  metadata.reflection = CMsgDOTATournamentStateChange_TeamChange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTATournamentStateChange::kNewTournamentIdFieldNumber;
const int CMsgDOTATournamentStateChange::kEventFieldNumber;
const int CMsgDOTATournamentStateChange::kNewTournamentStateFieldNumber;
const int CMsgDOTATournamentStateChange::kGameChangesFieldNumber;
const int CMsgDOTATournamentStateChange::kTeamChangesFieldNumber;
const int CMsgDOTATournamentStateChange::kMergedTournamentIdsFieldNumber;
const int CMsgDOTATournamentStateChange::kStateSeqNumFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentStateChange)
}

void CMsgDOTATournamentStateChange::InitAsDefaultInstance() {
}

CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange(const CMsgDOTATournamentStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentStateChange)
}

void CMsgDOTATournamentStateChange::SharedCtor() {
  _cached_size_ = 0;
  new_tournament_id_ = 0u;
  event_ = 0;
  new_tournament_state_ = 0;
  state_seq_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentStateChange::~CMsgDOTATournamentStateChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentStateChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentStateChange_descriptor_;
}

const CMsgDOTATournamentStateChange& CMsgDOTATournamentStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentStateChange* CMsgDOTATournamentStateChange::default_instance_ = NULL;

CMsgDOTATournamentStateChange* CMsgDOTATournamentStateChange::New() const {
  return new CMsgDOTATournamentStateChange;
}

void CMsgDOTATournamentStateChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentStateChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(new_tournament_id_, event_);
  ZR_(new_tournament_state_, state_seq_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  game_changes_.Clear();
  team_changes_.Clear();
  merged_tournament_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentStateChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_tournament_id_)));
          set_has_new_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }

      // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
      case 2: {
        if (tag == 16) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentEvent_IsValid(value)) {
            set_event(static_cast< ::ETournamentEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_tournament_state;
        break;
      }

      // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
      case 3: {
        if (tag == 24) {
         parse_new_tournament_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETournamentState_IsValid(value)) {
            set_new_tournament_state(static_cast< ::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_changes;
        break;
      }

      // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
      case 4: {
        if (tag == 34) {
         parse_game_changes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_changes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_changes;
        if (input->ExpectTag(42)) goto parse_team_changes;
        break;
      }

      // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
      case 5: {
        if (tag == 42) {
         parse_team_changes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_changes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_changes;
        if (input->ExpectTag(50)) goto parse_merged_tournament_ids;
        break;
      }

      // repeated uint32 merged_tournament_ids = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_merged_tournament_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_merged_tournament_ids())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_merged_tournament_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state_seq_num;
        break;
      }

      // optional uint32 state_seq_num = 7;
      case 7: {
        if (tag == 56) {
         parse_state_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_seq_num_)));
          set_has_state_seq_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentStateChange)
  return false;
#undef DO_
}

void CMsgDOTATournamentStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentStateChange)
  // optional uint32 new_tournament_id = 1;
  if (has_new_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_tournament_id(), output);
  }

  // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event(), output);
  }

  // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (has_new_tournament_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_tournament_state(), output);
  }

  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (int i = 0; i < this->game_changes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->game_changes(i), output);
  }

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (int i = 0; i < this->team_changes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_changes(i), output);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  if (this->merged_tournament_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_merged_tournament_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->merged_tournament_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->merged_tournament_ids(i), output);
  }

  // optional uint32 state_seq_num = 7;
  if (has_state_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state_seq_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentStateChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentStateChange)
  // optional uint32 new_tournament_id = 1;
  if (has_new_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_tournament_id(), target);
  }

  // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event(), target);
  }

  // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (has_new_tournament_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_tournament_state(), target);
  }

  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (int i = 0; i < this->game_changes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->game_changes(i), target);
  }

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (int i = 0; i < this->team_changes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_changes(i), target);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  if (this->merged_tournament_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _merged_tournament_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->merged_tournament_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->merged_tournament_ids(i), target);
  }

  // optional uint32 state_seq_num = 7;
  if (has_state_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state_seq_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentStateChange)
  return target;
}

int CMsgDOTATournamentStateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 new_tournament_id = 1;
    if (has_new_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_tournament_id());
    }

    // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
    if (has_new_tournament_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_tournament_state());
    }

    // optional uint32 state_seq_num = 7;
    if (has_state_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_seq_num());
    }

  }
  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  total_size += 1 * this->game_changes_size();
  for (int i = 0; i < this->game_changes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_changes(i));
  }

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  total_size += 1 * this->team_changes_size();
  for (int i = 0; i < this->team_changes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_changes(i));
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->merged_tournament_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->merged_tournament_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _merged_tournament_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange::MergeFrom(const CMsgDOTATournamentStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_changes_.MergeFrom(from.game_changes_);
  team_changes_.MergeFrom(from.team_changes_);
  merged_tournament_ids_.MergeFrom(from.merged_tournament_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_tournament_id()) {
      set_new_tournament_id(from.new_tournament_id());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_new_tournament_state()) {
      set_new_tournament_state(from.new_tournament_state());
    }
    if (from.has_state_seq_num()) {
      set_state_seq_num(from.state_seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange::CopyFrom(const CMsgDOTATournamentStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentStateChange::Swap(CMsgDOTATournamentStateChange* other) {
  if (other != this) {
    std::swap(new_tournament_id_, other->new_tournament_id_);
    std::swap(event_, other->event_);
    std::swap(new_tournament_state_, other->new_tournament_state_);
    game_changes_.Swap(&other->game_changes_);
    team_changes_.Swap(&other->team_changes_);
    merged_tournament_ids_.Swap(&other->merged_tournament_ids_);
    std::swap(state_seq_num_, other->state_seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentStateChange_descriptor_;
  metadata.reflection = CMsgDOTATournamentStateChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournamentRequest::kTournamentIdFieldNumber;
const int CMsgDOTATournamentRequest::kClientTournamentGidFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::InitAsDefaultInstance() {
}

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  client_tournament_gid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentRequest::~CMsgDOTATournamentRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentRequest)
  SharedDtor();
}

void CMsgDOTATournamentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTATournamentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentRequest_descriptor_;
}

const CMsgDOTATournamentRequest& CMsgDOTATournamentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentRequest* CMsgDOTATournamentRequest::default_instance_ = NULL;

CMsgDOTATournamentRequest* CMsgDOTATournamentRequest::New() const {
  return new CMsgDOTATournamentRequest;
}

void CMsgDOTATournamentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTATournamentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(client_tournament_gid_, tournament_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_tournament_gid;
        break;
      }

      // optional uint64 client_tournament_gid = 2;
      case 2: {
        if (tag == 16) {
         parse_client_tournament_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_tournament_gid_)));
          set_has_client_tournament_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentRequest)
  return false;
#undef DO_
}

void CMsgDOTATournamentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentRequest)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint64 client_tournament_gid = 2;
  if (has_client_tournament_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->client_tournament_gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentRequest)
}

::google::protobuf::uint8* CMsgDOTATournamentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentRequest)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint64 client_tournament_gid = 2;
  if (has_client_tournament_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->client_tournament_gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentRequest)
  return target;
}

int CMsgDOTATournamentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint64 client_tournament_gid = 2;
    if (has_client_tournament_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_tournament_gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentRequest::MergeFrom(const CMsgDOTATournamentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_client_tournament_gid()) {
      set_client_tournament_gid(from.client_tournament_gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentRequest::CopyFrom(const CMsgDOTATournamentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentRequest::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentRequest::Swap(CMsgDOTATournamentRequest* other) {
  if (other != this) {
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(client_tournament_gid_, other->client_tournament_gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentRequest_descriptor_;
  metadata.reflection = CMsgDOTATournamentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTATournamentResponse::kResultFieldNumber;
const int CMsgDOTATournamentResponse::kTournamentFieldNumber;
#endif  // !_MSC_VER

CMsgDOTATournamentResponse::CMsgDOTATournamentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::InitAsDefaultInstance() {
  tournament_ = const_cast< ::CMsgDOTATournament*>(&::CMsgDOTATournament::default_instance());
}

CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 2u;
  tournament_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTATournamentResponse::~CMsgDOTATournamentResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentResponse)
  SharedDtor();
}

void CMsgDOTATournamentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tournament_;
  }
}

void CMsgDOTATournamentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTATournamentResponse_descriptor_;
}

const CMsgDOTATournamentResponse& CMsgDOTATournamentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTATournamentResponse* CMsgDOTATournamentResponse::default_instance_ = NULL;

CMsgDOTATournamentResponse* CMsgDOTATournamentResponse::New() const {
  return new CMsgDOTATournamentResponse;
}

void CMsgDOTATournamentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 2u;
    if (has_tournament()) {
      if (tournament_ != NULL) tournament_->::CMsgDOTATournament::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTATournamentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTATournamentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tournament;
        break;
      }

      // optional .CMsgDOTATournament tournament = 2;
      case 2: {
        if (tag == 18) {
         parse_tournament:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTATournamentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTATournamentResponse)
  return false;
#undef DO_
}

void CMsgDOTATournamentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTATournamentResponse)
  // optional uint32 result = 1 [default = 2];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .CMsgDOTATournament tournament = 2;
  if (has_tournament()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tournament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTATournamentResponse)
}

::google::protobuf::uint8* CMsgDOTATournamentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentResponse)
  // optional uint32 result = 1 [default = 2];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .CMsgDOTATournament tournament = 2;
  if (has_tournament()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tournament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentResponse)
  return target;
}

int CMsgDOTATournamentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1 [default = 2];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .CMsgDOTATournament tournament = 2;
    if (has_tournament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournament());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTATournamentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTATournamentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentResponse::MergeFrom(const CMsgDOTATournamentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tournament()) {
      mutable_tournament()->::CMsgDOTATournament::MergeFrom(from.tournament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTATournamentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentResponse::CopyFrom(const CMsgDOTATournamentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentResponse::IsInitialized() const {

  return true;
}

void CMsgDOTATournamentResponse::Swap(CMsgDOTATournamentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tournament_, other->tournament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTATournamentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTATournamentResponse_descriptor_;
  metadata.reflection = CMsgDOTATournamentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAClearTournamentGame::kTournamentIdFieldNumber;
const int CMsgDOTAClearTournamentGame::kGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::InitAsDefaultInstance() {
}

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::SharedCtor() {
  _cached_size_ = 0;
  tournament_id_ = 0u;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAClearTournamentGame::~CMsgDOTAClearTournamentGame() {
  // @@protoc_insertion_point(destructor:CMsgDOTAClearTournamentGame)
  SharedDtor();
}

void CMsgDOTAClearTournamentGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAClearTournamentGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAClearTournamentGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAClearTournamentGame_descriptor_;
}

const CMsgDOTAClearTournamentGame& CMsgDOTAClearTournamentGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAClearTournamentGame* CMsgDOTAClearTournamentGame::default_instance_ = NULL;

CMsgDOTAClearTournamentGame* CMsgDOTAClearTournamentGame::New() const {
  return new CMsgDOTAClearTournamentGame;
}

void CMsgDOTAClearTournamentGame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAClearTournamentGame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tournament_id_, game_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAClearTournamentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAClearTournamentGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAClearTournamentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAClearTournamentGame)
  return false;
#undef DO_
}

void CMsgDOTAClearTournamentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAClearTournamentGame)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAClearTournamentGame)
}

::google::protobuf::uint8* CMsgDOTAClearTournamentGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAClearTournamentGame)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAClearTournamentGame)
  return target;
}

int CMsgDOTAClearTournamentGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAClearTournamentGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAClearTournamentGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAClearTournamentGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAClearTournamentGame::MergeFrom(const CMsgDOTAClearTournamentGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAClearTournamentGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClearTournamentGame::CopyFrom(const CMsgDOTAClearTournamentGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClearTournamentGame::IsInitialized() const {

  return true;
}

void CMsgDOTAClearTournamentGame::Swap(CMsgDOTAClearTournamentGame* other) {
  if (other != this) {
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAClearTournamentGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAClearTournamentGame_descriptor_;
  metadata.reflection = CMsgDOTAClearTournamentGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kSkillLevelFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon0FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon1FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon2FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon3FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesByeAndLostFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesByeAndWonFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTotalGamesWonFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedCtor() {
  _cached_size_ = 0;
  skill_level_ = 0u;
  times_won_0_ = 0u;
  times_won_1_ = 0u;
  times_won_2_ = 0u;
  times_won_3_ = 0u;
  times_bye_and_lost_ = 0u;
  times_bye_and_won_ = 0u;
  total_games_won_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::~CMsgDOTAWeekendTourneyPlayerSkillLevelStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyPlayerSkillLevelStats_descriptor_;
}

const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance_ = NULL;

CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::New() const {
  return new CMsgDOTAWeekendTourneyPlayerSkillLevelStats;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyPlayerSkillLevelStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(skill_level_, total_games_won_);
  }
  score_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times_won_0;
        break;
      }

      // optional uint32 times_won_0 = 2;
      case 2: {
        if (tag == 16) {
         parse_times_won_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_0_)));
          set_has_times_won_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_times_won_1;
        break;
      }

      // optional uint32 times_won_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_times_won_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_1_)));
          set_has_times_won_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_times_won_2;
        break;
      }

      // optional uint32 times_won_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_times_won_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_2_)));
          set_has_times_won_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_times_won_3;
        break;
      }

      // optional uint32 times_won_3 = 5;
      case 5: {
        if (tag == 40) {
         parse_times_won_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_3_)));
          set_has_times_won_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_times_bye_and_lost;
        break;
      }

      // optional uint32 times_bye_and_lost = 6;
      case 6: {
        if (tag == 48) {
         parse_times_bye_and_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_bye_and_lost_)));
          set_has_times_bye_and_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_times_bye_and_won;
        break;
      }

      // optional uint32 times_bye_and_won = 7;
      case 7: {
        if (tag == 56) {
         parse_times_bye_and_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_bye_and_won_)));
          set_has_times_bye_and_won();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_total_games_won;
        break;
      }

      // optional uint32 total_games_won = 8;
      case 8: {
        if (tag == 64) {
         parse_total_games_won:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_won_)));
          set_has_total_games_won();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_score;
        break;
      }

      // optional uint32 score = 9;
      case 9: {
        if (tag == 72) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  // optional uint32 skill_level = 1;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_level(), output);
  }

  // optional uint32 times_won_0 = 2;
  if (has_times_won_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times_won_0(), output);
  }

  // optional uint32 times_won_1 = 3;
  if (has_times_won_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times_won_1(), output);
  }

  // optional uint32 times_won_2 = 4;
  if (has_times_won_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->times_won_2(), output);
  }

  // optional uint32 times_won_3 = 5;
  if (has_times_won_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times_won_3(), output);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (has_times_bye_and_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->times_bye_and_lost(), output);
  }

  // optional uint32 times_bye_and_won = 7;
  if (has_times_bye_and_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->times_bye_and_won(), output);
  }

  // optional uint32 total_games_won = 8;
  if (has_total_games_won()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_games_won(), output);
  }

  // optional uint32 score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  // optional uint32 skill_level = 1;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_level(), target);
  }

  // optional uint32 times_won_0 = 2;
  if (has_times_won_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times_won_0(), target);
  }

  // optional uint32 times_won_1 = 3;
  if (has_times_won_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times_won_1(), target);
  }

  // optional uint32 times_won_2 = 4;
  if (has_times_won_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->times_won_2(), target);
  }

  // optional uint32 times_won_3 = 5;
  if (has_times_won_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times_won_3(), target);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (has_times_bye_and_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->times_bye_and_lost(), target);
  }

  // optional uint32 times_bye_and_won = 7;
  if (has_times_bye_and_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->times_bye_and_won(), target);
  }

  // optional uint32 total_games_won = 8;
  if (has_total_games_won()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_games_won(), target);
  }

  // optional uint32 score = 9;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return target;
}

int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_level = 1;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 times_won_0 = 2;
    if (has_times_won_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_0());
    }

    // optional uint32 times_won_1 = 3;
    if (has_times_won_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_1());
    }

    // optional uint32 times_won_2 = 4;
    if (has_times_won_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_2());
    }

    // optional uint32 times_won_3 = 5;
    if (has_times_won_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_3());
    }

    // optional uint32 times_bye_and_lost = 6;
    if (has_times_bye_and_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_bye_and_lost());
    }

    // optional uint32 times_bye_and_won = 7;
    if (has_times_bye_and_won()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_bye_and_won());
    }

    // optional uint32 total_games_won = 8;
    if (has_total_games_won()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games_won());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerSkillLevelStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyPlayerSkillLevelStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_times_won_0()) {
      set_times_won_0(from.times_won_0());
    }
    if (from.has_times_won_1()) {
      set_times_won_1(from.times_won_1());
    }
    if (from.has_times_won_2()) {
      set_times_won_2(from.times_won_2());
    }
    if (from.has_times_won_3()) {
      set_times_won_3(from.times_won_3());
    }
    if (from.has_times_bye_and_lost()) {
      set_times_bye_and_lost(from.times_bye_and_lost());
    }
    if (from.has_times_bye_and_won()) {
      set_times_bye_and_won(from.times_bye_and_won());
    }
    if (from.has_total_games_won()) {
      set_total_games_won(from.total_games_won());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Swap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
  if (other != this) {
    std::swap(skill_level_, other->skill_level_);
    std::swap(times_won_0_, other->times_won_0_);
    std::swap(times_won_1_, other->times_won_1_);
    std::swap(times_won_2_, other->times_won_2_);
    std::swap(times_won_3_, other->times_won_3_);
    std::swap(times_bye_and_lost_, other->times_bye_and_lost_);
    std::swap(times_bye_and_won_, other->times_bye_and_won_);
    std::swap(total_games_won_, other->total_games_won_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerSkillLevelStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyPlayerSkillLevelStats_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyPlayerSkillLevelStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyPlayerStats::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kSeasonTrophyIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kSkillLevelsFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kCurrentTierFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyPlayerStats)
}

void CMsgDOTAWeekendTourneyPlayerStats::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats(const CMsgDOTAWeekendTourneyPlayerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerStats)
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  season_trophy_id_ = 0u;
  current_tier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyPlayerStats::~CMsgDOTAWeekendTourneyPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerStats)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyPlayerStats_descriptor_;
}

const CMsgDOTAWeekendTourneyPlayerStats& CMsgDOTAWeekendTourneyPlayerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyPlayerStats* CMsgDOTAWeekendTourneyPlayerStats::default_instance_ = NULL;

CMsgDOTAWeekendTourneyPlayerStats* CMsgDOTAWeekendTourneyPlayerStats::New() const {
  return new CMsgDOTAWeekendTourneyPlayerStats;
}

void CMsgDOTAWeekendTourneyPlayerStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyPlayerStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(account_id_, season_trophy_id_);
    current_tier_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skill_levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_season_trophy_id;
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (tag == 16) {
         parse_season_trophy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
          set_has_season_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skill_levels;
        break;
      }

      // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
      case 3: {
        if (tag == 26) {
         parse_skill_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_levels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skill_levels;
        if (input->ExpectTag(32)) goto parse_current_tier;
        break;
      }

      // optional uint32 current_tier = 4;
      case 4: {
        if (tag == 32) {
         parse_current_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_tier_)));
          set_has_current_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyPlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyPlayerStats)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (has_season_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (int i = 0; i < this->skill_levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_levels(i), output);
  }

  // optional uint32 current_tier = 4;
  if (has_current_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_tier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerStats)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (has_season_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (int i = 0; i < this->skill_levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_levels(i), target);
  }

  // optional uint32 current_tier = 4;
  if (has_current_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_tier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerStats)
  return target;
}

int CMsgDOTAWeekendTourneyPlayerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

    // optional uint32 current_tier = 4;
    if (has_current_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_tier());
    }

  }
  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  total_size += 1 * this->skill_levels_size();
  for (int i = 0; i < this->skill_levels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_levels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyPlayerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_levels_.MergeFrom(from.skill_levels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_season_trophy_id()) {
      set_season_trophy_id(from.season_trophy_id());
    }
    if (from.has_current_tier()) {
      set_current_tier(from.current_tier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStats::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyPlayerStats::Swap(CMsgDOTAWeekendTourneyPlayerStats* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(season_trophy_id_, other->season_trophy_id_);
    skill_levels_.Swap(&other->skill_levels_);
    std::swap(current_tier_, other->current_tier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyPlayerStats_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyPlayerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyPlayerStatsRequest::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStatsRequest::kSeasonTrophyIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  season_trophy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyPlayerStatsRequest::~CMsgDOTAWeekendTourneyPlayerStatsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyPlayerStatsRequest_descriptor_;
}

const CMsgDOTAWeekendTourneyPlayerStatsRequest& CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyPlayerStatsRequest* CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance_ = NULL;

CMsgDOTAWeekendTourneyPlayerStatsRequest* CMsgDOTAWeekendTourneyPlayerStatsRequest::New() const {
  return new CMsgDOTAWeekendTourneyPlayerStatsRequest;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyPlayerStatsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, season_trophy_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyPlayerStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_season_trophy_id;
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (tag == 16) {
         parse_season_trophy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
          set_has_season_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (has_season_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerStatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (has_season_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return target;
}

int CMsgDOTAWeekendTourneyPlayerStatsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStatsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyPlayerStatsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_season_trophy_id()) {
      set_season_trophy_id(from.season_trophy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStatsRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::Swap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(season_trophy_id_, other->season_trophy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyPlayerStatsRequest_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyPlayerStatsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyPlayerHistoryRequest::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistoryRequest::kSeasonTrophyIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  season_trophy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest::~CMsgDOTAWeekendTourneyPlayerHistoryRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyPlayerHistoryRequest_descriptor_;
}

const CMsgDOTAWeekendTourneyPlayerHistoryRequest& CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest* CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance_ = NULL;

CMsgDOTAWeekendTourneyPlayerHistoryRequest* CMsgDOTAWeekendTourneyPlayerHistoryRequest::New() const {
  return new CMsgDOTAWeekendTourneyPlayerHistoryRequest;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyPlayerHistoryRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, season_trophy_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_season_trophy_id;
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (tag == 16) {
         parse_season_trophy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
          set_has_season_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (has_season_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (has_season_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return target;
}

int CMsgDOTAWeekendTourneyPlayerHistoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyPlayerHistoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_season_trophy_id()) {
      set_season_trophy_id(from.season_trophy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Swap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(season_trophy_id_, other->season_trophy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyPlayerHistoryRequest_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyPlayerHistoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTournamentIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kStartTimeFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTournamentTierFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamDateFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamResultFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamNameFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kSeasonTrophyIdFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tournament_id_ = 0u;
  start_time_ = 0u;
  tournament_tier_ = 0u;
  team_id_ = 0u;
  team_date_ = 0u;
  team_result_ = 0u;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  season_trophy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::~CMsgDOTAWeekendTourneyPlayerHistory_Tournament() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyPlayerHistory_Tournament_descriptor_;
}

const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance_ = NULL;

CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::New() const {
  return new CMsgDOTAWeekendTourneyPlayerHistory_Tournament;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyPlayerHistory_Tournament*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(tournament_id_, team_result_);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_->clear();
      }
    }
  }
  season_trophy_id_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  account_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
          set_has_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tournament_tier;
        break;
      }

      // optional uint32 tournament_tier = 3;
      case 3: {
        if (tag == 24) {
         parse_tournament_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_tier_)));
          set_has_tournament_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (tag == 32) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team_date;
        break;
      }

      // optional uint32 team_date = 5;
      case 5: {
        if (tag == 40) {
         parse_team_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_date_)));
          set_has_team_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team_result;
        break;
      }

      // optional uint32 team_result = 6;
      case 6: {
        if (tag == 48) {
         parse_team_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_result_)));
          set_has_team_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_account_id;
        break;
      }

      // repeated uint32 account_id = 7;
      case 7: {
        if (tag == 56) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_account_id())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_account_id;
        if (input->ExpectTag(66)) goto parse_team_name;
        break;
      }

      // optional string team_name = 8;
      case 8: {
        if (tag == 66) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_season_trophy_id;
        break;
      }

      // optional uint32 season_trophy_id = 9;
      case 9: {
        if (tag == 72) {
         parse_season_trophy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
          set_has_season_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional uint32 tournament_tier = 3;
  if (has_tournament_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_tier(), output);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 team_date = 5;
  if (has_team_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_date(), output);
  }

  // optional uint32 team_result = 6;
  if (has_team_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_result(), output);
  }

  // repeated uint32 account_id = 7;
  for (int i = 0; i < this->account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->account_id(i), output);
  }

  // optional string team_name = 8;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->team_name(), output);
  }

  // optional uint32 season_trophy_id = 9;
  if (has_season_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->season_trophy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  // optional uint32 tournament_id = 1;
  if (has_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional uint32 tournament_tier = 3;
  if (has_tournament_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_tier(), target);
  }

  // optional uint32 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 team_date = 5;
  if (has_team_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_date(), target);
  }

  // optional uint32 team_result = 6;
  if (has_team_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_result(), target);
  }

  // repeated uint32 account_id = 7;
  for (int i = 0; i < this->account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->account_id(i), target);
  }

  // optional string team_name = 8;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team_name(), target);
  }

  // optional uint32 season_trophy_id = 9;
  if (has_season_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->season_trophy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return target;
}

int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 tournament_tier = 3;
    if (has_tournament_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_tier());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 team_date = 5;
    if (has_team_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_date());
    }

    // optional uint32 team_result = 6;
    if (has_team_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_result());
    }

    // optional string team_name = 8;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 season_trophy_id = 9;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  // repeated uint32 account_id = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->account_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->account_id(i));
    }
    total_size += 1 * this->account_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory_Tournament* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyPlayerHistory_Tournament*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_id_.MergeFrom(from.account_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournament_id()) {
      set_tournament_id(from.tournament_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_tournament_tier()) {
      set_tournament_tier(from.tournament_tier());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_date()) {
      set_team_date(from.team_date());
    }
    if (from.has_team_result()) {
      set_team_result(from.team_result());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_season_trophy_id()) {
      set_season_trophy_id(from.season_trophy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Swap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
  if (other != this) {
    std::swap(tournament_id_, other->tournament_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(tournament_tier_, other->tournament_tier_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_date_, other->team_date_);
    std::swap(team_result_, other->team_result_);
    account_id_.Swap(&other->account_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(season_trophy_id_, other->season_trophy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistory_Tournament::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyPlayerHistory_Tournament_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyPlayerHistory_Tournament_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyPlayerHistory::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory::kTournamentsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyPlayerHistory)
}

void CMsgDOTAWeekendTourneyPlayerHistory::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory(const CMsgDOTAWeekendTourneyPlayerHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerHistory)
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyPlayerHistory::~CMsgDOTAWeekendTourneyPlayerHistory() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerHistory)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyPlayerHistory_descriptor_;
}

const CMsgDOTAWeekendTourneyPlayerHistory& CMsgDOTAWeekendTourneyPlayerHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyPlayerHistory* CMsgDOTAWeekendTourneyPlayerHistory::default_instance_ = NULL;

CMsgDOTAWeekendTourneyPlayerHistory* CMsgDOTAWeekendTourneyPlayerHistory::New() const {
  return new CMsgDOTAWeekendTourneyPlayerHistory;
}

void CMsgDOTAWeekendTourneyPlayerHistory::Clear() {
  account_id_ = 0u;
  tournaments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyPlayerHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyPlayerHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tournaments;
        break;
      }

      // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
      case 3: {
        if (tag == 26) {
         parse_tournaments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournaments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tournaments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyPlayerHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyPlayerHistory)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyPlayerHistory)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (int i = 0; i < this->tournaments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tournaments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyPlayerHistory)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerHistory)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (int i = 0; i < this->tournaments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tournaments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerHistory)
  return target;
}

int CMsgDOTAWeekendTourneyPlayerHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  total_size += 1 * this->tournaments_size();
  for (int i = 0; i < this->tournaments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournaments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyPlayerHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  tournaments_.MergeFrom(from.tournaments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory::Swap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    tournaments_.Swap(&other->tournaments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyPlayerHistory_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyPlayerHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kTierFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kTeamsFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kWinningTeamsFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak2FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak3FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak4FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak5FieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedCtor() {
  _cached_size_ = 0;
  tier_ = 0u;
  players_ = 0u;
  teams_ = 0u;
  winning_teams_ = 0u;
  players_streak_2_ = 0u;
  players_streak_3_ = 0u;
  players_streak_4_ = 0u;
  players_streak_5_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier::~CMsgDOTAWeekendTourneyParticipationDetails_Tier() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_Tier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyParticipationDetails_Tier_descriptor_;
}

const CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance_ = NULL;

CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Tier::New() const {
  return new CMsgDOTAWeekendTourneyParticipationDetails_Tier;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyParticipationDetails_Tier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tier_, players_streak_5_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_players;
        break;
      }

      // optional uint32 players = 2;
      case 2: {
        if (tag == 16) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teams;
        break;
      }

      // optional uint32 teams = 3;
      case 3: {
        if (tag == 24) {
         parse_teams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teams_)));
          set_has_teams();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_winning_teams;
        break;
      }

      // optional uint32 winning_teams = 4;
      case 4: {
        if (tag == 32) {
         parse_winning_teams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_teams_)));
          set_has_winning_teams();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_players_streak_2;
        break;
      }

      // optional uint32 players_streak_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_players_streak_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_2_)));
          set_has_players_streak_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_players_streak_3;
        break;
      }

      // optional uint32 players_streak_3 = 6;
      case 6: {
        if (tag == 48) {
         parse_players_streak_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_3_)));
          set_has_players_streak_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_players_streak_4;
        break;
      }

      // optional uint32 players_streak_4 = 7;
      case 7: {
        if (tag == 56) {
         parse_players_streak_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_4_)));
          set_has_players_streak_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_players_streak_5;
        break;
      }

      // optional uint32 players_streak_5 = 8;
      case 8: {
        if (tag == 64) {
         parse_players_streak_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_5_)));
          set_has_players_streak_5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  // optional uint32 tier = 1;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tier(), output);
  }

  // optional uint32 players = 2;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->players(), output);
  }

  // optional uint32 teams = 3;
  if (has_teams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teams(), output);
  }

  // optional uint32 winning_teams = 4;
  if (has_winning_teams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winning_teams(), output);
  }

  // optional uint32 players_streak_2 = 5;
  if (has_players_streak_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->players_streak_2(), output);
  }

  // optional uint32 players_streak_3 = 6;
  if (has_players_streak_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_streak_3(), output);
  }

  // optional uint32 players_streak_4 = 7;
  if (has_players_streak_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->players_streak_4(), output);
  }

  // optional uint32 players_streak_5 = 8;
  if (has_players_streak_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->players_streak_5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Tier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  // optional uint32 tier = 1;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tier(), target);
  }

  // optional uint32 players = 2;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->players(), target);
  }

  // optional uint32 teams = 3;
  if (has_teams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teams(), target);
  }

  // optional uint32 winning_teams = 4;
  if (has_winning_teams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winning_teams(), target);
  }

  // optional uint32 players_streak_2 = 5;
  if (has_players_streak_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->players_streak_2(), target);
  }

  // optional uint32 players_streak_3 = 6;
  if (has_players_streak_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_streak_3(), target);
  }

  // optional uint32 players_streak_4 = 7;
  if (has_players_streak_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->players_streak_4(), target);
  }

  // optional uint32 players_streak_5 = 8;
  if (has_players_streak_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->players_streak_5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return target;
}

int CMsgDOTAWeekendTourneyParticipationDetails_Tier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tier = 1;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 players = 2;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional uint32 teams = 3;
    if (has_teams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teams());
    }

    // optional uint32 winning_teams = 4;
    if (has_winning_teams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_teams());
    }

    // optional uint32 players_streak_2 = 5;
    if (has_players_streak_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_2());
    }

    // optional uint32 players_streak_3 = 6;
    if (has_players_streak_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_3());
    }

    // optional uint32 players_streak_4 = 7;
    if (has_players_streak_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_4());
    }

    // optional uint32 players_streak_5 = 8;
    if (has_players_streak_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Tier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyParticipationDetails_Tier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_teams()) {
      set_teams(from.teams());
    }
    if (from.has_winning_teams()) {
      set_winning_teams(from.winning_teams());
    }
    if (from.has_players_streak_2()) {
      set_players_streak_2(from.players_streak_2());
    }
    if (from.has_players_streak_3()) {
      set_players_streak_3(from.players_streak_3());
    }
    if (from.has_players_streak_4()) {
      set_players_streak_4(from.players_streak_4());
    }
    if (from.has_players_streak_5()) {
      set_players_streak_5(from.players_streak_5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Swap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
  if (other != this) {
    std::swap(tier_, other->tier_);
    std::swap(players_, other->players_);
    std::swap(teams_, other->teams_);
    std::swap(winning_teams_, other->winning_teams_);
    std::swap(players_streak_2_, other->players_streak_2_);
    std::swap(players_streak_3_, other->players_streak_3_);
    std::swap(players_streak_4_, other->players_streak_4_);
    std::swap(players_streak_5_, other->players_streak_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Tier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyParticipationDetails_Tier_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyParticipationDetails_Tier_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kDivisionIdFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kScheduleTimeFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kTiersFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedCtor() {
  _cached_size_ = 0;
  division_id_ = 0u;
  schedule_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Division::~CMsgDOTAWeekendTourneyParticipationDetails_Division() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_Division::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyParticipationDetails_Division_descriptor_;
}

const CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance_ = NULL;

CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails_Division::New() const {
  return new CMsgDOTAWeekendTourneyParticipationDetails_Division;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAWeekendTourneyParticipationDetails_Division*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(division_id_, schedule_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Division::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
          set_has_division_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_schedule_time;
        break;
      }

      // optional uint32 schedule_time = 2;
      case 2: {
        if (tag == 16) {
         parse_schedule_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_time_)));
          set_has_schedule_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tiers;
        break;
      }

      // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
      case 3: {
        if (tag == 26) {
         parse_tiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tiers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  // optional uint32 division_id = 1;
  if (has_division_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division_id(), output);
  }

  // optional uint32 schedule_time = 2;
  if (has_schedule_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule_time(), output);
  }

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (int i = 0; i < this->tiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tiers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Division::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  // optional uint32 division_id = 1;
  if (has_division_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division_id(), target);
  }

  // optional uint32 schedule_time = 2;
  if (has_schedule_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule_time(), target);
  }

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (int i = 0; i < this->tiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tiers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return target;
}

int CMsgDOTAWeekendTourneyParticipationDetails_Division::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 division_id = 1;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 schedule_time = 2;
    if (has_schedule_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule_time());
    }

  }
  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  total_size += 1 * this->tiers_size();
  for (int i = 0; i < this->tiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Division* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyParticipationDetails_Division*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
  GOOGLE_CHECK_NE(&from, this);
  tiers_.MergeFrom(from.tiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_division_id()) {
      set_division_id(from.division_id());
    }
    if (from.has_schedule_time()) {
      set_schedule_time(from.schedule_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Division::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::Swap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
  if (other != this) {
    std::swap(division_id_, other->division_id_);
    std::swap(schedule_time_, other->schedule_time_);
    tiers_.Swap(&other->tiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Division::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyParticipationDetails_Division_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyParticipationDetails_Division_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAWeekendTourneyParticipationDetails::kDivisionsFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAWeekendTourneyParticipationDetails)
}

void CMsgDOTAWeekendTourneyParticipationDetails::InitAsDefaultInstance() {
}

CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails(const CMsgDOTAWeekendTourneyParticipationDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyParticipationDetails)
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAWeekendTourneyParticipationDetails::~CMsgDOTAWeekendTourneyParticipationDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyParticipationDetails)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAWeekendTourneyParticipationDetails_descriptor_;
}

const CMsgDOTAWeekendTourneyParticipationDetails& CMsgDOTAWeekendTourneyParticipationDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  return *default_instance_;
}

CMsgDOTAWeekendTourneyParticipationDetails* CMsgDOTAWeekendTourneyParticipationDetails::default_instance_ = NULL;

CMsgDOTAWeekendTourneyParticipationDetails* CMsgDOTAWeekendTourneyParticipationDetails::New() const {
  return new CMsgDOTAWeekendTourneyParticipationDetails;
}

void CMsgDOTAWeekendTourneyParticipationDetails::Clear() {
  divisions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAWeekendTourneyParticipationDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAWeekendTourneyParticipationDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
      case 1: {
        if (tag == 10) {
         parse_divisions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_divisions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_divisions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAWeekendTourneyParticipationDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAWeekendTourneyParticipationDetails)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyParticipationDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAWeekendTourneyParticipationDetails)
  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (int i = 0; i < this->divisions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->divisions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAWeekendTourneyParticipationDetails)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyParticipationDetails)
  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (int i = 0; i < this->divisions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->divisions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyParticipationDetails)
  return target;
}

int CMsgDOTAWeekendTourneyParticipationDetails::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  total_size += 1 * this->divisions_size();
  for (int i = 0; i < this->divisions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->divisions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAWeekendTourneyParticipationDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  divisions_.MergeFrom(from.divisions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails::IsInitialized() const {

  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails::Swap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
  if (other != this) {
    divisions_.Swap(&other->divisions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAWeekendTourneyParticipationDetails_descriptor_;
  metadata.reflection = CMsgDOTAWeekendTourneyParticipationDetails_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
