// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_tournament.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fclient_5ftournament_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fclient_5ftournament_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_client_enums.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

class CMsgDOTATournamentInfo;
class CMsgDOTATournamentInfo_PhaseGroup;
class CMsgDOTATournamentInfo_Phase;
class CMsgDOTATournamentInfo_Team;
class CMsgDOTATournamentInfo_UpcomingMatch;
class CMsgDOTATournamentInfo_News;
class CMsgRequestWeekendTourneySchedule;
class CMsgWeekendTourneySchedule;
class CMsgWeekendTourneySchedule_Division;
class CMsgWeekendTourneyOpts;
class CMsgWeekendTourneyLeave;
class CMsgDOTATournament;
class CMsgDOTATournament_Team;
class CMsgDOTATournament_Game;
class CMsgDOTATournament_Node;
class CMsgDOTATournamentStateChange;
class CMsgDOTATournamentStateChange_GameChange;
class CMsgDOTATournamentStateChange_TeamChange;
class CMsgDOTATournamentRequest;
class CMsgDOTATournamentResponse;
class CMsgDOTAClearTournamentGame;
class CMsgDOTAWeekendTourneyPlayerSkillLevelStats;
class CMsgDOTAWeekendTourneyPlayerStats;
class CMsgDOTAWeekendTourneyPlayerStatsRequest;
class CMsgDOTAWeekendTourneyPlayerHistoryRequest;
class CMsgDOTAWeekendTourneyPlayerHistory;
class CMsgDOTAWeekendTourneyPlayerHistory_Tournament;
class CMsgDOTAWeekendTourneyParticipationDetails;
class CMsgDOTAWeekendTourneyParticipationDetails_Tier;
class CMsgDOTAWeekendTourneyParticipationDetails_Division;

enum ETournamentEvent {
  k_ETournamentEvent_None = 0,
  k_ETournamentEvent_TournamentCreated = 1,
  k_ETournamentEvent_TournamentsMerged = 2,
  k_ETournamentEvent_GameOutcome = 3,
  k_ETournamentEvent_TeamGivenBye = 4,
  k_ETournamentEvent_TournamentCanceledByAdmin = 5,
  k_ETournamentEvent_TeamAbandoned = 6,
  k_ETournamentEvent_ScheduledGameStarted = 7,
  k_ETournamentEvent_Canceled = 8,
  k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund = 9,
  k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit = 10
};
bool ETournamentEvent_IsValid(int value);
const ETournamentEvent ETournamentEvent_MIN = k_ETournamentEvent_None;
const ETournamentEvent ETournamentEvent_MAX = k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit;
const int ETournamentEvent_ARRAYSIZE = ETournamentEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETournamentEvent_descriptor();
inline const ::std::string& ETournamentEvent_Name(ETournamentEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETournamentEvent_descriptor(), value);
}
inline bool ETournamentEvent_Parse(
    const ::std::string& name, ETournamentEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETournamentEvent>(
    ETournamentEvent_descriptor(), name, value);
}
// ===================================================================

class CMsgDOTATournamentInfo_PhaseGroup : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentInfo_PhaseGroup();
  virtual ~CMsgDOTATournamentInfo_PhaseGroup();

  CMsgDOTATournamentInfo_PhaseGroup(const CMsgDOTATournamentInfo_PhaseGroup& from);

  inline CMsgDOTATournamentInfo_PhaseGroup& operator=(const CMsgDOTATournamentInfo_PhaseGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentInfo_PhaseGroup& default_instance();

  void Swap(CMsgDOTATournamentInfo_PhaseGroup* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentInfo_PhaseGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentInfo_PhaseGroup& from);
  void MergeFrom(const CMsgDOTATournamentInfo_PhaseGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // optional string group_name = 2;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentInfo.PhaseGroup)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* group_name_;
  ::google::protobuf::uint32 group_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentInfo_PhaseGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentInfo_Phase : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentInfo_Phase();
  virtual ~CMsgDOTATournamentInfo_Phase();

  CMsgDOTATournamentInfo_Phase(const CMsgDOTATournamentInfo_Phase& from);

  inline CMsgDOTATournamentInfo_Phase& operator=(const CMsgDOTATournamentInfo_Phase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentInfo_Phase& default_instance();

  void Swap(CMsgDOTATournamentInfo_Phase* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentInfo_Phase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentInfo_Phase& from);
  void MergeFrom(const CMsgDOTATournamentInfo_Phase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 phase_id = 1;
  inline bool has_phase_id() const;
  inline void clear_phase_id();
  static const int kPhaseIdFieldNumber = 1;
  inline ::google::protobuf::uint32 phase_id() const;
  inline void set_phase_id(::google::protobuf::uint32 value);

  // optional string phase_name = 2;
  inline bool has_phase_name() const;
  inline void clear_phase_name();
  static const int kPhaseNameFieldNumber = 2;
  inline const ::std::string& phase_name() const;
  inline void set_phase_name(const ::std::string& value);
  inline void set_phase_name(const char* value);
  inline void set_phase_name(const char* value, size_t size);
  inline ::std::string* mutable_phase_name();
  inline ::std::string* release_phase_name();
  inline void set_allocated_phase_name(::std::string* phase_name);

  // optional uint32 type_id = 3;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 3;
  inline ::google::protobuf::uint32 type_id() const;
  inline void set_type_id(::google::protobuf::uint32 value);

  // optional uint32 iterations = 4;
  inline bool has_iterations() const;
  inline void clear_iterations();
  static const int kIterationsFieldNumber = 4;
  inline ::google::protobuf::uint32 iterations() const;
  inline void set_iterations(::google::protobuf::uint32 value);

  // optional uint32 min_start_time = 5;
  inline bool has_min_start_time() const;
  inline void clear_min_start_time();
  static const int kMinStartTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 min_start_time() const;
  inline void set_min_start_time(::google::protobuf::uint32 value);

  // optional uint32 max_start_time = 6;
  inline bool has_max_start_time() const;
  inline void clear_max_start_time();
  static const int kMaxStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 max_start_time() const;
  inline void set_max_start_time(::google::protobuf::uint32 value);

  // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 7;
  inline const ::CMsgDOTATournamentInfo_PhaseGroup& group_list(int index) const;
  inline ::CMsgDOTATournamentInfo_PhaseGroup* mutable_group_list(int index);
  inline ::CMsgDOTATournamentInfo_PhaseGroup* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_PhaseGroup >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_PhaseGroup >*
      mutable_group_list();

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentInfo.Phase)
 private:
  inline void set_has_phase_id();
  inline void clear_has_phase_id();
  inline void set_has_phase_name();
  inline void clear_has_phase_name();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_iterations();
  inline void clear_has_iterations();
  inline void set_has_min_start_time();
  inline void clear_has_min_start_time();
  inline void set_has_max_start_time();
  inline void clear_has_max_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* phase_name_;
  ::google::protobuf::uint32 phase_id_;
  ::google::protobuf::uint32 type_id_;
  ::google::protobuf::uint32 iterations_;
  ::google::protobuf::uint32 min_start_time_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_PhaseGroup > group_list_;
  ::google::protobuf::uint32 max_start_time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentInfo_Phase* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentInfo_Team : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentInfo_Team();
  virtual ~CMsgDOTATournamentInfo_Team();

  CMsgDOTATournamentInfo_Team(const CMsgDOTATournamentInfo_Team& from);

  inline CMsgDOTATournamentInfo_Team& operator=(const CMsgDOTATournamentInfo_Team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentInfo_Team& default_instance();

  void Swap(CMsgDOTATournamentInfo_Team* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentInfo_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentInfo_Team& from);
  void MergeFrom(const CMsgDOTATournamentInfo_Team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional uint64 team_logo = 4;
  inline bool has_team_logo() const;
  inline void clear_team_logo();
  static const int kTeamLogoFieldNumber = 4;
  inline ::google::protobuf::uint64 team_logo() const;
  inline void set_team_logo(::google::protobuf::uint64 value);

  // optional bool eliminated = 5;
  inline bool has_eliminated() const;
  inline void clear_eliminated();
  static const int kEliminatedFieldNumber = 5;
  inline bool eliminated() const;
  inline void set_eliminated(bool value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentInfo.Team)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_team_logo();
  inline void clear_has_team_logo();
  inline void set_has_eliminated();
  inline void clear_has_eliminated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* tag_;
  ::google::protobuf::uint32 team_id_;
  bool eliminated_;
  ::google::protobuf::uint64 team_logo_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentInfo_Team* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentInfo_UpcomingMatch : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentInfo_UpcomingMatch();
  virtual ~CMsgDOTATournamentInfo_UpcomingMatch();

  CMsgDOTATournamentInfo_UpcomingMatch(const CMsgDOTATournamentInfo_UpcomingMatch& from);

  inline CMsgDOTATournamentInfo_UpcomingMatch& operator=(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentInfo_UpcomingMatch& default_instance();

  void Swap(CMsgDOTATournamentInfo_UpcomingMatch* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentInfo_UpcomingMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from);
  void MergeFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 series_id = 1;
  inline bool has_series_id() const;
  inline void clear_series_id();
  static const int kSeriesIdFieldNumber = 1;
  inline ::google::protobuf::uint32 series_id() const;
  inline void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 team1_id = 2;
  inline bool has_team1_id() const;
  inline void clear_team1_id();
  static const int kTeam1IdFieldNumber = 2;
  inline ::google::protobuf::uint32 team1_id() const;
  inline void set_team1_id(::google::protobuf::uint32 value);

  // optional uint32 team2_id = 3;
  inline bool has_team2_id() const;
  inline void clear_team2_id();
  static const int kTeam2IdFieldNumber = 3;
  inline ::google::protobuf::uint32 team2_id() const;
  inline void set_team2_id(::google::protobuf::uint32 value);

  // optional uint32 bo = 4;
  inline bool has_bo() const;
  inline void clear_bo();
  static const int kBoFieldNumber = 4;
  inline ::google::protobuf::uint32 bo() const;
  inline void set_bo(::google::protobuf::uint32 value);

  // optional string stage_name = 5;
  inline bool has_stage_name() const;
  inline void clear_stage_name();
  static const int kStageNameFieldNumber = 5;
  inline const ::std::string& stage_name() const;
  inline void set_stage_name(const ::std::string& value);
  inline void set_stage_name(const char* value);
  inline void set_stage_name(const char* value, size_t size);
  inline ::std::string* mutable_stage_name();
  inline ::std::string* release_stage_name();
  inline void set_allocated_stage_name(::std::string* stage_name);

  // optional uint32 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional string winner_stage = 7;
  inline bool has_winner_stage() const;
  inline void clear_winner_stage();
  static const int kWinnerStageFieldNumber = 7;
  inline const ::std::string& winner_stage() const;
  inline void set_winner_stage(const ::std::string& value);
  inline void set_winner_stage(const char* value);
  inline void set_winner_stage(const char* value, size_t size);
  inline ::std::string* mutable_winner_stage();
  inline ::std::string* release_winner_stage();
  inline void set_allocated_winner_stage(::std::string* winner_stage);

  // optional string loser_stage = 8;
  inline bool has_loser_stage() const;
  inline void clear_loser_stage();
  static const int kLoserStageFieldNumber = 8;
  inline const ::std::string& loser_stage() const;
  inline void set_loser_stage(const ::std::string& value);
  inline void set_loser_stage(const char* value);
  inline void set_loser_stage(const char* value, size_t size);
  inline ::std::string* mutable_loser_stage();
  inline ::std::string* release_loser_stage();
  inline void set_allocated_loser_stage(::std::string* loser_stage);

  // optional string team1_tag = 9;
  inline bool has_team1_tag() const;
  inline void clear_team1_tag();
  static const int kTeam1TagFieldNumber = 9;
  inline const ::std::string& team1_tag() const;
  inline void set_team1_tag(const ::std::string& value);
  inline void set_team1_tag(const char* value);
  inline void set_team1_tag(const char* value, size_t size);
  inline ::std::string* mutable_team1_tag();
  inline ::std::string* release_team1_tag();
  inline void set_allocated_team1_tag(::std::string* team1_tag);

  // optional string team2_tag = 10;
  inline bool has_team2_tag() const;
  inline void clear_team2_tag();
  static const int kTeam2TagFieldNumber = 10;
  inline const ::std::string& team2_tag() const;
  inline void set_team2_tag(const ::std::string& value);
  inline void set_team2_tag(const char* value);
  inline void set_team2_tag(const char* value, size_t size);
  inline ::std::string* mutable_team2_tag();
  inline ::std::string* release_team2_tag();
  inline void set_allocated_team2_tag(::std::string* team2_tag);

  // optional string team1_prev_opponent_tag = 11;
  inline bool has_team1_prev_opponent_tag() const;
  inline void clear_team1_prev_opponent_tag();
  static const int kTeam1PrevOpponentTagFieldNumber = 11;
  inline const ::std::string& team1_prev_opponent_tag() const;
  inline void set_team1_prev_opponent_tag(const ::std::string& value);
  inline void set_team1_prev_opponent_tag(const char* value);
  inline void set_team1_prev_opponent_tag(const char* value, size_t size);
  inline ::std::string* mutable_team1_prev_opponent_tag();
  inline ::std::string* release_team1_prev_opponent_tag();
  inline void set_allocated_team1_prev_opponent_tag(::std::string* team1_prev_opponent_tag);

  // optional string team2_prev_opponent_tag = 12;
  inline bool has_team2_prev_opponent_tag() const;
  inline void clear_team2_prev_opponent_tag();
  static const int kTeam2PrevOpponentTagFieldNumber = 12;
  inline const ::std::string& team2_prev_opponent_tag() const;
  inline void set_team2_prev_opponent_tag(const ::std::string& value);
  inline void set_team2_prev_opponent_tag(const char* value);
  inline void set_team2_prev_opponent_tag(const char* value, size_t size);
  inline ::std::string* mutable_team2_prev_opponent_tag();
  inline ::std::string* release_team2_prev_opponent_tag();
  inline void set_allocated_team2_prev_opponent_tag(::std::string* team2_prev_opponent_tag);

  // optional uint64 team1_logo = 13;
  inline bool has_team1_logo() const;
  inline void clear_team1_logo();
  static const int kTeam1LogoFieldNumber = 13;
  inline ::google::protobuf::uint64 team1_logo() const;
  inline void set_team1_logo(::google::protobuf::uint64 value);

  // optional uint64 team2_logo = 14;
  inline bool has_team2_logo() const;
  inline void clear_team2_logo();
  static const int kTeam2LogoFieldNumber = 14;
  inline ::google::protobuf::uint64 team2_logo() const;
  inline void set_team2_logo(::google::protobuf::uint64 value);

  // optional uint64 team1_prev_opponent_logo = 15;
  inline bool has_team1_prev_opponent_logo() const;
  inline void clear_team1_prev_opponent_logo();
  static const int kTeam1PrevOpponentLogoFieldNumber = 15;
  inline ::google::protobuf::uint64 team1_prev_opponent_logo() const;
  inline void set_team1_prev_opponent_logo(::google::protobuf::uint64 value);

  // optional uint64 team2_prev_opponent_logo = 16;
  inline bool has_team2_prev_opponent_logo() const;
  inline void clear_team2_prev_opponent_logo();
  static const int kTeam2PrevOpponentLogoFieldNumber = 16;
  inline ::google::protobuf::uint64 team2_prev_opponent_logo() const;
  inline void set_team2_prev_opponent_logo(::google::protobuf::uint64 value);

  // optional uint32 team1_prev_opponent_id = 17;
  inline bool has_team1_prev_opponent_id() const;
  inline void clear_team1_prev_opponent_id();
  static const int kTeam1PrevOpponentIdFieldNumber = 17;
  inline ::google::protobuf::uint32 team1_prev_opponent_id() const;
  inline void set_team1_prev_opponent_id(::google::protobuf::uint32 value);

  // optional uint32 team2_prev_opponent_id = 18;
  inline bool has_team2_prev_opponent_id() const;
  inline void clear_team2_prev_opponent_id();
  static const int kTeam2PrevOpponentIdFieldNumber = 18;
  inline ::google::protobuf::uint32 team2_prev_opponent_id() const;
  inline void set_team2_prev_opponent_id(::google::protobuf::uint32 value);

  // optional uint32 team1_prev_match_score = 19;
  inline bool has_team1_prev_match_score() const;
  inline void clear_team1_prev_match_score();
  static const int kTeam1PrevMatchScoreFieldNumber = 19;
  inline ::google::protobuf::uint32 team1_prev_match_score() const;
  inline void set_team1_prev_match_score(::google::protobuf::uint32 value);

  // optional uint32 team1_prev_match_opponent_score = 20;
  inline bool has_team1_prev_match_opponent_score() const;
  inline void clear_team1_prev_match_opponent_score();
  static const int kTeam1PrevMatchOpponentScoreFieldNumber = 20;
  inline ::google::protobuf::uint32 team1_prev_match_opponent_score() const;
  inline void set_team1_prev_match_opponent_score(::google::protobuf::uint32 value);

  // optional uint32 team2_prev_match_score = 21;
  inline bool has_team2_prev_match_score() const;
  inline void clear_team2_prev_match_score();
  static const int kTeam2PrevMatchScoreFieldNumber = 21;
  inline ::google::protobuf::uint32 team2_prev_match_score() const;
  inline void set_team2_prev_match_score(::google::protobuf::uint32 value);

  // optional uint32 team2_prev_match_opponent_score = 22;
  inline bool has_team2_prev_match_opponent_score() const;
  inline void clear_team2_prev_match_opponent_score();
  static const int kTeam2PrevMatchOpponentScoreFieldNumber = 22;
  inline ::google::protobuf::uint32 team2_prev_match_opponent_score() const;
  inline void set_team2_prev_match_opponent_score(::google::protobuf::uint32 value);

  // optional uint32 phase_type = 23;
  inline bool has_phase_type() const;
  inline void clear_phase_type();
  static const int kPhaseTypeFieldNumber = 23;
  inline ::google::protobuf::uint32 phase_type() const;
  inline void set_phase_type(::google::protobuf::uint32 value);

  // optional uint32 team1_score = 24;
  inline bool has_team1_score() const;
  inline void clear_team1_score();
  static const int kTeam1ScoreFieldNumber = 24;
  inline ::google::protobuf::uint32 team1_score() const;
  inline void set_team1_score(::google::protobuf::uint32 value);

  // optional uint32 team2_score = 25;
  inline bool has_team2_score() const;
  inline void clear_team2_score();
  static const int kTeam2ScoreFieldNumber = 25;
  inline ::google::protobuf::uint32 team2_score() const;
  inline void set_team2_score(::google::protobuf::uint32 value);

  // optional uint32 phase_id = 26;
  inline bool has_phase_id() const;
  inline void clear_phase_id();
  static const int kPhaseIdFieldNumber = 26;
  inline ::google::protobuf::uint32 phase_id() const;
  inline void set_phase_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentInfo.UpcomingMatch)
 private:
  inline void set_has_series_id();
  inline void clear_has_series_id();
  inline void set_has_team1_id();
  inline void clear_has_team1_id();
  inline void set_has_team2_id();
  inline void clear_has_team2_id();
  inline void set_has_bo();
  inline void clear_has_bo();
  inline void set_has_stage_name();
  inline void clear_has_stage_name();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_winner_stage();
  inline void clear_has_winner_stage();
  inline void set_has_loser_stage();
  inline void clear_has_loser_stage();
  inline void set_has_team1_tag();
  inline void clear_has_team1_tag();
  inline void set_has_team2_tag();
  inline void clear_has_team2_tag();
  inline void set_has_team1_prev_opponent_tag();
  inline void clear_has_team1_prev_opponent_tag();
  inline void set_has_team2_prev_opponent_tag();
  inline void clear_has_team2_prev_opponent_tag();
  inline void set_has_team1_logo();
  inline void clear_has_team1_logo();
  inline void set_has_team2_logo();
  inline void clear_has_team2_logo();
  inline void set_has_team1_prev_opponent_logo();
  inline void clear_has_team1_prev_opponent_logo();
  inline void set_has_team2_prev_opponent_logo();
  inline void clear_has_team2_prev_opponent_logo();
  inline void set_has_team1_prev_opponent_id();
  inline void clear_has_team1_prev_opponent_id();
  inline void set_has_team2_prev_opponent_id();
  inline void clear_has_team2_prev_opponent_id();
  inline void set_has_team1_prev_match_score();
  inline void clear_has_team1_prev_match_score();
  inline void set_has_team1_prev_match_opponent_score();
  inline void clear_has_team1_prev_match_opponent_score();
  inline void set_has_team2_prev_match_score();
  inline void clear_has_team2_prev_match_score();
  inline void set_has_team2_prev_match_opponent_score();
  inline void clear_has_team2_prev_match_opponent_score();
  inline void set_has_phase_type();
  inline void clear_has_phase_type();
  inline void set_has_team1_score();
  inline void clear_has_team1_score();
  inline void set_has_team2_score();
  inline void clear_has_team2_score();
  inline void set_has_phase_id();
  inline void clear_has_phase_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 team1_id_;
  ::google::protobuf::uint32 team2_id_;
  ::google::protobuf::uint32 bo_;
  ::std::string* stage_name_;
  ::std::string* winner_stage_;
  ::std::string* loser_stage_;
  ::std::string* team1_tag_;
  ::std::string* team2_tag_;
  ::std::string* team1_prev_opponent_tag_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 team1_prev_opponent_id_;
  ::std::string* team2_prev_opponent_tag_;
  ::google::protobuf::uint64 team1_logo_;
  ::google::protobuf::uint64 team2_logo_;
  ::google::protobuf::uint64 team1_prev_opponent_logo_;
  ::google::protobuf::uint64 team2_prev_opponent_logo_;
  ::google::protobuf::uint32 team2_prev_opponent_id_;
  ::google::protobuf::uint32 team1_prev_match_score_;
  ::google::protobuf::uint32 team1_prev_match_opponent_score_;
  ::google::protobuf::uint32 team2_prev_match_score_;
  ::google::protobuf::uint32 team2_prev_match_opponent_score_;
  ::google::protobuf::uint32 phase_type_;
  ::google::protobuf::uint32 team1_score_;
  ::google::protobuf::uint32 team2_score_;
  ::google::protobuf::uint32 phase_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentInfo_UpcomingMatch* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentInfo_News : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentInfo_News();
  virtual ~CMsgDOTATournamentInfo_News();

  CMsgDOTATournamentInfo_News(const CMsgDOTATournamentInfo_News& from);

  inline CMsgDOTATournamentInfo_News& operator=(const CMsgDOTATournamentInfo_News& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentInfo_News& default_instance();

  void Swap(CMsgDOTATournamentInfo_News* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentInfo_News* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentInfo_News& from);
  void MergeFrom(const CMsgDOTATournamentInfo_News& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string link = 1;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 1;
  inline const ::std::string& link() const;
  inline void set_link(const ::std::string& value);
  inline void set_link(const char* value);
  inline void set_link(const char* value, size_t size);
  inline ::std::string* mutable_link();
  inline ::std::string* release_link();
  inline void set_allocated_link(::std::string* link);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string image = 3;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // optional uint32 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentInfo.News)
 private:
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* link_;
  ::std::string* title_;
  ::std::string* image_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentInfo_News* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentInfo : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentInfo();
  virtual ~CMsgDOTATournamentInfo();

  CMsgDOTATournamentInfo(const CMsgDOTATournamentInfo& from);

  inline CMsgDOTATournamentInfo& operator=(const CMsgDOTATournamentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentInfo& default_instance();

  void Swap(CMsgDOTATournamentInfo* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentInfo& from);
  void MergeFrom(const CMsgDOTATournamentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournamentInfo_PhaseGroup PhaseGroup;
  typedef CMsgDOTATournamentInfo_Phase Phase;
  typedef CMsgDOTATournamentInfo_Team Team;
  typedef CMsgDOTATournamentInfo_UpcomingMatch UpcomingMatch;
  typedef CMsgDOTATournamentInfo_News News;

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
  inline int phase_list_size() const;
  inline void clear_phase_list();
  static const int kPhaseListFieldNumber = 2;
  inline const ::CMsgDOTATournamentInfo_Phase& phase_list(int index) const;
  inline ::CMsgDOTATournamentInfo_Phase* mutable_phase_list(int index);
  inline ::CMsgDOTATournamentInfo_Phase* add_phase_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Phase >&
      phase_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Phase >*
      mutable_phase_list();

  // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
  inline int teams_list_size() const;
  inline void clear_teams_list();
  static const int kTeamsListFieldNumber = 3;
  inline const ::CMsgDOTATournamentInfo_Team& teams_list(int index) const;
  inline ::CMsgDOTATournamentInfo_Team* mutable_teams_list(int index);
  inline ::CMsgDOTATournamentInfo_Team* add_teams_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Team >&
      teams_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Team >*
      mutable_teams_list();

  // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  inline int upcoming_matches_list_size() const;
  inline void clear_upcoming_matches_list();
  static const int kUpcomingMatchesListFieldNumber = 4;
  inline const ::CMsgDOTATournamentInfo_UpcomingMatch& upcoming_matches_list(int index) const;
  inline ::CMsgDOTATournamentInfo_UpcomingMatch* mutable_upcoming_matches_list(int index);
  inline ::CMsgDOTATournamentInfo_UpcomingMatch* add_upcoming_matches_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_UpcomingMatch >&
      upcoming_matches_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_UpcomingMatch >*
      mutable_upcoming_matches_list();

  // repeated .CMsgDOTATournamentInfo.News news_list = 5;
  inline int news_list_size() const;
  inline void clear_news_list();
  static const int kNewsListFieldNumber = 5;
  inline const ::CMsgDOTATournamentInfo_News& news_list(int index) const;
  inline ::CMsgDOTATournamentInfo_News* mutable_news_list(int index);
  inline ::CMsgDOTATournamentInfo_News* add_news_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_News >&
      news_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_News >*
      mutable_news_list();

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentInfo)
 private:
  inline void set_has_league_id();
  inline void clear_has_league_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Phase > phase_list_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Team > teams_list_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_UpcomingMatch > upcoming_matches_list_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_News > news_list_;
  ::google::protobuf::uint32 league_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestWeekendTourneySchedule : public ::google::protobuf::Message {
 public:
  CMsgRequestWeekendTourneySchedule();
  virtual ~CMsgRequestWeekendTourneySchedule();

  CMsgRequestWeekendTourneySchedule(const CMsgRequestWeekendTourneySchedule& from);

  inline CMsgRequestWeekendTourneySchedule& operator=(const CMsgRequestWeekendTourneySchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestWeekendTourneySchedule& default_instance();

  void Swap(CMsgRequestWeekendTourneySchedule* other);

  // implements Message ----------------------------------------------

  CMsgRequestWeekendTourneySchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestWeekendTourneySchedule& from);
  void MergeFrom(const CMsgRequestWeekendTourneySchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRequestWeekendTourneySchedule)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgRequestWeekendTourneySchedule* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneySchedule_Division : public ::google::protobuf::Message {
 public:
  CMsgWeekendTourneySchedule_Division();
  virtual ~CMsgWeekendTourneySchedule_Division();

  CMsgWeekendTourneySchedule_Division(const CMsgWeekendTourneySchedule_Division& from);

  inline CMsgWeekendTourneySchedule_Division& operator=(const CMsgWeekendTourneySchedule_Division& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWeekendTourneySchedule_Division& default_instance();

  void Swap(CMsgWeekendTourneySchedule_Division* other);

  // implements Message ----------------------------------------------

  CMsgWeekendTourneySchedule_Division* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWeekendTourneySchedule_Division& from);
  void MergeFrom(const CMsgWeekendTourneySchedule_Division& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 division_code = 1;
  inline bool has_division_code() const;
  inline void clear_division_code();
  static const int kDivisionCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 division_code() const;
  inline void set_division_code(::google::protobuf::uint32 value);

  // optional uint32 time_window_open = 2;
  inline bool has_time_window_open() const;
  inline void clear_time_window_open();
  static const int kTimeWindowOpenFieldNumber = 2;
  inline ::google::protobuf::uint32 time_window_open() const;
  inline void set_time_window_open(::google::protobuf::uint32 value);

  // optional uint32 time_window_close = 3;
  inline bool has_time_window_close() const;
  inline void clear_time_window_close();
  static const int kTimeWindowCloseFieldNumber = 3;
  inline ::google::protobuf::uint32 time_window_close() const;
  inline void set_time_window_close(::google::protobuf::uint32 value);

  // optional uint32 time_window_open_next = 4;
  inline bool has_time_window_open_next() const;
  inline void clear_time_window_open_next();
  static const int kTimeWindowOpenNextFieldNumber = 4;
  inline ::google::protobuf::uint32 time_window_open_next() const;
  inline void set_time_window_open_next(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneySchedule.Division)
 private:
  inline void set_has_division_code();
  inline void clear_has_division_code();
  inline void set_has_time_window_open();
  inline void clear_has_time_window_open();
  inline void set_has_time_window_close();
  inline void clear_has_time_window_close();
  inline void set_has_time_window_open_next();
  inline void clear_has_time_window_open_next();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 division_code_;
  ::google::protobuf::uint32 time_window_open_;
  ::google::protobuf::uint32 time_window_close_;
  ::google::protobuf::uint32 time_window_open_next_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgWeekendTourneySchedule_Division* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneySchedule : public ::google::protobuf::Message {
 public:
  CMsgWeekendTourneySchedule();
  virtual ~CMsgWeekendTourneySchedule();

  CMsgWeekendTourneySchedule(const CMsgWeekendTourneySchedule& from);

  inline CMsgWeekendTourneySchedule& operator=(const CMsgWeekendTourneySchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWeekendTourneySchedule& default_instance();

  void Swap(CMsgWeekendTourneySchedule* other);

  // implements Message ----------------------------------------------

  CMsgWeekendTourneySchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWeekendTourneySchedule& from);
  void MergeFrom(const CMsgWeekendTourneySchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgWeekendTourneySchedule_Division Division;

  // accessors -------------------------------------------------------

  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  inline int divisions_size() const;
  inline void clear_divisions();
  static const int kDivisionsFieldNumber = 1;
  inline const ::CMsgWeekendTourneySchedule_Division& divisions(int index) const;
  inline ::CMsgWeekendTourneySchedule_Division* mutable_divisions(int index);
  inline ::CMsgWeekendTourneySchedule_Division* add_divisions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >&
      divisions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >*
      mutable_divisions();

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneySchedule)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division > divisions_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgWeekendTourneySchedule* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneyOpts : public ::google::protobuf::Message {
 public:
  CMsgWeekendTourneyOpts();
  virtual ~CMsgWeekendTourneyOpts();

  CMsgWeekendTourneyOpts(const CMsgWeekendTourneyOpts& from);

  inline CMsgWeekendTourneyOpts& operator=(const CMsgWeekendTourneyOpts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWeekendTourneyOpts& default_instance();

  void Swap(CMsgWeekendTourneyOpts* other);

  // implements Message ----------------------------------------------

  CMsgWeekendTourneyOpts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWeekendTourneyOpts& from);
  void MergeFrom(const CMsgWeekendTourneyOpts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool participating = 1;
  inline bool has_participating() const;
  inline void clear_participating();
  static const int kParticipatingFieldNumber = 1;
  inline bool participating() const;
  inline void set_participating(bool value);

  // optional uint32 division_id = 2;
  inline bool has_division_id() const;
  inline void clear_division_id();
  static const int kDivisionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 division_id() const;
  inline void set_division_id(::google::protobuf::uint32 value);

  // optional uint32 buyin = 3;
  inline bool has_buyin() const;
  inline void clear_buyin();
  static const int kBuyinFieldNumber = 3;
  inline ::google::protobuf::uint32 buyin() const;
  inline void set_buyin(::google::protobuf::uint32 value);

  // optional uint32 skill_level = 4;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 match_groups = 5;
  inline bool has_match_groups() const;
  inline void clear_match_groups();
  static const int kMatchGroupsFieldNumber = 5;
  inline ::google::protobuf::uint32 match_groups() const;
  inline void set_match_groups(::google::protobuf::uint32 value);

  // optional uint32 team_id = 6;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 6;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string pickup_team_name = 7;
  inline bool has_pickup_team_name() const;
  inline void clear_pickup_team_name();
  static const int kPickupTeamNameFieldNumber = 7;
  inline const ::std::string& pickup_team_name() const;
  inline void set_pickup_team_name(const ::std::string& value);
  inline void set_pickup_team_name(const char* value);
  inline void set_pickup_team_name(const char* value, size_t size);
  inline ::std::string* mutable_pickup_team_name();
  inline ::std::string* release_pickup_team_name();
  inline void set_allocated_pickup_team_name(::std::string* pickup_team_name);

  // optional uint64 pickup_team_logo = 8;
  inline bool has_pickup_team_logo() const;
  inline void clear_pickup_team_logo();
  static const int kPickupTeamLogoFieldNumber = 8;
  inline ::google::protobuf::uint64 pickup_team_logo() const;
  inline void set_pickup_team_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneyOpts)
 private:
  inline void set_has_participating();
  inline void clear_has_participating();
  inline void set_has_division_id();
  inline void clear_has_division_id();
  inline void set_has_buyin();
  inline void clear_has_buyin();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_match_groups();
  inline void clear_has_match_groups();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_pickup_team_name();
  inline void clear_has_pickup_team_name();
  inline void set_has_pickup_team_logo();
  inline void clear_has_pickup_team_logo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool participating_;
  ::google::protobuf::uint32 division_id_;
  ::google::protobuf::uint32 buyin_;
  ::google::protobuf::uint32 skill_level_;
  ::google::protobuf::uint32 match_groups_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* pickup_team_name_;
  ::google::protobuf::uint64 pickup_team_logo_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgWeekendTourneyOpts* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneyLeave : public ::google::protobuf::Message {
 public:
  CMsgWeekendTourneyLeave();
  virtual ~CMsgWeekendTourneyLeave();

  CMsgWeekendTourneyLeave(const CMsgWeekendTourneyLeave& from);

  inline CMsgWeekendTourneyLeave& operator=(const CMsgWeekendTourneyLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWeekendTourneyLeave& default_instance();

  void Swap(CMsgWeekendTourneyLeave* other);

  // implements Message ----------------------------------------------

  CMsgWeekendTourneyLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWeekendTourneyLeave& from);
  void MergeFrom(const CMsgWeekendTourneyLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneyLeave)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgWeekendTourneyLeave* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Team : public ::google::protobuf::Message {
 public:
  CMsgDOTATournament_Team();
  virtual ~CMsgDOTATournament_Team();

  CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from);

  inline CMsgDOTATournament_Team& operator=(const CMsgDOTATournament_Team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament_Team& default_instance();

  void Swap(CMsgDOTATournament_Team* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournament_Team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournament_Team& from);
  void MergeFrom(const CMsgDOTATournament_Team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 team_gid = 1;
  inline bool has_team_gid() const;
  inline void clear_team_gid();
  static const int kTeamGidFieldNumber = 1;
  inline ::google::protobuf::uint64 team_gid() const;
  inline void set_team_gid(::google::protobuf::uint64 value);

  // optional uint32 node_or_state = 2;
  inline bool has_node_or_state() const;
  inline void clear_node_or_state();
  static const int kNodeOrStateFieldNumber = 2;
  inline ::google::protobuf::uint32 node_or_state() const;
  inline void set_node_or_state(::google::protobuf::uint32 value);

  // repeated uint32 players = 3 [packed = true];
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline ::google::protobuf::uint32 players(int index) const;
  inline void set_players(int index, ::google::protobuf::uint32 value);
  inline void add_players(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      players() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_players();

  // repeated uint32 player_buyin = 9 [packed = true];
  inline int player_buyin_size() const;
  inline void clear_player_buyin();
  static const int kPlayerBuyinFieldNumber = 9;
  inline ::google::protobuf::uint32 player_buyin(int index) const;
  inline void set_player_buyin(int index, ::google::protobuf::uint32 value);
  inline void add_player_buyin(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_buyin() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_buyin();

  // repeated uint32 player_skill_level = 10 [packed = true];
  inline int player_skill_level_size() const;
  inline void clear_player_skill_level();
  static const int kPlayerSkillLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 player_skill_level(int index) const;
  inline void set_player_skill_level(int index, ::google::protobuf::uint32 value);
  inline void add_player_skill_level(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_skill_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_skill_level();

  // optional uint32 match_group_mask = 12;
  inline bool has_match_group_mask() const;
  inline void clear_match_group_mask();
  static const int kMatchGroupMaskFieldNumber = 12;
  inline ::google::protobuf::uint32 match_group_mask() const;
  inline void set_match_group_mask(::google::protobuf::uint32 value);

  // optional uint32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string team_name = 5;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 5;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint64 team_base_logo = 7;
  inline bool has_team_base_logo() const;
  inline void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 7;
  inline ::google::protobuf::uint64 team_base_logo() const;
  inline void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint64 team_ui_logo = 8;
  inline bool has_team_ui_logo() const;
  inline void clear_team_ui_logo();
  static const int kTeamUiLogoFieldNumber = 8;
  inline ::google::protobuf::uint64 team_ui_logo() const;
  inline void set_team_ui_logo(::google::protobuf::uint64 value);

  // optional uint32 team_date = 11;
  inline bool has_team_date() const;
  inline void clear_team_date();
  static const int kTeamDateFieldNumber = 11;
  inline ::google::protobuf::uint32 team_date() const;
  inline void set_team_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Team)
 private:
  inline void set_has_team_gid();
  inline void clear_has_team_gid();
  inline void set_has_node_or_state();
  inline void clear_has_node_or_state();
  inline void set_has_match_group_mask();
  inline void clear_has_match_group_mask();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_base_logo();
  inline void clear_has_team_base_logo();
  inline void set_has_team_ui_logo();
  inline void clear_has_team_ui_logo();
  inline void set_has_team_date();
  inline void clear_has_team_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 team_gid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > players_;
  mutable int _players_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_buyin_;
  mutable int _player_buyin_cached_byte_size_;
  ::google::protobuf::uint32 node_or_state_;
  ::google::protobuf::uint32 match_group_mask_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_skill_level_;
  mutable int _player_skill_level_cached_byte_size_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 team_date_;
  ::google::protobuf::uint64 team_ui_logo_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournament_Team* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Game : public ::google::protobuf::Message {
 public:
  CMsgDOTATournament_Game();
  virtual ~CMsgDOTATournament_Game();

  CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from);

  inline CMsgDOTATournament_Game& operator=(const CMsgDOTATournament_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament_Game& default_instance();

  void Swap(CMsgDOTATournament_Game* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournament_Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournament_Game& from);
  void MergeFrom(const CMsgDOTATournament_Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 node_idx = 1;
  inline bool has_node_idx() const;
  inline void clear_node_idx();
  static const int kNodeIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 node_idx() const;
  inline void set_node_idx(::google::protobuf::uint32 value);

  // optional fixed64 lobby_id = 2;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 2;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint64 match_id = 3;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 3;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional bool team_a_good = 4;
  inline bool has_team_a_good() const;
  inline void clear_team_a_good();
  static const int kTeamAGoodFieldNumber = 4;
  inline bool team_a_good() const;
  inline void set_team_a_good(bool value);

  // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::ETournamentGameState state() const;
  inline void set_state(::ETournamentGameState value);

  // optional uint32 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Game)
 private:
  inline void set_has_node_idx();
  inline void clear_has_node_idx();
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_team_a_good();
  inline void clear_has_team_a_good();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 node_idx_;
  bool team_a_good_;
  ::google::protobuf::uint64 match_id_;
  int state_;
  ::google::protobuf::uint32 start_time_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournament_Game* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Node : public ::google::protobuf::Message {
 public:
  CMsgDOTATournament_Node();
  virtual ~CMsgDOTATournament_Node();

  CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from);

  inline CMsgDOTATournament_Node& operator=(const CMsgDOTATournament_Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament_Node& default_instance();

  void Swap(CMsgDOTATournament_Node* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournament_Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournament_Node& from);
  void MergeFrom(const CMsgDOTATournament_Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // optional uint32 team_idx_a = 2;
  inline bool has_team_idx_a() const;
  inline void clear_team_idx_a();
  static const int kTeamIdxAFieldNumber = 2;
  inline ::google::protobuf::uint32 team_idx_a() const;
  inline void set_team_idx_a(::google::protobuf::uint32 value);

  // optional uint32 team_idx_b = 3;
  inline bool has_team_idx_b() const;
  inline void clear_team_idx_b();
  static const int kTeamIdxBFieldNumber = 3;
  inline ::google::protobuf::uint32 team_idx_b() const;
  inline void set_team_idx_b(::google::protobuf::uint32 value);

  // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  inline bool has_node_state() const;
  inline void clear_node_state();
  static const int kNodeStateFieldNumber = 4;
  inline ::ETournamentNodeState node_state() const;
  inline void set_node_state(::ETournamentNodeState value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Node)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_team_idx_a();
  inline void clear_has_team_idx_a();
  inline void set_has_team_idx_b();
  inline void clear_has_team_idx_b();
  inline void set_has_node_state();
  inline void clear_has_node_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 node_id_;
  ::google::protobuf::uint32 team_idx_a_;
  ::google::protobuf::uint32 team_idx_b_;
  int node_state_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournament_Node* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournament : public ::google::protobuf::Message {
 public:
  CMsgDOTATournament();
  virtual ~CMsgDOTATournament();

  CMsgDOTATournament(const CMsgDOTATournament& from);

  inline CMsgDOTATournament& operator=(const CMsgDOTATournament& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournament& default_instance();

  void Swap(CMsgDOTATournament* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournament* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournament& from);
  void MergeFrom(const CMsgDOTATournament& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournament_Team Team;
  typedef CMsgDOTATournament_Game Game;
  typedef CMsgDOTATournament_Node Node;

  // accessors -------------------------------------------------------

  // optional uint32 tournament_id = 1;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 division_id = 2;
  inline bool has_division_id() const;
  inline void clear_division_id();
  static const int kDivisionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 division_id() const;
  inline void set_division_id(::google::protobuf::uint32 value);

  // optional uint32 schedule_time = 3;
  inline bool has_schedule_time() const;
  inline void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 schedule_time() const;
  inline void set_schedule_time(::google::protobuf::uint32 value);

  // optional uint32 skill_level = 4;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  inline bool has_tournament_template() const;
  inline void clear_tournament_template();
  static const int kTournamentTemplateFieldNumber = 5;
  inline ::ETournamentTemplate tournament_template() const;
  inline void set_tournament_template(::ETournamentTemplate value);

  // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::ETournamentState state() const;
  inline void set_state(::ETournamentState value);

  // optional uint32 state_seq_num = 10;
  inline bool has_state_seq_num() const;
  inline void clear_state_seq_num();
  static const int kStateSeqNumFieldNumber = 10;
  inline ::google::protobuf::uint32 state_seq_num() const;
  inline void set_state_seq_num(::google::protobuf::uint32 value);

  // optional uint32 season_trophy_id = 11;
  inline bool has_season_trophy_id() const;
  inline void clear_season_trophy_id();
  static const int kSeasonTrophyIdFieldNumber = 11;
  inline ::google::protobuf::uint32 season_trophy_id() const;
  inline void set_season_trophy_id(::google::protobuf::uint32 value);

  // repeated .CMsgDOTATournament.Team teams = 7;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 7;
  inline const ::CMsgDOTATournament_Team& teams(int index) const;
  inline ::CMsgDOTATournament_Team* mutable_teams(int index);
  inline ::CMsgDOTATournament_Team* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >*
      mutable_teams();

  // repeated .CMsgDOTATournament.Game games = 8;
  inline int games_size() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 8;
  inline const ::CMsgDOTATournament_Game& games(int index) const;
  inline ::CMsgDOTATournament_Game* mutable_games(int index);
  inline ::CMsgDOTATournament_Game* add_games();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >&
      games() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >*
      mutable_games();

  // repeated .CMsgDOTATournament.Node nodes = 9;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 9;
  inline const ::CMsgDOTATournament_Node& nodes(int index) const;
  inline ::CMsgDOTATournament_Node* mutable_nodes(int index);
  inline ::CMsgDOTATournament_Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament)
 private:
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_division_id();
  inline void clear_has_division_id();
  inline void set_has_schedule_time();
  inline void clear_has_schedule_time();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_tournament_template();
  inline void clear_has_tournament_template();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_state_seq_num();
  inline void clear_has_state_seq_num();
  inline void set_has_season_trophy_id();
  inline void clear_has_season_trophy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 division_id_;
  ::google::protobuf::uint32 schedule_time_;
  ::google::protobuf::uint32 skill_level_;
  int tournament_template_;
  int state_;
  ::google::protobuf::uint32 state_seq_num_;
  ::google::protobuf::uint32 season_trophy_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team > teams_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game > games_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node > nodes_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournament* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentStateChange_GameChange : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentStateChange_GameChange();
  virtual ~CMsgDOTATournamentStateChange_GameChange();

  CMsgDOTATournamentStateChange_GameChange(const CMsgDOTATournamentStateChange_GameChange& from);

  inline CMsgDOTATournamentStateChange_GameChange& operator=(const CMsgDOTATournamentStateChange_GameChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentStateChange_GameChange& default_instance();

  void Swap(CMsgDOTATournamentStateChange_GameChange* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentStateChange_GameChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentStateChange_GameChange& from);
  void MergeFrom(const CMsgDOTATournamentStateChange_GameChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  inline bool has_new_state() const;
  inline void clear_new_state();
  static const int kNewStateFieldNumber = 2;
  inline ::ETournamentGameState new_state() const;
  inline void set_new_state(::ETournamentGameState value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentStateChange.GameChange)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_new_state();
  inline void clear_has_new_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  int new_state_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentStateChange_GameChange* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentStateChange_TeamChange : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentStateChange_TeamChange();
  virtual ~CMsgDOTATournamentStateChange_TeamChange();

  CMsgDOTATournamentStateChange_TeamChange(const CMsgDOTATournamentStateChange_TeamChange& from);

  inline CMsgDOTATournamentStateChange_TeamChange& operator=(const CMsgDOTATournamentStateChange_TeamChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentStateChange_TeamChange& default_instance();

  void Swap(CMsgDOTATournamentStateChange_TeamChange* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentStateChange_TeamChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentStateChange_TeamChange& from);
  void MergeFrom(const CMsgDOTATournamentStateChange_TeamChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 team_gid = 1;
  inline bool has_team_gid() const;
  inline void clear_team_gid();
  static const int kTeamGidFieldNumber = 1;
  inline ::google::protobuf::uint64 team_gid() const;
  inline void set_team_gid(::google::protobuf::uint64 value);

  // optional uint32 new_node_or_state = 2;
  inline bool has_new_node_or_state() const;
  inline void clear_new_node_or_state();
  static const int kNewNodeOrStateFieldNumber = 2;
  inline ::google::protobuf::uint32 new_node_or_state() const;
  inline void set_new_node_or_state(::google::protobuf::uint32 value);

  // optional uint32 old_node_or_state = 3;
  inline bool has_old_node_or_state() const;
  inline void clear_old_node_or_state();
  static const int kOldNodeOrStateFieldNumber = 3;
  inline ::google::protobuf::uint32 old_node_or_state() const;
  inline void set_old_node_or_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentStateChange.TeamChange)
 private:
  inline void set_has_team_gid();
  inline void clear_has_team_gid();
  inline void set_has_new_node_or_state();
  inline void clear_has_new_node_or_state();
  inline void set_has_old_node_or_state();
  inline void clear_has_old_node_or_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 team_gid_;
  ::google::protobuf::uint32 new_node_or_state_;
  ::google::protobuf::uint32 old_node_or_state_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentStateChange_TeamChange* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentStateChange : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentStateChange();
  virtual ~CMsgDOTATournamentStateChange();

  CMsgDOTATournamentStateChange(const CMsgDOTATournamentStateChange& from);

  inline CMsgDOTATournamentStateChange& operator=(const CMsgDOTATournamentStateChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentStateChange& default_instance();

  void Swap(CMsgDOTATournamentStateChange* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentStateChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentStateChange& from);
  void MergeFrom(const CMsgDOTATournamentStateChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournamentStateChange_GameChange GameChange;
  typedef CMsgDOTATournamentStateChange_TeamChange TeamChange;

  // accessors -------------------------------------------------------

  // optional uint32 new_tournament_id = 1;
  inline bool has_new_tournament_id() const;
  inline void clear_new_tournament_id();
  static const int kNewTournamentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 new_tournament_id() const;
  inline void set_new_tournament_id(::google::protobuf::uint32 value);

  // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline ::ETournamentEvent event() const;
  inline void set_event(::ETournamentEvent value);

  // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  inline bool has_new_tournament_state() const;
  inline void clear_new_tournament_state();
  static const int kNewTournamentStateFieldNumber = 3;
  inline ::ETournamentState new_tournament_state() const;
  inline void set_new_tournament_state(::ETournamentState value);

  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  inline int game_changes_size() const;
  inline void clear_game_changes();
  static const int kGameChangesFieldNumber = 4;
  inline const ::CMsgDOTATournamentStateChange_GameChange& game_changes(int index) const;
  inline ::CMsgDOTATournamentStateChange_GameChange* mutable_game_changes(int index);
  inline ::CMsgDOTATournamentStateChange_GameChange* add_game_changes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >&
      game_changes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >*
      mutable_game_changes();

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  inline int team_changes_size() const;
  inline void clear_team_changes();
  static const int kTeamChangesFieldNumber = 5;
  inline const ::CMsgDOTATournamentStateChange_TeamChange& team_changes(int index) const;
  inline ::CMsgDOTATournamentStateChange_TeamChange* mutable_team_changes(int index);
  inline ::CMsgDOTATournamentStateChange_TeamChange* add_team_changes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >&
      team_changes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >*
      mutable_team_changes();

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  inline int merged_tournament_ids_size() const;
  inline void clear_merged_tournament_ids();
  static const int kMergedTournamentIdsFieldNumber = 6;
  inline ::google::protobuf::uint32 merged_tournament_ids(int index) const;
  inline void set_merged_tournament_ids(int index, ::google::protobuf::uint32 value);
  inline void add_merged_tournament_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      merged_tournament_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_merged_tournament_ids();

  // optional uint32 state_seq_num = 7;
  inline bool has_state_seq_num() const;
  inline void clear_state_seq_num();
  static const int kStateSeqNumFieldNumber = 7;
  inline ::google::protobuf::uint32 state_seq_num() const;
  inline void set_state_seq_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentStateChange)
 private:
  inline void set_has_new_tournament_id();
  inline void clear_has_new_tournament_id();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_new_tournament_state();
  inline void clear_has_new_tournament_state();
  inline void set_has_state_seq_num();
  inline void clear_has_state_seq_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 new_tournament_id_;
  int event_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange > game_changes_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange > team_changes_;
  int new_tournament_state_;
  ::google::protobuf::uint32 state_seq_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > merged_tournament_ids_;
  mutable int _merged_tournament_ids_cached_byte_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentStateChange* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentRequest : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentRequest();
  virtual ~CMsgDOTATournamentRequest();

  CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from);

  inline CMsgDOTATournamentRequest& operator=(const CMsgDOTATournamentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentRequest& default_instance();

  void Swap(CMsgDOTATournamentRequest* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentRequest& from);
  void MergeFrom(const CMsgDOTATournamentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tournament_id = 1;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint64 client_tournament_gid = 2;
  inline bool has_client_tournament_gid() const;
  inline void clear_client_tournament_gid();
  static const int kClientTournamentGidFieldNumber = 2;
  inline ::google::protobuf::uint64 client_tournament_gid() const;
  inline void set_client_tournament_gid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentRequest)
 private:
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_client_tournament_gid();
  inline void clear_has_client_tournament_gid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 client_tournament_gid_;
  ::google::protobuf::uint32 tournament_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentResponse : public ::google::protobuf::Message {
 public:
  CMsgDOTATournamentResponse();
  virtual ~CMsgDOTATournamentResponse();

  CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from);

  inline CMsgDOTATournamentResponse& operator=(const CMsgDOTATournamentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTATournamentResponse& default_instance();

  void Swap(CMsgDOTATournamentResponse* other);

  // implements Message ----------------------------------------------

  CMsgDOTATournamentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTATournamentResponse& from);
  void MergeFrom(const CMsgDOTATournamentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1 [default = 2];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional .CMsgDOTATournament tournament = 2;
  inline bool has_tournament() const;
  inline void clear_tournament();
  static const int kTournamentFieldNumber = 2;
  inline const ::CMsgDOTATournament& tournament() const;
  inline ::CMsgDOTATournament* mutable_tournament();
  inline ::CMsgDOTATournament* release_tournament();
  inline void set_allocated_tournament(::CMsgDOTATournament* tournament);

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_tournament();
  inline void clear_has_tournament();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTATournament* tournament_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTATournamentResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAClearTournamentGame : public ::google::protobuf::Message {
 public:
  CMsgDOTAClearTournamentGame();
  virtual ~CMsgDOTAClearTournamentGame();

  CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from);

  inline CMsgDOTAClearTournamentGame& operator=(const CMsgDOTAClearTournamentGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAClearTournamentGame& default_instance();

  void Swap(CMsgDOTAClearTournamentGame* other);

  // implements Message ----------------------------------------------

  CMsgDOTAClearTournamentGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAClearTournamentGame& from);
  void MergeFrom(const CMsgDOTAClearTournamentGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tournament_id = 1;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAClearTournamentGame)
 private:
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 game_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAClearTournamentGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerSkillLevelStats : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats();
  virtual ~CMsgDOTAWeekendTourneyPlayerSkillLevelStats();

  CMsgDOTAWeekendTourneyPlayerSkillLevelStats(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from);

  inline CMsgDOTAWeekendTourneyPlayerSkillLevelStats& operator=(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& default_instance();

  void Swap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerSkillLevelStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skill_level = 1;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 times_won_0 = 2;
  inline bool has_times_won_0() const;
  inline void clear_times_won_0();
  static const int kTimesWon0FieldNumber = 2;
  inline ::google::protobuf::uint32 times_won_0() const;
  inline void set_times_won_0(::google::protobuf::uint32 value);

  // optional uint32 times_won_1 = 3;
  inline bool has_times_won_1() const;
  inline void clear_times_won_1();
  static const int kTimesWon1FieldNumber = 3;
  inline ::google::protobuf::uint32 times_won_1() const;
  inline void set_times_won_1(::google::protobuf::uint32 value);

  // optional uint32 times_won_2 = 4;
  inline bool has_times_won_2() const;
  inline void clear_times_won_2();
  static const int kTimesWon2FieldNumber = 4;
  inline ::google::protobuf::uint32 times_won_2() const;
  inline void set_times_won_2(::google::protobuf::uint32 value);

  // optional uint32 times_won_3 = 5;
  inline bool has_times_won_3() const;
  inline void clear_times_won_3();
  static const int kTimesWon3FieldNumber = 5;
  inline ::google::protobuf::uint32 times_won_3() const;
  inline void set_times_won_3(::google::protobuf::uint32 value);

  // optional uint32 times_bye_and_lost = 6;
  inline bool has_times_bye_and_lost() const;
  inline void clear_times_bye_and_lost();
  static const int kTimesByeAndLostFieldNumber = 6;
  inline ::google::protobuf::uint32 times_bye_and_lost() const;
  inline void set_times_bye_and_lost(::google::protobuf::uint32 value);

  // optional uint32 times_bye_and_won = 7;
  inline bool has_times_bye_and_won() const;
  inline void clear_times_bye_and_won();
  static const int kTimesByeAndWonFieldNumber = 7;
  inline ::google::protobuf::uint32 times_bye_and_won() const;
  inline void set_times_bye_and_won(::google::protobuf::uint32 value);

  // optional uint32 total_games_won = 8;
  inline bool has_total_games_won() const;
  inline void clear_total_games_won();
  static const int kTotalGamesWonFieldNumber = 8;
  inline ::google::protobuf::uint32 total_games_won() const;
  inline void set_total_games_won(::google::protobuf::uint32 value);

  // optional uint32 score = 9;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
 private:
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_times_won_0();
  inline void clear_has_times_won_0();
  inline void set_has_times_won_1();
  inline void clear_has_times_won_1();
  inline void set_has_times_won_2();
  inline void clear_has_times_won_2();
  inline void set_has_times_won_3();
  inline void clear_has_times_won_3();
  inline void set_has_times_bye_and_lost();
  inline void clear_has_times_bye_and_lost();
  inline void set_has_times_bye_and_won();
  inline void clear_has_times_bye_and_won();
  inline void set_has_total_games_won();
  inline void clear_has_total_games_won();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 skill_level_;
  ::google::protobuf::uint32 times_won_0_;
  ::google::protobuf::uint32 times_won_1_;
  ::google::protobuf::uint32 times_won_2_;
  ::google::protobuf::uint32 times_won_3_;
  ::google::protobuf::uint32 times_bye_and_lost_;
  ::google::protobuf::uint32 times_bye_and_won_;
  ::google::protobuf::uint32 total_games_won_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyPlayerSkillLevelStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerStats : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyPlayerStats();
  virtual ~CMsgDOTAWeekendTourneyPlayerStats();

  CMsgDOTAWeekendTourneyPlayerStats(const CMsgDOTAWeekendTourneyPlayerStats& from);

  inline CMsgDOTAWeekendTourneyPlayerStats& operator=(const CMsgDOTAWeekendTourneyPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyPlayerStats& default_instance();

  void Swap(CMsgDOTAWeekendTourneyPlayerStats* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerStats& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyPlayerStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 season_trophy_id = 2;
  inline bool has_season_trophy_id() const;
  inline void clear_season_trophy_id();
  static const int kSeasonTrophyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 season_trophy_id() const;
  inline void set_season_trophy_id(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  inline int skill_levels_size() const;
  inline void clear_skill_levels();
  static const int kSkillLevelsFieldNumber = 3;
  inline const ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& skill_levels(int index) const;
  inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* mutable_skill_levels(int index);
  inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* add_skill_levels();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >&
      skill_levels() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >*
      mutable_skill_levels();

  // optional uint32 current_tier = 4;
  inline bool has_current_tier() const;
  inline void clear_current_tier();
  static const int kCurrentTierFieldNumber = 4;
  inline ::google::protobuf::uint32 current_tier() const;
  inline void set_current_tier(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerStats)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_season_trophy_id();
  inline void clear_has_season_trophy_id();
  inline void set_has_current_tier();
  inline void clear_has_current_tier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 season_trophy_id_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats > skill_levels_;
  ::google::protobuf::uint32 current_tier_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyPlayerStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerStatsRequest : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyPlayerStatsRequest();
  virtual ~CMsgDOTAWeekendTourneyPlayerStatsRequest();

  CMsgDOTAWeekendTourneyPlayerStatsRequest(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from);

  inline CMsgDOTAWeekendTourneyPlayerStatsRequest& operator=(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyPlayerStatsRequest& default_instance();

  void Swap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerStatsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 season_trophy_id = 2;
  inline bool has_season_trophy_id() const;
  inline void clear_season_trophy_id();
  static const int kSeasonTrophyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 season_trophy_id() const;
  inline void set_season_trophy_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerStatsRequest)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_season_trophy_id();
  inline void clear_has_season_trophy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 season_trophy_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyPlayerStatsRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerHistoryRequest : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyPlayerHistoryRequest();
  virtual ~CMsgDOTAWeekendTourneyPlayerHistoryRequest();

  CMsgDOTAWeekendTourneyPlayerHistoryRequest(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from);

  inline CMsgDOTAWeekendTourneyPlayerHistoryRequest& operator=(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyPlayerHistoryRequest& default_instance();

  void Swap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerHistoryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 season_trophy_id = 2;
  inline bool has_season_trophy_id() const;
  inline void clear_season_trophy_id();
  static const int kSeasonTrophyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 season_trophy_id() const;
  inline void set_season_trophy_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_season_trophy_id();
  inline void clear_has_season_trophy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 season_trophy_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyPlayerHistoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerHistory_Tournament : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament();
  virtual ~CMsgDOTAWeekendTourneyPlayerHistory_Tournament();

  CMsgDOTAWeekendTourneyPlayerHistory_Tournament(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from);

  inline CMsgDOTAWeekendTourneyPlayerHistory_Tournament& operator=(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& default_instance();

  void Swap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerHistory_Tournament* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tournament_id = 1;
  inline bool has_tournament_id() const;
  inline void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tournament_id() const;
  inline void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 tournament_tier = 3;
  inline bool has_tournament_tier() const;
  inline void clear_tournament_tier();
  static const int kTournamentTierFieldNumber = 3;
  inline ::google::protobuf::uint32 tournament_tier() const;
  inline void set_tournament_tier(::google::protobuf::uint32 value);

  // optional uint32 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 team_date = 5;
  inline bool has_team_date() const;
  inline void clear_team_date();
  static const int kTeamDateFieldNumber = 5;
  inline ::google::protobuf::uint32 team_date() const;
  inline void set_team_date(::google::protobuf::uint32 value);

  // optional uint32 team_result = 6;
  inline bool has_team_result() const;
  inline void clear_team_result();
  static const int kTeamResultFieldNumber = 6;
  inline ::google::protobuf::uint32 team_result() const;
  inline void set_team_result(::google::protobuf::uint32 value);

  // repeated uint32 account_id = 7;
  inline int account_id_size() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 7;
  inline ::google::protobuf::uint32 account_id(int index) const;
  inline void set_account_id(int index, ::google::protobuf::uint32 value);
  inline void add_account_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      account_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_account_id();

  // optional string team_name = 8;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 8;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint32 season_trophy_id = 9;
  inline bool has_season_trophy_id() const;
  inline void clear_season_trophy_id();
  static const int kSeasonTrophyIdFieldNumber = 9;
  inline ::google::protobuf::uint32 season_trophy_id() const;
  inline void set_season_trophy_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
 private:
  inline void set_has_tournament_id();
  inline void clear_has_tournament_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_tournament_tier();
  inline void clear_has_tournament_tier();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_date();
  inline void clear_has_team_date();
  inline void set_has_team_result();
  inline void clear_has_team_result();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_season_trophy_id();
  inline void clear_has_season_trophy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 tournament_tier_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 team_date_;
  ::google::protobuf::uint32 team_result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > account_id_;
  ::std::string* team_name_;
  ::google::protobuf::uint32 season_trophy_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyPlayerHistory_Tournament* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerHistory : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyPlayerHistory();
  virtual ~CMsgDOTAWeekendTourneyPlayerHistory();

  CMsgDOTAWeekendTourneyPlayerHistory(const CMsgDOTAWeekendTourneyPlayerHistory& from);

  inline CMsgDOTAWeekendTourneyPlayerHistory& operator=(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyPlayerHistory& default_instance();

  void Swap(CMsgDOTAWeekendTourneyPlayerHistory* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAWeekendTourneyPlayerHistory_Tournament Tournament;

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  inline int tournaments_size() const;
  inline void clear_tournaments();
  static const int kTournamentsFieldNumber = 3;
  inline const ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& tournaments(int index) const;
  inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* mutable_tournaments(int index);
  inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* add_tournaments();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >&
      tournaments() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >*
      mutable_tournaments();

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerHistory)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament > tournaments_;
  ::google::protobuf::uint32 account_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyPlayerHistory* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyParticipationDetails_Tier : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyParticipationDetails_Tier();
  virtual ~CMsgDOTAWeekendTourneyParticipationDetails_Tier();

  CMsgDOTAWeekendTourneyParticipationDetails_Tier(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from);

  inline CMsgDOTAWeekendTourneyParticipationDetails_Tier& operator=(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyParticipationDetails_Tier& default_instance();

  void Swap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyParticipationDetails_Tier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tier = 1;
  inline bool has_tier() const;
  inline void clear_tier();
  static const int kTierFieldNumber = 1;
  inline ::google::protobuf::uint32 tier() const;
  inline void set_tier(::google::protobuf::uint32 value);

  // optional uint32 players = 2;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline ::google::protobuf::uint32 players() const;
  inline void set_players(::google::protobuf::uint32 value);

  // optional uint32 teams = 3;
  inline bool has_teams() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 3;
  inline ::google::protobuf::uint32 teams() const;
  inline void set_teams(::google::protobuf::uint32 value);

  // optional uint32 winning_teams = 4;
  inline bool has_winning_teams() const;
  inline void clear_winning_teams();
  static const int kWinningTeamsFieldNumber = 4;
  inline ::google::protobuf::uint32 winning_teams() const;
  inline void set_winning_teams(::google::protobuf::uint32 value);

  // optional uint32 players_streak_2 = 5;
  inline bool has_players_streak_2() const;
  inline void clear_players_streak_2();
  static const int kPlayersStreak2FieldNumber = 5;
  inline ::google::protobuf::uint32 players_streak_2() const;
  inline void set_players_streak_2(::google::protobuf::uint32 value);

  // optional uint32 players_streak_3 = 6;
  inline bool has_players_streak_3() const;
  inline void clear_players_streak_3();
  static const int kPlayersStreak3FieldNumber = 6;
  inline ::google::protobuf::uint32 players_streak_3() const;
  inline void set_players_streak_3(::google::protobuf::uint32 value);

  // optional uint32 players_streak_4 = 7;
  inline bool has_players_streak_4() const;
  inline void clear_players_streak_4();
  static const int kPlayersStreak4FieldNumber = 7;
  inline ::google::protobuf::uint32 players_streak_4() const;
  inline void set_players_streak_4(::google::protobuf::uint32 value);

  // optional uint32 players_streak_5 = 8;
  inline bool has_players_streak_5() const;
  inline void clear_players_streak_5();
  static const int kPlayersStreak5FieldNumber = 8;
  inline ::google::protobuf::uint32 players_streak_5() const;
  inline void set_players_streak_5(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
 private:
  inline void set_has_tier();
  inline void clear_has_tier();
  inline void set_has_players();
  inline void clear_has_players();
  inline void set_has_teams();
  inline void clear_has_teams();
  inline void set_has_winning_teams();
  inline void clear_has_winning_teams();
  inline void set_has_players_streak_2();
  inline void clear_has_players_streak_2();
  inline void set_has_players_streak_3();
  inline void clear_has_players_streak_3();
  inline void set_has_players_streak_4();
  inline void clear_has_players_streak_4();
  inline void set_has_players_streak_5();
  inline void clear_has_players_streak_5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tier_;
  ::google::protobuf::uint32 players_;
  ::google::protobuf::uint32 teams_;
  ::google::protobuf::uint32 winning_teams_;
  ::google::protobuf::uint32 players_streak_2_;
  ::google::protobuf::uint32 players_streak_3_;
  ::google::protobuf::uint32 players_streak_4_;
  ::google::protobuf::uint32 players_streak_5_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyParticipationDetails_Tier* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyParticipationDetails_Division : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyParticipationDetails_Division();
  virtual ~CMsgDOTAWeekendTourneyParticipationDetails_Division();

  CMsgDOTAWeekendTourneyParticipationDetails_Division(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from);

  inline CMsgDOTAWeekendTourneyParticipationDetails_Division& operator=(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyParticipationDetails_Division& default_instance();

  void Swap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyParticipationDetails_Division* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 division_id = 1;
  inline bool has_division_id() const;
  inline void clear_division_id();
  static const int kDivisionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 division_id() const;
  inline void set_division_id(::google::protobuf::uint32 value);

  // optional uint32 schedule_time = 2;
  inline bool has_schedule_time() const;
  inline void clear_schedule_time();
  static const int kScheduleTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 schedule_time() const;
  inline void set_schedule_time(::google::protobuf::uint32 value);

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  inline int tiers_size() const;
  inline void clear_tiers();
  static const int kTiersFieldNumber = 3;
  inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Tier& tiers(int index) const;
  inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* mutable_tiers(int index);
  inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* add_tiers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >&
      tiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >*
      mutable_tiers();

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyParticipationDetails.Division)
 private:
  inline void set_has_division_id();
  inline void clear_has_division_id();
  inline void set_has_schedule_time();
  inline void clear_has_schedule_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 division_id_;
  ::google::protobuf::uint32 schedule_time_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier > tiers_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyParticipationDetails_Division* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyParticipationDetails : public ::google::protobuf::Message {
 public:
  CMsgDOTAWeekendTourneyParticipationDetails();
  virtual ~CMsgDOTAWeekendTourneyParticipationDetails();

  CMsgDOTAWeekendTourneyParticipationDetails(const CMsgDOTAWeekendTourneyParticipationDetails& from);

  inline CMsgDOTAWeekendTourneyParticipationDetails& operator=(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAWeekendTourneyParticipationDetails& default_instance();

  void Swap(CMsgDOTAWeekendTourneyParticipationDetails* other);

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyParticipationDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from);
  void MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAWeekendTourneyParticipationDetails_Tier Tier;
  typedef CMsgDOTAWeekendTourneyParticipationDetails_Division Division;

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  inline int divisions_size() const;
  inline void clear_divisions();
  static const int kDivisionsFieldNumber = 1;
  inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Division& divisions(int index) const;
  inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* mutable_divisions(int index);
  inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* add_divisions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >&
      divisions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >*
      mutable_divisions();

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyParticipationDetails)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division > divisions_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5ftournament_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5ftournament_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAWeekendTourneyParticipationDetails* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgDOTATournamentInfo_PhaseGroup

// optional uint32 group_id = 1;
inline bool CMsgDOTATournamentInfo_PhaseGroup::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_PhaseGroup::group_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.PhaseGroup.group_id)
  return group_id_;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.PhaseGroup.group_id)
}

// optional string group_name = 2;
inline bool CMsgDOTATournamentInfo_PhaseGroup::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& CMsgDOTATournamentInfo_PhaseGroup::group_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.PhaseGroup.group_name)
  return *group_name_;
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
inline ::std::string* CMsgDOTATournamentInfo_PhaseGroup::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.PhaseGroup.group_name)
  return group_name_;
}
inline ::std::string* CMsgDOTATournamentInfo_PhaseGroup::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_PhaseGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.PhaseGroup.group_name)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentInfo_Phase

// optional uint32 phase_id = 1;
inline bool CMsgDOTATournamentInfo_Phase::has_phase_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentInfo_Phase::set_has_phase_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_has_phase_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_phase_id() {
  phase_id_ = 0u;
  clear_has_phase_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::phase_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.phase_id)
  return phase_id_;
}
inline void CMsgDOTATournamentInfo_Phase::set_phase_id(::google::protobuf::uint32 value) {
  set_has_phase_id();
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Phase.phase_id)
}

// optional string phase_name = 2;
inline bool CMsgDOTATournamentInfo_Phase::has_phase_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentInfo_Phase::set_has_phase_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_has_phase_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_phase_name() {
  if (phase_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phase_name_->clear();
  }
  clear_has_phase_name();
}
inline const ::std::string& CMsgDOTATournamentInfo_Phase::phase_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.phase_name)
  return *phase_name_;
}
inline void CMsgDOTATournamentInfo_Phase::set_phase_name(const ::std::string& value) {
  set_has_phase_name();
  if (phase_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phase_name_ = new ::std::string;
  }
  phase_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Phase.phase_name)
}
inline void CMsgDOTATournamentInfo_Phase::set_phase_name(const char* value) {
  set_has_phase_name();
  if (phase_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phase_name_ = new ::std::string;
  }
  phase_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.Phase.phase_name)
}
inline void CMsgDOTATournamentInfo_Phase::set_phase_name(const char* value, size_t size) {
  set_has_phase_name();
  if (phase_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phase_name_ = new ::std::string;
  }
  phase_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.Phase.phase_name)
}
inline ::std::string* CMsgDOTATournamentInfo_Phase::mutable_phase_name() {
  set_has_phase_name();
  if (phase_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phase_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.Phase.phase_name)
  return phase_name_;
}
inline ::std::string* CMsgDOTATournamentInfo_Phase::release_phase_name() {
  clear_has_phase_name();
  if (phase_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phase_name_;
    phase_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_Phase::set_allocated_phase_name(::std::string* phase_name) {
  if (phase_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phase_name_;
  }
  if (phase_name) {
    set_has_phase_name();
    phase_name_ = phase_name;
  } else {
    clear_has_phase_name();
    phase_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.Phase.phase_name)
}

// optional uint32 type_id = 3;
inline bool CMsgDOTATournamentInfo_Phase::has_type_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournamentInfo_Phase::set_has_type_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.type_id)
  return type_id_;
}
inline void CMsgDOTATournamentInfo_Phase::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Phase.type_id)
}

// optional uint32 iterations = 4;
inline bool CMsgDOTATournamentInfo_Phase::has_iterations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournamentInfo_Phase::set_has_iterations() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_has_iterations() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_iterations() {
  iterations_ = 0u;
  clear_has_iterations();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::iterations() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.iterations)
  return iterations_;
}
inline void CMsgDOTATournamentInfo_Phase::set_iterations(::google::protobuf::uint32 value) {
  set_has_iterations();
  iterations_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Phase.iterations)
}

// optional uint32 min_start_time = 5;
inline bool CMsgDOTATournamentInfo_Phase::has_min_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournamentInfo_Phase::set_has_min_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_has_min_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_min_start_time() {
  min_start_time_ = 0u;
  clear_has_min_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::min_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.min_start_time)
  return min_start_time_;
}
inline void CMsgDOTATournamentInfo_Phase::set_min_start_time(::google::protobuf::uint32 value) {
  set_has_min_start_time();
  min_start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Phase.min_start_time)
}

// optional uint32 max_start_time = 6;
inline bool CMsgDOTATournamentInfo_Phase::has_max_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournamentInfo_Phase::set_has_max_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_has_max_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournamentInfo_Phase::clear_max_start_time() {
  max_start_time_ = 0u;
  clear_has_max_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::max_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.max_start_time)
  return max_start_time_;
}
inline void CMsgDOTATournamentInfo_Phase::set_max_start_time(::google::protobuf::uint32 value) {
  set_has_max_start_time();
  max_start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Phase.max_start_time)
}

// repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
inline int CMsgDOTATournamentInfo_Phase::group_list_size() const {
  return group_list_.size();
}
inline void CMsgDOTATournamentInfo_Phase::clear_group_list() {
  group_list_.Clear();
}
inline const ::CMsgDOTATournamentInfo_PhaseGroup& CMsgDOTATournamentInfo_Phase::group_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_.Get(index);
}
inline ::CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_Phase::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_.Mutable(index);
}
inline ::CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_Phase::add_group_list() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_PhaseGroup >&
CMsgDOTATournamentInfo_Phase::group_list() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_PhaseGroup >*
CMsgDOTATournamentInfo_Phase::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentInfo.Phase.group_list)
  return &group_list_;
}

// -------------------------------------------------------------------

// CMsgDOTATournamentInfo_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTATournamentInfo_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentInfo_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentInfo_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentInfo_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Team.team_id)
  return team_id_;
}
inline void CMsgDOTATournamentInfo_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Team.team_id)
}

// optional string name = 2;
inline bool CMsgDOTATournamentInfo_Team::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentInfo_Team::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentInfo_Team::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentInfo_Team::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgDOTATournamentInfo_Team::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Team.name)
  return *name_;
}
inline void CMsgDOTATournamentInfo_Team::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Team.name)
}
inline void CMsgDOTATournamentInfo_Team::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.Team.name)
}
inline void CMsgDOTATournamentInfo_Team::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.Team.name)
}
inline ::std::string* CMsgDOTATournamentInfo_Team::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.Team.name)
  return name_;
}
inline ::std::string* CMsgDOTATournamentInfo_Team::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_Team::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.Team.name)
}

// optional string tag = 3;
inline bool CMsgDOTATournamentInfo_Team::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournamentInfo_Team::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournamentInfo_Team::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournamentInfo_Team::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& CMsgDOTATournamentInfo_Team::tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Team.tag)
  return *tag_;
}
inline void CMsgDOTATournamentInfo_Team::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Team.tag)
}
inline void CMsgDOTATournamentInfo_Team::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.Team.tag)
}
inline void CMsgDOTATournamentInfo_Team::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.Team.tag)
}
inline ::std::string* CMsgDOTATournamentInfo_Team::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.Team.tag)
  return tag_;
}
inline ::std::string* CMsgDOTATournamentInfo_Team::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_Team::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.Team.tag)
}

// optional uint64 team_logo = 4;
inline bool CMsgDOTATournamentInfo_Team::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournamentInfo_Team::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournamentInfo_Team::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournamentInfo_Team::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentInfo_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Team.team_logo)
  return team_logo_;
}
inline void CMsgDOTATournamentInfo_Team::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Team.team_logo)
}

// optional bool eliminated = 5;
inline bool CMsgDOTATournamentInfo_Team::has_eliminated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournamentInfo_Team::set_has_eliminated() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournamentInfo_Team::clear_has_eliminated() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournamentInfo_Team::clear_eliminated() {
  eliminated_ = false;
  clear_has_eliminated();
}
inline bool CMsgDOTATournamentInfo_Team::eliminated() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.Team.eliminated)
  return eliminated_;
}
inline void CMsgDOTATournamentInfo_Team::set_eliminated(bool value) {
  set_has_eliminated();
  eliminated_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.Team.eliminated)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentInfo_UpcomingMatch

// optional uint32 series_id = 1;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_series_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_series_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.series_id)
  return series_id_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.series_id)
}

// optional uint32 team1_id = 2;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_id() {
  team1_id_ = 0u;
  clear_has_team1_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_id)
  return team1_id_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_id(::google::protobuf::uint32 value) {
  set_has_team1_id();
  team1_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_id)
}

// optional uint32 team2_id = 3;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_id() {
  team2_id_ = 0u;
  clear_has_team2_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_id)
  return team2_id_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_id(::google::protobuf::uint32 value) {
  set_has_team2_id();
  team2_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_id)
}

// optional uint32 bo = 4;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_bo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_bo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_bo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_bo() {
  bo_ = 0u;
  clear_has_bo();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::bo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.bo)
  return bo_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_bo(::google::protobuf::uint32 value) {
  set_has_bo();
  bo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.bo)
}

// optional string stage_name = 5;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_stage_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_stage_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_stage_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_stage_name() {
  if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_->clear();
  }
  clear_has_stage_name();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::stage_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
  return *stage_name_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(const ::std::string& value) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(const char* value) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(const char* value, size_t size) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_stage_name() {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
  return stage_name_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_stage_name() {
  clear_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stage_name_;
    stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_stage_name(::std::string* stage_name) {
  if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stage_name_;
  }
  if (stage_name) {
    set_has_stage_name();
    stage_name_ = stage_name;
  } else {
    clear_has_stage_name();
    stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}

// optional uint32 start_time = 6;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.start_time)
  return start_time_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.start_time)
}

// optional string winner_stage = 7;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_winner_stage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_winner_stage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_winner_stage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_winner_stage() {
  if (winner_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winner_stage_->clear();
  }
  clear_has_winner_stage();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::winner_stage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
  return *winner_stage_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(const ::std::string& value) {
  set_has_winner_stage();
  if (winner_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winner_stage_ = new ::std::string;
  }
  winner_stage_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(const char* value) {
  set_has_winner_stage();
  if (winner_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winner_stage_ = new ::std::string;
  }
  winner_stage_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(const char* value, size_t size) {
  set_has_winner_stage();
  if (winner_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winner_stage_ = new ::std::string;
  }
  winner_stage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_winner_stage() {
  set_has_winner_stage();
  if (winner_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    winner_stage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
  return winner_stage_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_winner_stage() {
  clear_has_winner_stage();
  if (winner_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = winner_stage_;
    winner_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_winner_stage(::std::string* winner_stage) {
  if (winner_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete winner_stage_;
  }
  if (winner_stage) {
    set_has_winner_stage();
    winner_stage_ = winner_stage;
  } else {
    clear_has_winner_stage();
    winner_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}

// optional string loser_stage = 8;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_loser_stage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_loser_stage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_loser_stage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_loser_stage() {
  if (loser_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loser_stage_->clear();
  }
  clear_has_loser_stage();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::loser_stage() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
  return *loser_stage_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(const ::std::string& value) {
  set_has_loser_stage();
  if (loser_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loser_stage_ = new ::std::string;
  }
  loser_stage_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(const char* value) {
  set_has_loser_stage();
  if (loser_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loser_stage_ = new ::std::string;
  }
  loser_stage_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(const char* value, size_t size) {
  set_has_loser_stage();
  if (loser_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loser_stage_ = new ::std::string;
  }
  loser_stage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_loser_stage() {
  set_has_loser_stage();
  if (loser_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loser_stage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
  return loser_stage_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_loser_stage() {
  clear_has_loser_stage();
  if (loser_stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loser_stage_;
    loser_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_loser_stage(::std::string* loser_stage) {
  if (loser_stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loser_stage_;
  }
  if (loser_stage) {
    set_has_loser_stage();
    loser_stage_ = loser_stage;
  } else {
    clear_has_loser_stage();
    loser_stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}

// optional string team1_tag = 9;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_tag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_tag() {
  if (team1_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_tag_->clear();
  }
  clear_has_team1_tag();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team1_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
  return *team1_tag_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(const ::std::string& value) {
  set_has_team1_tag();
  if (team1_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_tag_ = new ::std::string;
  }
  team1_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(const char* value) {
  set_has_team1_tag();
  if (team1_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_tag_ = new ::std::string;
  }
  team1_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(const char* value, size_t size) {
  set_has_team1_tag();
  if (team1_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_tag_ = new ::std::string;
  }
  team1_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team1_tag() {
  set_has_team1_tag();
  if (team1_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
  return team1_tag_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team1_tag() {
  clear_has_team1_tag();
  if (team1_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team1_tag_;
    team1_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team1_tag(::std::string* team1_tag) {
  if (team1_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team1_tag_;
  }
  if (team1_tag) {
    set_has_team1_tag();
    team1_tag_ = team1_tag;
  } else {
    clear_has_team1_tag();
    team1_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}

// optional string team2_tag = 10;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_tag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_tag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_tag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_tag() {
  if (team2_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_tag_->clear();
  }
  clear_has_team2_tag();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team2_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
  return *team2_tag_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(const ::std::string& value) {
  set_has_team2_tag();
  if (team2_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_tag_ = new ::std::string;
  }
  team2_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(const char* value) {
  set_has_team2_tag();
  if (team2_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_tag_ = new ::std::string;
  }
  team2_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(const char* value, size_t size) {
  set_has_team2_tag();
  if (team2_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_tag_ = new ::std::string;
  }
  team2_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team2_tag() {
  set_has_team2_tag();
  if (team2_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
  return team2_tag_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team2_tag() {
  clear_has_team2_tag();
  if (team2_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team2_tag_;
    team2_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team2_tag(::std::string* team2_tag) {
  if (team2_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team2_tag_;
  }
  if (team2_tag) {
    set_has_team2_tag();
    team2_tag_ = team2_tag;
  } else {
    clear_has_team2_tag();
    team2_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}

// optional string team1_prev_opponent_tag = 11;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_opponent_tag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_opponent_tag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_opponent_tag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_opponent_tag() {
  if (team1_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_prev_opponent_tag_->clear();
  }
  clear_has_team1_prev_opponent_tag();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_opponent_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
  return *team1_prev_opponent_tag_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(const ::std::string& value) {
  set_has_team1_prev_opponent_tag();
  if (team1_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_prev_opponent_tag_ = new ::std::string;
  }
  team1_prev_opponent_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(const char* value) {
  set_has_team1_prev_opponent_tag();
  if (team1_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_prev_opponent_tag_ = new ::std::string;
  }
  team1_prev_opponent_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(const char* value, size_t size) {
  set_has_team1_prev_opponent_tag();
  if (team1_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_prev_opponent_tag_ = new ::std::string;
  }
  team1_prev_opponent_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team1_prev_opponent_tag() {
  set_has_team1_prev_opponent_tag();
  if (team1_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team1_prev_opponent_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
  return team1_prev_opponent_tag_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team1_prev_opponent_tag() {
  clear_has_team1_prev_opponent_tag();
  if (team1_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team1_prev_opponent_tag_;
    team1_prev_opponent_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team1_prev_opponent_tag(::std::string* team1_prev_opponent_tag) {
  if (team1_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team1_prev_opponent_tag_;
  }
  if (team1_prev_opponent_tag) {
    set_has_team1_prev_opponent_tag();
    team1_prev_opponent_tag_ = team1_prev_opponent_tag;
  } else {
    clear_has_team1_prev_opponent_tag();
    team1_prev_opponent_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}

// optional string team2_prev_opponent_tag = 12;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_opponent_tag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_opponent_tag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_opponent_tag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_opponent_tag() {
  if (team2_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_prev_opponent_tag_->clear();
  }
  clear_has_team2_prev_opponent_tag();
}
inline const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_opponent_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
  return *team2_prev_opponent_tag_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(const ::std::string& value) {
  set_has_team2_prev_opponent_tag();
  if (team2_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_prev_opponent_tag_ = new ::std::string;
  }
  team2_prev_opponent_tag_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(const char* value) {
  set_has_team2_prev_opponent_tag();
  if (team2_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_prev_opponent_tag_ = new ::std::string;
  }
  team2_prev_opponent_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(const char* value, size_t size) {
  set_has_team2_prev_opponent_tag();
  if (team2_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_prev_opponent_tag_ = new ::std::string;
  }
  team2_prev_opponent_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team2_prev_opponent_tag() {
  set_has_team2_prev_opponent_tag();
  if (team2_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team2_prev_opponent_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
  return team2_prev_opponent_tag_;
}
inline ::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team2_prev_opponent_tag() {
  clear_has_team2_prev_opponent_tag();
  if (team2_prev_opponent_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team2_prev_opponent_tag_;
    team2_prev_opponent_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team2_prev_opponent_tag(::std::string* team2_prev_opponent_tag) {
  if (team2_prev_opponent_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team2_prev_opponent_tag_;
  }
  if (team2_prev_opponent_tag) {
    set_has_team2_prev_opponent_tag();
    team2_prev_opponent_tag_ = team2_prev_opponent_tag;
  } else {
    clear_has_team2_prev_opponent_tag();
    team2_prev_opponent_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}

// optional uint64 team1_logo = 13;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_logo() {
  team1_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team1_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team1_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_logo)
  return team1_logo_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_logo(::google::protobuf::uint64 value) {
  set_has_team1_logo();
  team1_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_logo)
}

// optional uint64 team2_logo = 14;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_logo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_logo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_logo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_logo() {
  team2_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team2_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team2_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_logo)
  return team2_logo_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_logo(::google::protobuf::uint64 value) {
  set_has_team2_logo();
  team2_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_logo)
}

// optional uint64 team1_prev_opponent_logo = 15;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_opponent_logo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_opponent_logo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_opponent_logo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_opponent_logo() {
  team1_prev_opponent_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team1_prev_opponent_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_opponent_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_logo)
  return team1_prev_opponent_logo_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_logo(::google::protobuf::uint64 value) {
  set_has_team1_prev_opponent_logo();
  team1_prev_opponent_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_logo)
}

// optional uint64 team2_prev_opponent_logo = 16;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_opponent_logo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_opponent_logo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_opponent_logo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_opponent_logo() {
  team2_prev_opponent_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team2_prev_opponent_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_opponent_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_logo)
  return team2_prev_opponent_logo_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_logo(::google::protobuf::uint64 value) {
  set_has_team2_prev_opponent_logo();
  team2_prev_opponent_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_logo)
}

// optional uint32 team1_prev_opponent_id = 17;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_opponent_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_opponent_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_opponent_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_opponent_id() {
  team1_prev_opponent_id_ = 0u;
  clear_has_team1_prev_opponent_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_opponent_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_id)
  return team1_prev_opponent_id_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_id(::google::protobuf::uint32 value) {
  set_has_team1_prev_opponent_id();
  team1_prev_opponent_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_id)
}

// optional uint32 team2_prev_opponent_id = 18;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_opponent_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_opponent_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_opponent_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_opponent_id() {
  team2_prev_opponent_id_ = 0u;
  clear_has_team2_prev_opponent_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_opponent_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_id)
  return team2_prev_opponent_id_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_id(::google::protobuf::uint32 value) {
  set_has_team2_prev_opponent_id();
  team2_prev_opponent_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_id)
}

// optional uint32 team1_prev_match_score = 19;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_match_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_match_score() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_match_score() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_match_score() {
  team1_prev_match_score_ = 0u;
  clear_has_team1_prev_match_score();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_match_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_score)
  return team1_prev_match_score_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_match_score(::google::protobuf::uint32 value) {
  set_has_team1_prev_match_score();
  team1_prev_match_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_score)
}

// optional uint32 team1_prev_match_opponent_score = 20;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_match_opponent_score() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_match_opponent_score() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_match_opponent_score() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_match_opponent_score() {
  team1_prev_match_opponent_score_ = 0u;
  clear_has_team1_prev_match_opponent_score();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_match_opponent_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_opponent_score)
  return team1_prev_match_opponent_score_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_match_opponent_score(::google::protobuf::uint32 value) {
  set_has_team1_prev_match_opponent_score();
  team1_prev_match_opponent_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_opponent_score)
}

// optional uint32 team2_prev_match_score = 21;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_match_score() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_match_score() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_match_score() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_match_score() {
  team2_prev_match_score_ = 0u;
  clear_has_team2_prev_match_score();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_match_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_score)
  return team2_prev_match_score_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_match_score(::google::protobuf::uint32 value) {
  set_has_team2_prev_match_score();
  team2_prev_match_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_score)
}

// optional uint32 team2_prev_match_opponent_score = 22;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_match_opponent_score() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_match_opponent_score() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_match_opponent_score() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_match_opponent_score() {
  team2_prev_match_opponent_score_ = 0u;
  clear_has_team2_prev_match_opponent_score();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_match_opponent_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_opponent_score)
  return team2_prev_match_opponent_score_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_match_opponent_score(::google::protobuf::uint32 value) {
  set_has_team2_prev_match_opponent_score();
  team2_prev_match_opponent_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_opponent_score)
}

// optional uint32 phase_type = 23;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_phase_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_phase_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_phase_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_phase_type() {
  phase_type_ = 0u;
  clear_has_phase_type();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::phase_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.phase_type)
  return phase_type_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_phase_type(::google::protobuf::uint32 value) {
  set_has_phase_type();
  phase_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.phase_type)
}

// optional uint32 team1_score = 24;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_score() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_score() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team1_score)
  return team1_score_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team1_score)
}

// optional uint32 team2_score = 25;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_score() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_score() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_score() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.team2_score)
  return team2_score_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.team2_score)
}

// optional uint32 phase_id = 26;
inline bool CMsgDOTATournamentInfo_UpcomingMatch::has_phase_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_has_phase_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_phase_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::clear_phase_id() {
  phase_id_ = 0u;
  clear_has_phase_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::phase_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.UpcomingMatch.phase_id)
  return phase_id_;
}
inline void CMsgDOTATournamentInfo_UpcomingMatch::set_phase_id(::google::protobuf::uint32 value) {
  set_has_phase_id();
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.UpcomingMatch.phase_id)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentInfo_News

// optional string link = 1;
inline bool CMsgDOTATournamentInfo_News::has_link() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentInfo_News::set_has_link() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentInfo_News::clear_has_link() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentInfo_News::clear_link() {
  if (link_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    link_->clear();
  }
  clear_has_link();
}
inline const ::std::string& CMsgDOTATournamentInfo_News::link() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.News.link)
  return *link_;
}
inline void CMsgDOTATournamentInfo_News::set_link(const ::std::string& value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    link_ = new ::std::string;
  }
  link_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.News.link)
}
inline void CMsgDOTATournamentInfo_News::set_link(const char* value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    link_ = new ::std::string;
  }
  link_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.News.link)
}
inline void CMsgDOTATournamentInfo_News::set_link(const char* value, size_t size) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    link_ = new ::std::string;
  }
  link_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.News.link)
}
inline ::std::string* CMsgDOTATournamentInfo_News::mutable_link() {
  set_has_link();
  if (link_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    link_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.News.link)
  return link_;
}
inline ::std::string* CMsgDOTATournamentInfo_News::release_link() {
  clear_has_link();
  if (link_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = link_;
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_News::set_allocated_link(::std::string* link) {
  if (link_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete link_;
  }
  if (link) {
    set_has_link();
    link_ = link;
  } else {
    clear_has_link();
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.News.link)
}

// optional string title = 2;
inline bool CMsgDOTATournamentInfo_News::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentInfo_News::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentInfo_News::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentInfo_News::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CMsgDOTATournamentInfo_News::title() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.News.title)
  return *title_;
}
inline void CMsgDOTATournamentInfo_News::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.News.title)
}
inline void CMsgDOTATournamentInfo_News::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.News.title)
}
inline void CMsgDOTATournamentInfo_News::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.News.title)
}
inline ::std::string* CMsgDOTATournamentInfo_News::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.News.title)
  return title_;
}
inline ::std::string* CMsgDOTATournamentInfo_News::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_News::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.News.title)
}

// optional string image = 3;
inline bool CMsgDOTATournamentInfo_News::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournamentInfo_News::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournamentInfo_News::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournamentInfo_News::clear_image() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& CMsgDOTATournamentInfo_News::image() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.News.image)
  return *image_;
}
inline void CMsgDOTATournamentInfo_News::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.News.image)
}
inline void CMsgDOTATournamentInfo_News::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournamentInfo.News.image)
}
inline void CMsgDOTATournamentInfo_News::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournamentInfo.News.image)
}
inline ::std::string* CMsgDOTATournamentInfo_News::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.News.image)
  return image_;
}
inline ::std::string* CMsgDOTATournamentInfo_News::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournamentInfo_News::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentInfo.News.image)
}

// optional uint32 timestamp = 4;
inline bool CMsgDOTATournamentInfo_News::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournamentInfo_News::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournamentInfo_News::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournamentInfo_News::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo_News::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.News.timestamp)
  return timestamp_;
}
inline void CMsgDOTATournamentInfo_News::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.News.timestamp)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentInfo

// optional uint32 league_id = 1;
inline bool CMsgDOTATournamentInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentInfo::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentInfo::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.league_id)
  return league_id_;
}
inline void CMsgDOTATournamentInfo::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentInfo.league_id)
}

// repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
inline int CMsgDOTATournamentInfo::phase_list_size() const {
  return phase_list_.size();
}
inline void CMsgDOTATournamentInfo::clear_phase_list() {
  phase_list_.Clear();
}
inline const ::CMsgDOTATournamentInfo_Phase& CMsgDOTATournamentInfo::phase_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.phase_list)
  return phase_list_.Get(index);
}
inline ::CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo::mutable_phase_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.phase_list)
  return phase_list_.Mutable(index);
}
inline ::CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo::add_phase_list() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentInfo.phase_list)
  return phase_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Phase >&
CMsgDOTATournamentInfo::phase_list() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentInfo.phase_list)
  return phase_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Phase >*
CMsgDOTATournamentInfo::mutable_phase_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentInfo.phase_list)
  return &phase_list_;
}

// repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
inline int CMsgDOTATournamentInfo::teams_list_size() const {
  return teams_list_.size();
}
inline void CMsgDOTATournamentInfo::clear_teams_list() {
  teams_list_.Clear();
}
inline const ::CMsgDOTATournamentInfo_Team& CMsgDOTATournamentInfo::teams_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.teams_list)
  return teams_list_.Get(index);
}
inline ::CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo::mutable_teams_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.teams_list)
  return teams_list_.Mutable(index);
}
inline ::CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo::add_teams_list() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentInfo.teams_list)
  return teams_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Team >&
CMsgDOTATournamentInfo::teams_list() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentInfo.teams_list)
  return teams_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_Team >*
CMsgDOTATournamentInfo::mutable_teams_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentInfo.teams_list)
  return &teams_list_;
}

// repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
inline int CMsgDOTATournamentInfo::upcoming_matches_list_size() const {
  return upcoming_matches_list_.size();
}
inline void CMsgDOTATournamentInfo::clear_upcoming_matches_list() {
  upcoming_matches_list_.Clear();
}
inline const ::CMsgDOTATournamentInfo_UpcomingMatch& CMsgDOTATournamentInfo::upcoming_matches_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_.Get(index);
}
inline ::CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo::mutable_upcoming_matches_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_.Mutable(index);
}
inline ::CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo::add_upcoming_matches_list() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_UpcomingMatch >&
CMsgDOTATournamentInfo::upcoming_matches_list() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_UpcomingMatch >*
CMsgDOTATournamentInfo::mutable_upcoming_matches_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentInfo.upcoming_matches_list)
  return &upcoming_matches_list_;
}

// repeated .CMsgDOTATournamentInfo.News news_list = 5;
inline int CMsgDOTATournamentInfo::news_list_size() const {
  return news_list_.size();
}
inline void CMsgDOTATournamentInfo::clear_news_list() {
  news_list_.Clear();
}
inline const ::CMsgDOTATournamentInfo_News& CMsgDOTATournamentInfo::news_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentInfo.news_list)
  return news_list_.Get(index);
}
inline ::CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo::mutable_news_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentInfo.news_list)
  return news_list_.Mutable(index);
}
inline ::CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo::add_news_list() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentInfo.news_list)
  return news_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_News >&
CMsgDOTATournamentInfo::news_list() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentInfo.news_list)
  return news_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentInfo_News >*
CMsgDOTATournamentInfo::mutable_news_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentInfo.news_list)
  return &news_list_;
}

// -------------------------------------------------------------------

// CMsgRequestWeekendTourneySchedule

// -------------------------------------------------------------------

// CMsgWeekendTourneySchedule_Division

// optional uint32 division_code = 1;
inline bool CMsgWeekendTourneySchedule_Division::has_division_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWeekendTourneySchedule_Division::set_has_division_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_has_division_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_division_code() {
  division_code_ = 0u;
  clear_has_division_code();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::division_code() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.division_code)
  return division_code_;
}
inline void CMsgWeekendTourneySchedule_Division::set_division_code(::google::protobuf::uint32 value) {
  set_has_division_code();
  division_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.division_code)
}

// optional uint32 time_window_open = 2;
inline bool CMsgWeekendTourneySchedule_Division::has_time_window_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWeekendTourneySchedule_Division::set_has_time_window_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_has_time_window_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_time_window_open() {
  time_window_open_ = 0u;
  clear_has_time_window_open();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::time_window_open() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.time_window_open)
  return time_window_open_;
}
inline void CMsgWeekendTourneySchedule_Division::set_time_window_open(::google::protobuf::uint32 value) {
  set_has_time_window_open();
  time_window_open_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.time_window_open)
}

// optional uint32 time_window_close = 3;
inline bool CMsgWeekendTourneySchedule_Division::has_time_window_close() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWeekendTourneySchedule_Division::set_has_time_window_close() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_has_time_window_close() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_time_window_close() {
  time_window_close_ = 0u;
  clear_has_time_window_close();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::time_window_close() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.time_window_close)
  return time_window_close_;
}
inline void CMsgWeekendTourneySchedule_Division::set_time_window_close(::google::protobuf::uint32 value) {
  set_has_time_window_close();
  time_window_close_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.time_window_close)
}

// optional uint32 time_window_open_next = 4;
inline bool CMsgWeekendTourneySchedule_Division::has_time_window_open_next() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWeekendTourneySchedule_Division::set_has_time_window_open_next() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_has_time_window_open_next() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWeekendTourneySchedule_Division::clear_time_window_open_next() {
  time_window_open_next_ = 0u;
  clear_has_time_window_open_next();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::time_window_open_next() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.time_window_open_next)
  return time_window_open_next_;
}
inline void CMsgWeekendTourneySchedule_Division::set_time_window_open_next(::google::protobuf::uint32 value) {
  set_has_time_window_open_next();
  time_window_open_next_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.time_window_open_next)
}

// -------------------------------------------------------------------

// CMsgWeekendTourneySchedule

// repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
inline int CMsgWeekendTourneySchedule::divisions_size() const {
  return divisions_.size();
}
inline void CMsgWeekendTourneySchedule::clear_divisions() {
  divisions_.Clear();
}
inline const ::CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule::divisions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.divisions)
  return divisions_.Get(index);
}
inline ::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgWeekendTourneySchedule.divisions)
  return divisions_.Mutable(index);
}
inline ::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::add_divisions() {
  // @@protoc_insertion_point(field_add:CMsgWeekendTourneySchedule.divisions)
  return divisions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >&
CMsgWeekendTourneySchedule::divisions() const {
  // @@protoc_insertion_point(field_list:CMsgWeekendTourneySchedule.divisions)
  return divisions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >*
CMsgWeekendTourneySchedule::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgWeekendTourneySchedule.divisions)
  return &divisions_;
}

// -------------------------------------------------------------------

// CMsgWeekendTourneyOpts

// optional bool participating = 1;
inline bool CMsgWeekendTourneyOpts::has_participating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_participating() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWeekendTourneyOpts::clear_has_participating() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWeekendTourneyOpts::clear_participating() {
  participating_ = false;
  clear_has_participating();
}
inline bool CMsgWeekendTourneyOpts::participating() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.participating)
  return participating_;
}
inline void CMsgWeekendTourneyOpts::set_participating(bool value) {
  set_has_participating();
  participating_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.participating)
}

// optional uint32 division_id = 2;
inline bool CMsgWeekendTourneyOpts::has_division_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_division_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWeekendTourneyOpts::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWeekendTourneyOpts::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneyOpts::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.division_id)
  return division_id_;
}
inline void CMsgWeekendTourneyOpts::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.division_id)
}

// optional uint32 buyin = 3;
inline bool CMsgWeekendTourneyOpts::has_buyin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_buyin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWeekendTourneyOpts::clear_has_buyin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWeekendTourneyOpts::clear_buyin() {
  buyin_ = 0u;
  clear_has_buyin();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneyOpts::buyin() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.buyin)
  return buyin_;
}
inline void CMsgWeekendTourneyOpts::set_buyin(::google::protobuf::uint32 value) {
  set_has_buyin();
  buyin_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.buyin)
}

// optional uint32 skill_level = 4;
inline bool CMsgWeekendTourneyOpts::has_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_skill_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWeekendTourneyOpts::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWeekendTourneyOpts::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneyOpts::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.skill_level)
  return skill_level_;
}
inline void CMsgWeekendTourneyOpts::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.skill_level)
}

// optional uint32 match_groups = 5;
inline bool CMsgWeekendTourneyOpts::has_match_groups() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_match_groups() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgWeekendTourneyOpts::clear_has_match_groups() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgWeekendTourneyOpts::clear_match_groups() {
  match_groups_ = 0u;
  clear_has_match_groups();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneyOpts::match_groups() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.match_groups)
  return match_groups_;
}
inline void CMsgWeekendTourneyOpts::set_match_groups(::google::protobuf::uint32 value) {
  set_has_match_groups();
  match_groups_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.match_groups)
}

// optional uint32 team_id = 6;
inline bool CMsgWeekendTourneyOpts::has_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgWeekendTourneyOpts::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgWeekendTourneyOpts::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgWeekendTourneyOpts::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.team_id)
  return team_id_;
}
inline void CMsgWeekendTourneyOpts::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.team_id)
}

// optional string pickup_team_name = 7;
inline bool CMsgWeekendTourneyOpts::has_pickup_team_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_pickup_team_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgWeekendTourneyOpts::clear_has_pickup_team_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgWeekendTourneyOpts::clear_pickup_team_name() {
  if (pickup_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pickup_team_name_->clear();
  }
  clear_has_pickup_team_name();
}
inline const ::std::string& CMsgWeekendTourneyOpts::pickup_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.pickup_team_name)
  return *pickup_team_name_;
}
inline void CMsgWeekendTourneyOpts::set_pickup_team_name(const ::std::string& value) {
  set_has_pickup_team_name();
  if (pickup_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pickup_team_name_ = new ::std::string;
  }
  pickup_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.pickup_team_name)
}
inline void CMsgWeekendTourneyOpts::set_pickup_team_name(const char* value) {
  set_has_pickup_team_name();
  if (pickup_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pickup_team_name_ = new ::std::string;
  }
  pickup_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgWeekendTourneyOpts.pickup_team_name)
}
inline void CMsgWeekendTourneyOpts::set_pickup_team_name(const char* value, size_t size) {
  set_has_pickup_team_name();
  if (pickup_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pickup_team_name_ = new ::std::string;
  }
  pickup_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgWeekendTourneyOpts.pickup_team_name)
}
inline ::std::string* CMsgWeekendTourneyOpts::mutable_pickup_team_name() {
  set_has_pickup_team_name();
  if (pickup_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pickup_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgWeekendTourneyOpts.pickup_team_name)
  return pickup_team_name_;
}
inline ::std::string* CMsgWeekendTourneyOpts::release_pickup_team_name() {
  clear_has_pickup_team_name();
  if (pickup_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pickup_team_name_;
    pickup_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgWeekendTourneyOpts::set_allocated_pickup_team_name(::std::string* pickup_team_name) {
  if (pickup_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pickup_team_name_;
  }
  if (pickup_team_name) {
    set_has_pickup_team_name();
    pickup_team_name_ = pickup_team_name;
  } else {
    clear_has_pickup_team_name();
    pickup_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgWeekendTourneyOpts.pickup_team_name)
}

// optional uint64 pickup_team_logo = 8;
inline bool CMsgWeekendTourneyOpts::has_pickup_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgWeekendTourneyOpts::set_has_pickup_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgWeekendTourneyOpts::clear_has_pickup_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgWeekendTourneyOpts::clear_pickup_team_logo() {
  pickup_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_pickup_team_logo();
}
inline ::google::protobuf::uint64 CMsgWeekendTourneyOpts::pickup_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.pickup_team_logo)
  return pickup_team_logo_;
}
inline void CMsgWeekendTourneyOpts::set_pickup_team_logo(::google::protobuf::uint64 value) {
  set_has_pickup_team_logo();
  pickup_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.pickup_team_logo)
}

// -------------------------------------------------------------------

// CMsgWeekendTourneyLeave

// -------------------------------------------------------------------

// CMsgDOTATournament_Team

// optional fixed64 team_gid = 1;
inline bool CMsgDOTATournament_Team::has_team_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament_Team::clear_has_team_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament_Team::clear_team_gid() {
  team_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_team_gid();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Team::team_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_gid)
  return team_gid_;
}
inline void CMsgDOTATournament_Team::set_team_gid(::google::protobuf::uint64 value) {
  set_has_team_gid();
  team_gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_gid)
}

// optional uint32 node_or_state = 2;
inline bool CMsgDOTATournament_Team::has_node_or_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_node_or_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament_Team::clear_has_node_or_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament_Team::clear_node_or_state() {
  node_or_state_ = 0u;
  clear_has_node_or_state();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.node_or_state)
  return node_or_state_;
}
inline void CMsgDOTATournament_Team::set_node_or_state(::google::protobuf::uint32 value) {
  set_has_node_or_state();
  node_or_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.node_or_state)
}

// repeated uint32 players = 3 [packed = true];
inline int CMsgDOTATournament_Team::players_size() const {
  return players_.size();
}
inline void CMsgDOTATournament_Team::clear_players() {
  players_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.players)
  return players_.Get(index);
}
inline void CMsgDOTATournament_Team::set_players(int index, ::google::protobuf::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.players)
}
inline void CMsgDOTATournament_Team::add_players(::google::protobuf::uint32 value) {
  players_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.players)
  return players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.players)
  return &players_;
}

// repeated uint32 player_buyin = 9 [packed = true];
inline int CMsgDOTATournament_Team::player_buyin_size() const {
  return player_buyin_.size();
}
inline void CMsgDOTATournament_Team::clear_player_buyin() {
  player_buyin_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::player_buyin(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.player_buyin)
  return player_buyin_.Get(index);
}
inline void CMsgDOTATournament_Team::set_player_buyin(int index, ::google::protobuf::uint32 value) {
  player_buyin_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.player_buyin)
}
inline void CMsgDOTATournament_Team::add_player_buyin(::google::protobuf::uint32 value) {
  player_buyin_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.player_buyin)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::player_buyin() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.player_buyin)
  return player_buyin_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_player_buyin() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.player_buyin)
  return &player_buyin_;
}

// repeated uint32 player_skill_level = 10 [packed = true];
inline int CMsgDOTATournament_Team::player_skill_level_size() const {
  return player_skill_level_.size();
}
inline void CMsgDOTATournament_Team::clear_player_skill_level() {
  player_skill_level_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::player_skill_level(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.player_skill_level)
  return player_skill_level_.Get(index);
}
inline void CMsgDOTATournament_Team::set_player_skill_level(int index, ::google::protobuf::uint32 value) {
  player_skill_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.player_skill_level)
}
inline void CMsgDOTATournament_Team::add_player_skill_level(::google::protobuf::uint32 value) {
  player_skill_level_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.player_skill_level)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::player_skill_level() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.player_skill_level)
  return player_skill_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_player_skill_level() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.player_skill_level)
  return &player_skill_level_;
}

// optional uint32 match_group_mask = 12;
inline bool CMsgDOTATournament_Team::has_match_group_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_match_group_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournament_Team::clear_has_match_group_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournament_Team::clear_match_group_mask() {
  match_group_mask_ = 0u;
  clear_has_match_group_mask();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::match_group_mask() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.match_group_mask)
  return match_group_mask_;
}
inline void CMsgDOTATournament_Team::set_match_group_mask(::google::protobuf::uint32 value) {
  set_has_match_group_mask();
  match_group_mask_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.match_group_mask)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTATournament_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATournament_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATournament_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_id)
  return team_id_;
}
inline void CMsgDOTATournament_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_id)
}

// optional string team_name = 5;
inline bool CMsgDOTATournament_Team::has_team_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATournament_Team::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATournament_Team::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTATournament_Team::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_name)
  return *team_name_;
}
inline void CMsgDOTATournament_Team::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_name)
}
inline void CMsgDOTATournament_Team::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTATournament.Team.team_name)
}
inline void CMsgDOTATournament_Team::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTATournament.Team.team_name)
}
inline ::std::string* CMsgDOTATournament_Team::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.team_name)
  return team_name_;
}
inline ::std::string* CMsgDOTATournament_Team::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTATournament_Team::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.team_name)
}

// optional uint64 team_base_logo = 7;
inline bool CMsgDOTATournament_Team::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTATournament_Team::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTATournament_Team::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Team::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_base_logo)
  return team_base_logo_;
}
inline void CMsgDOTATournament_Team::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_base_logo)
}

// optional uint64 team_ui_logo = 8;
inline bool CMsgDOTATournament_Team::has_team_ui_logo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_ui_logo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTATournament_Team::clear_has_team_ui_logo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTATournament_Team::clear_team_ui_logo() {
  team_ui_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_ui_logo();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Team::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_ui_logo)
  return team_ui_logo_;
}
inline void CMsgDOTATournament_Team::set_team_ui_logo(::google::protobuf::uint64 value) {
  set_has_team_ui_logo();
  team_ui_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_ui_logo)
}

// optional uint32 team_date = 11;
inline bool CMsgDOTATournament_Team::has_team_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTATournament_Team::set_has_team_date() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTATournament_Team::clear_has_team_date() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTATournament_Team::clear_team_date() {
  team_date_ = 0u;
  clear_has_team_date();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Team::team_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_date)
  return team_date_;
}
inline void CMsgDOTATournament_Team::set_team_date(::google::protobuf::uint32 value) {
  set_has_team_date();
  team_date_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_date)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Game

// optional uint32 node_idx = 1;
inline bool CMsgDOTATournament_Game::has_node_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_node_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament_Game::clear_has_node_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament_Game::clear_node_idx() {
  node_idx_ = 0u;
  clear_has_node_idx();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game::node_idx() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.node_idx)
  return node_idx_;
}
inline void CMsgDOTATournament_Game::set_node_idx(::google::protobuf::uint32 value) {
  set_has_node_idx();
  node_idx_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.node_idx)
}

// optional fixed64 lobby_id = 2;
inline bool CMsgDOTATournament_Game::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament_Game::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament_Game::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Game::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.lobby_id)
  return lobby_id_;
}
inline void CMsgDOTATournament_Game::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.lobby_id)
}

// optional uint64 match_id = 3;
inline bool CMsgDOTATournament_Game::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournament_Game::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournament_Game::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTATournament_Game::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.match_id)
  return match_id_;
}
inline void CMsgDOTATournament_Game::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.match_id)
}

// optional bool team_a_good = 4;
inline bool CMsgDOTATournament_Game::has_team_a_good() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_team_a_good() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournament_Game::clear_has_team_a_good() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournament_Game::clear_team_a_good() {
  team_a_good_ = false;
  clear_has_team_a_good();
}
inline bool CMsgDOTATournament_Game::team_a_good() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.team_a_good)
  return team_a_good_;
}
inline void CMsgDOTATournament_Game::set_team_a_good(bool value) {
  set_has_team_a_good();
  team_a_good_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.team_a_good)
}

// optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
inline bool CMsgDOTATournament_Game::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournament_Game::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournament_Game::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ETournamentGameState CMsgDOTATournament_Game::state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.state)
  return static_cast< ::ETournamentGameState >(state_);
}
inline void CMsgDOTATournament_Game::set_state(::ETournamentGameState value) {
  assert(::ETournamentGameState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.state)
}

// optional uint32 start_time = 6;
inline bool CMsgDOTATournament_Game::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournament_Game::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournament_Game::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournament_Game::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Game::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.start_time)
  return start_time_;
}
inline void CMsgDOTATournament_Game::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.start_time)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Node

// optional uint32 node_id = 1;
inline bool CMsgDOTATournament_Node::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament_Node::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament_Node::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament_Node::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Node::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.node_id)
  return node_id_;
}
inline void CMsgDOTATournament_Node::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.node_id)
}

// optional uint32 team_idx_a = 2;
inline bool CMsgDOTATournament_Node::has_team_idx_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament_Node::set_has_team_idx_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament_Node::clear_has_team_idx_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament_Node::clear_team_idx_a() {
  team_idx_a_ = 0u;
  clear_has_team_idx_a();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Node::team_idx_a() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.team_idx_a)
  return team_idx_a_;
}
inline void CMsgDOTATournament_Node::set_team_idx_a(::google::protobuf::uint32 value) {
  set_has_team_idx_a();
  team_idx_a_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.team_idx_a)
}

// optional uint32 team_idx_b = 3;
inline bool CMsgDOTATournament_Node::has_team_idx_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournament_Node::set_has_team_idx_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournament_Node::clear_has_team_idx_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournament_Node::clear_team_idx_b() {
  team_idx_b_ = 0u;
  clear_has_team_idx_b();
}
inline ::google::protobuf::uint32 CMsgDOTATournament_Node::team_idx_b() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.team_idx_b)
  return team_idx_b_;
}
inline void CMsgDOTATournament_Node::set_team_idx_b(::google::protobuf::uint32 value) {
  set_has_team_idx_b();
  team_idx_b_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.team_idx_b)
}

// optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
inline bool CMsgDOTATournament_Node::has_node_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournament_Node::set_has_node_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournament_Node::clear_has_node_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournament_Node::clear_node_state() {
  node_state_ = 0;
  clear_has_node_state();
}
inline ::ETournamentNodeState CMsgDOTATournament_Node::node_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.node_state)
  return static_cast< ::ETournamentNodeState >(node_state_);
}
inline void CMsgDOTATournament_Node::set_node_state(::ETournamentNodeState value) {
  assert(::ETournamentNodeState_IsValid(value));
  set_has_node_state();
  node_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.node_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournament

// optional uint32 tournament_id = 1;
inline bool CMsgDOTATournament::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournament::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournament::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournament::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTATournament::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_id)
}

// optional uint32 division_id = 2;
inline bool CMsgDOTATournament::has_division_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournament::set_has_division_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournament::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournament::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.division_id)
  return division_id_;
}
inline void CMsgDOTATournament::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.division_id)
}

// optional uint32 schedule_time = 3;
inline bool CMsgDOTATournament::has_schedule_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournament::set_has_schedule_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournament::clear_has_schedule_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournament::clear_schedule_time() {
  schedule_time_ = 0u;
  clear_has_schedule_time();
}
inline ::google::protobuf::uint32 CMsgDOTATournament::schedule_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.schedule_time)
  return schedule_time_;
}
inline void CMsgDOTATournament::set_schedule_time(::google::protobuf::uint32 value) {
  set_has_schedule_time();
  schedule_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.schedule_time)
}

// optional uint32 skill_level = 4;
inline bool CMsgDOTATournament::has_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTATournament::set_has_skill_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTATournament::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTATournament::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 CMsgDOTATournament::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.skill_level)
  return skill_level_;
}
inline void CMsgDOTATournament::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.skill_level)
}

// optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
inline bool CMsgDOTATournament::has_tournament_template() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTATournament::set_has_tournament_template() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTATournament::clear_has_tournament_template() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTATournament::clear_tournament_template() {
  tournament_template_ = 0;
  clear_has_tournament_template();
}
inline ::ETournamentTemplate CMsgDOTATournament::tournament_template() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_template)
  return static_cast< ::ETournamentTemplate >(tournament_template_);
}
inline void CMsgDOTATournament::set_tournament_template(::ETournamentTemplate value) {
  assert(::ETournamentTemplate_IsValid(value));
  set_has_tournament_template();
  tournament_template_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_template)
}

// optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
inline bool CMsgDOTATournament::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTATournament::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTATournament::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTATournament::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ETournamentState CMsgDOTATournament::state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.state)
  return static_cast< ::ETournamentState >(state_);
}
inline void CMsgDOTATournament::set_state(::ETournamentState value) {
  assert(::ETournamentState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.state)
}

// optional uint32 state_seq_num = 10;
inline bool CMsgDOTATournament::has_state_seq_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATournament::set_has_state_seq_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATournament::clear_has_state_seq_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATournament::clear_state_seq_num() {
  state_seq_num_ = 0u;
  clear_has_state_seq_num();
}
inline ::google::protobuf::uint32 CMsgDOTATournament::state_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.state_seq_num)
  return state_seq_num_;
}
inline void CMsgDOTATournament::set_state_seq_num(::google::protobuf::uint32 value) {
  set_has_state_seq_num();
  state_seq_num_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.state_seq_num)
}

// optional uint32 season_trophy_id = 11;
inline bool CMsgDOTATournament::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTATournament::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTATournament::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTATournament::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournament::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.season_trophy_id)
  return season_trophy_id_;
}
inline void CMsgDOTATournament::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.season_trophy_id)
}

// repeated .CMsgDOTATournament.Team teams = 7;
inline int CMsgDOTATournament::teams_size() const {
  return teams_.size();
}
inline void CMsgDOTATournament::clear_teams() {
  teams_.Clear();
}
inline const ::CMsgDOTATournament_Team& CMsgDOTATournament::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.teams)
  return teams_.Get(index);
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.teams)
  return teams_.Mutable(index);
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.teams)
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >&
CMsgDOTATournament::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.teams)
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Team >*
CMsgDOTATournament::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.teams)
  return &teams_;
}

// repeated .CMsgDOTATournament.Game games = 8;
inline int CMsgDOTATournament::games_size() const {
  return games_.size();
}
inline void CMsgDOTATournament::clear_games() {
  games_.Clear();
}
inline const ::CMsgDOTATournament_Game& CMsgDOTATournament::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.games)
  return games_.Get(index);
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.games)
  return games_.Mutable(index);
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::add_games() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >&
CMsgDOTATournament::games() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.games)
  return games_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Game >*
CMsgDOTATournament::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.games)
  return &games_;
}

// repeated .CMsgDOTATournament.Node nodes = 9;
inline int CMsgDOTATournament::nodes_size() const {
  return nodes_.size();
}
inline void CMsgDOTATournament::clear_nodes() {
  nodes_.Clear();
}
inline const ::CMsgDOTATournament_Node& CMsgDOTATournament::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.nodes)
  return nodes_.Get(index);
}
inline ::CMsgDOTATournament_Node* CMsgDOTATournament::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.nodes)
  return nodes_.Mutable(index);
}
inline ::CMsgDOTATournament_Node* CMsgDOTATournament::add_nodes() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node >&
CMsgDOTATournament::nodes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournament_Node >*
CMsgDOTATournament::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// CMsgDOTATournamentStateChange_GameChange

// optional uint64 match_id = 1;
inline bool CMsgDOTATournamentStateChange_GameChange::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentStateChange_GameChange::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentStateChange_GameChange::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentStateChange_GameChange::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentStateChange_GameChange::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.GameChange.match_id)
  return match_id_;
}
inline void CMsgDOTATournamentStateChange_GameChange::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.GameChange.match_id)
}

// optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
inline bool CMsgDOTATournamentStateChange_GameChange::has_new_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentStateChange_GameChange::set_has_new_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentStateChange_GameChange::clear_has_new_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentStateChange_GameChange::clear_new_state() {
  new_state_ = 0;
  clear_has_new_state();
}
inline ::ETournamentGameState CMsgDOTATournamentStateChange_GameChange::new_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.GameChange.new_state)
  return static_cast< ::ETournamentGameState >(new_state_);
}
inline void CMsgDOTATournamentStateChange_GameChange::set_new_state(::ETournamentGameState value) {
  assert(::ETournamentGameState_IsValid(value));
  set_has_new_state();
  new_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.GameChange.new_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentStateChange_TeamChange

// optional uint64 team_gid = 1;
inline bool CMsgDOTATournamentStateChange_TeamChange::has_team_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_has_team_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_has_team_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_team_gid() {
  team_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_team_gid();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentStateChange_TeamChange::team_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.TeamChange.team_gid)
  return team_gid_;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_team_gid(::google::protobuf::uint64 value) {
  set_has_team_gid();
  team_gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.TeamChange.team_gid)
}

// optional uint32 new_node_or_state = 2;
inline bool CMsgDOTATournamentStateChange_TeamChange::has_new_node_or_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_has_new_node_or_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_has_new_node_or_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_new_node_or_state() {
  new_node_or_state_ = 0u;
  clear_has_new_node_or_state();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentStateChange_TeamChange::new_node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
  return new_node_or_state_;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_new_node_or_state(::google::protobuf::uint32 value) {
  set_has_new_node_or_state();
  new_node_or_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
}

// optional uint32 old_node_or_state = 3;
inline bool CMsgDOTATournamentStateChange_TeamChange::has_old_node_or_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_has_old_node_or_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_has_old_node_or_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_old_node_or_state() {
  old_node_or_state_ = 0u;
  clear_has_old_node_or_state();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentStateChange_TeamChange::old_node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
  return old_node_or_state_;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_old_node_or_state(::google::protobuf::uint32 value) {
  set_has_old_node_or_state();
  old_node_or_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentStateChange

// optional uint32 new_tournament_id = 1;
inline bool CMsgDOTATournamentStateChange::has_new_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentStateChange::set_has_new_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentStateChange::clear_has_new_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentStateChange::clear_new_tournament_id() {
  new_tournament_id_ = 0u;
  clear_has_new_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentStateChange::new_tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.new_tournament_id)
  return new_tournament_id_;
}
inline void CMsgDOTATournamentStateChange::set_new_tournament_id(::google::protobuf::uint32 value) {
  set_has_new_tournament_id();
  new_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.new_tournament_id)
}

// optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
inline bool CMsgDOTATournamentStateChange::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentStateChange::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentStateChange::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentStateChange::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::ETournamentEvent CMsgDOTATournamentStateChange::event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.event)
  return static_cast< ::ETournamentEvent >(event_);
}
inline void CMsgDOTATournamentStateChange::set_event(::ETournamentEvent value) {
  assert(::ETournamentEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.event)
}

// optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
inline bool CMsgDOTATournamentStateChange::has_new_tournament_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTATournamentStateChange::set_has_new_tournament_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTATournamentStateChange::clear_has_new_tournament_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTATournamentStateChange::clear_new_tournament_state() {
  new_tournament_state_ = 0;
  clear_has_new_tournament_state();
}
inline ::ETournamentState CMsgDOTATournamentStateChange::new_tournament_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.new_tournament_state)
  return static_cast< ::ETournamentState >(new_tournament_state_);
}
inline void CMsgDOTATournamentStateChange::set_new_tournament_state(::ETournamentState value) {
  assert(::ETournamentState_IsValid(value));
  set_has_new_tournament_state();
  new_tournament_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.new_tournament_state)
}

// repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
inline int CMsgDOTATournamentStateChange::game_changes_size() const {
  return game_changes_.size();
}
inline void CMsgDOTATournamentStateChange::clear_game_changes() {
  game_changes_.Clear();
}
inline const ::CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange::game_changes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.game_changes)
  return game_changes_.Get(index);
}
inline ::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::mutable_game_changes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentStateChange.game_changes)
  return game_changes_.Mutable(index);
}
inline ::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::add_game_changes() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentStateChange.game_changes)
  return game_changes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >&
CMsgDOTATournamentStateChange::game_changes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentStateChange.game_changes)
  return game_changes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >*
CMsgDOTATournamentStateChange::mutable_game_changes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentStateChange.game_changes)
  return &game_changes_;
}

// repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
inline int CMsgDOTATournamentStateChange::team_changes_size() const {
  return team_changes_.size();
}
inline void CMsgDOTATournamentStateChange::clear_team_changes() {
  team_changes_.Clear();
}
inline const ::CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange::team_changes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.team_changes)
  return team_changes_.Get(index);
}
inline ::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::mutable_team_changes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentStateChange.team_changes)
  return team_changes_.Mutable(index);
}
inline ::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::add_team_changes() {
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentStateChange.team_changes)
  return team_changes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >&
CMsgDOTATournamentStateChange::team_changes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentStateChange.team_changes)
  return team_changes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >*
CMsgDOTATournamentStateChange::mutable_team_changes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentStateChange.team_changes)
  return &team_changes_;
}

// repeated uint32 merged_tournament_ids = 6 [packed = true];
inline int CMsgDOTATournamentStateChange::merged_tournament_ids_size() const {
  return merged_tournament_ids_.size();
}
inline void CMsgDOTATournamentStateChange::clear_merged_tournament_ids() {
  merged_tournament_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentStateChange::merged_tournament_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.merged_tournament_ids)
  return merged_tournament_ids_.Get(index);
}
inline void CMsgDOTATournamentStateChange::set_merged_tournament_ids(int index, ::google::protobuf::uint32 value) {
  merged_tournament_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.merged_tournament_ids)
}
inline void CMsgDOTATournamentStateChange::add_merged_tournament_ids(::google::protobuf::uint32 value) {
  merged_tournament_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentStateChange.merged_tournament_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournamentStateChange::merged_tournament_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentStateChange.merged_tournament_ids)
  return merged_tournament_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournamentStateChange::mutable_merged_tournament_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentStateChange.merged_tournament_ids)
  return &merged_tournament_ids_;
}

// optional uint32 state_seq_num = 7;
inline bool CMsgDOTATournamentStateChange::has_state_seq_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTATournamentStateChange::set_has_state_seq_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTATournamentStateChange::clear_has_state_seq_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTATournamentStateChange::clear_state_seq_num() {
  state_seq_num_ = 0u;
  clear_has_state_seq_num();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentStateChange::state_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.state_seq_num)
  return state_seq_num_;
}
inline void CMsgDOTATournamentStateChange::set_state_seq_num(::google::protobuf::uint32 value) {
  set_has_state_seq_num();
  state_seq_num_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.state_seq_num)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentRequest

// optional uint32 tournament_id = 1;
inline bool CMsgDOTATournamentRequest::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentRequest::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentRequest::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentRequest::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentRequest.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTATournamentRequest::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentRequest.tournament_id)
}

// optional uint64 client_tournament_gid = 2;
inline bool CMsgDOTATournamentRequest::has_client_tournament_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentRequest::set_has_client_tournament_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentRequest::clear_has_client_tournament_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentRequest::clear_client_tournament_gid() {
  client_tournament_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_tournament_gid();
}
inline ::google::protobuf::uint64 CMsgDOTATournamentRequest::client_tournament_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentRequest.client_tournament_gid)
  return client_tournament_gid_;
}
inline void CMsgDOTATournamentRequest::set_client_tournament_gid(::google::protobuf::uint64 value) {
  set_has_client_tournament_gid();
  client_tournament_gid_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentRequest.client_tournament_gid)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentResponse

// optional uint32 result = 1 [default = 2];
inline bool CMsgDOTATournamentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTATournamentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTATournamentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTATournamentResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgDOTATournamentResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentResponse.result)
  return result_;
}
inline void CMsgDOTATournamentResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentResponse.result)
}

// optional .CMsgDOTATournament tournament = 2;
inline bool CMsgDOTATournamentResponse::has_tournament() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTATournamentResponse::set_has_tournament() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTATournamentResponse::clear_has_tournament() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTATournamentResponse::clear_tournament() {
  if (tournament_ != NULL) tournament_->::CMsgDOTATournament::Clear();
  clear_has_tournament();
}
inline const ::CMsgDOTATournament& CMsgDOTATournamentResponse::tournament() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentResponse.tournament)
  return tournament_ != NULL ? *tournament_ : *default_instance_->tournament_;
}
inline ::CMsgDOTATournament* CMsgDOTATournamentResponse::mutable_tournament() {
  set_has_tournament();
  if (tournament_ == NULL) tournament_ = new ::CMsgDOTATournament;
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentResponse.tournament)
  return tournament_;
}
inline ::CMsgDOTATournament* CMsgDOTATournamentResponse::release_tournament() {
  clear_has_tournament();
  ::CMsgDOTATournament* temp = tournament_;
  tournament_ = NULL;
  return temp;
}
inline void CMsgDOTATournamentResponse::set_allocated_tournament(::CMsgDOTATournament* tournament) {
  delete tournament_;
  tournament_ = tournament;
  if (tournament) {
    set_has_tournament();
  } else {
    clear_has_tournament();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournamentResponse.tournament)
}

// -------------------------------------------------------------------

// CMsgDOTAClearTournamentGame

// optional uint32 tournament_id = 1;
inline bool CMsgDOTAClearTournamentGame::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAClearTournamentGame::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAClearTournamentGame::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAClearTournamentGame::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTAClearTournamentGame::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClearTournamentGame.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTAClearTournamentGame::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClearTournamentGame.tournament_id)
}

// optional uint32 game_id = 2;
inline bool CMsgDOTAClearTournamentGame::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAClearTournamentGame::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAClearTournamentGame::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAClearTournamentGame::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 CMsgDOTAClearTournamentGame::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAClearTournamentGame.game_id)
  return game_id_;
}
inline void CMsgDOTAClearTournamentGame::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAClearTournamentGame.game_id)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerSkillLevelStats

// optional uint32 skill_level = 1;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_skill_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_skill_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
  return skill_level_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
}

// optional uint32 times_won_0 = 2;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_0() {
  times_won_0_ = 0u;
  clear_has_times_won_0();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
  return times_won_0_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_0(::google::protobuf::uint32 value) {
  set_has_times_won_0();
  times_won_0_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
}

// optional uint32 times_won_1 = 3;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_1() {
  times_won_1_ = 0u;
  clear_has_times_won_1();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
  return times_won_1_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_1(::google::protobuf::uint32 value) {
  set_has_times_won_1();
  times_won_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
}

// optional uint32 times_won_2 = 4;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_2() {
  times_won_2_ = 0u;
  clear_has_times_won_2();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
  return times_won_2_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_2(::google::protobuf::uint32 value) {
  set_has_times_won_2();
  times_won_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
}

// optional uint32 times_won_3 = 5;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_3() {
  times_won_3_ = 0u;
  clear_has_times_won_3();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
  return times_won_3_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_3(::google::protobuf::uint32 value) {
  set_has_times_won_3();
  times_won_3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
}

// optional uint32 times_bye_and_lost = 6;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_bye_and_lost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_bye_and_lost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_bye_and_lost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_bye_and_lost() {
  times_bye_and_lost_ = 0u;
  clear_has_times_bye_and_lost();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_bye_and_lost() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
  return times_bye_and_lost_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_bye_and_lost(::google::protobuf::uint32 value) {
  set_has_times_bye_and_lost();
  times_bye_and_lost_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
}

// optional uint32 times_bye_and_won = 7;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_bye_and_won() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_bye_and_won() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_bye_and_won() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_bye_and_won() {
  times_bye_and_won_ = 0u;
  clear_has_times_bye_and_won();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_bye_and_won() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
  return times_bye_and_won_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_bye_and_won(::google::protobuf::uint32 value) {
  set_has_times_bye_and_won();
  times_bye_and_won_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
}

// optional uint32 total_games_won = 8;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_total_games_won() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_total_games_won() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_total_games_won() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_total_games_won() {
  total_games_won_ = 0u;
  clear_has_total_games_won();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::total_games_won() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
  return total_games_won_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_total_games_won(::google::protobuf::uint32 value) {
  set_has_total_games_won();
  total_games_won_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
}

// optional uint32 score = 9;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
  return score_;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerStats

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerStats::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.account_id)
  return account_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStats.account_id)
}

// optional uint32 season_trophy_id = 2;
inline bool CMsgDOTAWeekendTourneyPlayerStats::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStats::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
  return season_trophy_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
}

// repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
inline int CMsgDOTAWeekendTourneyPlayerStats::skill_levels_size() const {
  return skill_levels_.size();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_skill_levels() {
  skill_levels_.Clear();
}
inline const ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerStats::skill_levels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_.Get(index);
}
inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::mutable_skill_levels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_.Mutable(index);
}
inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::add_skill_levels() {
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >&
CMsgDOTAWeekendTourneyPlayerStats::skill_levels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >*
CMsgDOTAWeekendTourneyPlayerStats::mutable_skill_levels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return &skill_levels_;
}

// optional uint32 current_tier = 4;
inline bool CMsgDOTAWeekendTourneyPlayerStats::has_current_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_has_current_tier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_has_current_tier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_current_tier() {
  current_tier_ = 0u;
  clear_has_current_tier();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStats::current_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.current_tier)
  return current_tier_;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_current_tier(::google::protobuf::uint32 value) {
  set_has_current_tier();
  current_tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStats.current_tier)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerStatsRequest

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerStatsRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStatsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
  return account_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
}

// optional uint32 season_trophy_id = 2;
inline bool CMsgDOTAWeekendTourneyPlayerStatsRequest::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStatsRequest::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
  return season_trophy_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerHistoryRequest

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistoryRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistoryRequest.account_id)
  return account_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistoryRequest.account_id)
}

// optional uint32 season_trophy_id = 2;
inline bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistoryRequest::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistoryRequest.season_trophy_id)
  return season_trophy_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistoryRequest.season_trophy_id)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerHistory_Tournament

// optional uint32 tournament_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
  return tournament_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
}

// optional uint32 start_time = 2;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
  return start_time_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
}

// optional uint32 tournament_tier = 3;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_tournament_tier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_tournament_tier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_tournament_tier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_tournament_tier() {
  tournament_tier_ = 0u;
  clear_has_tournament_tier();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::tournament_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
  return tournament_tier_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_tournament_tier(::google::protobuf::uint32 value) {
  set_has_tournament_tier();
  tournament_tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
  return team_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
}

// optional uint32 team_date = 5;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_date() {
  team_date_ = 0u;
  clear_has_team_date();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
  return team_date_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_date(::google::protobuf::uint32 value) {
  set_has_team_date();
  team_date_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
}

// optional uint32 team_result = 6;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_result() {
  team_result_ = 0u;
  clear_has_team_result();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
  return team_result_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_result(::google::protobuf::uint32 value) {
  set_has_team_result();
  team_result_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
}

// repeated uint32 account_id = 7;
inline int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id_size() const {
  return account_id_.size();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_account_id() {
  account_id_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return account_id_.Get(index);
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_account_id(int index, ::google::protobuf::uint32 value) {
  account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::add_account_id(::google::protobuf::uint32 value) {
  account_id_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return account_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return &account_id_;
}

// optional string team_name = 8;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  return *team_name_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
inline ::std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  return team_name_;
}
inline ::std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}

// optional uint32 season_trophy_id = 9;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
  return season_trophy_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerHistory

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerHistory::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.account_id)
  return account_id_;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.account_id)
}

// repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
inline int CMsgDOTAWeekendTourneyPlayerHistory::tournaments_size() const {
  return tournaments_.size();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::clear_tournaments() {
  tournaments_.Clear();
}
inline const ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory::tournaments(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_.Get(index);
}
inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::mutable_tournaments(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_.Mutable(index);
}
inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::add_tournaments() {
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >&
CMsgDOTAWeekendTourneyPlayerHistory::tournaments() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >*
CMsgDOTAWeekendTourneyPlayerHistory::mutable_tournaments() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return &tournaments_;
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyParticipationDetails_Tier

// optional uint32 tier = 1;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_tier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_tier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_tier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
  return tier_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
}

// optional uint32 players = 2;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players() {
  players_ = 0u;
  clear_has_players();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
  return players_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
}

// optional uint32 teams = 3;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_teams() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_teams() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_teams() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_teams() {
  teams_ = 0u;
  clear_has_teams();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::teams() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
  return teams_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_teams(::google::protobuf::uint32 value) {
  set_has_teams();
  teams_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
}

// optional uint32 winning_teams = 4;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_winning_teams() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_winning_teams() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_winning_teams() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_winning_teams() {
  winning_teams_ = 0u;
  clear_has_winning_teams();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::winning_teams() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
  return winning_teams_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_winning_teams(::google::protobuf::uint32 value) {
  set_has_winning_teams();
  winning_teams_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
}

// optional uint32 players_streak_2 = 5;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_2() {
  players_streak_2_ = 0u;
  clear_has_players_streak_2();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
  return players_streak_2_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_2(::google::protobuf::uint32 value) {
  set_has_players_streak_2();
  players_streak_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
}

// optional uint32 players_streak_3 = 6;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_3() {
  players_streak_3_ = 0u;
  clear_has_players_streak_3();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
  return players_streak_3_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_3(::google::protobuf::uint32 value) {
  set_has_players_streak_3();
  players_streak_3_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
}

// optional uint32 players_streak_4 = 7;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_4() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_4() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_4() {
  players_streak_4_ = 0u;
  clear_has_players_streak_4();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
  return players_streak_4_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_4(::google::protobuf::uint32 value) {
  set_has_players_streak_4();
  players_streak_4_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
}

// optional uint32 players_streak_5 = 8;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_5() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_5() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_5() {
  players_streak_5_ = 0u;
  clear_has_players_streak_5();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
  return players_streak_5_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_5(::google::protobuf::uint32 value) {
  set_has_players_streak_5();
  players_streak_5_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyParticipationDetails_Division

// optional uint32 division_id = 1;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Division::has_division_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_has_division_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Division::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
  return division_id_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
}

// optional uint32 schedule_time = 2;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Division::has_schedule_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_has_schedule_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_has_schedule_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_schedule_time() {
  schedule_time_ = 0u;
  clear_has_schedule_time();
}
inline ::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Division::schedule_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
  return schedule_time_;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_schedule_time(::google::protobuf::uint32 value) {
  set_has_schedule_time();
  schedule_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
}

// repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
inline int CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers_size() const {
  return tiers_.size();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_tiers() {
  tiers_.Clear();
}
inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_.Get(index);
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_.Mutable(index);
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::add_tiers() {
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >&
CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >*
CMsgDOTAWeekendTourneyParticipationDetails_Division::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return &tiers_;
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyParticipationDetails

// repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
inline int CMsgDOTAWeekendTourneyParticipationDetails::divisions_size() const {
  return divisions_.size();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails::clear_divisions() {
  divisions_.Clear();
}
inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails::divisions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_.Get(index);
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_.Mutable(index);
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::add_divisions() {
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >&
CMsgDOTAWeekendTourneyParticipationDetails::divisions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >*
CMsgDOTAWeekendTourneyParticipationDetails::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return &divisions_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ETournamentEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentEvent>() {
  return ::ETournamentEvent_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fclient_5ftournament_2eproto__INCLUDED
