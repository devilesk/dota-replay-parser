// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_watch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CSourceTVGameSmall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSourceTVGameSmall_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSourceTVGameSmall_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSourceTVGameSmall_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCFindTopSourceTVGames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCFindTopSourceTVGames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientFindTopSourceTVGamesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientFindTopSourceTVGamesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientTopWeekendTourneyGames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientTopWeekendTourneyGames_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCTopMatchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCTopMatchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCTopLeagueMatchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCTopLeagueMatchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCTopFriendMatchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCTopFriendMatchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCMatchesMinimalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCMatchesMinimalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCMatchesMinimalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCMatchesMinimalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientTopLeagueMatchesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientTopLeagueMatchesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientTopFriendMatchesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientTopFriendMatchesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientToGCFindTopMatches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientToGCFindTopMatches_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToClientFindTopLeagueMatchesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToClientFindTopLeagueMatchesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectateFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectateFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSpectateFriendGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSpectateFriendGameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatchMinimal_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatchMinimal_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_Tourney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDOTAMatchMinimal_Tourney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAReplayDownloadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAReplayDownloadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAReplayDownloadInfo_Highlight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAReplayDownloadInfo_Highlight_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWatchGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWatchGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCancelWatchGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCancelWatchGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgWatchGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgWatchGameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgPartyLeaderWatchGamePrompt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPartyLeaderWatchGamePrompt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTABroadcasterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTABroadcasterInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_gcmessages_client_watch.proto");
  GOOGLE_CHECK(file != NULL);
  CSourceTVGameSmall_descriptor_ = file->message_type(0);
  static const int CSourceTVGameSmall_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, activate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, deactivate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, lobby_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, spectators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, average_mmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_name_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_name_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_logo_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_logo_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, sort_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, last_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, radiant_lead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, radiant_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, dire_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, building_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_division_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_bracket_round_),
  };
  CSourceTVGameSmall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSourceTVGameSmall_descriptor_,
      CSourceTVGameSmall::default_instance_,
      CSourceTVGameSmall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSourceTVGameSmall));
  CSourceTVGameSmall_Player_descriptor_ = CSourceTVGameSmall_descriptor_->nested_type(0);
  static const int CSourceTVGameSmall_Player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, hero_id_),
  };
  CSourceTVGameSmall_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSourceTVGameSmall_Player_descriptor_,
      CSourceTVGameSmall_Player::default_instance_,
      CSourceTVGameSmall_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSourceTVGameSmall_Player));
  CMsgClientToGCFindTopSourceTVGames_descriptor_ = file->message_type(1);
  static const int CMsgClientToGCFindTopSourceTVGames_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, start_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, game_list_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, lobby_ids_),
  };
  CMsgClientToGCFindTopSourceTVGames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCFindTopSourceTVGames_descriptor_,
      CMsgClientToGCFindTopSourceTVGames::default_instance_,
      CMsgClientToGCFindTopSourceTVGames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCFindTopSourceTVGames));
  CMsgGCToClientFindTopSourceTVGamesResponse_descriptor_ = file->message_type(2);
  static const int CMsgGCToClientFindTopSourceTVGamesResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, search_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, start_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, num_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, game_list_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, game_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, specific_games_),
  };
  CMsgGCToClientFindTopSourceTVGamesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientFindTopSourceTVGamesResponse_descriptor_,
      CMsgGCToClientFindTopSourceTVGamesResponse::default_instance_,
      CMsgGCToClientFindTopSourceTVGamesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientFindTopSourceTVGamesResponse));
  CMsgGCToClientTopWeekendTourneyGames_descriptor_ = file->message_type(3);
  static const int CMsgGCToClientTopWeekendTourneyGames_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopWeekendTourneyGames, live_games_),
  };
  CMsgGCToClientTopWeekendTourneyGames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientTopWeekendTourneyGames_descriptor_,
      CMsgGCToClientTopWeekendTourneyGames::default_instance_,
      CMsgGCToClientTopWeekendTourneyGames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopWeekendTourneyGames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopWeekendTourneyGames, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientTopWeekendTourneyGames));
  CMsgClientToGCTopMatchesRequest_descriptor_ = file->message_type(4);
  static const int CMsgClientToGCTopMatchesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, player_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, team_id_),
  };
  CMsgClientToGCTopMatchesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCTopMatchesRequest_descriptor_,
      CMsgClientToGCTopMatchesRequest::default_instance_,
      CMsgClientToGCTopMatchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCTopMatchesRequest));
  CMsgClientToGCTopLeagueMatchesRequest_descriptor_ = file->message_type(5);
  static const int CMsgClientToGCTopLeagueMatchesRequest_offsets_[1] = {
  };
  CMsgClientToGCTopLeagueMatchesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCTopLeagueMatchesRequest_descriptor_,
      CMsgClientToGCTopLeagueMatchesRequest::default_instance_,
      CMsgClientToGCTopLeagueMatchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopLeagueMatchesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopLeagueMatchesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCTopLeagueMatchesRequest));
  CMsgClientToGCTopFriendMatchesRequest_descriptor_ = file->message_type(6);
  static const int CMsgClientToGCTopFriendMatchesRequest_offsets_[1] = {
  };
  CMsgClientToGCTopFriendMatchesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCTopFriendMatchesRequest_descriptor_,
      CMsgClientToGCTopFriendMatchesRequest::default_instance_,
      CMsgClientToGCTopFriendMatchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopFriendMatchesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopFriendMatchesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCTopFriendMatchesRequest));
  CMsgClientToGCMatchesMinimalRequest_descriptor_ = file->message_type(7);
  static const int CMsgClientToGCMatchesMinimalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalRequest, match_ids_),
  };
  CMsgClientToGCMatchesMinimalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCMatchesMinimalRequest_descriptor_,
      CMsgClientToGCMatchesMinimalRequest::default_instance_,
      CMsgClientToGCMatchesMinimalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCMatchesMinimalRequest));
  CMsgClientToGCMatchesMinimalResponse_descriptor_ = file->message_type(8);
  static const int CMsgClientToGCMatchesMinimalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, last_match_),
  };
  CMsgClientToGCMatchesMinimalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCMatchesMinimalResponse_descriptor_,
      CMsgClientToGCMatchesMinimalResponse::default_instance_,
      CMsgClientToGCMatchesMinimalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCMatchesMinimalResponse));
  CMsgGCToClientTopLeagueMatchesResponse_descriptor_ = file->message_type(9);
  static const int CMsgGCToClientTopLeagueMatchesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopLeagueMatchesResponse, matches_),
  };
  CMsgGCToClientTopLeagueMatchesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientTopLeagueMatchesResponse_descriptor_,
      CMsgGCToClientTopLeagueMatchesResponse::default_instance_,
      CMsgGCToClientTopLeagueMatchesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopLeagueMatchesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopLeagueMatchesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientTopLeagueMatchesResponse));
  CMsgGCToClientTopFriendMatchesResponse_descriptor_ = file->message_type(10);
  static const int CMsgGCToClientTopFriendMatchesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopFriendMatchesResponse, matches_),
  };
  CMsgGCToClientTopFriendMatchesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientTopFriendMatchesResponse_descriptor_,
      CMsgGCToClientTopFriendMatchesResponse::default_instance_,
      CMsgGCToClientTopFriendMatchesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopFriendMatchesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopFriendMatchesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientTopFriendMatchesResponse));
  CMsgClientToGCFindTopMatches_descriptor_ = file->message_type(11);
  static const int CMsgClientToGCFindTopMatches_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, start_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, league_list_),
  };
  CMsgClientToGCFindTopMatches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientToGCFindTopMatches_descriptor_,
      CMsgClientToGCFindTopMatches::default_instance_,
      CMsgClientToGCFindTopMatches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientToGCFindTopMatches));
  CMsgGCToClientFindTopLeagueMatchesResponse_descriptor_ = file->message_type(12);
  static const int CMsgGCToClientFindTopLeagueMatchesResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, start_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, match_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, matches_),
  };
  CMsgGCToClientFindTopLeagueMatchesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCToClientFindTopLeagueMatchesResponse_descriptor_,
      CMsgGCToClientFindTopLeagueMatchesResponse::default_instance_,
      CMsgGCToClientFindTopLeagueMatchesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCToClientFindTopLeagueMatchesResponse));
  CMsgSpectateFriendGame_descriptor_ = file->message_type(13);
  static const int CMsgSpectateFriendGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGame, steam_id_),
  };
  CMsgSpectateFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectateFriendGame_descriptor_,
      CMsgSpectateFriendGame::default_instance_,
      CMsgSpectateFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectateFriendGame));
  CMsgSpectateFriendGameResponse_descriptor_ = file->message_type(14);
  static const int CMsgSpectateFriendGameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGameResponse, server_steamid_),
  };
  CMsgSpectateFriendGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSpectateFriendGameResponse_descriptor_,
      CMsgSpectateFriendGameResponse::default_instance_,
      CMsgSpectateFriendGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSpectateFriendGameResponse));
  CMsgDOTAMatchMinimal_descriptor_ = file->message_type(15);
  static const int CMsgDOTAMatchMinimal_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, tourney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, match_outcome_),
  };
  CMsgDOTAMatchMinimal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatchMinimal_descriptor_,
      CMsgDOTAMatchMinimal::default_instance_,
      CMsgDOTAMatchMinimal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatchMinimal));
  CMsgDOTAMatchMinimal_Player_descriptor_ = CMsgDOTAMatchMinimal_descriptor_->nested_type(0);
  static const int CMsgDOTAMatchMinimal_Player_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, player_slot_),
  };
  CMsgDOTAMatchMinimal_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatchMinimal_Player_descriptor_,
      CMsgDOTAMatchMinimal_Player::default_instance_,
      CMsgDOTAMatchMinimal_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatchMinimal_Player));
  CMsgDOTAMatchMinimal_Tourney_descriptor_ = CMsgDOTAMatchMinimal_descriptor_->nested_type(1);
  static const int CMsgDOTAMatchMinimal_Tourney_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, series_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_tournament_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_season_trophy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_division_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, radiant_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, radiant_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, radiant_team_logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, dire_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, dire_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, dire_team_logo_),
  };
  CMsgDOTAMatchMinimal_Tourney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDOTAMatchMinimal_Tourney_descriptor_,
      CMsgDOTAMatchMinimal_Tourney::default_instance_,
      CMsgDOTAMatchMinimal_Tourney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDOTAMatchMinimal_Tourney));
  CDOTAReplayDownloadInfo_descriptor_ = file->message_type(16);
  static const int CDOTAReplayDownloadInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, exists_on_disk_),
  };
  CDOTAReplayDownloadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAReplayDownloadInfo_descriptor_,
      CDOTAReplayDownloadInfo::default_instance_,
      CDOTAReplayDownloadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAReplayDownloadInfo));
  CDOTAReplayDownloadInfo_Highlight_descriptor_ = CDOTAReplayDownloadInfo_descriptor_->nested_type(0);
  static const int CDOTAReplayDownloadInfo_Highlight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, description_),
  };
  CDOTAReplayDownloadInfo_Highlight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAReplayDownloadInfo_Highlight_descriptor_,
      CDOTAReplayDownloadInfo_Highlight::default_instance_,
      CDOTAReplayDownloadInfo_Highlight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAReplayDownloadInfo_Highlight));
  CMsgWatchGame_descriptor_ = file->message_type(17);
  static const int CMsgWatchGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, server_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, watch_server_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, regions_),
  };
  CMsgWatchGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWatchGame_descriptor_,
      CMsgWatchGame::default_instance_,
      CMsgWatchGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWatchGame));
  CMsgCancelWatchGame_descriptor_ = file->message_type(18);
  static const int CMsgCancelWatchGame_offsets_[1] = {
  };
  CMsgCancelWatchGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCancelWatchGame_descriptor_,
      CMsgCancelWatchGame::default_instance_,
      CMsgCancelWatchGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCancelWatchGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCancelWatchGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCancelWatchGame));
  CMsgWatchGameResponse_descriptor_ = file->message_type(19);
  static const int CMsgWatchGameResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, watch_game_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, source_tv_public_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, source_tv_private_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, source_tv_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, game_server_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, watch_server_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, watch_tv_unique_secret_code_),
  };
  CMsgWatchGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgWatchGameResponse_descriptor_,
      CMsgWatchGameResponse::default_instance_,
      CMsgWatchGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgWatchGameResponse));
  CMsgWatchGameResponse_WatchGameResult_descriptor_ = CMsgWatchGameResponse_descriptor_->enum_type(0);
  CMsgPartyLeaderWatchGamePrompt_descriptor_ = file->message_type(20);
  static const int CMsgPartyLeaderWatchGamePrompt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyLeaderWatchGamePrompt, game_server_steamid_),
  };
  CMsgPartyLeaderWatchGamePrompt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPartyLeaderWatchGamePrompt_descriptor_,
      CMsgPartyLeaderWatchGamePrompt::default_instance_,
      CMsgPartyLeaderWatchGamePrompt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyLeaderWatchGamePrompt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyLeaderWatchGamePrompt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPartyLeaderWatchGamePrompt));
  CDOTABroadcasterInfo_descriptor_ = file->message_type(21);
  static const int CDOTABroadcasterInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, team_name_radiant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, team_name_dire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, stage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, series_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, series_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, upcoming_broadcast_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, allow_live_video_),
  };
  CDOTABroadcasterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTABroadcasterInfo_descriptor_,
      CDOTABroadcasterInfo::default_instance_,
      CDOTABroadcasterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTABroadcasterInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSourceTVGameSmall_descriptor_, &CSourceTVGameSmall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSourceTVGameSmall_Player_descriptor_, &CSourceTVGameSmall_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCFindTopSourceTVGames_descriptor_, &CMsgClientToGCFindTopSourceTVGames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientFindTopSourceTVGamesResponse_descriptor_, &CMsgGCToClientFindTopSourceTVGamesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientTopWeekendTourneyGames_descriptor_, &CMsgGCToClientTopWeekendTourneyGames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCTopMatchesRequest_descriptor_, &CMsgClientToGCTopMatchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCTopLeagueMatchesRequest_descriptor_, &CMsgClientToGCTopLeagueMatchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCTopFriendMatchesRequest_descriptor_, &CMsgClientToGCTopFriendMatchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCMatchesMinimalRequest_descriptor_, &CMsgClientToGCMatchesMinimalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCMatchesMinimalResponse_descriptor_, &CMsgClientToGCMatchesMinimalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientTopLeagueMatchesResponse_descriptor_, &CMsgGCToClientTopLeagueMatchesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientTopFriendMatchesResponse_descriptor_, &CMsgGCToClientTopFriendMatchesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientToGCFindTopMatches_descriptor_, &CMsgClientToGCFindTopMatches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCToClientFindTopLeagueMatchesResponse_descriptor_, &CMsgGCToClientFindTopLeagueMatchesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectateFriendGame_descriptor_, &CMsgSpectateFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSpectateFriendGameResponse_descriptor_, &CMsgSpectateFriendGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatchMinimal_descriptor_, &CMsgDOTAMatchMinimal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatchMinimal_Player_descriptor_, &CMsgDOTAMatchMinimal_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDOTAMatchMinimal_Tourney_descriptor_, &CMsgDOTAMatchMinimal_Tourney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAReplayDownloadInfo_descriptor_, &CDOTAReplayDownloadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAReplayDownloadInfo_Highlight_descriptor_, &CDOTAReplayDownloadInfo_Highlight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWatchGame_descriptor_, &CMsgWatchGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCancelWatchGame_descriptor_, &CMsgCancelWatchGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgWatchGameResponse_descriptor_, &CMsgWatchGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPartyLeaderWatchGamePrompt_descriptor_, &CMsgPartyLeaderWatchGamePrompt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTABroadcasterInfo_descriptor_, &CDOTABroadcasterInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  delete CSourceTVGameSmall::default_instance_;
  delete CSourceTVGameSmall_reflection_;
  delete CSourceTVGameSmall_Player::default_instance_;
  delete CSourceTVGameSmall_Player_reflection_;
  delete CMsgClientToGCFindTopSourceTVGames::default_instance_;
  delete CMsgClientToGCFindTopSourceTVGames_reflection_;
  delete CMsgGCToClientFindTopSourceTVGamesResponse::default_instance_;
  delete CMsgGCToClientFindTopSourceTVGamesResponse_reflection_;
  delete CMsgGCToClientTopWeekendTourneyGames::default_instance_;
  delete CMsgGCToClientTopWeekendTourneyGames_reflection_;
  delete CMsgClientToGCTopMatchesRequest::default_instance_;
  delete CMsgClientToGCTopMatchesRequest_reflection_;
  delete CMsgClientToGCTopLeagueMatchesRequest::default_instance_;
  delete CMsgClientToGCTopLeagueMatchesRequest_reflection_;
  delete CMsgClientToGCTopFriendMatchesRequest::default_instance_;
  delete CMsgClientToGCTopFriendMatchesRequest_reflection_;
  delete CMsgClientToGCMatchesMinimalRequest::default_instance_;
  delete CMsgClientToGCMatchesMinimalRequest_reflection_;
  delete CMsgClientToGCMatchesMinimalResponse::default_instance_;
  delete CMsgClientToGCMatchesMinimalResponse_reflection_;
  delete CMsgGCToClientTopLeagueMatchesResponse::default_instance_;
  delete CMsgGCToClientTopLeagueMatchesResponse_reflection_;
  delete CMsgGCToClientTopFriendMatchesResponse::default_instance_;
  delete CMsgGCToClientTopFriendMatchesResponse_reflection_;
  delete CMsgClientToGCFindTopMatches::default_instance_;
  delete CMsgClientToGCFindTopMatches_reflection_;
  delete CMsgGCToClientFindTopLeagueMatchesResponse::default_instance_;
  delete CMsgGCToClientFindTopLeagueMatchesResponse_reflection_;
  delete CMsgSpectateFriendGame::default_instance_;
  delete CMsgSpectateFriendGame_reflection_;
  delete CMsgSpectateFriendGameResponse::default_instance_;
  delete CMsgSpectateFriendGameResponse_reflection_;
  delete CMsgDOTAMatchMinimal::default_instance_;
  delete CMsgDOTAMatchMinimal_reflection_;
  delete CMsgDOTAMatchMinimal_Player::default_instance_;
  delete CMsgDOTAMatchMinimal_Player_reflection_;
  delete CMsgDOTAMatchMinimal_Tourney::default_instance_;
  delete CMsgDOTAMatchMinimal_Tourney_reflection_;
  delete CDOTAReplayDownloadInfo::default_instance_;
  delete CDOTAReplayDownloadInfo_reflection_;
  delete CDOTAReplayDownloadInfo_Highlight::default_instance_;
  delete CDOTAReplayDownloadInfo_Highlight_reflection_;
  delete CMsgWatchGame::default_instance_;
  delete CMsgWatchGame_reflection_;
  delete CMsgCancelWatchGame::default_instance_;
  delete CMsgCancelWatchGame_reflection_;
  delete CMsgWatchGameResponse::default_instance_;
  delete CMsgWatchGameResponse_reflection_;
  delete CMsgPartyLeaderWatchGamePrompt::default_instance_;
  delete CMsgPartyLeaderWatchGamePrompt_reflection_;
  delete CDOTABroadcasterInfo::default_instance_;
  delete CDOTABroadcasterInfo_reflection_;
}

void protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_dota_5fshared_5fenums_2eproto();
  ::protobuf_AddDesc_dota_5fgcmessages_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"dota_gcmessages_client_watch.proto\032\027do"
    "ta_shared_enums.proto\032\034dota_gcmessages_c"
    "ommon.proto\"\322\005\n\022CSourceTVGameSmall\022\025\n\rac"
    "tivate_time\030\001 \001(\r\022\027\n\017deactivate_time\030\002 \001"
    "(\r\022\027\n\017server_steam_id\030\003 \001(\004\022\020\n\010lobby_id\030"
    "\004 \001(\004\022\021\n\tleague_id\030\005 \001(\r\022\022\n\nlobby_type\030\006"
    " \001(\r\022\021\n\tgame_time\030\007 \001(\005\022\r\n\005delay\030\010 \001(\r\022\022"
    "\n\nspectators\030\t \001(\r\022\021\n\tgame_mode\030\n \001(\r\022\023\n"
    "\013average_mmr\030\013 \001(\r\022\031\n\021team_name_radiant\030"
    "\017 \001(\t\022\026\n\016team_name_dire\030\020 \001(\t\022\031\n\021team_lo"
    "go_radiant\030\030 \001(\006\022\026\n\016team_logo_dire\030\031 \001(\006"
    "\022\022\n\nsort_score\030\021 \001(\r\022\030\n\020last_update_time"
    "\030\022 \001(\002\022\024\n\014radiant_lead\030\023 \001(\005\022\025\n\rradiant_"
    "score\030\024 \001(\r\022\022\n\ndire_score\030\025 \001(\r\022+\n\007playe"
    "rs\030\026 \003(\0132\032.CSourceTVGameSmall.Player\022\026\n\016"
    "building_state\030\027 \001(\007\022%\n\035weekend_tourney_"
    "tournament_id\030\032 \001(\r\022 \n\030weekend_tourney_d"
    "ivision\030\033 \001(\r\022#\n\033weekend_tourney_skill_l"
    "evel\030\034 \001(\r\022%\n\035weekend_tourney_bracket_ro"
    "und\030\035 \001(\r\032-\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022"
    "\017\n\007hero_id\030\002 \001(\r\"\234\001\n\"CMsgClientToGCFindT"
    "opSourceTVGames\022\022\n\nsearch_key\030\001 \001(\t\022\021\n\tl"
    "eague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\022\n\nstart"
    "_game\030\004 \001(\r\022\027\n\017game_list_index\030\005 \001(\r\022\021\n\t"
    "lobby_ids\030\006 \003(\004\"\344\001\n*CMsgGCToClientFindTo"
    "pSourceTVGamesResponse\022\022\n\nsearch_key\030\001 \001"
    "(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\022"
    "\n\nstart_game\030\004 \001(\r\022\021\n\tnum_games\030\005 \001(\r\022\027\n"
    "\017game_list_index\030\006 \001(\r\022&\n\tgame_list\030\007 \003("
    "\0132\023.CSourceTVGameSmall\022\026\n\016specific_games"
    "\030\010 \001(\010\"O\n$CMsgGCToClientTopWeekendTourne"
    "yGames\022\'\n\nlive_games\030\001 \003(\0132\023.CSourceTVGa"
    "meSmall\"^\n\037CMsgClientToGCTopMatchesReque"
    "st\022\017\n\007hero_id\030\001 \001(\r\022\031\n\021player_account_id"
    "\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\"\'\n%CMsgClientToG"
    "CTopLeagueMatchesRequest\"\'\n%CMsgClientTo"
    "GCTopFriendMatchesRequest\"8\n#CMsgClientT"
    "oGCMatchesMinimalRequest\022\021\n\tmatch_ids\030\001 "
    "\003(\004\"b\n$CMsgClientToGCMatchesMinimalRespo"
    "nse\022&\n\007matches\030\001 \003(\0132\025.CMsgDOTAMatchMini"
    "mal\022\022\n\nlast_match\030\002 \001(\010\"P\n&CMsgGCToClien"
    "tTopLeagueMatchesResponse\022&\n\007matches\030\002 \003"
    "(\0132\025.CMsgDOTAMatchMinimal\"P\n&CMsgGCToCli"
    "entTopFriendMatchesResponse\022&\n\007matches\030\001"
    " \003(\0132\025.CMsgDOTAMatchMinimal\"\223\001\n\034CMsgClie"
    "ntToGCFindTopMatches\022\022\n\nstart_game\030\001 \001(\r"
    "\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\021\n\t"
    "friend_id\030\004 \001(\r\022\023\n\013friend_list\030\005 \001(\010\022\023\n\013"
    "league_list\030\006 \001(\010\"\230\001\n*CMsgGCToClientFind"
    "TopLeagueMatchesResponse\022\022\n\nstart_game\030\001"
    " \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r"
    "\022\021\n\tmatch_ids\030\004 \003(\r\022\037\n\007matches\030\005 \003(\0132\016.C"
    "MsgDOTAMatch\"*\n\026CMsgSpectateFriendGame\022\020"
    "\n\010steam_id\030\001 \001(\006\"8\n\036CMsgSpectateFriendGa"
    "meResponse\022\026\n\016server_steamid\030\004 \001(\006\"\236\006\n\024C"
    "MsgDOTAMatchMinimal\022\020\n\010match_id\030\001 \001(\004\022\022\n"
    "\nstart_time\030\002 \001(\007\022\020\n\010duration\030\003 \001(\r\0225\n\tg"
    "ame_mode\030\004 \001(\0162\016.DOTA_GameMode:\022DOTA_GAM"
    "EMODE_NONE\022-\n\007players\030\006 \003(\0132\034.CMsgDOTAMa"
    "tchMinimal.Player\022.\n\007tourney\030\007 \001(\0132\035.CMs"
    "gDOTAMatchMinimal.Tourney\022>\n\rmatch_outco"
    "me\030\010 \001(\0162\016.EMatchOutcome:\027k_EMatchOutcom"
    "e_Unknown\032\201\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r"
    "\022\017\n\007hero_id\030\002 \001(\r\022\r\n\005kills\030\003 \001(\r\022\016\n\006deat"
    "hs\030\004 \001(\r\022\017\n\007assists\030\005 \001(\r\022\r\n\005items\030\006 \003(\r"
    "\022\023\n\013player_slot\030\007 \001(\r\032\363\002\n\007Tourney\022\021\n\tlea"
    "gue_id\030\001 \001(\r\022\023\n\013series_type\030\010 \001(\r\022\023\n\013ser"
    "ies_game\030\t \001(\r\022%\n\035weekend_tourney_tourna"
    "ment_id\030\n \001(\r\022(\n weekend_tourney_season_"
    "trophy_id\030\013 \001(\r\022 \n\030weekend_tourney_divis"
    "ion\030\014 \001(\r\022#\n\033weekend_tourney_skill_level"
    "\030\r \001(\r\022\027\n\017radiant_team_id\030\002 \001(\r\022\031\n\021radia"
    "nt_team_name\030\003 \001(\t\022\031\n\021radiant_team_logo\030"
    "\004 \001(\006\022\024\n\014dire_team_id\030\005 \001(\r\022\026\n\016dire_team"
    "_name\030\006 \001(\t\022\026\n\016dire_team_logo\030\007 \001(\006\"\314\001\n\027"
    "CDOTAReplayDownloadInfo\022$\n\005match\030\001 \001(\0132\025"
    ".CMsgDOTAMatchMinimal\022\r\n\005title\030\002 \001(\t\022\023\n\013"
    "description\030\003 \001(\t\022\014\n\004size\030\004 \001(\r\022\014\n\004tags\030"
    "\005 \003(\t\022\026\n\016exists_on_disk\030\006 \001(\010\0323\n\tHighlig"
    "ht\022\021\n\ttimestamp\030\001 \001(\r\022\023\n\013description\030\002 \001"
    "(\t\"\200\001\n\rCMsgWatchGame\022\026\n\016server_steamid\030\001"
    " \001(\006\022\026\n\016client_version\030\002 \001(\r\022\034\n\024watch_se"
    "rver_steamid\030\003 \001(\006\022\020\n\010lobby_id\030\004 \001(\004\022\017\n\007"
    "regions\030\005 \003(\r\"\025\n\023CMsgCancelWatchGame\"\311\003\n"
    "\025CMsgWatchGameResponse\022J\n\021watch_game_res"
    "ult\030\001 \001(\0162&.CMsgWatchGameResponse.WatchG"
    "ameResult:\007PENDING\022\035\n\025source_tv_public_a"
    "ddr\030\002 \001(\r\022\036\n\026source_tv_private_addr\030\003 \001("
    "\r\022\026\n\016source_tv_port\030\004 \001(\r\022\033\n\023game_server"
    "_steamid\030\005 \001(\006\022\034\n\024watch_server_steamid\030\006"
    " \001(\006\022#\n\033watch_tv_unique_secret_code\030\007 \001("
    "\006\"\254\001\n\017WatchGameResult\022\013\n\007PENDING\020\000\022\t\n\005RE"
    "ADY\020\001\022\026\n\022GAMESERVERNOTFOUND\020\002\022\017\n\013UNAVAIL"
    "ABLE\020\003\022\r\n\tCANCELLED\020\004\022\027\n\023INCOMPATIBLEVER"
    "SION\020\005\022\035\n\031MISSINGLEAGUESUBSCRIPTION\020\006\022\021\n"
    "\rLOBBYNOTFOUND\020\007\"=\n\036CMsgPartyLeaderWatch"
    "GamePrompt\022\033\n\023game_server_steamid\030\005 \001(\006\""
    "\202\002\n\024CDOTABroadcasterInfo\022\022\n\naccount_id\030\001"
    " \001(\r\022\027\n\017server_steam_id\030\002 \001(\006\022\014\n\004live\030\003 "
    "\001(\010\022\031\n\021team_name_radiant\030\004 \001(\t\022\026\n\016team_n"
    "ame_dire\030\005 \001(\t\022\022\n\nstage_name\030\006 \001(\t\022\023\n\013se"
    "ries_game\030\007 \001(\r\022\023\n\013series_type\030\010 \001(\r\022$\n\034"
    "upcoming_broadcast_timestamp\030\t \001(\r\022\030\n\020al"
    "low_live_video\030\n \001(\010B\005H\001\200\001\000", 4147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_watch.proto", &protobuf_RegisterTypes);
  CSourceTVGameSmall::default_instance_ = new CSourceTVGameSmall();
  CSourceTVGameSmall_Player::default_instance_ = new CSourceTVGameSmall_Player();
  CMsgClientToGCFindTopSourceTVGames::default_instance_ = new CMsgClientToGCFindTopSourceTVGames();
  CMsgGCToClientFindTopSourceTVGamesResponse::default_instance_ = new CMsgGCToClientFindTopSourceTVGamesResponse();
  CMsgGCToClientTopWeekendTourneyGames::default_instance_ = new CMsgGCToClientTopWeekendTourneyGames();
  CMsgClientToGCTopMatchesRequest::default_instance_ = new CMsgClientToGCTopMatchesRequest();
  CMsgClientToGCTopLeagueMatchesRequest::default_instance_ = new CMsgClientToGCTopLeagueMatchesRequest();
  CMsgClientToGCTopFriendMatchesRequest::default_instance_ = new CMsgClientToGCTopFriendMatchesRequest();
  CMsgClientToGCMatchesMinimalRequest::default_instance_ = new CMsgClientToGCMatchesMinimalRequest();
  CMsgClientToGCMatchesMinimalResponse::default_instance_ = new CMsgClientToGCMatchesMinimalResponse();
  CMsgGCToClientTopLeagueMatchesResponse::default_instance_ = new CMsgGCToClientTopLeagueMatchesResponse();
  CMsgGCToClientTopFriendMatchesResponse::default_instance_ = new CMsgGCToClientTopFriendMatchesResponse();
  CMsgClientToGCFindTopMatches::default_instance_ = new CMsgClientToGCFindTopMatches();
  CMsgGCToClientFindTopLeagueMatchesResponse::default_instance_ = new CMsgGCToClientFindTopLeagueMatchesResponse();
  CMsgSpectateFriendGame::default_instance_ = new CMsgSpectateFriendGame();
  CMsgSpectateFriendGameResponse::default_instance_ = new CMsgSpectateFriendGameResponse();
  CMsgDOTAMatchMinimal::default_instance_ = new CMsgDOTAMatchMinimal();
  CMsgDOTAMatchMinimal_Player::default_instance_ = new CMsgDOTAMatchMinimal_Player();
  CMsgDOTAMatchMinimal_Tourney::default_instance_ = new CMsgDOTAMatchMinimal_Tourney();
  CDOTAReplayDownloadInfo::default_instance_ = new CDOTAReplayDownloadInfo();
  CDOTAReplayDownloadInfo_Highlight::default_instance_ = new CDOTAReplayDownloadInfo_Highlight();
  CMsgWatchGame::default_instance_ = new CMsgWatchGame();
  CMsgCancelWatchGame::default_instance_ = new CMsgCancelWatchGame();
  CMsgWatchGameResponse::default_instance_ = new CMsgWatchGameResponse();
  CMsgPartyLeaderWatchGamePrompt::default_instance_ = new CMsgPartyLeaderWatchGamePrompt();
  CDOTABroadcasterInfo::default_instance_ = new CDOTABroadcasterInfo();
  CSourceTVGameSmall::default_instance_->InitAsDefaultInstance();
  CSourceTVGameSmall_Player::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCFindTopSourceTVGames::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientFindTopSourceTVGamesResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientTopWeekendTourneyGames::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCTopMatchesRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCTopLeagueMatchesRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCTopFriendMatchesRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCMatchesMinimalRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCMatchesMinimalResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientTopLeagueMatchesResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientTopFriendMatchesResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientToGCFindTopMatches::default_instance_->InitAsDefaultInstance();
  CMsgGCToClientFindTopLeagueMatchesResponse::default_instance_->InitAsDefaultInstance();
  CMsgSpectateFriendGame::default_instance_->InitAsDefaultInstance();
  CMsgSpectateFriendGameResponse::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatchMinimal::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatchMinimal_Player::default_instance_->InitAsDefaultInstance();
  CMsgDOTAMatchMinimal_Tourney::default_instance_->InitAsDefaultInstance();
  CDOTAReplayDownloadInfo::default_instance_->InitAsDefaultInstance();
  CDOTAReplayDownloadInfo_Highlight::default_instance_->InitAsDefaultInstance();
  CMsgWatchGame::default_instance_->InitAsDefaultInstance();
  CMsgCancelWatchGame::default_instance_->InitAsDefaultInstance();
  CMsgWatchGameResponse::default_instance_->InitAsDefaultInstance();
  CMsgPartyLeaderWatchGamePrompt::default_instance_->InitAsDefaultInstance();
  CDOTABroadcasterInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fwatch_2eproto {
  StaticDescriptorInitializer_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
    protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  }
} static_descriptor_initializer_dota_5fgcmessages_5fclient_5fwatch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSourceTVGameSmall_Player::kAccountIdFieldNumber;
const int CSourceTVGameSmall_Player::kHeroIdFieldNumber;
#endif  // !_MSC_VER

CSourceTVGameSmall_Player::CSourceTVGameSmall_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSourceTVGameSmall.Player)
}

void CSourceTVGameSmall_Player::InitAsDefaultInstance() {
}

CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSourceTVGameSmall.Player)
}

void CSourceTVGameSmall_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSourceTVGameSmall_Player::~CSourceTVGameSmall_Player() {
  // @@protoc_insertion_point(destructor:CSourceTVGameSmall.Player)
  SharedDtor();
}

void CSourceTVGameSmall_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSourceTVGameSmall_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSourceTVGameSmall_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSourceTVGameSmall_Player_descriptor_;
}

const CSourceTVGameSmall_Player& CSourceTVGameSmall_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CSourceTVGameSmall_Player* CSourceTVGameSmall_Player::default_instance_ = NULL;

CSourceTVGameSmall_Player* CSourceTVGameSmall_Player::New() const {
  return new CSourceTVGameSmall_Player;
}

void CSourceTVGameSmall_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSourceTVGameSmall_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, hero_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSourceTVGameSmall_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSourceTVGameSmall.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSourceTVGameSmall.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSourceTVGameSmall.Player)
  return false;
#undef DO_
}

void CSourceTVGameSmall_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSourceTVGameSmall.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSourceTVGameSmall.Player)
}

::google::protobuf::uint8* CSourceTVGameSmall_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSourceTVGameSmall.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSourceTVGameSmall.Player)
  return target;
}

int CSourceTVGameSmall_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSourceTVGameSmall_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSourceTVGameSmall_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSourceTVGameSmall_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall_Player::MergeFrom(const CSourceTVGameSmall_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSourceTVGameSmall_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall_Player::CopyFrom(const CSourceTVGameSmall_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall_Player::IsInitialized() const {

  return true;
}

void CSourceTVGameSmall_Player::Swap(CSourceTVGameSmall_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSourceTVGameSmall_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSourceTVGameSmall_Player_descriptor_;
  metadata.reflection = CSourceTVGameSmall_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CSourceTVGameSmall::kActivateTimeFieldNumber;
const int CSourceTVGameSmall::kDeactivateTimeFieldNumber;
const int CSourceTVGameSmall::kServerSteamIdFieldNumber;
const int CSourceTVGameSmall::kLobbyIdFieldNumber;
const int CSourceTVGameSmall::kLeagueIdFieldNumber;
const int CSourceTVGameSmall::kLobbyTypeFieldNumber;
const int CSourceTVGameSmall::kGameTimeFieldNumber;
const int CSourceTVGameSmall::kDelayFieldNumber;
const int CSourceTVGameSmall::kSpectatorsFieldNumber;
const int CSourceTVGameSmall::kGameModeFieldNumber;
const int CSourceTVGameSmall::kAverageMmrFieldNumber;
const int CSourceTVGameSmall::kTeamNameRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamNameDireFieldNumber;
const int CSourceTVGameSmall::kTeamLogoRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamLogoDireFieldNumber;
const int CSourceTVGameSmall::kSortScoreFieldNumber;
const int CSourceTVGameSmall::kLastUpdateTimeFieldNumber;
const int CSourceTVGameSmall::kRadiantLeadFieldNumber;
const int CSourceTVGameSmall::kRadiantScoreFieldNumber;
const int CSourceTVGameSmall::kDireScoreFieldNumber;
const int CSourceTVGameSmall::kPlayersFieldNumber;
const int CSourceTVGameSmall::kBuildingStateFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyTournamentIdFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyDivisionFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneySkillLevelFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyBracketRoundFieldNumber;
#endif  // !_MSC_VER

CSourceTVGameSmall::CSourceTVGameSmall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSourceTVGameSmall)
}

void CSourceTVGameSmall::InitAsDefaultInstance() {
}

CSourceTVGameSmall::CSourceTVGameSmall(const CSourceTVGameSmall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSourceTVGameSmall)
}

void CSourceTVGameSmall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  activate_time_ = 0u;
  deactivate_time_ = 0u;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  league_id_ = 0u;
  lobby_type_ = 0u;
  game_time_ = 0;
  delay_ = 0u;
  spectators_ = 0u;
  game_mode_ = 0u;
  average_mmr_ = 0u;
  team_name_radiant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_radiant_ = GOOGLE_ULONGLONG(0);
  team_logo_dire_ = GOOGLE_ULONGLONG(0);
  sort_score_ = 0u;
  last_update_time_ = 0;
  radiant_lead_ = 0;
  radiant_score_ = 0u;
  dire_score_ = 0u;
  building_state_ = 0u;
  weekend_tourney_tournament_id_ = 0u;
  weekend_tourney_division_ = 0u;
  weekend_tourney_skill_level_ = 0u;
  weekend_tourney_bracket_round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSourceTVGameSmall::~CSourceTVGameSmall() {
  // @@protoc_insertion_point(destructor:CSourceTVGameSmall)
  SharedDtor();
}

void CSourceTVGameSmall::SharedDtor() {
  if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_radiant_;
  }
  if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_dire_;
  }
  if (this != default_instance_) {
  }
}

void CSourceTVGameSmall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSourceTVGameSmall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSourceTVGameSmall_descriptor_;
}

const CSourceTVGameSmall& CSourceTVGameSmall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CSourceTVGameSmall* CSourceTVGameSmall::default_instance_ = NULL;

CSourceTVGameSmall* CSourceTVGameSmall::New() const {
  return new CSourceTVGameSmall;
}

void CSourceTVGameSmall::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSourceTVGameSmall*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(activate_time_, delay_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(spectators_, game_mode_);
    ZR_(average_mmr_, team_logo_dire_);
    if (has_team_name_radiant()) {
      if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_radiant_->clear();
      }
    }
    if (has_team_name_dire()) {
      if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_dire_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 15663104) {
    ZR_(last_update_time_, dire_score_);
    ZR_(building_state_, weekend_tourney_division_);
  }
  ZR_(weekend_tourney_skill_level_, weekend_tourney_bracket_round_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSourceTVGameSmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSourceTVGameSmall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activate_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activate_time_)));
          set_has_activate_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deactivate_time;
        break;
      }

      // optional uint32 deactivate_time = 2;
      case 2: {
        if (tag == 16) {
         parse_deactivate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deactivate_time_)));
          set_has_deactivate_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_steam_id;
        break;
      }

      // optional uint64 server_steam_id = 3;
      case 3: {
        if (tag == 24) {
         parse_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lobby_id;
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (tag == 32) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 5;
      case 5: {
        if (tag == 40) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lobby_type;
        break;
      }

      // optional uint32 lobby_type = 6;
      case 6: {
        if (tag == 48) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_game_time;
        break;
      }

      // optional int32 game_time = 7;
      case 7: {
        if (tag == 56) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 8;
      case 8: {
        if (tag == 64) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_spectators;
        break;
      }

      // optional uint32 spectators = 9;
      case 9: {
        if (tag == 72) {
         parse_spectators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_)));
          set_has_spectators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 10;
      case 10: {
        if (tag == 80) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_average_mmr;
        break;
      }

      // optional uint32 average_mmr = 11;
      case 11: {
        if (tag == 88) {
         parse_average_mmr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_mmr_)));
          set_has_average_mmr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_team_name_radiant;
        break;
      }

      // optional string team_name_radiant = 15;
      case 15: {
        if (tag == 122) {
         parse_team_name_radiant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_radiant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_radiant().data(), this->team_name_radiant().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name_radiant");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_team_name_dire;
        break;
      }

      // optional string team_name_dire = 16;
      case 16: {
        if (tag == 130) {
         parse_team_name_dire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_dire()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_dire().data(), this->team_name_dire().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name_dire");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_sort_score;
        break;
      }

      // optional uint32 sort_score = 17;
      case 17: {
        if (tag == 136) {
         parse_sort_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_score_)));
          set_has_sort_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_last_update_time;
        break;
      }

      // optional float last_update_time = 18;
      case 18: {
        if (tag == 149) {
         parse_last_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_update_time_)));
          set_has_last_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_radiant_lead;
        break;
      }

      // optional int32 radiant_lead = 19;
      case 19: {
        if (tag == 152) {
         parse_radiant_lead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiant_lead_)));
          set_has_radiant_lead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_radiant_score;
        break;
      }

      // optional uint32 radiant_score = 20;
      case 20: {
        if (tag == 160) {
         parse_radiant_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_score_)));
          set_has_radiant_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_dire_score;
        break;
      }

      // optional uint32 dire_score = 21;
      case 21: {
        if (tag == 168) {
         parse_dire_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_score_)));
          set_has_dire_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_players;
        break;
      }

      // repeated .CSourceTVGameSmall.Player players = 22;
      case 22: {
        if (tag == 178) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_players;
        if (input->ExpectTag(189)) goto parse_building_state;
        break;
      }

      // optional fixed32 building_state = 23;
      case 23: {
        if (tag == 189) {
         parse_building_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &building_state_)));
          set_has_building_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_team_logo_radiant;
        break;
      }

      // optional fixed64 team_logo_radiant = 24;
      case 24: {
        if (tag == 193) {
         parse_team_logo_radiant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_radiant_)));
          set_has_team_logo_radiant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_team_logo_dire;
        break;
      }

      // optional fixed64 team_logo_dire = 25;
      case 25: {
        if (tag == 201) {
         parse_team_logo_dire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_dire_)));
          set_has_team_logo_dire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_weekend_tourney_tournament_id;
        break;
      }

      // optional uint32 weekend_tourney_tournament_id = 26;
      case 26: {
        if (tag == 208) {
         parse_weekend_tourney_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_tournament_id_)));
          set_has_weekend_tourney_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_weekend_tourney_division;
        break;
      }

      // optional uint32 weekend_tourney_division = 27;
      case 27: {
        if (tag == 216) {
         parse_weekend_tourney_division:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_)));
          set_has_weekend_tourney_division();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_weekend_tourney_skill_level;
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 28;
      case 28: {
        if (tag == 224) {
         parse_weekend_tourney_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
          set_has_weekend_tourney_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_weekend_tourney_bracket_round;
        break;
      }

      // optional uint32 weekend_tourney_bracket_round = 29;
      case 29: {
        if (tag == 232) {
         parse_weekend_tourney_bracket_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_bracket_round_)));
          set_has_weekend_tourney_bracket_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSourceTVGameSmall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSourceTVGameSmall)
  return false;
#undef DO_
}

void CSourceTVGameSmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSourceTVGameSmall)
  // optional uint32 activate_time = 1;
  if (has_activate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activate_time(), output);
  }

  // optional uint32 deactivate_time = 2;
  if (has_deactivate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deactivate_time(), output);
  }

  // optional uint64 server_steam_id = 3;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_steam_id(), output);
  }

  // optional uint64 lobby_id = 4;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // optional uint32 league_id = 5;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_id(), output);
  }

  // optional uint32 lobby_type = 6;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lobby_type(), output);
  }

  // optional int32 game_time = 7;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->game_time(), output);
  }

  // optional uint32 delay = 8;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->delay(), output);
  }

  // optional uint32 spectators = 9;
  if (has_spectators()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->spectators(), output);
  }

  // optional uint32 game_mode = 10;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->game_mode(), output);
  }

  // optional uint32 average_mmr = 11;
  if (has_average_mmr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->average_mmr(), output);
  }

  // optional string team_name_radiant = 15;
  if (has_team_name_radiant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_radiant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->team_name_radiant(), output);
  }

  // optional string team_name_dire = 16;
  if (has_team_name_dire()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_dire");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->team_name_dire(), output);
  }

  // optional uint32 sort_score = 17;
  if (has_sort_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sort_score(), output);
  }

  // optional float last_update_time = 18;
  if (has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->last_update_time(), output);
  }

  // optional int32 radiant_lead = 19;
  if (has_radiant_lead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->radiant_lead(), output);
  }

  // optional uint32 radiant_score = 20;
  if (has_radiant_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiant_score(), output);
  }

  // optional uint32 dire_score = 21;
  if (has_dire_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dire_score(), output);
  }

  // repeated .CSourceTVGameSmall.Player players = 22;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->players(i), output);
  }

  // optional fixed32 building_state = 23;
  if (has_building_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(23, this->building_state(), output);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (has_team_logo_radiant()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(24, this->team_logo_radiant(), output);
  }

  // optional fixed64 team_logo_dire = 25;
  if (has_team_logo_dire()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->team_logo_dire(), output);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (has_weekend_tourney_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->weekend_tourney_tournament_id(), output);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (has_weekend_tourney_division()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->weekend_tourney_division(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (has_weekend_tourney_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->weekend_tourney_skill_level(), output);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (has_weekend_tourney_bracket_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->weekend_tourney_bracket_round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSourceTVGameSmall)
}

::google::protobuf::uint8* CSourceTVGameSmall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSourceTVGameSmall)
  // optional uint32 activate_time = 1;
  if (has_activate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activate_time(), target);
  }

  // optional uint32 deactivate_time = 2;
  if (has_deactivate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deactivate_time(), target);
  }

  // optional uint64 server_steam_id = 3;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_steam_id(), target);
  }

  // optional uint64 lobby_id = 4;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // optional uint32 league_id = 5;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_id(), target);
  }

  // optional uint32 lobby_type = 6;
  if (has_lobby_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lobby_type(), target);
  }

  // optional int32 game_time = 7;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->game_time(), target);
  }

  // optional uint32 delay = 8;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->delay(), target);
  }

  // optional uint32 spectators = 9;
  if (has_spectators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->spectators(), target);
  }

  // optional uint32 game_mode = 10;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->game_mode(), target);
  }

  // optional uint32 average_mmr = 11;
  if (has_average_mmr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->average_mmr(), target);
  }

  // optional string team_name_radiant = 15;
  if (has_team_name_radiant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_radiant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->team_name_radiant(), target);
  }

  // optional string team_name_dire = 16;
  if (has_team_name_dire()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_dire");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->team_name_dire(), target);
  }

  // optional uint32 sort_score = 17;
  if (has_sort_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sort_score(), target);
  }

  // optional float last_update_time = 18;
  if (has_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->last_update_time(), target);
  }

  // optional int32 radiant_lead = 19;
  if (has_radiant_lead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->radiant_lead(), target);
  }

  // optional uint32 radiant_score = 20;
  if (has_radiant_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiant_score(), target);
  }

  // optional uint32 dire_score = 21;
  if (has_dire_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dire_score(), target);
  }

  // repeated .CSourceTVGameSmall.Player players = 22;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->players(i), target);
  }

  // optional fixed32 building_state = 23;
  if (has_building_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(23, this->building_state(), target);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (has_team_logo_radiant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(24, this->team_logo_radiant(), target);
  }

  // optional fixed64 team_logo_dire = 25;
  if (has_team_logo_dire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->team_logo_dire(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (has_weekend_tourney_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (has_weekend_tourney_division()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (has_weekend_tourney_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (has_weekend_tourney_bracket_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->weekend_tourney_bracket_round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSourceTVGameSmall)
  return target;
}

int CSourceTVGameSmall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activate_time = 1;
    if (has_activate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activate_time());
    }

    // optional uint32 deactivate_time = 2;
    if (has_deactivate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deactivate_time());
    }

    // optional uint64 server_steam_id = 3;
    if (has_server_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_steam_id());
    }

    // optional uint64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 league_id = 5;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 lobby_type = 6;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

    // optional int32 game_time = 7;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 delay = 8;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 spectators = 9;
    if (has_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators());
    }

    // optional uint32 game_mode = 10;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 average_mmr = 11;
    if (has_average_mmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_mmr());
    }

    // optional string team_name_radiant = 15;
    if (has_team_name_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_radiant());
    }

    // optional string team_name_dire = 16;
    if (has_team_name_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_dire());
    }

    // optional fixed64 team_logo_radiant = 24;
    if (has_team_logo_radiant()) {
      total_size += 2 + 8;
    }

    // optional fixed64 team_logo_dire = 25;
    if (has_team_logo_dire()) {
      total_size += 2 + 8;
    }

    // optional uint32 sort_score = 17;
    if (has_sort_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_score());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float last_update_time = 18;
    if (has_last_update_time()) {
      total_size += 2 + 4;
    }

    // optional int32 radiant_lead = 19;
    if (has_radiant_lead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiant_lead());
    }

    // optional uint32 radiant_score = 20;
    if (has_radiant_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_score());
    }

    // optional uint32 dire_score = 21;
    if (has_dire_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_score());
    }

    // optional fixed32 building_state = 23;
    if (has_building_state()) {
      total_size += 2 + 4;
    }

    // optional uint32 weekend_tourney_tournament_id = 26;
    if (has_weekend_tourney_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_tournament_id());
    }

    // optional uint32 weekend_tourney_division = 27;
    if (has_weekend_tourney_division()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 weekend_tourney_skill_level = 28;
    if (has_weekend_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

    // optional uint32 weekend_tourney_bracket_round = 29;
    if (has_weekend_tourney_bracket_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_bracket_round());
    }

  }
  // repeated .CSourceTVGameSmall.Player players = 22;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSourceTVGameSmall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSourceTVGameSmall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSourceTVGameSmall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall::MergeFrom(const CSourceTVGameSmall& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activate_time()) {
      set_activate_time(from.activate_time());
    }
    if (from.has_deactivate_time()) {
      set_deactivate_time(from.deactivate_time());
    }
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spectators()) {
      set_spectators(from.spectators());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_average_mmr()) {
      set_average_mmr(from.average_mmr());
    }
    if (from.has_team_name_radiant()) {
      set_team_name_radiant(from.team_name_radiant());
    }
    if (from.has_team_name_dire()) {
      set_team_name_dire(from.team_name_dire());
    }
    if (from.has_team_logo_radiant()) {
      set_team_logo_radiant(from.team_logo_radiant());
    }
    if (from.has_team_logo_dire()) {
      set_team_logo_dire(from.team_logo_dire());
    }
    if (from.has_sort_score()) {
      set_sort_score(from.sort_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_last_update_time()) {
      set_last_update_time(from.last_update_time());
    }
    if (from.has_radiant_lead()) {
      set_radiant_lead(from.radiant_lead());
    }
    if (from.has_radiant_score()) {
      set_radiant_score(from.radiant_score());
    }
    if (from.has_dire_score()) {
      set_dire_score(from.dire_score());
    }
    if (from.has_building_state()) {
      set_building_state(from.building_state());
    }
    if (from.has_weekend_tourney_tournament_id()) {
      set_weekend_tourney_tournament_id(from.weekend_tourney_tournament_id());
    }
    if (from.has_weekend_tourney_division()) {
      set_weekend_tourney_division(from.weekend_tourney_division());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_weekend_tourney_skill_level()) {
      set_weekend_tourney_skill_level(from.weekend_tourney_skill_level());
    }
    if (from.has_weekend_tourney_bracket_round()) {
      set_weekend_tourney_bracket_round(from.weekend_tourney_bracket_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSourceTVGameSmall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall::CopyFrom(const CSourceTVGameSmall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall::IsInitialized() const {

  return true;
}

void CSourceTVGameSmall::Swap(CSourceTVGameSmall* other) {
  if (other != this) {
    std::swap(activate_time_, other->activate_time_);
    std::swap(deactivate_time_, other->deactivate_time_);
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(lobby_id_, other->lobby_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(game_time_, other->game_time_);
    std::swap(delay_, other->delay_);
    std::swap(spectators_, other->spectators_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(average_mmr_, other->average_mmr_);
    std::swap(team_name_radiant_, other->team_name_radiant_);
    std::swap(team_name_dire_, other->team_name_dire_);
    std::swap(team_logo_radiant_, other->team_logo_radiant_);
    std::swap(team_logo_dire_, other->team_logo_dire_);
    std::swap(sort_score_, other->sort_score_);
    std::swap(last_update_time_, other->last_update_time_);
    std::swap(radiant_lead_, other->radiant_lead_);
    std::swap(radiant_score_, other->radiant_score_);
    std::swap(dire_score_, other->dire_score_);
    players_.Swap(&other->players_);
    std::swap(building_state_, other->building_state_);
    std::swap(weekend_tourney_tournament_id_, other->weekend_tourney_tournament_id_);
    std::swap(weekend_tourney_division_, other->weekend_tourney_division_);
    std::swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
    std::swap(weekend_tourney_bracket_round_, other->weekend_tourney_bracket_round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSourceTVGameSmall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSourceTVGameSmall_descriptor_;
  metadata.reflection = CSourceTVGameSmall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCFindTopSourceTVGames::kSearchKeyFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kLeagueIdFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kHeroIdFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kStartGameFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kGameListIndexFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kLobbyIdsFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCFindTopSourceTVGames)
}

void CMsgClientToGCFindTopSourceTVGames::InitAsDefaultInstance() {
}

CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFindTopSourceTVGames)
}

void CMsgClientToGCFindTopSourceTVGames::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  league_id_ = 0u;
  hero_id_ = 0u;
  start_game_ = 0u;
  game_list_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCFindTopSourceTVGames::~CMsgClientToGCFindTopSourceTVGames() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFindTopSourceTVGames)
  SharedDtor();
}

void CMsgClientToGCFindTopSourceTVGames::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientToGCFindTopSourceTVGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCFindTopSourceTVGames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCFindTopSourceTVGames_descriptor_;
}

const CMsgClientToGCFindTopSourceTVGames& CMsgClientToGCFindTopSourceTVGames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCFindTopSourceTVGames* CMsgClientToGCFindTopSourceTVGames::default_instance_ = NULL;

CMsgClientToGCFindTopSourceTVGames* CMsgClientToGCFindTopSourceTVGames::New() const {
  return new CMsgClientToGCFindTopSourceTVGames;
}

void CMsgClientToGCFindTopSourceTVGames::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgClientToGCFindTopSourceTVGames*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(league_id_, game_list_index_);
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  lobby_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCFindTopSourceTVGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCFindTopSourceTVGames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_game;
        break;
      }

      // optional uint32 start_game = 4;
      case 4: {
        if (tag == 32) {
         parse_start_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
          set_has_start_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_list_index;
        break;
      }

      // optional uint32 game_list_index = 5;
      case 5: {
        if (tag == 40) {
         parse_game_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_list_index_)));
          set_has_game_list_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lobby_ids;
        break;
      }

      // repeated uint64 lobby_ids = 6;
      case 6: {
        if (tag == 48) {
         parse_lobby_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_lobby_ids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_lobby_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lobby_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCFindTopSourceTVGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCFindTopSourceTVGames)
  return false;
#undef DO_
}

void CMsgClientToGCFindTopSourceTVGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCFindTopSourceTVGames)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 start_game = 4;
  if (has_start_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_game(), output);
  }

  // optional uint32 game_list_index = 5;
  if (has_game_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_list_index(), output);
  }

  // repeated uint64 lobby_ids = 6;
  for (int i = 0; i < this->lobby_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->lobby_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCFindTopSourceTVGames)
}

::google::protobuf::uint8* CMsgClientToGCFindTopSourceTVGames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFindTopSourceTVGames)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (has_start_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_game(), target);
  }

  // optional uint32 game_list_index = 5;
  if (has_game_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_list_index(), target);
  }

  // repeated uint64 lobby_ids = 6;
  for (int i = 0; i < this->lobby_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->lobby_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFindTopSourceTVGames)
  return target;
}

int CMsgClientToGCFindTopSourceTVGames::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 start_game = 4;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 game_list_index = 5;
    if (has_game_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_list_index());
    }

  }
  // repeated uint64 lobby_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->lobby_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->lobby_ids(i));
    }
    total_size += 1 * this->lobby_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCFindTopSourceTVGames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCFindTopSourceTVGames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobby_ids_.MergeFrom(from.lobby_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_start_game()) {
      set_start_game(from.start_game());
    }
    if (from.has_game_list_index()) {
      set_game_list_index(from.game_list_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopSourceTVGames::IsInitialized() const {

  return true;
}

void CMsgClientToGCFindTopSourceTVGames::Swap(CMsgClientToGCFindTopSourceTVGames* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(league_id_, other->league_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(start_game_, other->start_game_);
    std::swap(game_list_index_, other->game_list_index_);
    lobby_ids_.Swap(&other->lobby_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCFindTopSourceTVGames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCFindTopSourceTVGames_descriptor_;
  metadata.reflection = CMsgClientToGCFindTopSourceTVGames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientFindTopSourceTVGamesResponse::kSearchKeyFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kLeagueIdFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kHeroIdFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kStartGameFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kNumGamesFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kGameListIndexFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kGameListFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kSpecificGamesFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientFindTopSourceTVGamesResponse)
}

void CMsgGCToClientFindTopSourceTVGamesResponse::InitAsDefaultInstance() {
}

CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFindTopSourceTVGamesResponse)
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  league_id_ = 0u;
  hero_id_ = 0u;
  start_game_ = 0u;
  num_games_ = 0u;
  game_list_index_ = 0u;
  specific_games_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientFindTopSourceTVGamesResponse::~CMsgGCToClientFindTopSourceTVGamesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFindTopSourceTVGamesResponse)
  SharedDtor();
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedDtor() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientFindTopSourceTVGamesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientFindTopSourceTVGamesResponse_descriptor_;
}

const CMsgGCToClientFindTopSourceTVGamesResponse& CMsgGCToClientFindTopSourceTVGamesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgGCToClientFindTopSourceTVGamesResponse* CMsgGCToClientFindTopSourceTVGamesResponse::default_instance_ = NULL;

CMsgGCToClientFindTopSourceTVGamesResponse* CMsgGCToClientFindTopSourceTVGamesResponse::New() const {
  return new CMsgGCToClientFindTopSourceTVGamesResponse;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToClientFindTopSourceTVGamesResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(league_id_, num_games_);
    ZR_(game_list_index_, specific_games_);
    if (has_search_key()) {
      if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "search_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_game;
        break;
      }

      // optional uint32 start_game = 4;
      case 4: {
        if (tag == 32) {
         parse_start_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
          set_has_start_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_games;
        break;
      }

      // optional uint32 num_games = 5;
      case 5: {
        if (tag == 40) {
         parse_num_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_games_)));
          set_has_num_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_list_index;
        break;
      }

      // optional uint32 game_list_index = 6;
      case 6: {
        if (tag == 48) {
         parse_game_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_list_index_)));
          set_has_game_list_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_list;
        break;
      }

      // repeated .CSourceTVGameSmall game_list = 7;
      case 7: {
        if (tag == 58) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_list;
        if (input->ExpectTag(64)) goto parse_specific_games;
        break;
      }

      // optional bool specific_games = 8;
      case 8: {
        if (tag == 64) {
         parse_specific_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &specific_games_)));
          set_has_specific_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientFindTopSourceTVGamesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientFindTopSourceTVGamesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 start_game = 4;
  if (has_start_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_game(), output);
  }

  // optional uint32 num_games = 5;
  if (has_num_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_games(), output);
  }

  // optional uint32 game_list_index = 6;
  if (has_game_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_list_index(), output);
  }

  // repeated .CSourceTVGameSmall game_list = 7;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_list(i), output);
  }

  // optional bool specific_games = 8;
  if (has_specific_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->specific_games(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientFindTopSourceTVGamesResponse)
}

::google::protobuf::uint8* CMsgGCToClientFindTopSourceTVGamesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  // optional string search_key = 1;
  if (has_search_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (has_start_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_game(), target);
  }

  // optional uint32 num_games = 5;
  if (has_num_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_games(), target);
  }

  // optional uint32 game_list_index = 6;
  if (has_game_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_list_index(), target);
  }

  // repeated .CSourceTVGameSmall game_list = 7;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->game_list(i), target);
  }

  // optional bool specific_games = 8;
  if (has_specific_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->specific_games(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFindTopSourceTVGamesResponse)
  return target;
}

int CMsgGCToClientFindTopSourceTVGamesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 start_game = 4;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 num_games = 5;
    if (has_num_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_games());
    }

    // optional uint32 game_list_index = 6;
    if (has_game_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_list_index());
    }

    // optional bool specific_games = 8;
    if (has_specific_games()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CSourceTVGameSmall game_list = 7;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientFindTopSourceTVGamesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientFindTopSourceTVGamesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_key()) {
      set_search_key(from.search_key());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_start_game()) {
      set_start_game(from.start_game());
    }
    if (from.has_num_games()) {
      set_num_games(from.num_games());
    }
    if (from.has_game_list_index()) {
      set_game_list_index(from.game_list_index());
    }
    if (from.has_specific_games()) {
      set_specific_games(from.specific_games());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::IsInitialized() const {

  return true;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  if (other != this) {
    std::swap(search_key_, other->search_key_);
    std::swap(league_id_, other->league_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(start_game_, other->start_game_);
    std::swap(num_games_, other->num_games_);
    std::swap(game_list_index_, other->game_list_index_);
    game_list_.Swap(&other->game_list_);
    std::swap(specific_games_, other->specific_games_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientFindTopSourceTVGamesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientFindTopSourceTVGamesResponse_descriptor_;
  metadata.reflection = CMsgGCToClientFindTopSourceTVGamesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientTopWeekendTourneyGames::kLiveGamesFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientTopWeekendTourneyGames)
}

void CMsgGCToClientTopWeekendTourneyGames::InitAsDefaultInstance() {
}

CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopWeekendTourneyGames)
}

void CMsgGCToClientTopWeekendTourneyGames::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientTopWeekendTourneyGames::~CMsgGCToClientTopWeekendTourneyGames() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopWeekendTourneyGames)
  SharedDtor();
}

void CMsgGCToClientTopWeekendTourneyGames::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToClientTopWeekendTourneyGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientTopWeekendTourneyGames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientTopWeekendTourneyGames_descriptor_;
}

const CMsgGCToClientTopWeekendTourneyGames& CMsgGCToClientTopWeekendTourneyGames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgGCToClientTopWeekendTourneyGames* CMsgGCToClientTopWeekendTourneyGames::default_instance_ = NULL;

CMsgGCToClientTopWeekendTourneyGames* CMsgGCToClientTopWeekendTourneyGames::New() const {
  return new CMsgGCToClientTopWeekendTourneyGames;
}

void CMsgGCToClientTopWeekendTourneyGames::Clear() {
  live_games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientTopWeekendTourneyGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientTopWeekendTourneyGames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSourceTVGameSmall live_games = 1;
      case 1: {
        if (tag == 10) {
         parse_live_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_live_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_live_games;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientTopWeekendTourneyGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientTopWeekendTourneyGames)
  return false;
#undef DO_
}

void CMsgGCToClientTopWeekendTourneyGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientTopWeekendTourneyGames)
  // repeated .CSourceTVGameSmall live_games = 1;
  for (int i = 0; i < this->live_games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->live_games(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientTopWeekendTourneyGames)
}

::google::protobuf::uint8* CMsgGCToClientTopWeekendTourneyGames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopWeekendTourneyGames)
  // repeated .CSourceTVGameSmall live_games = 1;
  for (int i = 0; i < this->live_games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->live_games(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopWeekendTourneyGames)
  return target;
}

int CMsgGCToClientTopWeekendTourneyGames::ByteSize() const {
  int total_size = 0;

  // repeated .CSourceTVGameSmall live_games = 1;
  total_size += 1 * this->live_games_size();
  for (int i = 0; i < this->live_games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->live_games(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientTopWeekendTourneyGames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientTopWeekendTourneyGames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
  GOOGLE_CHECK_NE(&from, this);
  live_games_.MergeFrom(from.live_games_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopWeekendTourneyGames::IsInitialized() const {

  return true;
}

void CMsgGCToClientTopWeekendTourneyGames::Swap(CMsgGCToClientTopWeekendTourneyGames* other) {
  if (other != this) {
    live_games_.Swap(&other->live_games_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientTopWeekendTourneyGames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientTopWeekendTourneyGames_descriptor_;
  metadata.reflection = CMsgGCToClientTopWeekendTourneyGames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCTopMatchesRequest::kHeroIdFieldNumber;
const int CMsgClientToGCTopMatchesRequest::kPlayerAccountIdFieldNumber;
const int CMsgClientToGCTopMatchesRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCTopMatchesRequest)
}

void CMsgClientToGCTopMatchesRequest::InitAsDefaultInstance() {
}

CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopMatchesRequest)
}

void CMsgClientToGCTopMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  player_account_id_ = 0u;
  team_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCTopMatchesRequest::~CMsgClientToGCTopMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCTopMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopMatchesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCTopMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCTopMatchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCTopMatchesRequest_descriptor_;
}

const CMsgClientToGCTopMatchesRequest& CMsgClientToGCTopMatchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCTopMatchesRequest* CMsgClientToGCTopMatchesRequest::default_instance_ = NULL;

CMsgClientToGCTopMatchesRequest* CMsgClientToGCTopMatchesRequest::New() const {
  return new CMsgClientToGCTopMatchesRequest;
}

void CMsgClientToGCTopMatchesRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgClientToGCTopMatchesRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hero_id_, team_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCTopMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCTopMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_account_id;
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
          set_has_player_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (tag == 24) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCTopMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCTopMatchesRequest)
  return false;
#undef DO_
}

void CMsgClientToGCTopMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCTopMatchesRequest)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (has_player_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCTopMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopMatchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCTopMatchesRequest)
  // optional uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (has_player_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCTopMatchesRequest)
  return target;
}

int CMsgClientToGCTopMatchesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 player_account_id = 2;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCTopMatchesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCTopMatchesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const CMsgClientToGCTopMatchesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_player_account_id()) {
      set_player_account_id(from.player_account_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const CMsgClientToGCTopMatchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopMatchesRequest::IsInitialized() const {

  return true;
}

void CMsgClientToGCTopMatchesRequest::Swap(CMsgClientToGCTopMatchesRequest* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(player_account_id_, other->player_account_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCTopMatchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCTopMatchesRequest_descriptor_;
  metadata.reflection = CMsgClientToGCTopMatchesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCTopLeagueMatchesRequest)
}

void CMsgClientToGCTopLeagueMatchesRequest::InitAsDefaultInstance() {
}

CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopLeagueMatchesRequest)
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCTopLeagueMatchesRequest::~CMsgClientToGCTopLeagueMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCTopLeagueMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCTopLeagueMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCTopLeagueMatchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCTopLeagueMatchesRequest_descriptor_;
}

const CMsgClientToGCTopLeagueMatchesRequest& CMsgClientToGCTopLeagueMatchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCTopLeagueMatchesRequest* CMsgClientToGCTopLeagueMatchesRequest::default_instance_ = NULL;

CMsgClientToGCTopLeagueMatchesRequest* CMsgClientToGCTopLeagueMatchesRequest::New() const {
  return new CMsgClientToGCTopLeagueMatchesRequest;
}

void CMsgClientToGCTopLeagueMatchesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCTopLeagueMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCTopLeagueMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCTopLeagueMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCTopLeagueMatchesRequest)
  return false;
#undef DO_
}

void CMsgClientToGCTopLeagueMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCTopLeagueMatchesRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCTopLeagueMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopLeagueMatchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCTopLeagueMatchesRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCTopLeagueMatchesRequest)
  return target;
}

int CMsgClientToGCTopLeagueMatchesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCTopLeagueMatchesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCTopLeagueMatchesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopLeagueMatchesRequest::IsInitialized() const {

  return true;
}

void CMsgClientToGCTopLeagueMatchesRequest::Swap(CMsgClientToGCTopLeagueMatchesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCTopLeagueMatchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCTopLeagueMatchesRequest_descriptor_;
  metadata.reflection = CMsgClientToGCTopLeagueMatchesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCTopFriendMatchesRequest)
}

void CMsgClientToGCTopFriendMatchesRequest::InitAsDefaultInstance() {
}

CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopFriendMatchesRequest)
}

void CMsgClientToGCTopFriendMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCTopFriendMatchesRequest::~CMsgClientToGCTopFriendMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCTopFriendMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopFriendMatchesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCTopFriendMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCTopFriendMatchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCTopFriendMatchesRequest_descriptor_;
}

const CMsgClientToGCTopFriendMatchesRequest& CMsgClientToGCTopFriendMatchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCTopFriendMatchesRequest* CMsgClientToGCTopFriendMatchesRequest::default_instance_ = NULL;

CMsgClientToGCTopFriendMatchesRequest* CMsgClientToGCTopFriendMatchesRequest::New() const {
  return new CMsgClientToGCTopFriendMatchesRequest;
}

void CMsgClientToGCTopFriendMatchesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCTopFriendMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCTopFriendMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCTopFriendMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCTopFriendMatchesRequest)
  return false;
#undef DO_
}

void CMsgClientToGCTopFriendMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCTopFriendMatchesRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCTopFriendMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopFriendMatchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCTopFriendMatchesRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCTopFriendMatchesRequest)
  return target;
}

int CMsgClientToGCTopFriendMatchesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCTopFriendMatchesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCTopFriendMatchesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopFriendMatchesRequest::IsInitialized() const {

  return true;
}

void CMsgClientToGCTopFriendMatchesRequest::Swap(CMsgClientToGCTopFriendMatchesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCTopFriendMatchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCTopFriendMatchesRequest_descriptor_;
  metadata.reflection = CMsgClientToGCTopFriendMatchesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCMatchesMinimalRequest::kMatchIdsFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCMatchesMinimalRequest)
}

void CMsgClientToGCMatchesMinimalRequest::InitAsDefaultInstance() {
}

CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMatchesMinimalRequest)
}

void CMsgClientToGCMatchesMinimalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCMatchesMinimalRequest::~CMsgClientToGCMatchesMinimalRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMatchesMinimalRequest)
  SharedDtor();
}

void CMsgClientToGCMatchesMinimalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCMatchesMinimalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCMatchesMinimalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCMatchesMinimalRequest_descriptor_;
}

const CMsgClientToGCMatchesMinimalRequest& CMsgClientToGCMatchesMinimalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCMatchesMinimalRequest* CMsgClientToGCMatchesMinimalRequest::default_instance_ = NULL;

CMsgClientToGCMatchesMinimalRequest* CMsgClientToGCMatchesMinimalRequest::New() const {
  return new CMsgClientToGCMatchesMinimalRequest;
}

void CMsgClientToGCMatchesMinimalRequest::Clear() {
  match_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCMatchesMinimalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCMatchesMinimalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 match_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_match_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_match_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_match_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCMatchesMinimalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCMatchesMinimalRequest)
  return false;
#undef DO_
}

void CMsgClientToGCMatchesMinimalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCMatchesMinimalRequest)
  // repeated uint64 match_ids = 1;
  for (int i = 0; i < this->match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->match_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCMatchesMinimalRequest)
}

::google::protobuf::uint8* CMsgClientToGCMatchesMinimalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMatchesMinimalRequest)
  // repeated uint64 match_ids = 1;
  for (int i = 0; i < this->match_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->match_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMatchesMinimalRequest)
  return target;
}

int CMsgClientToGCMatchesMinimalRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 match_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->match_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->match_ids(i));
    }
    total_size += 1 * this->match_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCMatchesMinimalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_ids_.MergeFrom(from.match_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalRequest::IsInitialized() const {

  return true;
}

void CMsgClientToGCMatchesMinimalRequest::Swap(CMsgClientToGCMatchesMinimalRequest* other) {
  if (other != this) {
    match_ids_.Swap(&other->match_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCMatchesMinimalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCMatchesMinimalRequest_descriptor_;
  metadata.reflection = CMsgClientToGCMatchesMinimalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCMatchesMinimalResponse::kMatchesFieldNumber;
const int CMsgClientToGCMatchesMinimalResponse::kLastMatchFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCMatchesMinimalResponse)
}

void CMsgClientToGCMatchesMinimalResponse::InitAsDefaultInstance() {
}

CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMatchesMinimalResponse)
}

void CMsgClientToGCMatchesMinimalResponse::SharedCtor() {
  _cached_size_ = 0;
  last_match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCMatchesMinimalResponse::~CMsgClientToGCMatchesMinimalResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMatchesMinimalResponse)
  SharedDtor();
}

void CMsgClientToGCMatchesMinimalResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCMatchesMinimalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCMatchesMinimalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCMatchesMinimalResponse_descriptor_;
}

const CMsgClientToGCMatchesMinimalResponse& CMsgClientToGCMatchesMinimalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCMatchesMinimalResponse* CMsgClientToGCMatchesMinimalResponse::default_instance_ = NULL;

CMsgClientToGCMatchesMinimalResponse* CMsgClientToGCMatchesMinimalResponse::New() const {
  return new CMsgClientToGCMatchesMinimalResponse;
}

void CMsgClientToGCMatchesMinimalResponse::Clear() {
  last_match_ = false;
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCMatchesMinimalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCMatchesMinimalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (tag == 10) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_matches;
        if (input->ExpectTag(16)) goto parse_last_match;
        break;
      }

      // optional bool last_match = 2;
      case 2: {
        if (tag == 16) {
         parse_last_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_match_)));
          set_has_last_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCMatchesMinimalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCMatchesMinimalResponse)
  return false;
#undef DO_
}

void CMsgClientToGCMatchesMinimalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCMatchesMinimalResponse)
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  // optional bool last_match = 2;
  if (has_last_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->last_match(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCMatchesMinimalResponse)
}

::google::protobuf::uint8* CMsgClientToGCMatchesMinimalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMatchesMinimalResponse)
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matches(i), target);
  }

  // optional bool last_match = 2;
  if (has_last_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->last_match(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMatchesMinimalResponse)
  return target;
}

int CMsgClientToGCMatchesMinimalResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool last_match = 2;
    if (has_last_match()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCMatchesMinimalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_match()) {
      set_last_match(from.last_match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalResponse::IsInitialized() const {

  return true;
}

void CMsgClientToGCMatchesMinimalResponse::Swap(CMsgClientToGCMatchesMinimalResponse* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(last_match_, other->last_match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCMatchesMinimalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCMatchesMinimalResponse_descriptor_;
  metadata.reflection = CMsgClientToGCMatchesMinimalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientTopLeagueMatchesResponse::kMatchesFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientTopLeagueMatchesResponse)
}

void CMsgGCToClientTopLeagueMatchesResponse::InitAsDefaultInstance() {
}

CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopLeagueMatchesResponse)
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientTopLeagueMatchesResponse::~CMsgGCToClientTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopLeagueMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToClientTopLeagueMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientTopLeagueMatchesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientTopLeagueMatchesResponse_descriptor_;
}

const CMsgGCToClientTopLeagueMatchesResponse& CMsgGCToClientTopLeagueMatchesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgGCToClientTopLeagueMatchesResponse* CMsgGCToClientTopLeagueMatchesResponse::default_instance_ = NULL;

CMsgGCToClientTopLeagueMatchesResponse* CMsgGCToClientTopLeagueMatchesResponse::New() const {
  return new CMsgGCToClientTopLeagueMatchesResponse;
}

void CMsgGCToClientTopLeagueMatchesResponse::Clear() {
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientTopLeagueMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientTopLeagueMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAMatchMinimal matches = 2;
      case 2: {
        if (tag == 18) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientTopLeagueMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientTopLeagueMatchesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientTopLeagueMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientTopLeagueMatchesResponse)
  // repeated .CMsgDOTAMatchMinimal matches = 2;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientTopLeagueMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientTopLeagueMatchesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopLeagueMatchesResponse)
  // repeated .CMsgDOTAMatchMinimal matches = 2;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopLeagueMatchesResponse)
  return target;
}

int CMsgGCToClientTopLeagueMatchesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAMatchMinimal matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientTopLeagueMatchesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientTopLeagueMatchesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopLeagueMatchesResponse::IsInitialized() const {

  return true;
}

void CMsgGCToClientTopLeagueMatchesResponse::Swap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientTopLeagueMatchesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientTopLeagueMatchesResponse_descriptor_;
  metadata.reflection = CMsgGCToClientTopLeagueMatchesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientTopFriendMatchesResponse::kMatchesFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientTopFriendMatchesResponse)
}

void CMsgGCToClientTopFriendMatchesResponse::InitAsDefaultInstance() {
}

CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopFriendMatchesResponse)
}

void CMsgGCToClientTopFriendMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientTopFriendMatchesResponse::~CMsgGCToClientTopFriendMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopFriendMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientTopFriendMatchesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToClientTopFriendMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientTopFriendMatchesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientTopFriendMatchesResponse_descriptor_;
}

const CMsgGCToClientTopFriendMatchesResponse& CMsgGCToClientTopFriendMatchesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgGCToClientTopFriendMatchesResponse* CMsgGCToClientTopFriendMatchesResponse::default_instance_ = NULL;

CMsgGCToClientTopFriendMatchesResponse* CMsgGCToClientTopFriendMatchesResponse::New() const {
  return new CMsgGCToClientTopFriendMatchesResponse;
}

void CMsgGCToClientTopFriendMatchesResponse::Clear() {
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientTopFriendMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientTopFriendMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (tag == 10) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_matches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientTopFriendMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientTopFriendMatchesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientTopFriendMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientTopFriendMatchesResponse)
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientTopFriendMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientTopFriendMatchesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopFriendMatchesResponse)
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopFriendMatchesResponse)
  return target;
}

int CMsgGCToClientTopFriendMatchesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientTopFriendMatchesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientTopFriendMatchesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopFriendMatchesResponse::IsInitialized() const {

  return true;
}

void CMsgGCToClientTopFriendMatchesResponse::Swap(CMsgGCToClientTopFriendMatchesResponse* other) {
  if (other != this) {
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientTopFriendMatchesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientTopFriendMatchesResponse_descriptor_;
  metadata.reflection = CMsgGCToClientTopFriendMatchesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientToGCFindTopMatches::kStartGameFieldNumber;
const int CMsgClientToGCFindTopMatches::kLeagueIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kHeroIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kFriendIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kFriendListFieldNumber;
const int CMsgClientToGCFindTopMatches::kLeagueListFieldNumber;
#endif  // !_MSC_VER

CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientToGCFindTopMatches)
}

void CMsgClientToGCFindTopMatches::InitAsDefaultInstance() {
}

CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFindTopMatches)
}

void CMsgClientToGCFindTopMatches::SharedCtor() {
  _cached_size_ = 0;
  start_game_ = 0u;
  league_id_ = 0u;
  hero_id_ = 0u;
  friend_id_ = 0u;
  friend_list_ = false;
  league_list_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientToGCFindTopMatches::~CMsgClientToGCFindTopMatches() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFindTopMatches)
  SharedDtor();
}

void CMsgClientToGCFindTopMatches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientToGCFindTopMatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCFindTopMatches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientToGCFindTopMatches_descriptor_;
}

const CMsgClientToGCFindTopMatches& CMsgClientToGCFindTopMatches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgClientToGCFindTopMatches* CMsgClientToGCFindTopMatches::default_instance_ = NULL;

CMsgClientToGCFindTopMatches* CMsgClientToGCFindTopMatches::New() const {
  return new CMsgClientToGCFindTopMatches;
}

void CMsgClientToGCFindTopMatches::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgClientToGCFindTopMatches*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(start_game_, league_list_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientToGCFindTopMatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientToGCFindTopMatches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_game = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
          set_has_start_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friend_id;
        break;
      }

      // optional uint32 friend_id = 4;
      case 4: {
        if (tag == 32) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_friend_list;
        break;
      }

      // optional bool friend_list = 5;
      case 5: {
        if (tag == 40) {
         parse_friend_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_list_)));
          set_has_friend_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_league_list;
        break;
      }

      // optional bool league_list = 6;
      case 6: {
        if (tag == 48) {
         parse_league_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &league_list_)));
          set_has_league_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientToGCFindTopMatches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientToGCFindTopMatches)
  return false;
#undef DO_
}

void CMsgClientToGCFindTopMatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientToGCFindTopMatches)
  // optional uint32 start_game = 1;
  if (has_start_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_game(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 friend_id = 4;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friend_id(), output);
  }

  // optional bool friend_list = 5;
  if (has_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friend_list(), output);
  }

  // optional bool league_list = 6;
  if (has_league_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->league_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientToGCFindTopMatches)
}

::google::protobuf::uint8* CMsgClientToGCFindTopMatches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFindTopMatches)
  // optional uint32 start_game = 1;
  if (has_start_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 friend_id = 4;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friend_id(), target);
  }

  // optional bool friend_list = 5;
  if (has_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friend_list(), target);
  }

  // optional bool league_list = 6;
  if (has_league_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->league_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFindTopMatches)
  return target;
}

int CMsgClientToGCFindTopMatches::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_game = 1;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 friend_id = 4;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional bool friend_list = 5;
    if (has_friend_list()) {
      total_size += 1 + 1;
    }

    // optional bool league_list = 6;
    if (has_league_list()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCFindTopMatches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientToGCFindTopMatches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientToGCFindTopMatches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopMatches::MergeFrom(const CMsgClientToGCFindTopMatches& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_game()) {
      set_start_game(from.start_game());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_friend_list()) {
      set_friend_list(from.friend_list());
    }
    if (from.has_league_list()) {
      set_league_list(from.league_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientToGCFindTopMatches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopMatches::CopyFrom(const CMsgClientToGCFindTopMatches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopMatches::IsInitialized() const {

  return true;
}

void CMsgClientToGCFindTopMatches::Swap(CMsgClientToGCFindTopMatches* other) {
  if (other != this) {
    std::swap(start_game_, other->start_game_);
    std::swap(league_id_, other->league_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(friend_list_, other->friend_list_);
    std::swap(league_list_, other->league_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientToGCFindTopMatches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientToGCFindTopMatches_descriptor_;
  metadata.reflection = CMsgClientToGCFindTopMatches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToClientFindTopLeagueMatchesResponse::kStartGameFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kLeagueIdFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kHeroIdFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kMatchIdsFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kMatchesFieldNumber;
#endif  // !_MSC_VER

CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToClientFindTopLeagueMatchesResponse)
}

void CMsgGCToClientFindTopLeagueMatchesResponse::InitAsDefaultInstance() {
}

CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFindTopLeagueMatchesResponse)
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  start_game_ = 0u;
  league_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToClientFindTopLeagueMatchesResponse::~CMsgGCToClientFindTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFindTopLeagueMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientFindTopLeagueMatchesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToClientFindTopLeagueMatchesResponse_descriptor_;
}

const CMsgGCToClientFindTopLeagueMatchesResponse& CMsgGCToClientFindTopLeagueMatchesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgGCToClientFindTopLeagueMatchesResponse* CMsgGCToClientFindTopLeagueMatchesResponse::default_instance_ = NULL;

CMsgGCToClientFindTopLeagueMatchesResponse* CMsgGCToClientFindTopLeagueMatchesResponse::New() const {
  return new CMsgGCToClientFindTopLeagueMatchesResponse;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGCToClientFindTopLeagueMatchesResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_game_, league_id_);
    hero_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  match_ids_.Clear();
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCToClientFindTopLeagueMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_game = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
          set_has_start_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (tag == 16) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_match_ids;
        break;
      }

      // repeated uint32 match_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_match_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_match_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_match_ids;
        if (input->ExpectTag(42)) goto parse_matches;
        break;
      }

      // repeated .CMsgDOTAMatch matches = 5;
      case 5: {
        if (tag == 42) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_matches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToClientFindTopLeagueMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToClientFindTopLeagueMatchesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  // optional uint32 start_game = 1;
  if (has_start_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_game(), output);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 match_ids = 4;
  for (int i = 0; i < this->match_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->match_ids(i), output);
  }

  // repeated .CMsgDOTAMatch matches = 5;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->matches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToClientFindTopLeagueMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientFindTopLeagueMatchesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  // optional uint32 start_game = 1;
  if (has_start_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 match_ids = 4;
  for (int i = 0; i < this->match_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->match_ids(i), target);
  }

  // repeated .CMsgDOTAMatch matches = 5;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->matches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFindTopLeagueMatchesResponse)
  return target;
}

int CMsgGCToClientFindTopLeagueMatchesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_game = 1;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated uint32 match_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->match_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->match_ids(i));
    }
    total_size += 1 * this->match_ids_size() + data_size;
  }

  // repeated .CMsgDOTAMatch matches = 5;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCToClientFindTopLeagueMatchesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCToClientFindTopLeagueMatchesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_ids_.MergeFrom(from.match_ids_);
  matches_.MergeFrom(from.matches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_game()) {
      set_start_game(from.start_game());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopLeagueMatchesResponse::IsInitialized() const {

  return true;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::Swap(CMsgGCToClientFindTopLeagueMatchesResponse* other) {
  if (other != this) {
    std::swap(start_game_, other->start_game_);
    std::swap(league_id_, other->league_id_);
    std::swap(hero_id_, other->hero_id_);
    match_ids_.Swap(&other->match_ids_);
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCToClientFindTopLeagueMatchesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToClientFindTopLeagueMatchesResponse_descriptor_;
  metadata.reflection = CMsgGCToClientFindTopLeagueMatchesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSpectateFriendGame::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgSpectateFriendGame::CMsgSpectateFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectateFriendGame)
}

void CMsgSpectateFriendGame::InitAsDefaultInstance() {
}

CMsgSpectateFriendGame::CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectateFriendGame)
}

void CMsgSpectateFriendGame::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectateFriendGame::~CMsgSpectateFriendGame() {
  // @@protoc_insertion_point(destructor:CMsgSpectateFriendGame)
  SharedDtor();
}

void CMsgSpectateFriendGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSpectateFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectateFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectateFriendGame_descriptor_;
}

const CMsgSpectateFriendGame& CMsgSpectateFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgSpectateFriendGame* CMsgSpectateFriendGame::default_instance_ = NULL;

CMsgSpectateFriendGame* CMsgSpectateFriendGame::New() const {
  return new CMsgSpectateFriendGame;
}

void CMsgSpectateFriendGame::Clear() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectateFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectateFriendGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectateFriendGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectateFriendGame)
  return false;
#undef DO_
}

void CMsgSpectateFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectateFriendGame)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectateFriendGame)
}

::google::protobuf::uint8* CMsgSpectateFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectateFriendGame)
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectateFriendGame)
  return target;
}

int CMsgSpectateFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectateFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectateFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectateFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGame::MergeFrom(const CMsgSpectateFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectateFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGame::CopyFrom(const CMsgSpectateFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGame::IsInitialized() const {

  return true;
}

void CMsgSpectateFriendGame::Swap(CMsgSpectateFriendGame* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectateFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectateFriendGame_descriptor_;
  metadata.reflection = CMsgSpectateFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSpectateFriendGameResponse::kServerSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSpectateFriendGameResponse)
}

void CMsgSpectateFriendGameResponse::InitAsDefaultInstance() {
}

CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectateFriendGameResponse)
}

void CMsgSpectateFriendGameResponse::SharedCtor() {
  _cached_size_ = 0;
  server_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSpectateFriendGameResponse::~CMsgSpectateFriendGameResponse() {
  // @@protoc_insertion_point(destructor:CMsgSpectateFriendGameResponse)
  SharedDtor();
}

void CMsgSpectateFriendGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSpectateFriendGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectateFriendGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSpectateFriendGameResponse_descriptor_;
}

const CMsgSpectateFriendGameResponse& CMsgSpectateFriendGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgSpectateFriendGameResponse* CMsgSpectateFriendGameResponse::default_instance_ = NULL;

CMsgSpectateFriendGameResponse* CMsgSpectateFriendGameResponse::New() const {
  return new CMsgSpectateFriendGameResponse;
}

void CMsgSpectateFriendGameResponse::Clear() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSpectateFriendGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSpectateFriendGameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steamid = 4;
      case 4: {
        if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steamid_)));
          set_has_server_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSpectateFriendGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSpectateFriendGameResponse)
  return false;
#undef DO_
}

void CMsgSpectateFriendGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSpectateFriendGameResponse)
  // optional fixed64 server_steamid = 4;
  if (has_server_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSpectateFriendGameResponse)
}

::google::protobuf::uint8* CMsgSpectateFriendGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectateFriendGameResponse)
  // optional fixed64 server_steamid = 4;
  if (has_server_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectateFriendGameResponse)
  return target;
}

int CMsgSpectateFriendGameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steamid = 4;
    if (has_server_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectateFriendGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSpectateFriendGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSpectateFriendGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGameResponse::MergeFrom(const CMsgSpectateFriendGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steamid()) {
      set_server_steamid(from.server_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSpectateFriendGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGameResponse::CopyFrom(const CMsgSpectateFriendGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGameResponse::IsInitialized() const {

  return true;
}

void CMsgSpectateFriendGameResponse::Swap(CMsgSpectateFriendGameResponse* other) {
  if (other != this) {
    std::swap(server_steamid_, other->server_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSpectateFriendGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSpectateFriendGameResponse_descriptor_;
  metadata.reflection = CMsgSpectateFriendGameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDOTAMatchMinimal_Player::kAccountIdFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kHeroIdFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kKillsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kDeathsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kAssistsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kItemsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kPlayerSlotFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatchMinimal.Player)
}

void CMsgDOTAMatchMinimal_Player::InitAsDefaultInstance() {
}

CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatchMinimal.Player)
}

void CMsgDOTAMatchMinimal_Player::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  hero_id_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  player_slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatchMinimal_Player::~CMsgDOTAMatchMinimal_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatchMinimal.Player)
  SharedDtor();
}

void CMsgDOTAMatchMinimal_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDOTAMatchMinimal_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatchMinimal_Player_descriptor_;
}

const CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal_Player::default_instance_ = NULL;

CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal_Player::New() const {
  return new CMsgDOTAMatchMinimal_Player;
}

void CMsgDOTAMatchMinimal_Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAMatchMinimal_Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(account_id_, deaths_);
    ZR_(assists_, player_slot_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatchMinimal_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatchMinimal.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kills;
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (tag == 24) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deaths;
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (tag == 32) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_assists;
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (tag == 40) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_items;
        break;
      }

      // repeated uint32 items = 6;
      case 6: {
        if (tag == 48) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_items())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_items;
        if (input->ExpectTag(56)) goto parse_player_slot;
        break;
      }

      // optional uint32 player_slot = 7;
      case 7: {
        if (tag == 56) {
         parse_player_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
          set_has_player_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatchMinimal.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatchMinimal.Player)
  return false;
#undef DO_
}

void CMsgDOTAMatchMinimal_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatchMinimal.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 kills = 3;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // repeated uint32 items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->items(i), output);
  }

  // optional uint32 player_slot = 7;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->player_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatchMinimal.Player)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatchMinimal.Player)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 kills = 3;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // repeated uint32 items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->items(i), target);
  }

  // optional uint32 player_slot = 7;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->player_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatchMinimal.Player)
  return target;
}

int CMsgDOTAMatchMinimal_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 kills = 3;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 player_slot = 7;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

  }
  // repeated uint32 items = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatchMinimal_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const CMsgDOTAMatchMinimal_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const CMsgDOTAMatchMinimal_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Player::IsInitialized() const {

  return true;
}

void CMsgDOTAMatchMinimal_Player::Swap(CMsgDOTAMatchMinimal_Player* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    items_.Swap(&other->items_);
    std::swap(player_slot_, other->player_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatchMinimal_Player_descriptor_;
  metadata.reflection = CMsgDOTAMatchMinimal_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatchMinimal_Tourney::kLeagueIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kSeriesTypeFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kSeriesGameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneyTournamentIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneySeasonTrophyIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneyDivisionFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneySkillLevelFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamNameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamLogoFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamNameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamLogoFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatchMinimal.Tourney)
}

void CMsgDOTAMatchMinimal_Tourney::InitAsDefaultInstance() {
}

CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatchMinimal.Tourney)
}

void CMsgDOTAMatchMinimal_Tourney::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  league_id_ = 0u;
  series_type_ = 0u;
  series_game_ = 0u;
  weekend_tourney_tournament_id_ = 0u;
  weekend_tourney_season_trophy_id_ = 0u;
  weekend_tourney_division_ = 0u;
  weekend_tourney_skill_level_ = 0u;
  radiant_team_id_ = 0u;
  radiant_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  dire_team_id_ = 0u;
  dire_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatchMinimal_Tourney::~CMsgDOTAMatchMinimal_Tourney() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatchMinimal.Tourney)
  SharedDtor();
}

void CMsgDOTAMatchMinimal_Tourney::SharedDtor() {
  if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiant_team_name_;
  }
  if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dire_team_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDOTAMatchMinimal_Tourney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_Tourney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatchMinimal_Tourney_descriptor_;
}

const CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal_Tourney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal_Tourney::default_instance_ = NULL;

CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal_Tourney::New() const {
  return new CMsgDOTAMatchMinimal_Tourney;
}

void CMsgDOTAMatchMinimal_Tourney::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAMatchMinimal_Tourney*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(league_id_, radiant_team_id_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(dire_team_logo_, dire_team_id_);
    if (has_radiant_team_name()) {
      if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radiant_team_name_->clear();
      }
    }
    radiant_team_logo_ = GOOGLE_ULONGLONG(0);
    if (has_dire_team_name()) {
      if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dire_team_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatchMinimal_Tourney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatchMinimal.Tourney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_radiant_team_id;
        break;
      }

      // optional uint32 radiant_team_id = 2;
      case 2: {
        if (tag == 16) {
         parse_radiant_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
          set_has_radiant_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_radiant_team_name;
        break;
      }

      // optional string radiant_team_name = 3;
      case 3: {
        if (tag == 26) {
         parse_radiant_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_name().data(), this->radiant_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radiant_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_radiant_team_logo;
        break;
      }

      // optional fixed64 radiant_team_logo = 4;
      case 4: {
        if (tag == 33) {
         parse_radiant_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &radiant_team_logo_)));
          set_has_radiant_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dire_team_id;
        break;
      }

      // optional uint32 dire_team_id = 5;
      case 5: {
        if (tag == 40) {
         parse_dire_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
          set_has_dire_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dire_team_name;
        break;
      }

      // optional string dire_team_name = 6;
      case 6: {
        if (tag == 50) {
         parse_dire_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_name().data(), this->dire_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dire_team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dire_team_logo;
        break;
      }

      // optional fixed64 dire_team_logo = 7;
      case 7: {
        if (tag == 57) {
         parse_dire_team_logo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dire_team_logo_)));
          set_has_dire_team_logo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (tag == 64) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_series_game;
        break;
      }

      // optional uint32 series_game = 9;
      case 9: {
        if (tag == 72) {
         parse_series_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
          set_has_series_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_weekend_tourney_tournament_id;
        break;
      }

      // optional uint32 weekend_tourney_tournament_id = 10;
      case 10: {
        if (tag == 80) {
         parse_weekend_tourney_tournament_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_tournament_id_)));
          set_has_weekend_tourney_tournament_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_weekend_tourney_season_trophy_id;
        break;
      }

      // optional uint32 weekend_tourney_season_trophy_id = 11;
      case 11: {
        if (tag == 88) {
         parse_weekend_tourney_season_trophy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_season_trophy_id_)));
          set_has_weekend_tourney_season_trophy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_weekend_tourney_division;
        break;
      }

      // optional uint32 weekend_tourney_division = 12;
      case 12: {
        if (tag == 96) {
         parse_weekend_tourney_division:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_)));
          set_has_weekend_tourney_division();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_weekend_tourney_skill_level;
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 13;
      case 13: {
        if (tag == 104) {
         parse_weekend_tourney_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
          set_has_weekend_tourney_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatchMinimal.Tourney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatchMinimal.Tourney)
  return false;
#undef DO_
}

void CMsgDOTAMatchMinimal_Tourney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatchMinimal.Tourney)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 radiant_team_id = 2;
  if (has_radiant_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radiant_team_id(), output);
  }

  // optional string radiant_team_name = 3;
  if (has_radiant_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radiant_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->radiant_team_name(), output);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (has_radiant_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->radiant_team_logo(), output);
  }

  // optional uint32 dire_team_id = 5;
  if (has_dire_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dire_team_id(), output);
  }

  // optional string dire_team_name = 6;
  if (has_dire_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dire_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dire_team_name(), output);
  }

  // optional fixed64 dire_team_logo = 7;
  if (has_dire_team_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->dire_team_logo(), output);
  }

  // optional uint32 series_type = 8;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 series_game = 9;
  if (has_series_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->series_game(), output);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (has_weekend_tourney_tournament_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weekend_tourney_tournament_id(), output);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (has_weekend_tourney_season_trophy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weekend_tourney_season_trophy_id(), output);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (has_weekend_tourney_division()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weekend_tourney_division(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (has_weekend_tourney_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weekend_tourney_skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatchMinimal.Tourney)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal_Tourney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatchMinimal.Tourney)
  // optional uint32 league_id = 1;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 radiant_team_id = 2;
  if (has_radiant_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radiant_team_id(), target);
  }

  // optional string radiant_team_name = 3;
  if (has_radiant_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radiant_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->radiant_team_name(), target);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (has_radiant_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->radiant_team_logo(), target);
  }

  // optional uint32 dire_team_id = 5;
  if (has_dire_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dire_team_id(), target);
  }

  // optional string dire_team_name = 6;
  if (has_dire_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dire_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dire_team_name(), target);
  }

  // optional fixed64 dire_team_logo = 7;
  if (has_dire_team_logo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->dire_team_logo(), target);
  }

  // optional uint32 series_type = 8;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 series_game = 9;
  if (has_series_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->series_game(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (has_weekend_tourney_tournament_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (has_weekend_tourney_season_trophy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->weekend_tourney_season_trophy_id(), target);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (has_weekend_tourney_division()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (has_weekend_tourney_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weekend_tourney_skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatchMinimal.Tourney)
  return target;
}

int CMsgDOTAMatchMinimal_Tourney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 series_type = 8;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 series_game = 9;
    if (has_series_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

    // optional uint32 weekend_tourney_tournament_id = 10;
    if (has_weekend_tourney_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_tournament_id());
    }

    // optional uint32 weekend_tourney_season_trophy_id = 11;
    if (has_weekend_tourney_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_season_trophy_id());
    }

    // optional uint32 weekend_tourney_division = 12;
    if (has_weekend_tourney_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 13;
    if (has_weekend_tourney_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

    // optional uint32 radiant_team_id = 2;
    if (has_radiant_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string radiant_team_name = 3;
    if (has_radiant_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_name());
    }

    // optional fixed64 radiant_team_logo = 4;
    if (has_radiant_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 dire_team_id = 5;
    if (has_dire_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

    // optional string dire_team_name = 6;
    if (has_dire_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_name());
    }

    // optional fixed64 dire_team_logo = 7;
    if (has_dire_team_logo()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Tourney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatchMinimal_Tourney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
    if (from.has_series_game()) {
      set_series_game(from.series_game());
    }
    if (from.has_weekend_tourney_tournament_id()) {
      set_weekend_tourney_tournament_id(from.weekend_tourney_tournament_id());
    }
    if (from.has_weekend_tourney_season_trophy_id()) {
      set_weekend_tourney_season_trophy_id(from.weekend_tourney_season_trophy_id());
    }
    if (from.has_weekend_tourney_division()) {
      set_weekend_tourney_division(from.weekend_tourney_division());
    }
    if (from.has_weekend_tourney_skill_level()) {
      set_weekend_tourney_skill_level(from.weekend_tourney_skill_level());
    }
    if (from.has_radiant_team_id()) {
      set_radiant_team_id(from.radiant_team_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radiant_team_name()) {
      set_radiant_team_name(from.radiant_team_name());
    }
    if (from.has_radiant_team_logo()) {
      set_radiant_team_logo(from.radiant_team_logo());
    }
    if (from.has_dire_team_id()) {
      set_dire_team_id(from.dire_team_id());
    }
    if (from.has_dire_team_name()) {
      set_dire_team_name(from.dire_team_name());
    }
    if (from.has_dire_team_logo()) {
      set_dire_team_logo(from.dire_team_logo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Tourney::IsInitialized() const {

  return true;
}

void CMsgDOTAMatchMinimal_Tourney::Swap(CMsgDOTAMatchMinimal_Tourney* other) {
  if (other != this) {
    std::swap(league_id_, other->league_id_);
    std::swap(series_type_, other->series_type_);
    std::swap(series_game_, other->series_game_);
    std::swap(weekend_tourney_tournament_id_, other->weekend_tourney_tournament_id_);
    std::swap(weekend_tourney_season_trophy_id_, other->weekend_tourney_season_trophy_id_);
    std::swap(weekend_tourney_division_, other->weekend_tourney_division_);
    std::swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
    std::swap(radiant_team_id_, other->radiant_team_id_);
    std::swap(radiant_team_name_, other->radiant_team_name_);
    std::swap(radiant_team_logo_, other->radiant_team_logo_);
    std::swap(dire_team_id_, other->dire_team_id_);
    std::swap(dire_team_name_, other->dire_team_name_);
    std::swap(dire_team_logo_, other->dire_team_logo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal_Tourney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatchMinimal_Tourney_descriptor_;
  metadata.reflection = CMsgDOTAMatchMinimal_Tourney_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDOTAMatchMinimal::kMatchIdFieldNumber;
const int CMsgDOTAMatchMinimal::kStartTimeFieldNumber;
const int CMsgDOTAMatchMinimal::kDurationFieldNumber;
const int CMsgDOTAMatchMinimal::kGameModeFieldNumber;
const int CMsgDOTAMatchMinimal::kPlayersFieldNumber;
const int CMsgDOTAMatchMinimal::kTourneyFieldNumber;
const int CMsgDOTAMatchMinimal::kMatchOutcomeFieldNumber;
#endif  // !_MSC_VER

CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTAMatchMinimal)
}

void CMsgDOTAMatchMinimal::InitAsDefaultInstance() {
  tourney_ = const_cast< ::CMsgDOTAMatchMinimal_Tourney*>(&::CMsgDOTAMatchMinimal_Tourney::default_instance());
}

CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatchMinimal)
}

void CMsgDOTAMatchMinimal::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
  start_time_ = 0u;
  duration_ = 0u;
  game_mode_ = 0;
  tourney_ = NULL;
  match_outcome_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDOTAMatchMinimal::~CMsgDOTAMatchMinimal() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatchMinimal)
  SharedDtor();
}

void CMsgDOTAMatchMinimal::SharedDtor() {
  if (this != default_instance_) {
    delete tourney_;
  }
}

void CMsgDOTAMatchMinimal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDOTAMatchMinimal_descriptor_;
}

const CMsgDOTAMatchMinimal& CMsgDOTAMatchMinimal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgDOTAMatchMinimal* CMsgDOTAMatchMinimal::default_instance_ = NULL;

CMsgDOTAMatchMinimal* CMsgDOTAMatchMinimal::New() const {
  return new CMsgDOTAMatchMinimal;
}

void CMsgDOTAMatchMinimal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDOTAMatchMinimal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(match_id_, duration_);
    ZR_(game_mode_, match_outcome_);
    if (has_tourney()) {
      if (tourney_ != NULL) tourney_->::CMsgDOTAMatchMinimal_Tourney::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDOTAMatchMinimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTAMatchMinimal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_start_time;
        break;
      }

      // optional fixed32 start_time = 2;
      case 2: {
        if (tag == 21) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (tag == 24) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_mode;
        break;
      }

      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (tag == 32) {
         parse_game_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .CMsgDOTAMatchMinimal.Player players = 6;
      case 6: {
        if (tag == 50) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_players;
        if (input->ExpectTag(58)) goto parse_tourney;
        break;
      }

      // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
      case 7: {
        if (tag == 58) {
         parse_tourney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tourney()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_match_outcome;
        break;
      }

      // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8: {
        if (tag == 64) {
         parse_match_outcome:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTAMatchMinimal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTAMatchMinimal)
  return false;
#undef DO_
}

void CMsgDOTAMatchMinimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTAMatchMinimal)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->start_time(), output);
  }

  // optional uint32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_mode(), output);
  }

  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (has_tourney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tourney(), output);
  }

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->match_outcome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTAMatchMinimal)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatchMinimal)
  // optional uint64 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->start_time(), target);
  }

  // optional uint32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_mode(), target);
  }

  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (has_tourney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tourney(), target);
  }

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (has_match_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->match_outcome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatchMinimal)
  return target;
}

int CMsgDOTAMatchMinimal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
    if (has_tourney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tourney());
    }

    // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

  }
  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatchMinimal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDOTAMatchMinimal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal::MergeFrom(const CMsgDOTAMatchMinimal& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_tourney()) {
      mutable_tourney()->::CMsgDOTAMatchMinimal_Tourney::MergeFrom(from.tourney());
    }
    if (from.has_match_outcome()) {
      set_match_outcome(from.match_outcome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDOTAMatchMinimal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal::CopyFrom(const CMsgDOTAMatchMinimal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal::IsInitialized() const {

  return true;
}

void CMsgDOTAMatchMinimal::Swap(CMsgDOTAMatchMinimal* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(duration_, other->duration_);
    std::swap(game_mode_, other->game_mode_);
    players_.Swap(&other->players_);
    std::swap(tourney_, other->tourney_);
    std::swap(match_outcome_, other->match_outcome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDOTAMatchMinimal_descriptor_;
  metadata.reflection = CMsgDOTAMatchMinimal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAReplayDownloadInfo_Highlight::kTimestampFieldNumber;
const int CDOTAReplayDownloadInfo_Highlight::kDescriptionFieldNumber;
#endif  // !_MSC_VER

CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAReplayDownloadInfo.Highlight)
}

void CDOTAReplayDownloadInfo_Highlight::InitAsDefaultInstance() {
}

CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAReplayDownloadInfo.Highlight)
}

void CDOTAReplayDownloadInfo_Highlight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAReplayDownloadInfo_Highlight::~CDOTAReplayDownloadInfo_Highlight() {
  // @@protoc_insertion_point(destructor:CDOTAReplayDownloadInfo.Highlight)
  SharedDtor();
}

void CDOTAReplayDownloadInfo_Highlight::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAReplayDownloadInfo_Highlight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAReplayDownloadInfo_Highlight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAReplayDownloadInfo_Highlight_descriptor_;
}

const CDOTAReplayDownloadInfo_Highlight& CDOTAReplayDownloadInfo_Highlight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CDOTAReplayDownloadInfo_Highlight* CDOTAReplayDownloadInfo_Highlight::default_instance_ = NULL;

CDOTAReplayDownloadInfo_Highlight* CDOTAReplayDownloadInfo_Highlight::New() const {
  return new CDOTAReplayDownloadInfo_Highlight;
}

void CDOTAReplayDownloadInfo_Highlight::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    timestamp_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAReplayDownloadInfo_Highlight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAReplayDownloadInfo.Highlight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAReplayDownloadInfo.Highlight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAReplayDownloadInfo.Highlight)
  return false;
#undef DO_
}

void CDOTAReplayDownloadInfo_Highlight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAReplayDownloadInfo.Highlight)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAReplayDownloadInfo.Highlight)
}

::google::protobuf::uint8* CDOTAReplayDownloadInfo_Highlight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAReplayDownloadInfo.Highlight)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAReplayDownloadInfo.Highlight)
  return target;
}

int CDOTAReplayDownloadInfo_Highlight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo_Highlight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAReplayDownloadInfo_Highlight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo_Highlight::IsInitialized() const {

  return true;
}

void CDOTAReplayDownloadInfo_Highlight::Swap(CDOTAReplayDownloadInfo_Highlight* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAReplayDownloadInfo_Highlight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAReplayDownloadInfo_Highlight_descriptor_;
  metadata.reflection = CDOTAReplayDownloadInfo_Highlight_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAReplayDownloadInfo::kMatchFieldNumber;
const int CDOTAReplayDownloadInfo::kTitleFieldNumber;
const int CDOTAReplayDownloadInfo::kDescriptionFieldNumber;
const int CDOTAReplayDownloadInfo::kSizeFieldNumber;
const int CDOTAReplayDownloadInfo::kTagsFieldNumber;
const int CDOTAReplayDownloadInfo::kExistsOnDiskFieldNumber;
#endif  // !_MSC_VER

CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAReplayDownloadInfo)
}

void CDOTAReplayDownloadInfo::InitAsDefaultInstance() {
  match_ = const_cast< ::CMsgDOTAMatchMinimal*>(&::CMsgDOTAMatchMinimal::default_instance());
}

CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTAReplayDownloadInfo)
}

void CDOTAReplayDownloadInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_ = NULL;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0u;
  exists_on_disk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAReplayDownloadInfo::~CDOTAReplayDownloadInfo() {
  // @@protoc_insertion_point(destructor:CDOTAReplayDownloadInfo)
  SharedDtor();
}

void CDOTAReplayDownloadInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
    delete match_;
  }
}

void CDOTAReplayDownloadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAReplayDownloadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAReplayDownloadInfo_descriptor_;
}

const CDOTAReplayDownloadInfo& CDOTAReplayDownloadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CDOTAReplayDownloadInfo* CDOTAReplayDownloadInfo::default_instance_ = NULL;

CDOTAReplayDownloadInfo* CDOTAReplayDownloadInfo::New() const {
  return new CDOTAReplayDownloadInfo;
}

void CDOTAReplayDownloadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTAReplayDownloadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(size_, exists_on_disk_);
    if (has_match()) {
      if (match_ != NULL) match_->::CMsgDOTAMatchMinimal::Clear();
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAReplayDownloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAReplayDownloadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgDOTAMatchMinimal match = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tags;
        break;
      }

      // repeated string tags = 5;
      case 5: {
        if (tag == 42) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tags;
        if (input->ExpectTag(48)) goto parse_exists_on_disk;
        break;
      }

      // optional bool exists_on_disk = 6;
      case 6: {
        if (tag == 48) {
         parse_exists_on_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_on_disk_)));
          set_has_exists_on_disk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAReplayDownloadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAReplayDownloadInfo)
  return false;
#undef DO_
}

void CDOTAReplayDownloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAReplayDownloadInfo)
  // optional .CMsgDOTAMatchMinimal match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // repeated string tags = 5;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tags(i), output);
  }

  // optional bool exists_on_disk = 6;
  if (has_exists_on_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exists_on_disk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAReplayDownloadInfo)
}

::google::protobuf::uint8* CDOTAReplayDownloadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAReplayDownloadInfo)
  // optional .CMsgDOTAMatchMinimal match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->match(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // repeated string tags = 5;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->tags(i), target);
  }

  // optional bool exists_on_disk = 6;
  if (has_exists_on_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exists_on_disk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAReplayDownloadInfo)
  return target;
}

int CDOTAReplayDownloadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgDOTAMatchMinimal match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bool exists_on_disk = 6;
    if (has_exists_on_disk()) {
      total_size += 1 + 1;
    }

  }
  // repeated string tags = 5;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAReplayDownloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAReplayDownloadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo::MergeFrom(const CDOTAReplayDownloadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::CMsgDOTAMatchMinimal::MergeFrom(from.match());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_exists_on_disk()) {
      set_exists_on_disk(from.exists_on_disk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAReplayDownloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo::CopyFrom(const CDOTAReplayDownloadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo::IsInitialized() const {

  return true;
}

void CDOTAReplayDownloadInfo::Swap(CDOTAReplayDownloadInfo* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(size_, other->size_);
    tags_.Swap(&other->tags_);
    std::swap(exists_on_disk_, other->exists_on_disk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAReplayDownloadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAReplayDownloadInfo_descriptor_;
  metadata.reflection = CDOTAReplayDownloadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgWatchGame::kServerSteamidFieldNumber;
const int CMsgWatchGame::kClientVersionFieldNumber;
const int CMsgWatchGame::kWatchServerSteamidFieldNumber;
const int CMsgWatchGame::kLobbyIdFieldNumber;
const int CMsgWatchGame::kRegionsFieldNumber;
#endif  // !_MSC_VER

CMsgWatchGame::CMsgWatchGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgWatchGame)
}

void CMsgWatchGame::InitAsDefaultInstance() {
}

CMsgWatchGame::CMsgWatchGame(const CMsgWatchGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgWatchGame)
}

void CMsgWatchGame::SharedCtor() {
  _cached_size_ = 0;
  server_steamid_ = GOOGLE_ULONGLONG(0);
  client_version_ = 0u;
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  lobby_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWatchGame::~CMsgWatchGame() {
  // @@protoc_insertion_point(destructor:CMsgWatchGame)
  SharedDtor();
}

void CMsgWatchGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgWatchGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWatchGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWatchGame_descriptor_;
}

const CMsgWatchGame& CMsgWatchGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgWatchGame* CMsgWatchGame::default_instance_ = NULL;

CMsgWatchGame* CMsgWatchGame::New() const {
  return new CMsgWatchGame;
}

void CMsgWatchGame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgWatchGame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(server_steamid_, lobby_id_);
    client_version_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  regions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWatchGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgWatchGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steamid_)));
          set_has_server_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_version;
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (tag == 16) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_watch_server_steamid;
        break;
      }

      // optional fixed64 watch_server_steamid = 3;
      case 3: {
        if (tag == 25) {
         parse_watch_server_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_server_steamid_)));
          set_has_watch_server_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lobby_id;
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (tag == 32) {
         parse_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_regions;
        break;
      }

      // repeated uint32 regions = 5;
      case 5: {
        if (tag == 40) {
         parse_regions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_regions())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_regions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgWatchGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgWatchGame)
  return false;
#undef DO_
}

void CMsgWatchGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgWatchGame)
  // optional fixed64 server_steamid = 1;
  if (has_server_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steamid(), output);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (has_watch_server_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->watch_server_steamid(), output);
  }

  // optional uint64 lobby_id = 4;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // repeated uint32 regions = 5;
  for (int i = 0; i < this->regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->regions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgWatchGame)
}

::google::protobuf::uint8* CMsgWatchGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWatchGame)
  // optional fixed64 server_steamid = 1;
  if (has_server_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steamid(), target);
  }

  // optional uint32 client_version = 2;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (has_watch_server_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->watch_server_steamid(), target);
  }

  // optional uint64 lobby_id = 4;
  if (has_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // repeated uint32 regions = 5;
  for (int i = 0; i < this->regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->regions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWatchGame)
  return target;
}

int CMsgWatchGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 server_steamid = 1;
    if (has_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional fixed64 watch_server_steamid = 3;
    if (has_watch_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  // repeated uint32 regions = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->regions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->regions(i));
    }
    total_size += 1 * this->regions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWatchGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWatchGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWatchGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWatchGame::MergeFrom(const CMsgWatchGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  regions_.MergeFrom(from.regions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_steamid()) {
      set_server_steamid(from.server_steamid());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_watch_server_steamid()) {
      set_watch_server_steamid(from.watch_server_steamid());
    }
    if (from.has_lobby_id()) {
      set_lobby_id(from.lobby_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWatchGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGame::CopyFrom(const CMsgWatchGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGame::IsInitialized() const {

  return true;
}

void CMsgWatchGame::Swap(CMsgWatchGame* other) {
  if (other != this) {
    std::swap(server_steamid_, other->server_steamid_);
    std::swap(client_version_, other->client_version_);
    std::swap(watch_server_steamid_, other->watch_server_steamid_);
    std::swap(lobby_id_, other->lobby_id_);
    regions_.Swap(&other->regions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWatchGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWatchGame_descriptor_;
  metadata.reflection = CMsgWatchGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgCancelWatchGame::CMsgCancelWatchGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgCancelWatchGame)
}

void CMsgCancelWatchGame::InitAsDefaultInstance() {
}

CMsgCancelWatchGame::CMsgCancelWatchGame(const CMsgCancelWatchGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgCancelWatchGame)
}

void CMsgCancelWatchGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCancelWatchGame::~CMsgCancelWatchGame() {
  // @@protoc_insertion_point(destructor:CMsgCancelWatchGame)
  SharedDtor();
}

void CMsgCancelWatchGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCancelWatchGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCancelWatchGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCancelWatchGame_descriptor_;
}

const CMsgCancelWatchGame& CMsgCancelWatchGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgCancelWatchGame* CMsgCancelWatchGame::default_instance_ = NULL;

CMsgCancelWatchGame* CMsgCancelWatchGame::New() const {
  return new CMsgCancelWatchGame;
}

void CMsgCancelWatchGame::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCancelWatchGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgCancelWatchGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgCancelWatchGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgCancelWatchGame)
  return false;
#undef DO_
}

void CMsgCancelWatchGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgCancelWatchGame)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgCancelWatchGame)
}

::google::protobuf::uint8* CMsgCancelWatchGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCancelWatchGame)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCancelWatchGame)
  return target;
}

int CMsgCancelWatchGame::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCancelWatchGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCancelWatchGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCancelWatchGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCancelWatchGame::MergeFrom(const CMsgCancelWatchGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCancelWatchGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCancelWatchGame::CopyFrom(const CMsgCancelWatchGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCancelWatchGame::IsInitialized() const {

  return true;
}

void CMsgCancelWatchGame::Swap(CMsgCancelWatchGame* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCancelWatchGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCancelWatchGame_descriptor_;
  metadata.reflection = CMsgCancelWatchGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWatchGameResponse_WatchGameResult_descriptor_;
}
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::READY;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::GAMESERVERNOTFOUND;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::UNAVAILABLE;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::CANCELLED;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::INCOMPATIBLEVERSION;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::MISSINGLEAGUESUBSCRIPTION;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::LOBBYNOTFOUND;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MIN;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MAX;
const int CMsgWatchGameResponse::WatchGameResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgWatchGameResponse::kWatchGameResultFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPublicAddrFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPrivateAddrFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPortFieldNumber;
const int CMsgWatchGameResponse::kGameServerSteamidFieldNumber;
const int CMsgWatchGameResponse::kWatchServerSteamidFieldNumber;
const int CMsgWatchGameResponse::kWatchTvUniqueSecretCodeFieldNumber;
#endif  // !_MSC_VER

CMsgWatchGameResponse::CMsgWatchGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgWatchGameResponse)
}

void CMsgWatchGameResponse::InitAsDefaultInstance() {
}

CMsgWatchGameResponse::CMsgWatchGameResponse(const CMsgWatchGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgWatchGameResponse)
}

void CMsgWatchGameResponse::SharedCtor() {
  _cached_size_ = 0;
  watch_game_result_ = 0;
  source_tv_public_addr_ = 0u;
  source_tv_private_addr_ = 0u;
  source_tv_port_ = 0u;
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  watch_tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgWatchGameResponse::~CMsgWatchGameResponse() {
  // @@protoc_insertion_point(destructor:CMsgWatchGameResponse)
  SharedDtor();
}

void CMsgWatchGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgWatchGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWatchGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgWatchGameResponse_descriptor_;
}

const CMsgWatchGameResponse& CMsgWatchGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgWatchGameResponse* CMsgWatchGameResponse::default_instance_ = NULL;

CMsgWatchGameResponse* CMsgWatchGameResponse::New() const {
  return new CMsgWatchGameResponse;
}

void CMsgWatchGameResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgWatchGameResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(watch_game_result_, watch_tv_unique_secret_code_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgWatchGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgWatchGameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgWatchGameResponse_WatchGameResult_IsValid(value)) {
            set_watch_game_result(static_cast< ::CMsgWatchGameResponse_WatchGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source_tv_public_addr;
        break;
      }

      // optional uint32 source_tv_public_addr = 2;
      case 2: {
        if (tag == 16) {
         parse_source_tv_public_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
          set_has_source_tv_public_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_tv_private_addr;
        break;
      }

      // optional uint32 source_tv_private_addr = 3;
      case 3: {
        if (tag == 24) {
         parse_source_tv_private_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
          set_has_source_tv_private_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_source_tv_port;
        break;
      }

      // optional uint32 source_tv_port = 4;
      case 4: {
        if (tag == 32) {
         parse_source_tv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
          set_has_source_tv_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_game_server_steamid;
        break;
      }

      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (tag == 41) {
         parse_game_server_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steamid_)));
          set_has_game_server_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_watch_server_steamid;
        break;
      }

      // optional fixed64 watch_server_steamid = 6;
      case 6: {
        if (tag == 49) {
         parse_watch_server_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_server_steamid_)));
          set_has_watch_server_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_watch_tv_unique_secret_code;
        break;
      }

      // optional fixed64 watch_tv_unique_secret_code = 7;
      case 7: {
        if (tag == 57) {
         parse_watch_tv_unique_secret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_tv_unique_secret_code_)));
          set_has_watch_tv_unique_secret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgWatchGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgWatchGameResponse)
  return false;
#undef DO_
}

void CMsgWatchGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgWatchGameResponse)
  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (has_watch_game_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->watch_game_result(), output);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (has_source_tv_public_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_public_addr(), output);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (has_source_tv_private_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_private_addr(), output);
  }

  // optional uint32 source_tv_port = 4;
  if (has_source_tv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_tv_port(), output);
  }

  // optional fixed64 game_server_steamid = 5;
  if (has_game_server_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steamid(), output);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (has_watch_server_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->watch_server_steamid(), output);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (has_watch_tv_unique_secret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->watch_tv_unique_secret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgWatchGameResponse)
}

::google::protobuf::uint8* CMsgWatchGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWatchGameResponse)
  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (has_watch_game_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->watch_game_result(), target);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (has_source_tv_public_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (has_source_tv_private_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 4;
  if (has_source_tv_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_tv_port(), target);
  }

  // optional fixed64 game_server_steamid = 5;
  if (has_game_server_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steamid(), target);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (has_watch_server_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->watch_server_steamid(), target);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (has_watch_tv_unique_secret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->watch_tv_unique_secret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWatchGameResponse)
  return target;
}

int CMsgWatchGameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
    if (has_watch_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_game_result());
    }

    // optional uint32 source_tv_public_addr = 2;
    if (has_source_tv_public_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 3;
    if (has_source_tv_private_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }

    // optional uint32 source_tv_port = 4;
    if (has_source_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }

    // optional fixed64 game_server_steamid = 5;
    if (has_game_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 6;
    if (has_watch_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;
    if (has_watch_tv_unique_secret_code()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWatchGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgWatchGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgWatchGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgWatchGameResponse::MergeFrom(const CMsgWatchGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_watch_game_result()) {
      set_watch_game_result(from.watch_game_result());
    }
    if (from.has_source_tv_public_addr()) {
      set_source_tv_public_addr(from.source_tv_public_addr());
    }
    if (from.has_source_tv_private_addr()) {
      set_source_tv_private_addr(from.source_tv_private_addr());
    }
    if (from.has_source_tv_port()) {
      set_source_tv_port(from.source_tv_port());
    }
    if (from.has_game_server_steamid()) {
      set_game_server_steamid(from.game_server_steamid());
    }
    if (from.has_watch_server_steamid()) {
      set_watch_server_steamid(from.watch_server_steamid());
    }
    if (from.has_watch_tv_unique_secret_code()) {
      set_watch_tv_unique_secret_code(from.watch_tv_unique_secret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgWatchGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGameResponse::CopyFrom(const CMsgWatchGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGameResponse::IsInitialized() const {

  return true;
}

void CMsgWatchGameResponse::Swap(CMsgWatchGameResponse* other) {
  if (other != this) {
    std::swap(watch_game_result_, other->watch_game_result_);
    std::swap(source_tv_public_addr_, other->source_tv_public_addr_);
    std::swap(source_tv_private_addr_, other->source_tv_private_addr_);
    std::swap(source_tv_port_, other->source_tv_port_);
    std::swap(game_server_steamid_, other->game_server_steamid_);
    std::swap(watch_server_steamid_, other->watch_server_steamid_);
    std::swap(watch_tv_unique_secret_code_, other->watch_tv_unique_secret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgWatchGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgWatchGameResponse_descriptor_;
  metadata.reflection = CMsgWatchGameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPartyLeaderWatchGamePrompt::kGameServerSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPartyLeaderWatchGamePrompt)
}

void CMsgPartyLeaderWatchGamePrompt::InitAsDefaultInstance() {
}

CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyLeaderWatchGamePrompt)
}

void CMsgPartyLeaderWatchGamePrompt::SharedCtor() {
  _cached_size_ = 0;
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPartyLeaderWatchGamePrompt::~CMsgPartyLeaderWatchGamePrompt() {
  // @@protoc_insertion_point(destructor:CMsgPartyLeaderWatchGamePrompt)
  SharedDtor();
}

void CMsgPartyLeaderWatchGamePrompt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPartyLeaderWatchGamePrompt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyLeaderWatchGamePrompt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPartyLeaderWatchGamePrompt_descriptor_;
}

const CMsgPartyLeaderWatchGamePrompt& CMsgPartyLeaderWatchGamePrompt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CMsgPartyLeaderWatchGamePrompt* CMsgPartyLeaderWatchGamePrompt::default_instance_ = NULL;

CMsgPartyLeaderWatchGamePrompt* CMsgPartyLeaderWatchGamePrompt::New() const {
  return new CMsgPartyLeaderWatchGamePrompt;
}

void CMsgPartyLeaderWatchGamePrompt::Clear() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPartyLeaderWatchGamePrompt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPartyLeaderWatchGamePrompt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steamid_)));
          set_has_game_server_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPartyLeaderWatchGamePrompt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPartyLeaderWatchGamePrompt)
  return false;
#undef DO_
}

void CMsgPartyLeaderWatchGamePrompt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPartyLeaderWatchGamePrompt)
  // optional fixed64 game_server_steamid = 5;
  if (has_game_server_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPartyLeaderWatchGamePrompt)
}

::google::protobuf::uint8* CMsgPartyLeaderWatchGamePrompt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyLeaderWatchGamePrompt)
  // optional fixed64 game_server_steamid = 5;
  if (has_game_server_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyLeaderWatchGamePrompt)
  return target;
}

int CMsgPartyLeaderWatchGamePrompt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 game_server_steamid = 5;
    if (has_game_server_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPartyLeaderWatchGamePrompt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPartyLeaderWatchGamePrompt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_server_steamid()) {
      set_game_server_steamid(from.game_server_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyLeaderWatchGamePrompt::IsInitialized() const {

  return true;
}

void CMsgPartyLeaderWatchGamePrompt::Swap(CMsgPartyLeaderWatchGamePrompt* other) {
  if (other != this) {
    std::swap(game_server_steamid_, other->game_server_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPartyLeaderWatchGamePrompt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPartyLeaderWatchGamePrompt_descriptor_;
  metadata.reflection = CMsgPartyLeaderWatchGamePrompt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTABroadcasterInfo::kAccountIdFieldNumber;
const int CDOTABroadcasterInfo::kServerSteamIdFieldNumber;
const int CDOTABroadcasterInfo::kLiveFieldNumber;
const int CDOTABroadcasterInfo::kTeamNameRadiantFieldNumber;
const int CDOTABroadcasterInfo::kTeamNameDireFieldNumber;
const int CDOTABroadcasterInfo::kStageNameFieldNumber;
const int CDOTABroadcasterInfo::kSeriesGameFieldNumber;
const int CDOTABroadcasterInfo::kSeriesTypeFieldNumber;
const int CDOTABroadcasterInfo::kUpcomingBroadcastTimestampFieldNumber;
const int CDOTABroadcasterInfo::kAllowLiveVideoFieldNumber;
#endif  // !_MSC_VER

CDOTABroadcasterInfo::CDOTABroadcasterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTABroadcasterInfo)
}

void CDOTABroadcasterInfo::InitAsDefaultInstance() {
}

CDOTABroadcasterInfo::CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcasterInfo)
}

void CDOTABroadcasterInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  live_ = false;
  team_name_radiant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_game_ = 0u;
  series_type_ = 0u;
  upcoming_broadcast_timestamp_ = 0u;
  allow_live_video_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTABroadcasterInfo::~CDOTABroadcasterInfo() {
  // @@protoc_insertion_point(destructor:CDOTABroadcasterInfo)
  SharedDtor();
}

void CDOTABroadcasterInfo::SharedDtor() {
  if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_radiant_;
  }
  if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_dire_;
  }
  if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stage_name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTABroadcasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcasterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTABroadcasterInfo_descriptor_;
}

const CDOTABroadcasterInfo& CDOTABroadcasterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  return *default_instance_;
}

CDOTABroadcasterInfo* CDOTABroadcasterInfo::default_instance_ = NULL;

CDOTABroadcasterInfo* CDOTABroadcasterInfo::New() const {
  return new CDOTABroadcasterInfo;
}

void CDOTABroadcasterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDOTABroadcasterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, live_);
    ZR_(series_game_, series_type_);
    server_steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_team_name_radiant()) {
      if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_radiant_->clear();
      }
    }
    if (has_team_name_dire()) {
      if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        team_name_dire_->clear();
      }
    }
    if (has_stage_name()) {
      if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stage_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    upcoming_broadcast_timestamp_ = 0u;
    allow_live_video_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTABroadcasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTABroadcasterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_server_steam_id;
        break;
      }

      // optional fixed64 server_steam_id = 2;
      case 2: {
        if (tag == 17) {
         parse_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_live;
        break;
      }

      // optional bool live = 3;
      case 3: {
        if (tag == 24) {
         parse_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &live_)));
          set_has_live();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_team_name_radiant;
        break;
      }

      // optional string team_name_radiant = 4;
      case 4: {
        if (tag == 34) {
         parse_team_name_radiant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_radiant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_radiant().data(), this->team_name_radiant().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name_radiant");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_name_dire;
        break;
      }

      // optional string team_name_dire = 5;
      case 5: {
        if (tag == 42) {
         parse_team_name_dire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_dire()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_dire().data(), this->team_name_dire().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "team_name_dire");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stage_name;
        break;
      }

      // optional string stage_name = 6;
      case 6: {
        if (tag == 50) {
         parse_stage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage_name().data(), this->stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_series_game;
        break;
      }

      // optional uint32 series_game = 7;
      case 7: {
        if (tag == 56) {
         parse_series_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
          set_has_series_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_series_type;
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (tag == 64) {
         parse_series_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
          set_has_series_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_upcoming_broadcast_timestamp;
        break;
      }

      // optional uint32 upcoming_broadcast_timestamp = 9;
      case 9: {
        if (tag == 72) {
         parse_upcoming_broadcast_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upcoming_broadcast_timestamp_)));
          set_has_upcoming_broadcast_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_allow_live_video;
        break;
      }

      // optional bool allow_live_video = 10;
      case 10: {
        if (tag == 80) {
         parse_allow_live_video:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_live_video_)));
          set_has_allow_live_video();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTABroadcasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTABroadcasterInfo)
  return false;
#undef DO_
}

void CDOTABroadcasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTABroadcasterInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed64 server_steam_id = 2;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->server_steam_id(), output);
  }

  // optional bool live = 3;
  if (has_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->live(), output);
  }

  // optional string team_name_radiant = 4;
  if (has_team_name_radiant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_radiant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name_radiant(), output);
  }

  // optional string team_name_dire = 5;
  if (has_team_name_dire()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_dire");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_name_dire(), output);
  }

  // optional string stage_name = 6;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stage_name(), output);
  }

  // optional uint32 series_game = 7;
  if (has_series_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_game(), output);
  }

  // optional uint32 series_type = 8;
  if (has_series_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (has_upcoming_broadcast_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->upcoming_broadcast_timestamp(), output);
  }

  // optional bool allow_live_video = 10;
  if (has_allow_live_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_live_video(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTABroadcasterInfo)
}

::google::protobuf::uint8* CDOTABroadcasterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcasterInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->server_steam_id(), target);
  }

  // optional bool live = 3;
  if (has_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->live(), target);
  }

  // optional string team_name_radiant = 4;
  if (has_team_name_radiant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_radiant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name_radiant(), target);
  }

  // optional string team_name_dire = 5;
  if (has_team_name_dire()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "team_name_dire");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name_dire(), target);
  }

  // optional string stage_name = 6;
  if (has_stage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stage_name(), target);
  }

  // optional uint32 series_game = 7;
  if (has_series_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_game(), target);
  }

  // optional uint32 series_type = 8;
  if (has_series_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (has_upcoming_broadcast_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->upcoming_broadcast_timestamp(), target);
  }

  // optional bool allow_live_video = 10;
  if (has_allow_live_video()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_live_video(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcasterInfo)
  return target;
}

int CDOTABroadcasterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed64 server_steam_id = 2;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool live = 3;
    if (has_live()) {
      total_size += 1 + 1;
    }

    // optional string team_name_radiant = 4;
    if (has_team_name_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_radiant());
    }

    // optional string team_name_dire = 5;
    if (has_team_name_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_dire());
    }

    // optional string stage_name = 6;
    if (has_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_name());
    }

    // optional uint32 series_game = 7;
    if (has_series_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

    // optional uint32 series_type = 8;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 upcoming_broadcast_timestamp = 9;
    if (has_upcoming_broadcast_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upcoming_broadcast_timestamp());
    }

    // optional bool allow_live_video = 10;
    if (has_allow_live_video()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTABroadcasterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTABroadcasterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTABroadcasterInfo::MergeFrom(const CDOTABroadcasterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_live()) {
      set_live(from.live());
    }
    if (from.has_team_name_radiant()) {
      set_team_name_radiant(from.team_name_radiant());
    }
    if (from.has_team_name_dire()) {
      set_team_name_dire(from.team_name_dire());
    }
    if (from.has_stage_name()) {
      set_stage_name(from.stage_name());
    }
    if (from.has_series_game()) {
      set_series_game(from.series_game());
    }
    if (from.has_series_type()) {
      set_series_type(from.series_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_upcoming_broadcast_timestamp()) {
      set_upcoming_broadcast_timestamp(from.upcoming_broadcast_timestamp());
    }
    if (from.has_allow_live_video()) {
      set_allow_live_video(from.allow_live_video());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTABroadcasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcasterInfo::CopyFrom(const CDOTABroadcasterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcasterInfo::IsInitialized() const {

  return true;
}

void CDOTABroadcasterInfo::Swap(CDOTABroadcasterInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(live_, other->live_);
    std::swap(team_name_radiant_, other->team_name_radiant_);
    std::swap(team_name_dire_, other->team_name_dire_);
    std::swap(stage_name_, other->stage_name_);
    std::swap(series_game_, other->series_game_);
    std::swap(series_type_, other->series_type_);
    std::swap(upcoming_broadcast_timestamp_, other->upcoming_broadcast_timestamp_);
    std::swap(allow_live_video_, other->allow_live_video_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTABroadcasterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTABroadcasterInfo_descriptor_;
  metadata.reflection = CDOTABroadcasterInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
