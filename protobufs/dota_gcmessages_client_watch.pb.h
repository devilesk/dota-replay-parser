// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

class CSourceTVGameSmall;
class CSourceTVGameSmall_Player;
class CMsgClientToGCFindTopSourceTVGames;
class CMsgGCToClientFindTopSourceTVGamesResponse;
class CMsgGCToClientTopWeekendTourneyGames;
class CMsgClientToGCTopMatchesRequest;
class CMsgClientToGCTopLeagueMatchesRequest;
class CMsgClientToGCTopFriendMatchesRequest;
class CMsgClientToGCMatchesMinimalRequest;
class CMsgClientToGCMatchesMinimalResponse;
class CMsgGCToClientTopLeagueMatchesResponse;
class CMsgGCToClientTopFriendMatchesResponse;
class CMsgClientToGCFindTopMatches;
class CMsgGCToClientFindTopLeagueMatchesResponse;
class CMsgSpectateFriendGame;
class CMsgSpectateFriendGameResponse;
class CMsgDOTAMatchMinimal;
class CMsgDOTAMatchMinimal_Player;
class CMsgDOTAMatchMinimal_Tourney;
class CDOTAReplayDownloadInfo;
class CDOTAReplayDownloadInfo_Highlight;
class CMsgWatchGame;
class CMsgCancelWatchGame;
class CMsgWatchGameResponse;
class CMsgPartyLeaderWatchGamePrompt;
class CDOTABroadcasterInfo;

enum CMsgWatchGameResponse_WatchGameResult {
  CMsgWatchGameResponse_WatchGameResult_PENDING = 0,
  CMsgWatchGameResponse_WatchGameResult_READY = 1,
  CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND = 2,
  CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE = 3,
  CMsgWatchGameResponse_WatchGameResult_CANCELLED = 4,
  CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION = 5,
  CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION = 6,
  CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND = 7
};
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value);
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN = CMsgWatchGameResponse_WatchGameResult_PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX = CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
const int CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE = CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor();
inline const ::std::string& CMsgWatchGameResponse_WatchGameResult_Name(CMsgWatchGameResponse_WatchGameResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), value);
}
inline bool CMsgWatchGameResponse_WatchGameResult_Parse(
    const ::std::string& name, CMsgWatchGameResponse_WatchGameResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgWatchGameResponse_WatchGameResult>(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), name, value);
}
// ===================================================================

class CSourceTVGameSmall_Player : public ::google::protobuf::Message {
 public:
  CSourceTVGameSmall_Player();
  virtual ~CSourceTVGameSmall_Player();

  CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from);

  inline CSourceTVGameSmall_Player& operator=(const CSourceTVGameSmall_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSourceTVGameSmall_Player& default_instance();

  void Swap(CSourceTVGameSmall_Player* other);

  // implements Message ----------------------------------------------

  CSourceTVGameSmall_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSourceTVGameSmall_Player& from);
  void MergeFrom(const CSourceTVGameSmall_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSourceTVGameSmall.Player)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CSourceTVGameSmall_Player* default_instance_;
};
// -------------------------------------------------------------------

class CSourceTVGameSmall : public ::google::protobuf::Message {
 public:
  CSourceTVGameSmall();
  virtual ~CSourceTVGameSmall();

  CSourceTVGameSmall(const CSourceTVGameSmall& from);

  inline CSourceTVGameSmall& operator=(const CSourceTVGameSmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSourceTVGameSmall& default_instance();

  void Swap(CSourceTVGameSmall* other);

  // implements Message ----------------------------------------------

  CSourceTVGameSmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSourceTVGameSmall& from);
  void MergeFrom(const CSourceTVGameSmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CSourceTVGameSmall_Player Player;

  // accessors -------------------------------------------------------

  // optional uint32 activate_time = 1;
  inline bool has_activate_time() const;
  inline void clear_activate_time();
  static const int kActivateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 activate_time() const;
  inline void set_activate_time(::google::protobuf::uint32 value);

  // optional uint32 deactivate_time = 2;
  inline bool has_deactivate_time() const;
  inline void clear_deactivate_time();
  static const int kDeactivateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 deactivate_time() const;
  inline void set_deactivate_time(::google::protobuf::uint32 value);

  // optional uint64 server_steam_id = 3;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 5;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 5;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 6;
  inline bool has_lobby_type() const;
  inline void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 lobby_type() const;
  inline void set_lobby_type(::google::protobuf::uint32 value);

  // optional int32 game_time = 7;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 7;
  inline ::google::protobuf::int32 game_time() const;
  inline void set_game_time(::google::protobuf::int32 value);

  // optional uint32 delay = 8;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 8;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint32 spectators = 9;
  inline bool has_spectators() const;
  inline void clear_spectators();
  static const int kSpectatorsFieldNumber = 9;
  inline ::google::protobuf::uint32 spectators() const;
  inline void set_spectators(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 10;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 10;
  inline ::google::protobuf::uint32 game_mode() const;
  inline void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 average_mmr = 11;
  inline bool has_average_mmr() const;
  inline void clear_average_mmr();
  static const int kAverageMmrFieldNumber = 11;
  inline ::google::protobuf::uint32 average_mmr() const;
  inline void set_average_mmr(::google::protobuf::uint32 value);

  // optional string team_name_radiant = 15;
  inline bool has_team_name_radiant() const;
  inline void clear_team_name_radiant();
  static const int kTeamNameRadiantFieldNumber = 15;
  inline const ::std::string& team_name_radiant() const;
  inline void set_team_name_radiant(const ::std::string& value);
  inline void set_team_name_radiant(const char* value);
  inline void set_team_name_radiant(const char* value, size_t size);
  inline ::std::string* mutable_team_name_radiant();
  inline ::std::string* release_team_name_radiant();
  inline void set_allocated_team_name_radiant(::std::string* team_name_radiant);

  // optional string team_name_dire = 16;
  inline bool has_team_name_dire() const;
  inline void clear_team_name_dire();
  static const int kTeamNameDireFieldNumber = 16;
  inline const ::std::string& team_name_dire() const;
  inline void set_team_name_dire(const ::std::string& value);
  inline void set_team_name_dire(const char* value);
  inline void set_team_name_dire(const char* value, size_t size);
  inline ::std::string* mutable_team_name_dire();
  inline ::std::string* release_team_name_dire();
  inline void set_allocated_team_name_dire(::std::string* team_name_dire);

  // optional fixed64 team_logo_radiant = 24;
  inline bool has_team_logo_radiant() const;
  inline void clear_team_logo_radiant();
  static const int kTeamLogoRadiantFieldNumber = 24;
  inline ::google::protobuf::uint64 team_logo_radiant() const;
  inline void set_team_logo_radiant(::google::protobuf::uint64 value);

  // optional fixed64 team_logo_dire = 25;
  inline bool has_team_logo_dire() const;
  inline void clear_team_logo_dire();
  static const int kTeamLogoDireFieldNumber = 25;
  inline ::google::protobuf::uint64 team_logo_dire() const;
  inline void set_team_logo_dire(::google::protobuf::uint64 value);

  // optional uint32 sort_score = 17;
  inline bool has_sort_score() const;
  inline void clear_sort_score();
  static const int kSortScoreFieldNumber = 17;
  inline ::google::protobuf::uint32 sort_score() const;
  inline void set_sort_score(::google::protobuf::uint32 value);

  // optional float last_update_time = 18;
  inline bool has_last_update_time() const;
  inline void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 18;
  inline float last_update_time() const;
  inline void set_last_update_time(float value);

  // optional int32 radiant_lead = 19;
  inline bool has_radiant_lead() const;
  inline void clear_radiant_lead();
  static const int kRadiantLeadFieldNumber = 19;
  inline ::google::protobuf::int32 radiant_lead() const;
  inline void set_radiant_lead(::google::protobuf::int32 value);

  // optional uint32 radiant_score = 20;
  inline bool has_radiant_score() const;
  inline void clear_radiant_score();
  static const int kRadiantScoreFieldNumber = 20;
  inline ::google::protobuf::uint32 radiant_score() const;
  inline void set_radiant_score(::google::protobuf::uint32 value);

  // optional uint32 dire_score = 21;
  inline bool has_dire_score() const;
  inline void clear_dire_score();
  static const int kDireScoreFieldNumber = 21;
  inline ::google::protobuf::uint32 dire_score() const;
  inline void set_dire_score(::google::protobuf::uint32 value);

  // repeated .CSourceTVGameSmall.Player players = 22;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 22;
  inline const ::CSourceTVGameSmall_Player& players(int index) const;
  inline ::CSourceTVGameSmall_Player* mutable_players(int index);
  inline ::CSourceTVGameSmall_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall_Player >*
      mutable_players();

  // optional fixed32 building_state = 23;
  inline bool has_building_state() const;
  inline void clear_building_state();
  static const int kBuildingStateFieldNumber = 23;
  inline ::google::protobuf::uint32 building_state() const;
  inline void set_building_state(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_tournament_id = 26;
  inline bool has_weekend_tourney_tournament_id() const;
  inline void clear_weekend_tourney_tournament_id();
  static const int kWeekendTourneyTournamentIdFieldNumber = 26;
  inline ::google::protobuf::uint32 weekend_tourney_tournament_id() const;
  inline void set_weekend_tourney_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division = 27;
  inline bool has_weekend_tourney_division() const;
  inline void clear_weekend_tourney_division();
  static const int kWeekendTourneyDivisionFieldNumber = 27;
  inline ::google::protobuf::uint32 weekend_tourney_division() const;
  inline void set_weekend_tourney_division(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 28;
  inline bool has_weekend_tourney_skill_level() const;
  inline void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 28;
  inline ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  inline void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_bracket_round = 29;
  inline bool has_weekend_tourney_bracket_round() const;
  inline void clear_weekend_tourney_bracket_round();
  static const int kWeekendTourneyBracketRoundFieldNumber = 29;
  inline ::google::protobuf::uint32 weekend_tourney_bracket_round() const;
  inline void set_weekend_tourney_bracket_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSourceTVGameSmall)
 private:
  inline void set_has_activate_time();
  inline void clear_has_activate_time();
  inline void set_has_deactivate_time();
  inline void clear_has_deactivate_time();
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_lobby_type();
  inline void clear_has_lobby_type();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_spectators();
  inline void clear_has_spectators();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_average_mmr();
  inline void clear_has_average_mmr();
  inline void set_has_team_name_radiant();
  inline void clear_has_team_name_radiant();
  inline void set_has_team_name_dire();
  inline void clear_has_team_name_dire();
  inline void set_has_team_logo_radiant();
  inline void clear_has_team_logo_radiant();
  inline void set_has_team_logo_dire();
  inline void clear_has_team_logo_dire();
  inline void set_has_sort_score();
  inline void clear_has_sort_score();
  inline void set_has_last_update_time();
  inline void clear_has_last_update_time();
  inline void set_has_radiant_lead();
  inline void clear_has_radiant_lead();
  inline void set_has_radiant_score();
  inline void clear_has_radiant_score();
  inline void set_has_dire_score();
  inline void clear_has_dire_score();
  inline void set_has_building_state();
  inline void clear_has_building_state();
  inline void set_has_weekend_tourney_tournament_id();
  inline void clear_has_weekend_tourney_tournament_id();
  inline void set_has_weekend_tourney_division();
  inline void clear_has_weekend_tourney_division();
  inline void set_has_weekend_tourney_skill_level();
  inline void clear_has_weekend_tourney_skill_level();
  inline void set_has_weekend_tourney_bracket_round();
  inline void clear_has_weekend_tourney_bracket_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 activate_time_;
  ::google::protobuf::uint32 deactivate_time_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 spectators_;
  ::google::protobuf::uint32 game_mode_;
  ::std::string* team_name_radiant_;
  ::std::string* team_name_dire_;
  ::google::protobuf::uint32 average_mmr_;
  ::google::protobuf::uint32 sort_score_;
  ::google::protobuf::uint64 team_logo_radiant_;
  ::google::protobuf::uint64 team_logo_dire_;
  float last_update_time_;
  ::google::protobuf::int32 radiant_lead_;
  ::google::protobuf::uint32 radiant_score_;
  ::google::protobuf::uint32 dire_score_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall_Player > players_;
  ::google::protobuf::uint32 building_state_;
  ::google::protobuf::uint32 weekend_tourney_tournament_id_;
  ::google::protobuf::uint32 weekend_tourney_division_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  ::google::protobuf::uint32 weekend_tourney_bracket_round_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CSourceTVGameSmall* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopSourceTVGames : public ::google::protobuf::Message {
 public:
  CMsgClientToGCFindTopSourceTVGames();
  virtual ~CMsgClientToGCFindTopSourceTVGames();

  CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from);

  inline CMsgClientToGCFindTopSourceTVGames& operator=(const CMsgClientToGCFindTopSourceTVGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCFindTopSourceTVGames& default_instance();

  void Swap(CMsgClientToGCFindTopSourceTVGames* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCFindTopSourceTVGames* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  void MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  inline void set_allocated_search_key(::std::string* search_key);

  // optional uint32 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 start_game = 4;
  inline bool has_start_game() const;
  inline void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  inline ::google::protobuf::uint32 start_game() const;
  inline void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 game_list_index = 5;
  inline bool has_game_list_index() const;
  inline void clear_game_list_index();
  static const int kGameListIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 game_list_index() const;
  inline void set_game_list_index(::google::protobuf::uint32 value);

  // repeated uint64 lobby_ids = 6;
  inline int lobby_ids_size() const;
  inline void clear_lobby_ids();
  static const int kLobbyIdsFieldNumber = 6;
  inline ::google::protobuf::uint64 lobby_ids(int index) const;
  inline void set_lobby_ids(int index, ::google::protobuf::uint64 value);
  inline void add_lobby_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lobby_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lobby_ids();

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFindTopSourceTVGames)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_start_game();
  inline void clear_has_start_game();
  inline void set_has_game_list_index();
  inline void clear_has_game_list_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* search_key_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 game_list_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lobby_ids_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCFindTopSourceTVGames* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopSourceTVGamesResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToClientFindTopSourceTVGamesResponse();
  virtual ~CMsgGCToClientFindTopSourceTVGamesResponse();

  CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from);

  inline CMsgGCToClientFindTopSourceTVGamesResponse& operator=(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientFindTopSourceTVGamesResponse& default_instance();

  void Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientFindTopSourceTVGamesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  void MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string search_key = 1;
  inline bool has_search_key() const;
  inline void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& search_key() const;
  inline void set_search_key(const ::std::string& value);
  inline void set_search_key(const char* value);
  inline void set_search_key(const char* value, size_t size);
  inline ::std::string* mutable_search_key();
  inline ::std::string* release_search_key();
  inline void set_allocated_search_key(::std::string* search_key);

  // optional uint32 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 start_game = 4;
  inline bool has_start_game() const;
  inline void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  inline ::google::protobuf::uint32 start_game() const;
  inline void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 num_games = 5;
  inline bool has_num_games() const;
  inline void clear_num_games();
  static const int kNumGamesFieldNumber = 5;
  inline ::google::protobuf::uint32 num_games() const;
  inline void set_num_games(::google::protobuf::uint32 value);

  // optional uint32 game_list_index = 6;
  inline bool has_game_list_index() const;
  inline void clear_game_list_index();
  static const int kGameListIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 game_list_index() const;
  inline void set_game_list_index(::google::protobuf::uint32 value);

  // repeated .CSourceTVGameSmall game_list = 7;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 7;
  inline const ::CSourceTVGameSmall& game_list(int index) const;
  inline ::CSourceTVGameSmall* mutable_game_list(int index);
  inline ::CSourceTVGameSmall* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >*
      mutable_game_list();

  // optional bool specific_games = 8;
  inline bool has_specific_games() const;
  inline void clear_specific_games();
  static const int kSpecificGamesFieldNumber = 8;
  inline bool specific_games() const;
  inline void set_specific_games(bool value);

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFindTopSourceTVGamesResponse)
 private:
  inline void set_has_search_key();
  inline void clear_has_search_key();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_start_game();
  inline void clear_has_start_game();
  inline void set_has_num_games();
  inline void clear_has_num_games();
  inline void set_has_game_list_index();
  inline void clear_has_game_list_index();
  inline void set_has_specific_games();
  inline void clear_has_specific_games();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* search_key_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 num_games_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall > game_list_;
  ::google::protobuf::uint32 game_list_index_;
  bool specific_games_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientFindTopSourceTVGamesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopWeekendTourneyGames : public ::google::protobuf::Message {
 public:
  CMsgGCToClientTopWeekendTourneyGames();
  virtual ~CMsgGCToClientTopWeekendTourneyGames();

  CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from);

  inline CMsgGCToClientTopWeekendTourneyGames& operator=(const CMsgGCToClientTopWeekendTourneyGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientTopWeekendTourneyGames& default_instance();

  void Swap(CMsgGCToClientTopWeekendTourneyGames* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientTopWeekendTourneyGames* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  void MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CSourceTVGameSmall live_games = 1;
  inline int live_games_size() const;
  inline void clear_live_games();
  static const int kLiveGamesFieldNumber = 1;
  inline const ::CSourceTVGameSmall& live_games(int index) const;
  inline ::CSourceTVGameSmall* mutable_live_games(int index);
  inline ::CSourceTVGameSmall* add_live_games();
  inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >&
      live_games() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >*
      mutable_live_games();

  // @@protoc_insertion_point(class_scope:CMsgGCToClientTopWeekendTourneyGames)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall > live_games_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientTopWeekendTourneyGames* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopMatchesRequest : public ::google::protobuf::Message {
 public:
  CMsgClientToGCTopMatchesRequest();
  virtual ~CMsgClientToGCTopMatchesRequest();

  CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from);

  inline CMsgClientToGCTopMatchesRequest& operator=(const CMsgClientToGCTopMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCTopMatchesRequest& default_instance();

  void Swap(CMsgClientToGCTopMatchesRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCTopMatchesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCTopMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopMatchesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 player_account_id = 2;
  inline bool has_player_account_id() const;
  inline void clear_player_account_id();
  static const int kPlayerAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_account_id() const;
  inline void set_player_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCTopMatchesRequest)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_player_account_id();
  inline void clear_has_player_account_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 player_account_id_;
  ::google::protobuf::uint32 team_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCTopMatchesRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopLeagueMatchesRequest : public ::google::protobuf::Message {
 public:
  CMsgClientToGCTopLeagueMatchesRequest();
  virtual ~CMsgClientToGCTopLeagueMatchesRequest();

  CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from);

  inline CMsgClientToGCTopLeagueMatchesRequest& operator=(const CMsgClientToGCTopLeagueMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCTopLeagueMatchesRequest& default_instance();

  void Swap(CMsgClientToGCTopLeagueMatchesRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCTopLeagueMatchesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientToGCTopLeagueMatchesRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCTopLeagueMatchesRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopFriendMatchesRequest : public ::google::protobuf::Message {
 public:
  CMsgClientToGCTopFriendMatchesRequest();
  virtual ~CMsgClientToGCTopFriendMatchesRequest();

  CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from);

  inline CMsgClientToGCTopFriendMatchesRequest& operator=(const CMsgClientToGCTopFriendMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCTopFriendMatchesRequest& default_instance();

  void Swap(CMsgClientToGCTopFriendMatchesRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCTopFriendMatchesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientToGCTopFriendMatchesRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCTopFriendMatchesRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalRequest : public ::google::protobuf::Message {
 public:
  CMsgClientToGCMatchesMinimalRequest();
  virtual ~CMsgClientToGCMatchesMinimalRequest();

  CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from);

  inline CMsgClientToGCMatchesMinimalRequest& operator=(const CMsgClientToGCMatchesMinimalRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCMatchesMinimalRequest& default_instance();

  void Swap(CMsgClientToGCMatchesMinimalRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCMatchesMinimalRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  void MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 match_ids = 1;
  inline int match_ids_size() const;
  inline void clear_match_ids();
  static const int kMatchIdsFieldNumber = 1;
  inline ::google::protobuf::uint64 match_ids(int index) const;
  inline void set_match_ids(int index, ::google::protobuf::uint64 value);
  inline void add_match_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      match_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_match_ids();

  // @@protoc_insertion_point(class_scope:CMsgClientToGCMatchesMinimalRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > match_ids_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCMatchesMinimalRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalResponse : public ::google::protobuf::Message {
 public:
  CMsgClientToGCMatchesMinimalResponse();
  virtual ~CMsgClientToGCMatchesMinimalResponse();

  CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from);

  inline CMsgClientToGCMatchesMinimalResponse& operator=(const CMsgClientToGCMatchesMinimalResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCMatchesMinimalResponse& default_instance();

  void Swap(CMsgClientToGCMatchesMinimalResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCMatchesMinimalResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  void MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 1;
  inline const ::CMsgDOTAMatchMinimal& matches(int index) const;
  inline ::CMsgDOTAMatchMinimal* mutable_matches(int index);
  inline ::CMsgDOTAMatchMinimal* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_matches();

  // optional bool last_match = 2;
  inline bool has_last_match() const;
  inline void clear_last_match();
  static const int kLastMatchFieldNumber = 2;
  inline bool last_match() const;
  inline void set_last_match(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCMatchesMinimalResponse)
 private:
  inline void set_has_last_match();
  inline void clear_has_last_match();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal > matches_;
  bool last_match_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCMatchesMinimalResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopLeagueMatchesResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToClientTopLeagueMatchesResponse();
  virtual ~CMsgGCToClientTopLeagueMatchesResponse();

  CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from);

  inline CMsgGCToClientTopLeagueMatchesResponse& operator=(const CMsgGCToClientTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientTopLeagueMatchesResponse& default_instance();

  void Swap(CMsgGCToClientTopLeagueMatchesResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientTopLeagueMatchesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatchMinimal matches = 2;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 2;
  inline const ::CMsgDOTAMatchMinimal& matches(int index) const;
  inline ::CMsgDOTAMatchMinimal* mutable_matches(int index);
  inline ::CMsgDOTAMatchMinimal* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_matches();

  // @@protoc_insertion_point(class_scope:CMsgGCToClientTopLeagueMatchesResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal > matches_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientTopLeagueMatchesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopFriendMatchesResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToClientTopFriendMatchesResponse();
  virtual ~CMsgGCToClientTopFriendMatchesResponse();

  CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from);

  inline CMsgGCToClientTopFriendMatchesResponse& operator=(const CMsgGCToClientTopFriendMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientTopFriendMatchesResponse& default_instance();

  void Swap(CMsgGCToClientTopFriendMatchesResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientTopFriendMatchesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 1;
  inline const ::CMsgDOTAMatchMinimal& matches(int index) const;
  inline ::CMsgDOTAMatchMinimal* mutable_matches(int index);
  inline ::CMsgDOTAMatchMinimal* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_matches();

  // @@protoc_insertion_point(class_scope:CMsgGCToClientTopFriendMatchesResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal > matches_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientTopFriendMatchesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopMatches : public ::google::protobuf::Message {
 public:
  CMsgClientToGCFindTopMatches();
  virtual ~CMsgClientToGCFindTopMatches();

  CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from);

  inline CMsgClientToGCFindTopMatches& operator=(const CMsgClientToGCFindTopMatches& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCFindTopMatches& default_instance();

  void Swap(CMsgClientToGCFindTopMatches* other);

  // implements Message ----------------------------------------------

  CMsgClientToGCFindTopMatches* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientToGCFindTopMatches& from);
  void MergeFrom(const CMsgClientToGCFindTopMatches& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 start_game = 1;
  inline bool has_start_game() const;
  inline void clear_start_game();
  static const int kStartGameFieldNumber = 1;
  inline ::google::protobuf::uint32 start_game() const;
  inline void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 friend_id = 4;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 4;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // optional bool friend_list = 5;
  inline bool has_friend_list() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 5;
  inline bool friend_list() const;
  inline void set_friend_list(bool value);

  // optional bool league_list = 6;
  inline bool has_league_list() const;
  inline void clear_league_list();
  static const int kLeagueListFieldNumber = 6;
  inline bool league_list() const;
  inline void set_league_list(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFindTopMatches)
 private:
  inline void set_has_start_game();
  inline void clear_has_start_game();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_friend_list();
  inline void clear_has_friend_list();
  inline void set_has_league_list();
  inline void clear_has_league_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 friend_id_;
  bool friend_list_;
  bool league_list_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientToGCFindTopMatches* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopLeagueMatchesResponse : public ::google::protobuf::Message {
 public:
  CMsgGCToClientFindTopLeagueMatchesResponse();
  virtual ~CMsgGCToClientFindTopLeagueMatchesResponse();

  CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from);

  inline CMsgGCToClientFindTopLeagueMatchesResponse& operator=(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientFindTopLeagueMatchesResponse& default_instance();

  void Swap(CMsgGCToClientFindTopLeagueMatchesResponse* other);

  // implements Message ----------------------------------------------

  CMsgGCToClientFindTopLeagueMatchesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 start_game = 1;
  inline bool has_start_game() const;
  inline void clear_start_game();
  static const int kStartGameFieldNumber = 1;
  inline ::google::protobuf::uint32 start_game() const;
  inline void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // repeated uint32 match_ids = 4;
  inline int match_ids_size() const;
  inline void clear_match_ids();
  static const int kMatchIdsFieldNumber = 4;
  inline ::google::protobuf::uint32 match_ids(int index) const;
  inline void set_match_ids(int index, ::google::protobuf::uint32 value);
  inline void add_match_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      match_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_match_ids();

  // repeated .CMsgDOTAMatch matches = 5;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 5;
  inline const ::CMsgDOTAMatch& matches(int index) const;
  inline ::CMsgDOTAMatch* mutable_matches(int index);
  inline ::CMsgDOTAMatch* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >*
      mutable_matches();

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFindTopLeagueMatchesResponse)
 private:
  inline void set_has_start_game();
  inline void clear_has_start_game();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > match_ids_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch > matches_;
  ::google::protobuf::uint32 hero_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgGCToClientFindTopLeagueMatchesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGame : public ::google::protobuf::Message {
 public:
  CMsgSpectateFriendGame();
  virtual ~CMsgSpectateFriendGame();

  CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from);

  inline CMsgSpectateFriendGame& operator=(const CMsgSpectateFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectateFriendGame& default_instance();

  void Swap(CMsgSpectateFriendGame* other);

  // implements Message ----------------------------------------------

  CMsgSpectateFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectateFriendGame& from);
  void MergeFrom(const CMsgSpectateFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectateFriendGame)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectateFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGameResponse : public ::google::protobuf::Message {
 public:
  CMsgSpectateFriendGameResponse();
  virtual ~CMsgSpectateFriendGameResponse();

  CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from);

  inline CMsgSpectateFriendGameResponse& operator=(const CMsgSpectateFriendGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectateFriendGameResponse& default_instance();

  void Swap(CMsgSpectateFriendGameResponse* other);

  // implements Message ----------------------------------------------

  CMsgSpectateFriendGameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSpectateFriendGameResponse& from);
  void MergeFrom(const CMsgSpectateFriendGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steamid = 4;
  inline bool has_server_steamid() const;
  inline void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 4;
  inline ::google::protobuf::uint64 server_steamid() const;
  inline void set_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSpectateFriendGameResponse)
 private:
  inline void set_has_server_steamid();
  inline void clear_has_server_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steamid_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgSpectateFriendGameResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Player : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatchMinimal_Player();
  virtual ~CMsgDOTAMatchMinimal_Player();

  CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from);

  inline CMsgDOTAMatchMinimal_Player& operator=(const CMsgDOTAMatchMinimal_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchMinimal_Player& default_instance();

  void Swap(CMsgDOTAMatchMinimal_Player* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatchMinimal_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatchMinimal_Player& from);
  void MergeFrom(const CMsgDOTAMatchMinimal_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 kills = 3;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 3;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 4;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 5;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 5;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);

  // repeated uint32 items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline ::google::protobuf::uint32 items(int index) const;
  inline void set_items(int index, ::google::protobuf::uint32 value);
  inline void add_items(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // optional uint32 player_slot = 7;
  inline bool has_player_slot() const;
  inline void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 7;
  inline ::google::protobuf::uint32 player_slot() const;
  inline void set_player_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchMinimal.Player)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  inline void set_has_player_slot();
  inline void clear_has_player_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 player_slot_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatchMinimal_Player* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Tourney : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatchMinimal_Tourney();
  virtual ~CMsgDOTAMatchMinimal_Tourney();

  CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from);

  inline CMsgDOTAMatchMinimal_Tourney& operator=(const CMsgDOTAMatchMinimal_Tourney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchMinimal_Tourney& default_instance();

  void Swap(CMsgDOTAMatchMinimal_Tourney* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatchMinimal_Tourney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  void MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 league_id = 1;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  inline ::google::protobuf::uint32 league_id() const;
  inline void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 series_game = 9;
  inline bool has_series_game() const;
  inline void clear_series_game();
  static const int kSeriesGameFieldNumber = 9;
  inline ::google::protobuf::uint32 series_game() const;
  inline void set_series_game(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_tournament_id = 10;
  inline bool has_weekend_tourney_tournament_id() const;
  inline void clear_weekend_tourney_tournament_id();
  static const int kWeekendTourneyTournamentIdFieldNumber = 10;
  inline ::google::protobuf::uint32 weekend_tourney_tournament_id() const;
  inline void set_weekend_tourney_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  inline bool has_weekend_tourney_season_trophy_id() const;
  inline void clear_weekend_tourney_season_trophy_id();
  static const int kWeekendTourneySeasonTrophyIdFieldNumber = 11;
  inline ::google::protobuf::uint32 weekend_tourney_season_trophy_id() const;
  inline void set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division = 12;
  inline bool has_weekend_tourney_division() const;
  inline void clear_weekend_tourney_division();
  static const int kWeekendTourneyDivisionFieldNumber = 12;
  inline ::google::protobuf::uint32 weekend_tourney_division() const;
  inline void set_weekend_tourney_division(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 13;
  inline bool has_weekend_tourney_skill_level() const;
  inline void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  inline void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 radiant_team_id = 2;
  inline bool has_radiant_team_id() const;
  inline void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 radiant_team_id() const;
  inline void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional string radiant_team_name = 3;
  inline bool has_radiant_team_name() const;
  inline void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 3;
  inline const ::std::string& radiant_team_name() const;
  inline void set_radiant_team_name(const ::std::string& value);
  inline void set_radiant_team_name(const char* value);
  inline void set_radiant_team_name(const char* value, size_t size);
  inline ::std::string* mutable_radiant_team_name();
  inline ::std::string* release_radiant_team_name();
  inline void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional fixed64 radiant_team_logo = 4;
  inline bool has_radiant_team_logo() const;
  inline void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 4;
  inline ::google::protobuf::uint64 radiant_team_logo() const;
  inline void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint32 dire_team_id = 5;
  inline bool has_dire_team_id() const;
  inline void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 dire_team_id() const;
  inline void set_dire_team_id(::google::protobuf::uint32 value);

  // optional string dire_team_name = 6;
  inline bool has_dire_team_name() const;
  inline void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 6;
  inline const ::std::string& dire_team_name() const;
  inline void set_dire_team_name(const ::std::string& value);
  inline void set_dire_team_name(const char* value);
  inline void set_dire_team_name(const char* value, size_t size);
  inline ::std::string* mutable_dire_team_name();
  inline ::std::string* release_dire_team_name();
  inline void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional fixed64 dire_team_logo = 7;
  inline bool has_dire_team_logo() const;
  inline void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 7;
  inline ::google::protobuf::uint64 dire_team_logo() const;
  inline void set_dire_team_logo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchMinimal.Tourney)
 private:
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_series_game();
  inline void clear_has_series_game();
  inline void set_has_weekend_tourney_tournament_id();
  inline void clear_has_weekend_tourney_tournament_id();
  inline void set_has_weekend_tourney_season_trophy_id();
  inline void clear_has_weekend_tourney_season_trophy_id();
  inline void set_has_weekend_tourney_division();
  inline void clear_has_weekend_tourney_division();
  inline void set_has_weekend_tourney_skill_level();
  inline void clear_has_weekend_tourney_skill_level();
  inline void set_has_radiant_team_id();
  inline void clear_has_radiant_team_id();
  inline void set_has_radiant_team_name();
  inline void clear_has_radiant_team_name();
  inline void set_has_radiant_team_logo();
  inline void clear_has_radiant_team_logo();
  inline void set_has_dire_team_id();
  inline void clear_has_dire_team_id();
  inline void set_has_dire_team_name();
  inline void clear_has_dire_team_name();
  inline void set_has_dire_team_logo();
  inline void clear_has_dire_team_logo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 series_game_;
  ::google::protobuf::uint32 weekend_tourney_tournament_id_;
  ::google::protobuf::uint32 weekend_tourney_season_trophy_id_;
  ::google::protobuf::uint32 weekend_tourney_division_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::std::string* radiant_team_name_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::std::string* dire_team_name_;
  ::google::protobuf::uint64 dire_team_logo_;
  ::google::protobuf::uint32 dire_team_id_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatchMinimal_Tourney* default_instance_;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal : public ::google::protobuf::Message {
 public:
  CMsgDOTAMatchMinimal();
  virtual ~CMsgDOTAMatchMinimal();

  CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from);

  inline CMsgDOTAMatchMinimal& operator=(const CMsgDOTAMatchMinimal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchMinimal& default_instance();

  void Swap(CMsgDOTAMatchMinimal* other);

  // implements Message ----------------------------------------------

  CMsgDOTAMatchMinimal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgDOTAMatchMinimal& from);
  void MergeFrom(const CMsgDOTAMatchMinimal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatchMinimal_Player Player;
  typedef CMsgDOTAMatchMinimal_Tourney Tourney;

  // accessors -------------------------------------------------------

  // optional uint64 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint64 match_id() const;
  inline void set_match_id(::google::protobuf::uint64 value);

  // optional fixed32 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 4;
  inline ::DOTA_GameMode game_mode() const;
  inline void set_game_mode(::DOTA_GameMode value);

  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline const ::CMsgDOTAMatchMinimal_Player& players(int index) const;
  inline ::CMsgDOTAMatchMinimal_Player* mutable_players(int index);
  inline ::CMsgDOTAMatchMinimal_Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >*
      mutable_players();

  // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
  inline bool has_tourney() const;
  inline void clear_tourney();
  static const int kTourneyFieldNumber = 7;
  inline const ::CMsgDOTAMatchMinimal_Tourney& tourney() const;
  inline ::CMsgDOTAMatchMinimal_Tourney* mutable_tourney();
  inline ::CMsgDOTAMatchMinimal_Tourney* release_tourney();
  inline void set_allocated_tourney(::CMsgDOTAMatchMinimal_Tourney* tourney);

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  inline bool has_match_outcome() const;
  inline void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 8;
  inline ::EMatchOutcome match_outcome() const;
  inline void set_match_outcome(::EMatchOutcome value);

  // @@protoc_insertion_point(class_scope:CMsgDOTAMatchMinimal)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_tourney();
  inline void clear_has_tourney();
  inline void set_has_match_outcome();
  inline void clear_has_match_outcome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player > players_;
  int game_mode_;
  int match_outcome_;
  ::CMsgDOTAMatchMinimal_Tourney* tourney_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgDOTAMatchMinimal* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo_Highlight : public ::google::protobuf::Message {
 public:
  CDOTAReplayDownloadInfo_Highlight();
  virtual ~CDOTAReplayDownloadInfo_Highlight();

  CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from);

  inline CDOTAReplayDownloadInfo_Highlight& operator=(const CDOTAReplayDownloadInfo_Highlight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAReplayDownloadInfo_Highlight& default_instance();

  void Swap(CDOTAReplayDownloadInfo_Highlight* other);

  // implements Message ----------------------------------------------

  CDOTAReplayDownloadInfo_Highlight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  void MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:CDOTAReplayDownloadInfo.Highlight)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CDOTAReplayDownloadInfo_Highlight* default_instance_;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo : public ::google::protobuf::Message {
 public:
  CDOTAReplayDownloadInfo();
  virtual ~CDOTAReplayDownloadInfo();

  CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from);

  inline CDOTAReplayDownloadInfo& operator=(const CDOTAReplayDownloadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAReplayDownloadInfo& default_instance();

  void Swap(CDOTAReplayDownloadInfo* other);

  // implements Message ----------------------------------------------

  CDOTAReplayDownloadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTAReplayDownloadInfo& from);
  void MergeFrom(const CDOTAReplayDownloadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDOTAReplayDownloadInfo_Highlight Highlight;

  // accessors -------------------------------------------------------

  // optional .CMsgDOTAMatchMinimal match = 1;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::CMsgDOTAMatchMinimal& match() const;
  inline ::CMsgDOTAMatchMinimal* mutable_match();
  inline ::CMsgDOTAMatchMinimal* release_match();
  inline void set_allocated_match(::CMsgDOTAMatchMinimal* match);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional uint32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // repeated string tags = 5;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 5;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional bool exists_on_disk = 6;
  inline bool has_exists_on_disk() const;
  inline void clear_exists_on_disk();
  static const int kExistsOnDiskFieldNumber = 6;
  inline bool exists_on_disk() const;
  inline void set_exists_on_disk(bool value);

  // @@protoc_insertion_point(class_scope:CDOTAReplayDownloadInfo)
 private:
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_exists_on_disk();
  inline void clear_has_exists_on_disk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgDOTAMatchMinimal* match_;
  ::std::string* title_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::uint32 size_;
  bool exists_on_disk_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CDOTAReplayDownloadInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWatchGame : public ::google::protobuf::Message {
 public:
  CMsgWatchGame();
  virtual ~CMsgWatchGame();

  CMsgWatchGame(const CMsgWatchGame& from);

  inline CMsgWatchGame& operator=(const CMsgWatchGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWatchGame& default_instance();

  void Swap(CMsgWatchGame* other);

  // implements Message ----------------------------------------------

  CMsgWatchGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWatchGame& from);
  void MergeFrom(const CMsgWatchGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steamid = 1;
  inline bool has_server_steamid() const;
  inline void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 server_steamid() const;
  inline void set_server_steamid(::google::protobuf::uint64 value);

  // optional uint32 client_version = 2;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 client_version() const;
  inline void set_client_version(::google::protobuf::uint32 value);

  // optional fixed64 watch_server_steamid = 3;
  inline bool has_watch_server_steamid() const;
  inline void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 3;
  inline ::google::protobuf::uint64 watch_server_steamid() const;
  inline void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  inline bool has_lobby_id() const;
  inline void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  inline ::google::protobuf::uint64 lobby_id() const;
  inline void set_lobby_id(::google::protobuf::uint64 value);

  // repeated uint32 regions = 5;
  inline int regions_size() const;
  inline void clear_regions();
  static const int kRegionsFieldNumber = 5;
  inline ::google::protobuf::uint32 regions(int index) const;
  inline void set_regions(int index, ::google::protobuf::uint32 value);
  inline void add_regions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      regions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_regions();

  // @@protoc_insertion_point(class_scope:CMsgWatchGame)
 private:
  inline void set_has_server_steamid();
  inline void clear_has_server_steamid();
  inline void set_has_client_version();
  inline void clear_has_client_version();
  inline void set_has_watch_server_steamid();
  inline void clear_has_watch_server_steamid();
  inline void set_has_lobby_id();
  inline void clear_has_lobby_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > regions_;
  ::google::protobuf::uint32 client_version_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgWatchGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCancelWatchGame : public ::google::protobuf::Message {
 public:
  CMsgCancelWatchGame();
  virtual ~CMsgCancelWatchGame();

  CMsgCancelWatchGame(const CMsgCancelWatchGame& from);

  inline CMsgCancelWatchGame& operator=(const CMsgCancelWatchGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCancelWatchGame& default_instance();

  void Swap(CMsgCancelWatchGame* other);

  // implements Message ----------------------------------------------

  CMsgCancelWatchGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCancelWatchGame& from);
  void MergeFrom(const CMsgCancelWatchGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgCancelWatchGame)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgCancelWatchGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgWatchGameResponse : public ::google::protobuf::Message {
 public:
  CMsgWatchGameResponse();
  virtual ~CMsgWatchGameResponse();

  CMsgWatchGameResponse(const CMsgWatchGameResponse& from);

  inline CMsgWatchGameResponse& operator=(const CMsgWatchGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWatchGameResponse& default_instance();

  void Swap(CMsgWatchGameResponse* other);

  // implements Message ----------------------------------------------

  CMsgWatchGameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgWatchGameResponse& from);
  void MergeFrom(const CMsgWatchGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgWatchGameResponse_WatchGameResult WatchGameResult;
  static const WatchGameResult PENDING = CMsgWatchGameResponse_WatchGameResult_PENDING;
  static const WatchGameResult READY = CMsgWatchGameResponse_WatchGameResult_READY;
  static const WatchGameResult GAMESERVERNOTFOUND = CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND;
  static const WatchGameResult UNAVAILABLE = CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE;
  static const WatchGameResult CANCELLED = CMsgWatchGameResponse_WatchGameResult_CANCELLED;
  static const WatchGameResult INCOMPATIBLEVERSION = CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION;
  static const WatchGameResult MISSINGLEAGUESUBSCRIPTION = CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION;
  static const WatchGameResult LOBBYNOTFOUND = CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
  static inline bool WatchGameResult_IsValid(int value) {
    return CMsgWatchGameResponse_WatchGameResult_IsValid(value);
  }
  static const WatchGameResult WatchGameResult_MIN =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN;
  static const WatchGameResult WatchGameResult_MAX =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX;
  static const int WatchGameResult_ARRAYSIZE =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WatchGameResult_descriptor() {
    return CMsgWatchGameResponse_WatchGameResult_descriptor();
  }
  static inline const ::std::string& WatchGameResult_Name(WatchGameResult value) {
    return CMsgWatchGameResponse_WatchGameResult_Name(value);
  }
  static inline bool WatchGameResult_Parse(const ::std::string& name,
      WatchGameResult* value) {
    return CMsgWatchGameResponse_WatchGameResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  inline bool has_watch_game_result() const;
  inline void clear_watch_game_result();
  static const int kWatchGameResultFieldNumber = 1;
  inline ::CMsgWatchGameResponse_WatchGameResult watch_game_result() const;
  inline void set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value);

  // optional uint32 source_tv_public_addr = 2;
  inline bool has_source_tv_public_addr() const;
  inline void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 2;
  inline ::google::protobuf::uint32 source_tv_public_addr() const;
  inline void set_source_tv_public_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_private_addr = 3;
  inline bool has_source_tv_private_addr() const;
  inline void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 3;
  inline ::google::protobuf::uint32 source_tv_private_addr() const;
  inline void set_source_tv_private_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_port = 4;
  inline bool has_source_tv_port() const;
  inline void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 4;
  inline ::google::protobuf::uint32 source_tv_port() const;
  inline void set_source_tv_port(::google::protobuf::uint32 value);

  // optional fixed64 game_server_steamid = 5;
  inline bool has_game_server_steamid() const;
  inline void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  inline ::google::protobuf::uint64 game_server_steamid() const;
  inline void set_game_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 6;
  inline bool has_watch_server_steamid() const;
  inline void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 6;
  inline ::google::protobuf::uint64 watch_server_steamid() const;
  inline void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_tv_unique_secret_code = 7;
  inline bool has_watch_tv_unique_secret_code() const;
  inline void clear_watch_tv_unique_secret_code();
  static const int kWatchTvUniqueSecretCodeFieldNumber = 7;
  inline ::google::protobuf::uint64 watch_tv_unique_secret_code() const;
  inline void set_watch_tv_unique_secret_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgWatchGameResponse)
 private:
  inline void set_has_watch_game_result();
  inline void clear_has_watch_game_result();
  inline void set_has_source_tv_public_addr();
  inline void clear_has_source_tv_public_addr();
  inline void set_has_source_tv_private_addr();
  inline void clear_has_source_tv_private_addr();
  inline void set_has_source_tv_port();
  inline void clear_has_source_tv_port();
  inline void set_has_game_server_steamid();
  inline void clear_has_game_server_steamid();
  inline void set_has_watch_server_steamid();
  inline void clear_has_watch_server_steamid();
  inline void set_has_watch_tv_unique_secret_code();
  inline void clear_has_watch_tv_unique_secret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int watch_game_result_;
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint64 game_server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 watch_tv_unique_secret_code_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgWatchGameResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPartyLeaderWatchGamePrompt : public ::google::protobuf::Message {
 public:
  CMsgPartyLeaderWatchGamePrompt();
  virtual ~CMsgPartyLeaderWatchGamePrompt();

  CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from);

  inline CMsgPartyLeaderWatchGamePrompt& operator=(const CMsgPartyLeaderWatchGamePrompt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPartyLeaderWatchGamePrompt& default_instance();

  void Swap(CMsgPartyLeaderWatchGamePrompt* other);

  // implements Message ----------------------------------------------

  CMsgPartyLeaderWatchGamePrompt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  void MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 game_server_steamid = 5;
  inline bool has_game_server_steamid() const;
  inline void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  inline ::google::protobuf::uint64 game_server_steamid() const;
  inline void set_game_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgPartyLeaderWatchGamePrompt)
 private:
  inline void set_has_game_server_steamid();
  inline void clear_has_game_server_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 game_server_steamid_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CMsgPartyLeaderWatchGamePrompt* default_instance_;
};
// -------------------------------------------------------------------

class CDOTABroadcasterInfo : public ::google::protobuf::Message {
 public:
  CDOTABroadcasterInfo();
  virtual ~CDOTABroadcasterInfo();

  CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from);

  inline CDOTABroadcasterInfo& operator=(const CDOTABroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTABroadcasterInfo& default_instance();

  void Swap(CDOTABroadcasterInfo* other);

  // implements Message ----------------------------------------------

  CDOTABroadcasterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDOTABroadcasterInfo& from);
  void MergeFrom(const CDOTABroadcasterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // optional fixed64 server_steam_id = 2;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional bool live = 3;
  inline bool has_live() const;
  inline void clear_live();
  static const int kLiveFieldNumber = 3;
  inline bool live() const;
  inline void set_live(bool value);

  // optional string team_name_radiant = 4;
  inline bool has_team_name_radiant() const;
  inline void clear_team_name_radiant();
  static const int kTeamNameRadiantFieldNumber = 4;
  inline const ::std::string& team_name_radiant() const;
  inline void set_team_name_radiant(const ::std::string& value);
  inline void set_team_name_radiant(const char* value);
  inline void set_team_name_radiant(const char* value, size_t size);
  inline ::std::string* mutable_team_name_radiant();
  inline ::std::string* release_team_name_radiant();
  inline void set_allocated_team_name_radiant(::std::string* team_name_radiant);

  // optional string team_name_dire = 5;
  inline bool has_team_name_dire() const;
  inline void clear_team_name_dire();
  static const int kTeamNameDireFieldNumber = 5;
  inline const ::std::string& team_name_dire() const;
  inline void set_team_name_dire(const ::std::string& value);
  inline void set_team_name_dire(const char* value);
  inline void set_team_name_dire(const char* value, size_t size);
  inline ::std::string* mutable_team_name_dire();
  inline ::std::string* release_team_name_dire();
  inline void set_allocated_team_name_dire(::std::string* team_name_dire);

  // optional string stage_name = 6;
  inline bool has_stage_name() const;
  inline void clear_stage_name();
  static const int kStageNameFieldNumber = 6;
  inline const ::std::string& stage_name() const;
  inline void set_stage_name(const ::std::string& value);
  inline void set_stage_name(const char* value);
  inline void set_stage_name(const char* value, size_t size);
  inline ::std::string* mutable_stage_name();
  inline ::std::string* release_stage_name();
  inline void set_allocated_stage_name(::std::string* stage_name);

  // optional uint32 series_game = 7;
  inline bool has_series_game() const;
  inline void clear_series_game();
  static const int kSeriesGameFieldNumber = 7;
  inline ::google::protobuf::uint32 series_game() const;
  inline void set_series_game(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  inline bool has_series_type() const;
  inline void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 series_type() const;
  inline void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 upcoming_broadcast_timestamp = 9;
  inline bool has_upcoming_broadcast_timestamp() const;
  inline void clear_upcoming_broadcast_timestamp();
  static const int kUpcomingBroadcastTimestampFieldNumber = 9;
  inline ::google::protobuf::uint32 upcoming_broadcast_timestamp() const;
  inline void set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value);

  // optional bool allow_live_video = 10;
  inline bool has_allow_live_video() const;
  inline void clear_allow_live_video();
  static const int kAllowLiveVideoFieldNumber = 10;
  inline bool allow_live_video() const;
  inline void set_allow_live_video(bool value);

  // @@protoc_insertion_point(class_scope:CDOTABroadcasterInfo)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_live();
  inline void clear_has_live();
  inline void set_has_team_name_radiant();
  inline void clear_has_team_name_radiant();
  inline void set_has_team_name_dire();
  inline void clear_has_team_name_dire();
  inline void set_has_stage_name();
  inline void clear_has_stage_name();
  inline void set_has_series_game();
  inline void clear_has_series_game();
  inline void set_has_series_type();
  inline void clear_has_series_type();
  inline void set_has_upcoming_broadcast_timestamp();
  inline void clear_has_upcoming_broadcast_timestamp();
  inline void set_has_allow_live_video();
  inline void clear_has_allow_live_video();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steam_id_;
  ::std::string* team_name_radiant_;
  ::google::protobuf::uint32 account_id_;
  bool live_;
  bool allow_live_video_;
  ::std::string* team_name_dire_;
  ::std::string* stage_name_;
  ::google::protobuf::uint32 series_game_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 upcoming_broadcast_timestamp_;
  friend void  protobuf_AddDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_AssignDesc_dota_5fgcmessages_5fclient_5fwatch_2eproto();
  friend void protobuf_ShutdownFile_dota_5fgcmessages_5fclient_5fwatch_2eproto();

  void InitAsDefaultInstance();
  static CDOTABroadcasterInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CSourceTVGameSmall_Player

// optional uint32 account_id = 1;
inline bool CSourceTVGameSmall_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGameSmall_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSourceTVGameSmall_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSourceTVGameSmall_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.Player.account_id)
  return account_id_;
}
inline void CSourceTVGameSmall_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CSourceTVGameSmall_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGameSmall_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSourceTVGameSmall_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSourceTVGameSmall_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.Player.hero_id)
  return hero_id_;
}
inline void CSourceTVGameSmall_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.Player.hero_id)
}

// -------------------------------------------------------------------

// CSourceTVGameSmall

// optional uint32 activate_time = 1;
inline bool CSourceTVGameSmall::has_activate_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGameSmall::set_has_activate_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSourceTVGameSmall::clear_has_activate_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSourceTVGameSmall::clear_activate_time() {
  activate_time_ = 0u;
  clear_has_activate_time();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::activate_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.activate_time)
  return activate_time_;
}
inline void CSourceTVGameSmall::set_activate_time(::google::protobuf::uint32 value) {
  set_has_activate_time();
  activate_time_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.activate_time)
}

// optional uint32 deactivate_time = 2;
inline bool CSourceTVGameSmall::has_deactivate_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGameSmall::set_has_deactivate_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSourceTVGameSmall::clear_has_deactivate_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSourceTVGameSmall::clear_deactivate_time() {
  deactivate_time_ = 0u;
  clear_has_deactivate_time();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::deactivate_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.deactivate_time)
  return deactivate_time_;
}
inline void CSourceTVGameSmall::set_deactivate_time(::google::protobuf::uint32 value) {
  set_has_deactivate_time();
  deactivate_time_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.deactivate_time)
}

// optional uint64 server_steam_id = 3;
inline bool CSourceTVGameSmall::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSourceTVGameSmall::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSourceTVGameSmall::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSourceTVGameSmall::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.server_steam_id)
  return server_steam_id_;
}
inline void CSourceTVGameSmall::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.server_steam_id)
}

// optional uint64 lobby_id = 4;
inline bool CSourceTVGameSmall::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSourceTVGameSmall::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSourceTVGameSmall::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSourceTVGameSmall::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.lobby_id)
  return lobby_id_;
}
inline void CSourceTVGameSmall::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.lobby_id)
}

// optional uint32 league_id = 5;
inline bool CSourceTVGameSmall::has_league_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSourceTVGameSmall::set_has_league_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSourceTVGameSmall::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSourceTVGameSmall::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::league_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.league_id)
  return league_id_;
}
inline void CSourceTVGameSmall::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.league_id)
}

// optional uint32 lobby_type = 6;
inline bool CSourceTVGameSmall::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSourceTVGameSmall::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSourceTVGameSmall::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSourceTVGameSmall::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.lobby_type)
  return lobby_type_;
}
inline void CSourceTVGameSmall::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.lobby_type)
}

// optional int32 game_time = 7;
inline bool CSourceTVGameSmall::has_game_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSourceTVGameSmall::set_has_game_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSourceTVGameSmall::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSourceTVGameSmall::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CSourceTVGameSmall::game_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.game_time)
  return game_time_;
}
inline void CSourceTVGameSmall::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.game_time)
}

// optional uint32 delay = 8;
inline bool CSourceTVGameSmall::has_delay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSourceTVGameSmall::set_has_delay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSourceTVGameSmall::clear_has_delay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSourceTVGameSmall::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::delay() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.delay)
  return delay_;
}
inline void CSourceTVGameSmall::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.delay)
}

// optional uint32 spectators = 9;
inline bool CSourceTVGameSmall::has_spectators() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSourceTVGameSmall::set_has_spectators() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSourceTVGameSmall::clear_has_spectators() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSourceTVGameSmall::clear_spectators() {
  spectators_ = 0u;
  clear_has_spectators();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::spectators() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.spectators)
  return spectators_;
}
inline void CSourceTVGameSmall::set_spectators(::google::protobuf::uint32 value) {
  set_has_spectators();
  spectators_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.spectators)
}

// optional uint32 game_mode = 10;
inline bool CSourceTVGameSmall::has_game_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSourceTVGameSmall::set_has_game_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSourceTVGameSmall::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSourceTVGameSmall::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::game_mode() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.game_mode)
  return game_mode_;
}
inline void CSourceTVGameSmall::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.game_mode)
}

// optional uint32 average_mmr = 11;
inline bool CSourceTVGameSmall::has_average_mmr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSourceTVGameSmall::set_has_average_mmr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSourceTVGameSmall::clear_has_average_mmr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSourceTVGameSmall::clear_average_mmr() {
  average_mmr_ = 0u;
  clear_has_average_mmr();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::average_mmr() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.average_mmr)
  return average_mmr_;
}
inline void CSourceTVGameSmall::set_average_mmr(::google::protobuf::uint32 value) {
  set_has_average_mmr();
  average_mmr_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.average_mmr)
}

// optional string team_name_radiant = 15;
inline bool CSourceTVGameSmall::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_name_radiant() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSourceTVGameSmall::clear_has_team_name_radiant() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSourceTVGameSmall::clear_team_name_radiant() {
  if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_->clear();
  }
  clear_has_team_name_radiant();
}
inline const ::std::string& CSourceTVGameSmall::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_name_radiant)
  return *team_name_radiant_;
}
inline void CSourceTVGameSmall::set_team_name_radiant(const ::std::string& value) {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  team_name_radiant_->assign(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_name_radiant)
}
inline void CSourceTVGameSmall::set_team_name_radiant(const char* value) {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  team_name_radiant_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSourceTVGameSmall.team_name_radiant)
}
inline void CSourceTVGameSmall::set_team_name_radiant(const char* value, size_t size) {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  team_name_radiant_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSourceTVGameSmall.team_name_radiant)
}
inline ::std::string* CSourceTVGameSmall::mutable_team_name_radiant() {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_;
}
inline ::std::string* CSourceTVGameSmall::release_team_name_radiant() {
  clear_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_radiant_;
    team_name_radiant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSourceTVGameSmall::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_radiant_;
  }
  if (team_name_radiant) {
    set_has_team_name_radiant();
    team_name_radiant_ = team_name_radiant;
  } else {
    clear_has_team_name_radiant();
    team_name_radiant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSourceTVGameSmall.team_name_radiant)
}

// optional string team_name_dire = 16;
inline bool CSourceTVGameSmall::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_name_dire() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSourceTVGameSmall::clear_has_team_name_dire() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSourceTVGameSmall::clear_team_name_dire() {
  if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_->clear();
  }
  clear_has_team_name_dire();
}
inline const ::std::string& CSourceTVGameSmall::team_name_dire() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_name_dire)
  return *team_name_dire_;
}
inline void CSourceTVGameSmall::set_team_name_dire(const ::std::string& value) {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  team_name_dire_->assign(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_name_dire)
}
inline void CSourceTVGameSmall::set_team_name_dire(const char* value) {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  team_name_dire_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSourceTVGameSmall.team_name_dire)
}
inline void CSourceTVGameSmall::set_team_name_dire(const char* value, size_t size) {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  team_name_dire_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSourceTVGameSmall.team_name_dire)
}
inline ::std::string* CSourceTVGameSmall::mutable_team_name_dire() {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSourceTVGameSmall.team_name_dire)
  return team_name_dire_;
}
inline ::std::string* CSourceTVGameSmall::release_team_name_dire() {
  clear_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_dire_;
    team_name_dire_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSourceTVGameSmall::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_dire_;
  }
  if (team_name_dire) {
    set_has_team_name_dire();
    team_name_dire_ = team_name_dire;
  } else {
    clear_has_team_name_dire();
    team_name_dire_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSourceTVGameSmall.team_name_dire)
}

// optional fixed64 team_logo_radiant = 24;
inline bool CSourceTVGameSmall::has_team_logo_radiant() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_logo_radiant() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSourceTVGameSmall::clear_has_team_logo_radiant() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSourceTVGameSmall::clear_team_logo_radiant() {
  team_logo_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo_radiant();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::team_logo_radiant() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_logo_radiant)
  return team_logo_radiant_;
}
inline void CSourceTVGameSmall::set_team_logo_radiant(::google::protobuf::uint64 value) {
  set_has_team_logo_radiant();
  team_logo_radiant_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_logo_radiant)
}

// optional fixed64 team_logo_dire = 25;
inline bool CSourceTVGameSmall::has_team_logo_dire() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_logo_dire() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSourceTVGameSmall::clear_has_team_logo_dire() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSourceTVGameSmall::clear_team_logo_dire() {
  team_logo_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo_dire();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::team_logo_dire() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_logo_dire)
  return team_logo_dire_;
}
inline void CSourceTVGameSmall::set_team_logo_dire(::google::protobuf::uint64 value) {
  set_has_team_logo_dire();
  team_logo_dire_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_logo_dire)
}

// optional uint32 sort_score = 17;
inline bool CSourceTVGameSmall::has_sort_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSourceTVGameSmall::set_has_sort_score() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSourceTVGameSmall::clear_has_sort_score() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSourceTVGameSmall::clear_sort_score() {
  sort_score_ = 0u;
  clear_has_sort_score();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::sort_score() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.sort_score)
  return sort_score_;
}
inline void CSourceTVGameSmall::set_sort_score(::google::protobuf::uint32 value) {
  set_has_sort_score();
  sort_score_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.sort_score)
}

// optional float last_update_time = 18;
inline bool CSourceTVGameSmall::has_last_update_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSourceTVGameSmall::set_has_last_update_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSourceTVGameSmall::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSourceTVGameSmall::clear_last_update_time() {
  last_update_time_ = 0;
  clear_has_last_update_time();
}
inline float CSourceTVGameSmall::last_update_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.last_update_time)
  return last_update_time_;
}
inline void CSourceTVGameSmall::set_last_update_time(float value) {
  set_has_last_update_time();
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.last_update_time)
}

// optional int32 radiant_lead = 19;
inline bool CSourceTVGameSmall::has_radiant_lead() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSourceTVGameSmall::set_has_radiant_lead() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSourceTVGameSmall::clear_has_radiant_lead() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSourceTVGameSmall::clear_radiant_lead() {
  radiant_lead_ = 0;
  clear_has_radiant_lead();
}
inline ::google::protobuf::int32 CSourceTVGameSmall::radiant_lead() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.radiant_lead)
  return radiant_lead_;
}
inline void CSourceTVGameSmall::set_radiant_lead(::google::protobuf::int32 value) {
  set_has_radiant_lead();
  radiant_lead_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.radiant_lead)
}

// optional uint32 radiant_score = 20;
inline bool CSourceTVGameSmall::has_radiant_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSourceTVGameSmall::set_has_radiant_score() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSourceTVGameSmall::clear_has_radiant_score() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSourceTVGameSmall::clear_radiant_score() {
  radiant_score_ = 0u;
  clear_has_radiant_score();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::radiant_score() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.radiant_score)
  return radiant_score_;
}
inline void CSourceTVGameSmall::set_radiant_score(::google::protobuf::uint32 value) {
  set_has_radiant_score();
  radiant_score_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.radiant_score)
}

// optional uint32 dire_score = 21;
inline bool CSourceTVGameSmall::has_dire_score() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSourceTVGameSmall::set_has_dire_score() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSourceTVGameSmall::clear_has_dire_score() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSourceTVGameSmall::clear_dire_score() {
  dire_score_ = 0u;
  clear_has_dire_score();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::dire_score() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.dire_score)
  return dire_score_;
}
inline void CSourceTVGameSmall::set_dire_score(::google::protobuf::uint32 value) {
  set_has_dire_score();
  dire_score_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.dire_score)
}

// repeated .CSourceTVGameSmall.Player players = 22;
inline int CSourceTVGameSmall::players_size() const {
  return players_.size();
}
inline void CSourceTVGameSmall::clear_players() {
  players_.Clear();
}
inline const ::CSourceTVGameSmall_Player& CSourceTVGameSmall::players(int index) const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.players)
  return players_.Get(index);
}
inline ::CSourceTVGameSmall_Player* CSourceTVGameSmall::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CSourceTVGameSmall.players)
  return players_.Mutable(index);
}
inline ::CSourceTVGameSmall_Player* CSourceTVGameSmall::add_players() {
  // @@protoc_insertion_point(field_add:CSourceTVGameSmall.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall_Player >&
CSourceTVGameSmall::players() const {
  // @@protoc_insertion_point(field_list:CSourceTVGameSmall.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall_Player >*
CSourceTVGameSmall::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CSourceTVGameSmall.players)
  return &players_;
}

// optional fixed32 building_state = 23;
inline bool CSourceTVGameSmall::has_building_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSourceTVGameSmall::set_has_building_state() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSourceTVGameSmall::clear_has_building_state() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSourceTVGameSmall::clear_building_state() {
  building_state_ = 0u;
  clear_has_building_state();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::building_state() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.building_state)
  return building_state_;
}
inline void CSourceTVGameSmall::set_building_state(::google::protobuf::uint32 value) {
  set_has_building_state();
  building_state_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.building_state)
}

// optional uint32 weekend_tourney_tournament_id = 26;
inline bool CSourceTVGameSmall::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_tournament_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_tournament_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  clear_has_weekend_tourney_tournament_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_tournament_id();
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_division = 27;
inline bool CSourceTVGameSmall::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_division() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_division() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  clear_has_weekend_tourney_division();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_division)
  return weekend_tourney_division_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division();
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 28;
inline bool CSourceTVGameSmall::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_skill_level() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_skill_level() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 29;
inline bool CSourceTVGameSmall::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_bracket_round() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_bracket_round() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  clear_has_weekend_tourney_bracket_round();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_bracket_round();
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_bracket_round)
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopSourceTVGames

// optional string search_key = 1;
inline bool CMsgClientToGCFindTopSourceTVGames::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CMsgClientToGCFindTopSourceTVGames::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.search_key)
  return *search_key_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline ::std::string* CMsgClientToGCFindTopSourceTVGames::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_;
}
inline ::std::string* CMsgClientToGCFindTopSourceTVGames::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgClientToGCFindTopSourceTVGames::set_allocated_search_key(::std::string* search_key) {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (search_key) {
    set_has_search_key();
    search_key_ = search_key;
  } else {
    clear_has_search_key();
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCFindTopSourceTVGames.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopSourceTVGames::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.league_id)
  return league_id_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopSourceTVGames::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgClientToGCFindTopSourceTVGames::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_start_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::start_game() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.start_game)
  return start_game_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.start_game)
}

// optional uint32 game_list_index = 5;
inline bool CMsgClientToGCFindTopSourceTVGames::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_game_list_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_game_list_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_game_list_index() {
  game_list_index_ = 0u;
  clear_has_game_list_index();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::game_list_index() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.game_list_index)
  return game_list_index_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_game_list_index(::google::protobuf::uint32 value) {
  set_has_game_list_index();
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.game_list_index)
}

// repeated uint64 lobby_ids = 6;
inline int CMsgClientToGCFindTopSourceTVGames::lobby_ids_size() const {
  return lobby_ids_.size();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_lobby_ids() {
  lobby_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientToGCFindTopSourceTVGames::lobby_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_.Get(index);
}
inline void CMsgClientToGCFindTopSourceTVGames::set_lobby_ids(int index, ::google::protobuf::uint64 value) {
  lobby_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline void CMsgClientToGCFindTopSourceTVGames::add_lobby_ids(::google::protobuf::uint64 value) {
  lobby_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCFindTopSourceTVGames::lobby_ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCFindTopSourceTVGames::mutable_lobby_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return &lobby_ids_;
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopSourceTVGamesResponse

// optional string search_key = 1;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_search_key() {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_->clear();
  }
  clear_has_search_key();
}
inline const ::std::string& CMsgGCToClientFindTopSourceTVGamesResponse::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return *search_key_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const ::std::string& value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  search_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline ::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_search_key() {
  set_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_;
}
inline ::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::release_search_key() {
  clear_has_search_key();
  if (search_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_key_;
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_search_key(::std::string* search_key) {
  if (search_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_key_;
  }
  if (search_key) {
    set_has_search_key();
    search_key_ = search_key;
  } else {
    clear_has_search_key();
    search_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
  return league_id_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
  return hero_id_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_start_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
  return start_game_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
}

// optional uint32 num_games = 5;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_num_games() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_num_games() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_num_games() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_num_games() {
  num_games_ = 0u;
  clear_has_num_games();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::num_games() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
  return num_games_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_num_games(::google::protobuf::uint32 value) {
  set_has_num_games();
  num_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
}

// optional uint32 game_list_index = 6;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_game_list_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_game_list_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list_index() {
  game_list_index_ = 0u;
  clear_has_game_list_index();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::game_list_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
  return game_list_index_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_game_list_index(::google::protobuf::uint32 value) {
  set_has_game_list_index();
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
}

// repeated .CSourceTVGameSmall game_list = 7;
inline int CMsgGCToClientFindTopSourceTVGamesResponse::game_list_size() const {
  return game_list_.size();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list() {
  game_list_.Clear();
}
inline const ::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::game_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Get(index);
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Mutable(index);
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::add_game_list() {
  // @@protoc_insertion_point(field_add:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >&
CMsgGCToClientFindTopSourceTVGamesResponse::game_list() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >*
CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return &game_list_;
}

// optional bool specific_games = 8;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_specific_games() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_specific_games() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_specific_games() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_specific_games() {
  specific_games_ = false;
  clear_has_specific_games();
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::specific_games() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
  return specific_games_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_specific_games(bool value) {
  set_has_specific_games();
  specific_games_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopWeekendTourneyGames

// repeated .CSourceTVGameSmall live_games = 1;
inline int CMsgGCToClientTopWeekendTourneyGames::live_games_size() const {
  return live_games_.size();
}
inline void CMsgGCToClientTopWeekendTourneyGames::clear_live_games() {
  live_games_.Clear();
}
inline const ::CSourceTVGameSmall& CMsgGCToClientTopWeekendTourneyGames::live_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Get(index);
}
inline ::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::mutable_live_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Mutable(index);
}
inline ::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::add_live_games() {
  // @@protoc_insertion_point(field_add:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >&
CMsgGCToClientTopWeekendTourneyGames::live_games() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSourceTVGameSmall >*
CMsgGCToClientTopWeekendTourneyGames::mutable_live_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return &live_games_;
}

// -------------------------------------------------------------------

// CMsgClientToGCTopMatchesRequest

// optional uint32 hero_id = 1;
inline bool CMsgClientToGCTopMatchesRequest::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCTopMatchesRequest.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCTopMatchesRequest.hero_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgClientToGCTopMatchesRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCTopMatchesRequest.player_account_id)
  return player_account_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCTopMatchesRequest.player_account_id)
}

// optional uint32 team_id = 3;
inline bool CMsgClientToGCTopMatchesRequest::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCTopMatchesRequest.team_id)
  return team_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCTopMatchesRequest.team_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCTopLeagueMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCTopFriendMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalRequest

// repeated uint64 match_ids = 1;
inline int CMsgClientToGCMatchesMinimalRequest::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgClientToGCMatchesMinimalRequest::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientToGCMatchesMinimalRequest::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgClientToGCMatchesMinimalRequest::set_match_ids(int index, ::google::protobuf::uint64 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline void CMsgClientToGCMatchesMinimalRequest::add_match_ids(::google::protobuf::uint64 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCMatchesMinimalRequest::match_ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCMatchesMinimalRequest::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCMatchesMinimalRequest.match_ids)
  return &match_ids_;
}

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalResponse

// repeated .CMsgDOTAMatchMinimal matches = 1;
inline int CMsgClientToGCMatchesMinimalResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_matches() {
  matches_.Clear();
}
inline const ::CMsgDOTAMatchMinimal& CMsgClientToGCMatchesMinimalResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Get(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Mutable(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::add_matches() {
  // @@protoc_insertion_point(field_add:CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgClientToGCMatchesMinimalResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgClientToGCMatchesMinimalResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCMatchesMinimalResponse.matches)
  return &matches_;
}

// optional bool last_match = 2;
inline bool CMsgClientToGCMatchesMinimalResponse::has_last_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCMatchesMinimalResponse::set_has_last_match() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_has_last_match() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_last_match() {
  last_match_ = false;
  clear_has_last_match();
}
inline bool CMsgClientToGCMatchesMinimalResponse::last_match() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMatchesMinimalResponse.last_match)
  return last_match_;
}
inline void CMsgClientToGCMatchesMinimalResponse::set_last_match(bool value) {
  set_has_last_match();
  last_match_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCMatchesMinimalResponse.last_match)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopLeagueMatchesResponse

// repeated .CMsgDOTAMatchMinimal matches = 2;
inline int CMsgGCToClientTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgGCToClientTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::CMsgDOTAMatchMinimal& CMsgGCToClientTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return &matches_;
}

// -------------------------------------------------------------------

// CMsgGCToClientTopFriendMatchesResponse

// repeated .CMsgDOTAMatchMinimal matches = 1;
inline int CMsgGCToClientTopFriendMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgGCToClientTopFriendMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::CMsgDOTAMatchMinimal& CMsgGCToClientTopFriendMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopFriendMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopFriendMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientTopFriendMatchesResponse.matches)
  return &matches_;
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopMatches

// optional uint32 start_game = 1;
inline bool CMsgClientToGCFindTopMatches::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_start_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCFindTopMatches::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::start_game() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopMatches.start_game)
  return start_game_;
}
inline void CMsgClientToGCFindTopMatches::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopMatches.start_game)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopMatches::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCFindTopMatches::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopMatches.league_id)
  return league_id_;
}
inline void CMsgClientToGCFindTopMatches::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopMatches.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopMatches::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientToGCFindTopMatches::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopMatches.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCFindTopMatches::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopMatches.hero_id)
}

// optional uint32 friend_id = 4;
inline bool CMsgClientToGCFindTopMatches::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_friend_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientToGCFindTopMatches::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::friend_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopMatches.friend_id)
  return friend_id_;
}
inline void CMsgClientToGCFindTopMatches::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopMatches.friend_id)
}

// optional bool friend_list = 5;
inline bool CMsgClientToGCFindTopMatches::has_friend_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_friend_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_friend_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientToGCFindTopMatches::clear_friend_list() {
  friend_list_ = false;
  clear_has_friend_list();
}
inline bool CMsgClientToGCFindTopMatches::friend_list() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopMatches.friend_list)
  return friend_list_;
}
inline void CMsgClientToGCFindTopMatches::set_friend_list(bool value) {
  set_has_friend_list();
  friend_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopMatches.friend_list)
}

// optional bool league_list = 6;
inline bool CMsgClientToGCFindTopMatches::has_league_list() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_league_list() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_league_list() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientToGCFindTopMatches::clear_league_list() {
  league_list_ = false;
  clear_has_league_list();
}
inline bool CMsgClientToGCFindTopMatches::league_list() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopMatches.league_list)
  return league_list_;
}
inline void CMsgClientToGCFindTopMatches::set_league_list(bool value) {
  set_has_league_list();
  league_list_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopMatches.league_list)
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopLeagueMatchesResponse

// optional uint32 start_game = 1;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_start_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
  return start_game_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
  return league_id_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
  return hero_id_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
}

// repeated uint32 match_ids = 4;
inline int CMsgGCToClientFindTopLeagueMatchesResponse::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_match_ids(int index, ::google::protobuf::uint32 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::add_match_ids(::google::protobuf::uint32 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToClientFindTopLeagueMatchesResponse::match_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return &match_ids_;
}

// repeated .CMsgDOTAMatch matches = 5;
inline int CMsgGCToClientFindTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::CMsgDOTAMatch& CMsgGCToClientFindTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >&
CMsgGCToClientFindTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatch >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return &matches_;
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGame

// optional fixed64 steam_id = 1;
inline bool CMsgSpectateFriendGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectateFriendGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectateFriendGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGame.steam_id)
  return steam_id_;
}
inline void CMsgSpectateFriendGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGame.steam_id)
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGameResponse

// optional fixed64 server_steamid = 4;
inline bool CMsgSpectateFriendGameResponse::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGameResponse::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectateFriendGameResponse::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectateFriendGameResponse::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGameResponse::server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGameResponse.server_steamid)
  return server_steamid_;
}
inline void CMsgSpectateFriendGameResponse::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGameResponse.server_steamid)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatchMinimal_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.account_id)
  return account_id_;
}
inline void CMsgDOTAMatchMinimal_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTAMatchMinimal_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTAMatchMinimal_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.hero_id)
}

// optional uint32 kills = 3;
inline bool CMsgDOTAMatchMinimal_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.kills)
  return kills_;
}
inline void CMsgDOTAMatchMinimal_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgDOTAMatchMinimal_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.deaths)
  return deaths_;
}
inline void CMsgDOTAMatchMinimal_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgDOTAMatchMinimal_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.assists)
  return assists_;
}
inline void CMsgDOTAMatchMinimal_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.assists)
}

// repeated uint32 items = 6;
inline int CMsgDOTAMatchMinimal_Player::items_size() const {
  return items_.size();
}
inline void CMsgDOTAMatchMinimal_Player::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.items)
  return items_.Get(index);
}
inline void CMsgDOTAMatchMinimal_Player::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.items)
}
inline void CMsgDOTAMatchMinimal_Player::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchMinimal.Player.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchMinimal_Player::items() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchMinimal.Player.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchMinimal_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchMinimal.Player.items)
  return &items_;
}

// optional uint32 player_slot = 7;
inline bool CMsgDOTAMatchMinimal_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTAMatchMinimal_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Player.player_slot)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Tourney

// optional uint32 league_id = 1;
inline bool CMsgDOTAMatchMinimal_Tourney::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.league_id)
  return league_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.league_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_series_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.series_type)
  return series_type_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.series_type)
}

// optional uint32 series_game = 9;
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_series_game() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_game() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.series_game)
  return series_game_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.series_game)
}

// optional uint32 weekend_tourney_tournament_id = 10;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_tournament_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_tournament_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  clear_has_weekend_tourney_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_tournament_id();
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_season_trophy_id = 11;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_season_trophy_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_season_trophy_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_season_trophy_id() {
  weekend_tourney_season_trophy_id_ = 0u;
  clear_has_weekend_tourney_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
  return weekend_tourney_season_trophy_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_season_trophy_id();
  weekend_tourney_season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
}

// optional uint32 weekend_tourney_division = 12;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_division() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_division() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  clear_has_weekend_tourney_division();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
  return weekend_tourney_division_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division();
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 13;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_skill_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_skill_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
}

// optional uint32 radiant_team_id = 2;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
}

// optional string radiant_team_name = 3;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_name() {
  if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_->clear();
  }
  clear_has_radiant_team_name();
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return *radiant_team_name_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  radiant_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value) {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  radiant_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  radiant_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiant_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_;
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_name() {
  clear_has_radiant_team_name();
  if (radiant_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radiant_team_name_;
    radiant_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiant_team_name_;
  }
  if (radiant_team_name) {
    set_has_radiant_team_name();
    radiant_team_name_ = radiant_team_name;
  } else {
    clear_has_radiant_team_name();
    radiant_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}

// optional fixed64 radiant_team_logo = 4;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
}

// optional uint32 dire_team_id = 5;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::dire_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_id)
  return dire_team_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_id)
}

// optional string dire_team_name = 6;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_name() {
  if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_->clear();
  }
  clear_has_dire_team_name();
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return *dire_team_name_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  dire_team_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value) {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  dire_team_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  dire_team_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_name() {
  set_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dire_team_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_;
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_name() {
  clear_has_dire_team_name();
  if (dire_team_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dire_team_name_;
    dire_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dire_team_name_;
  }
  if (dire_team_name) {
    set_has_dire_team_name();
    dire_team_name_ = dire_team_name;
  } else {
    clear_has_dire_team_name();
    dire_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}

// optional fixed64 dire_team_logo = 7;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal

// optional uint64 match_id = 1;
inline bool CMsgDOTAMatchMinimal::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchMinimal::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchMinimal::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.match_id)
  return match_id_;
}
inline void CMsgDOTAMatchMinimal::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.match_id)
}

// optional fixed32 start_time = 2;
inline bool CMsgDOTAMatchMinimal::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchMinimal::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchMinimal::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.start_time)
  return start_time_;
}
inline void CMsgDOTAMatchMinimal::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.start_time)
}

// optional uint32 duration = 3;
inline bool CMsgDOTAMatchMinimal::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatchMinimal::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatchMinimal::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.duration)
  return duration_;
}
inline void CMsgDOTAMatchMinimal::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.duration)
}

// optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatchMinimal::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatchMinimal::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatchMinimal::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::DOTA_GameMode CMsgDOTAMatchMinimal::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.game_mode)
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline void CMsgDOTAMatchMinimal::set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.game_mode)
}

// repeated .CMsgDOTAMatchMinimal.Player players = 6;
inline int CMsgDOTAMatchMinimal::players_size() const {
  return players_.size();
}
inline void CMsgDOTAMatchMinimal::clear_players() {
  players_.Clear();
}
inline const ::CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.players)
  return players_.Get(index);
}
inline ::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.players)
  return players_.Mutable(index);
}
inline ::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAMatchMinimal.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >&
CMsgDOTAMatchMinimal::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAMatchMinimal.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgDOTAMatchMinimal_Player >*
CMsgDOTAMatchMinimal::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAMatchMinimal.players)
  return &players_;
}

// optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
inline bool CMsgDOTAMatchMinimal::has_tourney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_tourney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatchMinimal::clear_has_tourney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatchMinimal::clear_tourney() {
  if (tourney_ != NULL) tourney_->::CMsgDOTAMatchMinimal_Tourney::Clear();
  clear_has_tourney();
}
inline const ::CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal::tourney() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.tourney)
  return tourney_ != NULL ? *tourney_ : *default_instance_->tourney_;
}
inline ::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::mutable_tourney() {
  set_has_tourney();
  if (tourney_ == NULL) tourney_ = new ::CMsgDOTAMatchMinimal_Tourney;
  // @@protoc_insertion_point(field_mutable:CMsgDOTAMatchMinimal.tourney)
  return tourney_;
}
inline ::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::release_tourney() {
  clear_has_tourney();
  ::CMsgDOTAMatchMinimal_Tourney* temp = tourney_;
  tourney_ = NULL;
  return temp;
}
inline void CMsgDOTAMatchMinimal::set_allocated_tourney(::CMsgDOTAMatchMinimal_Tourney* tourney) {
  delete tourney_;
  tourney_ = tourney;
  if (tourney) {
    set_has_tourney();
  } else {
    clear_has_tourney();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAMatchMinimal.tourney)
}

// optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatchMinimal::has_match_outcome() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_match_outcome() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatchMinimal::clear_has_match_outcome() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatchMinimal::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
inline ::EMatchOutcome CMsgDOTAMatchMinimal::match_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAMatchMinimal.match_outcome)
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
inline void CMsgDOTAMatchMinimal::set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:CMsgDOTAMatchMinimal.match_outcome)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo_Highlight

// optional uint32 timestamp = 1;
inline bool CDOTAReplayDownloadInfo_Highlight::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CDOTAReplayDownloadInfo_Highlight::timestamp() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.Highlight.timestamp)
  return timestamp_;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.Highlight.timestamp)
}

// optional string description = 2;
inline bool CDOTAReplayDownloadInfo_Highlight::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CDOTAReplayDownloadInfo_Highlight::description() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.Highlight.description)
  return *description_;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.Highlight.description)
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAReplayDownloadInfo.Highlight.description)
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAReplayDownloadInfo.Highlight.description)
}
inline ::std::string* CDOTAReplayDownloadInfo_Highlight::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.Highlight.description)
  return description_;
}
inline ::std::string* CDOTAReplayDownloadInfo_Highlight::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTAReplayDownloadInfo_Highlight::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.Highlight.description)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo

// optional .CMsgDOTAMatchMinimal match = 1;
inline bool CDOTAReplayDownloadInfo::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAReplayDownloadInfo::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAReplayDownloadInfo::clear_match() {
  if (match_ != NULL) match_->::CMsgDOTAMatchMinimal::Clear();
  clear_has_match();
}
inline const ::CMsgDOTAMatchMinimal& CDOTAReplayDownloadInfo::match() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.match)
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::CMsgDOTAMatchMinimal;
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.match)
  return match_;
}
inline ::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::release_match() {
  clear_has_match();
  ::CMsgDOTAMatchMinimal* temp = match_;
  match_ = NULL;
  return temp;
}
inline void CDOTAReplayDownloadInfo::set_allocated_match(::CMsgDOTAMatchMinimal* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.match)
}

// optional string title = 2;
inline bool CDOTAReplayDownloadInfo::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAReplayDownloadInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAReplayDownloadInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CDOTAReplayDownloadInfo::title() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.title)
  return *title_;
}
inline void CDOTAReplayDownloadInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.title)
}
inline void CDOTAReplayDownloadInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAReplayDownloadInfo.title)
}
inline void CDOTAReplayDownloadInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAReplayDownloadInfo.title)
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.title)
  return title_;
}
inline ::std::string* CDOTAReplayDownloadInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTAReplayDownloadInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.title)
}

// optional string description = 3;
inline bool CDOTAReplayDownloadInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAReplayDownloadInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAReplayDownloadInfo::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& CDOTAReplayDownloadInfo::description() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.description)
  return *description_;
}
inline void CDOTAReplayDownloadInfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.description)
}
inline void CDOTAReplayDownloadInfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAReplayDownloadInfo.description)
}
inline void CDOTAReplayDownloadInfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAReplayDownloadInfo.description)
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.description)
  return description_;
}
inline ::std::string* CDOTAReplayDownloadInfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTAReplayDownloadInfo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.description)
}

// optional uint32 size = 4;
inline bool CDOTAReplayDownloadInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAReplayDownloadInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAReplayDownloadInfo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 CDOTAReplayDownloadInfo::size() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.size)
  return size_;
}
inline void CDOTAReplayDownloadInfo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.size)
}

// repeated string tags = 5;
inline int CDOTAReplayDownloadInfo::tags_size() const {
  return tags_.size();
}
inline void CDOTAReplayDownloadInfo::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CDOTAReplayDownloadInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.tags)
  return tags_.Get(index);
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.tags)
  return tags_.Mutable(index);
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAReplayDownloadInfo.tags)
}
inline ::std::string* CDOTAReplayDownloadInfo::add_tags() {
  return tags_.Add();
}
inline void CDOTAReplayDownloadInfo::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CDOTAReplayDownloadInfo.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDOTAReplayDownloadInfo::tags() const {
  // @@protoc_insertion_point(field_list:CDOTAReplayDownloadInfo.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CDOTAReplayDownloadInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAReplayDownloadInfo.tags)
  return &tags_;
}

// optional bool exists_on_disk = 6;
inline bool CDOTAReplayDownloadInfo::has_exists_on_disk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_exists_on_disk() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTAReplayDownloadInfo::clear_has_exists_on_disk() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTAReplayDownloadInfo::clear_exists_on_disk() {
  exists_on_disk_ = false;
  clear_has_exists_on_disk();
}
inline bool CDOTAReplayDownloadInfo::exists_on_disk() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.exists_on_disk)
  return exists_on_disk_;
}
inline void CDOTAReplayDownloadInfo::set_exists_on_disk(bool value) {
  set_has_exists_on_disk();
  exists_on_disk_ = value;
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.exists_on_disk)
}

// -------------------------------------------------------------------

// CMsgWatchGame

// optional fixed64 server_steamid = 1;
inline bool CMsgWatchGame::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGame::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWatchGame::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWatchGame::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.server_steamid)
  return server_steamid_;
}
inline void CMsgWatchGame::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.server_steamid)
}

// optional uint32 client_version = 2;
inline bool CMsgWatchGame::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGame::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWatchGame::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWatchGame::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgWatchGame::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.client_version)
  return client_version_;
}
inline void CMsgWatchGame::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.client_version)
}

// optional fixed64 watch_server_steamid = 3;
inline bool CMsgWatchGame::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGame::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWatchGame::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWatchGame::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGame::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGame::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.watch_server_steamid)
}

// optional uint64 lobby_id = 4;
inline bool CMsgWatchGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWatchGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWatchGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgWatchGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.lobby_id)
  return lobby_id_;
}
inline void CMsgWatchGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGame.lobby_id)
}

// repeated uint32 regions = 5;
inline int CMsgWatchGame::regions_size() const {
  return regions_.size();
}
inline void CMsgWatchGame::clear_regions() {
  regions_.Clear();
}
inline ::google::protobuf::uint32 CMsgWatchGame::regions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.regions)
  return regions_.Get(index);
}
inline void CMsgWatchGame::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgWatchGame.regions)
}
inline void CMsgWatchGame::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgWatchGame.regions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgWatchGame::regions() const {
  // @@protoc_insertion_point(field_list:CMsgWatchGame.regions)
  return regions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgWatchGame::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgWatchGame.regions)
  return &regions_;
}

// -------------------------------------------------------------------

// CMsgCancelWatchGame

// -------------------------------------------------------------------

// CMsgWatchGameResponse

// optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
inline bool CMsgWatchGameResponse::has_watch_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWatchGameResponse::clear_has_watch_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWatchGameResponse::clear_watch_game_result() {
  watch_game_result_ = 0;
  clear_has_watch_game_result();
}
inline ::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::watch_game_result() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_game_result)
  return static_cast< ::CMsgWatchGameResponse_WatchGameResult >(watch_game_result_);
}
inline void CMsgWatchGameResponse::set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value) {
  assert(::CMsgWatchGameResponse_WatchGameResult_IsValid(value));
  set_has_watch_game_result();
  watch_game_result_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_game_result)
}

// optional uint32 source_tv_public_addr = 2;
inline bool CMsgWatchGameResponse::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWatchGameResponse::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_public_addr)
  return source_tv_public_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 3;
inline bool CMsgWatchGameResponse::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWatchGameResponse::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_private_addr)
  return source_tv_private_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_private_addr)
}

// optional uint32 source_tv_port = 4;
inline bool CMsgWatchGameResponse::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWatchGameResponse::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_port)
  return source_tv_port_;
}
inline void CMsgWatchGameResponse::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_port)
}

// optional fixed64 game_server_steamid = 5;
inline bool CMsgWatchGameResponse::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWatchGameResponse::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgWatchGameResponse::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgWatchGameResponse::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgWatchGameResponse::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.game_server_steamid)
}

// optional fixed64 watch_server_steamid = 6;
inline bool CMsgWatchGameResponse::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgWatchGameResponse::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgWatchGameResponse::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGameResponse::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_server_steamid)
}

// optional fixed64 watch_tv_unique_secret_code = 7;
inline bool CMsgWatchGameResponse::has_watch_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgWatchGameResponse::clear_has_watch_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgWatchGameResponse::clear_watch_tv_unique_secret_code() {
  watch_tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_tv_unique_secret_code();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_tv_unique_secret_code)
  return watch_tv_unique_secret_code_;
}
inline void CMsgWatchGameResponse::set_watch_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_watch_tv_unique_secret_code();
  watch_tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_tv_unique_secret_code)
}

// -------------------------------------------------------------------

// CMsgPartyLeaderWatchGamePrompt

// optional fixed64 game_server_steamid = 5;
inline bool CMsgPartyLeaderWatchGamePrompt::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPartyLeaderWatchGamePrompt::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPartyLeaderWatchGamePrompt::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPartyLeaderWatchGamePrompt::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
inline ::google::protobuf::uint64 CMsgPartyLeaderWatchGamePrompt::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgPartyLeaderWatchGamePrompt::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
}

// -------------------------------------------------------------------

// CDOTABroadcasterInfo

// optional uint32 account_id = 1;
inline bool CDOTABroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTABroadcasterInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTABroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.account_id)
  return account_id_;
}
inline void CDOTABroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.account_id)
}

// optional fixed64 server_steam_id = 2;
inline bool CDOTABroadcasterInfo::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTABroadcasterInfo::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTABroadcasterInfo::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CDOTABroadcasterInfo::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.server_steam_id)
  return server_steam_id_;
}
inline void CDOTABroadcasterInfo::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.server_steam_id)
}

// optional bool live = 3;
inline bool CDOTABroadcasterInfo::has_live() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_live() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTABroadcasterInfo::clear_has_live() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTABroadcasterInfo::clear_live() {
  live_ = false;
  clear_has_live();
}
inline bool CDOTABroadcasterInfo::live() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.live)
  return live_;
}
inline void CDOTABroadcasterInfo::set_live(bool value) {
  set_has_live();
  live_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.live)
}

// optional string team_name_radiant = 4;
inline bool CDOTABroadcasterInfo::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_team_name_radiant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTABroadcasterInfo::clear_has_team_name_radiant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTABroadcasterInfo::clear_team_name_radiant() {
  if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_->clear();
  }
  clear_has_team_name_radiant();
}
inline const ::std::string& CDOTABroadcasterInfo::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.team_name_radiant)
  return *team_name_radiant_;
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const ::std::string& value) {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  team_name_radiant_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.team_name_radiant)
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const char* value) {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  team_name_radiant_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTABroadcasterInfo.team_name_radiant)
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const char* value, size_t size) {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  team_name_radiant_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcasterInfo.team_name_radiant)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_team_name_radiant() {
  set_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_radiant_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_;
}
inline ::std::string* CDOTABroadcasterInfo::release_team_name_radiant() {
  clear_has_team_name_radiant();
  if (team_name_radiant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_radiant_;
    team_name_radiant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_radiant_;
  }
  if (team_name_radiant) {
    set_has_team_name_radiant();
    team_name_radiant_ = team_name_radiant;
  } else {
    clear_has_team_name_radiant();
    team_name_radiant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcasterInfo.team_name_radiant)
}

// optional string team_name_dire = 5;
inline bool CDOTABroadcasterInfo::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_team_name_dire() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTABroadcasterInfo::clear_has_team_name_dire() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTABroadcasterInfo::clear_team_name_dire() {
  if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_->clear();
  }
  clear_has_team_name_dire();
}
inline const ::std::string& CDOTABroadcasterInfo::team_name_dire() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.team_name_dire)
  return *team_name_dire_;
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const ::std::string& value) {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  team_name_dire_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.team_name_dire)
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const char* value) {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  team_name_dire_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTABroadcasterInfo.team_name_dire)
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const char* value, size_t size) {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  team_name_dire_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcasterInfo.team_name_dire)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_team_name_dire() {
  set_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    team_name_dire_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_;
}
inline ::std::string* CDOTABroadcasterInfo::release_team_name_dire() {
  clear_has_team_name_dire();
  if (team_name_dire_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = team_name_dire_;
    team_name_dire_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete team_name_dire_;
  }
  if (team_name_dire) {
    set_has_team_name_dire();
    team_name_dire_ = team_name_dire;
  } else {
    clear_has_team_name_dire();
    team_name_dire_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcasterInfo.team_name_dire)
}

// optional string stage_name = 6;
inline bool CDOTABroadcasterInfo::has_stage_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_stage_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTABroadcasterInfo::clear_has_stage_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTABroadcasterInfo::clear_stage_name() {
  if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_->clear();
  }
  clear_has_stage_name();
}
inline const ::std::string& CDOTABroadcasterInfo::stage_name() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.stage_name)
  return *stage_name_;
}
inline void CDOTABroadcasterInfo::set_stage_name(const ::std::string& value) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.stage_name)
}
inline void CDOTABroadcasterInfo::set_stage_name(const char* value) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTABroadcasterInfo.stage_name)
}
inline void CDOTABroadcasterInfo::set_stage_name(const char* value, size_t size) {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  stage_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcasterInfo.stage_name)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_stage_name() {
  set_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CDOTABroadcasterInfo.stage_name)
  return stage_name_;
}
inline ::std::string* CDOTABroadcasterInfo::release_stage_name() {
  clear_has_stage_name();
  if (stage_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stage_name_;
    stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDOTABroadcasterInfo::set_allocated_stage_name(::std::string* stage_name) {
  if (stage_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stage_name_;
  }
  if (stage_name) {
    set_has_stage_name();
    stage_name_ = stage_name;
  } else {
    clear_has_stage_name();
    stage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcasterInfo.stage_name)
}

// optional uint32 series_game = 7;
inline bool CDOTABroadcasterInfo::has_series_game() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_series_game() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTABroadcasterInfo::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTABroadcasterInfo::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::series_game() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.series_game)
  return series_game_;
}
inline void CDOTABroadcasterInfo::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.series_game)
}

// optional uint32 series_type = 8;
inline bool CDOTABroadcasterInfo::has_series_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_series_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTABroadcasterInfo::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTABroadcasterInfo::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::series_type() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.series_type)
  return series_type_;
}
inline void CDOTABroadcasterInfo::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.series_type)
}

// optional uint32 upcoming_broadcast_timestamp = 9;
inline bool CDOTABroadcasterInfo::has_upcoming_broadcast_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_upcoming_broadcast_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTABroadcasterInfo::clear_has_upcoming_broadcast_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTABroadcasterInfo::clear_upcoming_broadcast_timestamp() {
  upcoming_broadcast_timestamp_ = 0u;
  clear_has_upcoming_broadcast_timestamp();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::upcoming_broadcast_timestamp() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
  return upcoming_broadcast_timestamp_;
}
inline void CDOTABroadcasterInfo::set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value) {
  set_has_upcoming_broadcast_timestamp();
  upcoming_broadcast_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
}

// optional bool allow_live_video = 10;
inline bool CDOTABroadcasterInfo::has_allow_live_video() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_allow_live_video() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTABroadcasterInfo::clear_has_allow_live_video() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTABroadcasterInfo::clear_allow_live_video() {
  allow_live_video_ = false;
  clear_has_allow_live_video();
}
inline bool CDOTABroadcasterInfo::allow_live_video() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.allow_live_video)
  return allow_live_video_;
}
inline void CDOTABroadcasterInfo::set_allow_live_video(bool value) {
  set_has_allow_live_video();
  allow_live_video_ = value;
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.allow_live_video)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CMsgWatchGameResponse_WatchGameResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgWatchGameResponse_WatchGameResult>() {
  return ::CMsgWatchGameResponse_WatchGameResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED
